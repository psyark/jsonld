package jsonld

// Code generated by jsonld.codegen; DO NOT EDIT.

func NewThing(name string) interface{} {
	switch name {
	case "ThreeDModel":
		return &ThreeDModel{}
	case "AMRadioChannel":
		return &AMRadioChannel{}
	case "APIReference":
		return &APIReference{}
	case "AboutPage":
		return &AboutPage{}
	case "AcceptAction":
		return &AcceptAction{}
	case "Accommodation":
		return &Accommodation{}
	case "AccountingService":
		return &AccountingService{}
	case "AchieveAction":
		return &AchieveAction{}
	case "Action":
		return &Action{}
	case "ActionAccessSpecification":
		return &ActionAccessSpecification{}
	case "ActionStatusType":
		return &ActionStatusType{}
	case "ActivateAction":
		return &ActivateAction{}
	case "AddAction":
		return &AddAction{}
	case "AdministrativeArea":
		return &AdministrativeArea{}
	case "AdultEntertainment":
		return &AdultEntertainment{}
	case "AdultOrientedEnumeration":
		return &AdultOrientedEnumeration{}
	case "AdvertiserContentArticle":
		return &AdvertiserContentArticle{}
	case "AggregateOffer":
		return &AggregateOffer{}
	case "AggregateRating":
		return &AggregateRating{}
	case "AgreeAction":
		return &AgreeAction{}
	case "Airline":
		return &Airline{}
	case "Airport":
		return &Airport{}
	case "AlignmentObject":
		return &AlignmentObject{}
	case "AllocateAction":
		return &AllocateAction{}
	case "AmpStory":
		return &AmpStory{}
	case "AmusementPark":
		return &AmusementPark{}
	case "AnalysisNewsArticle":
		return &AnalysisNewsArticle{}
	case "AnatomicalStructure":
		return &AnatomicalStructure{}
	case "AnatomicalSystem":
		return &AnatomicalSystem{}
	case "AnimalShelter":
		return &AnimalShelter{}
	case "Answer":
		return &Answer{}
	case "Apartment":
		return &Apartment{}
	case "ApartmentComplex":
		return &ApartmentComplex{}
	case "AppendAction":
		return &AppendAction{}
	case "ApplyAction":
		return &ApplyAction{}
	case "ApprovedIndication":
		return &ApprovedIndication{}
	case "Aquarium":
		return &Aquarium{}
	case "ArchiveComponent":
		return &ArchiveComponent{}
	case "ArchiveOrganization":
		return &ArchiveOrganization{}
	case "ArriveAction":
		return &ArriveAction{}
	case "ArtGallery":
		return &ArtGallery{}
	case "Artery":
		return &Artery{}
	case "Article":
		return &Article{}
	case "AskAction":
		return &AskAction{}
	case "AskPublicNewsArticle":
		return &AskPublicNewsArticle{}
	case "AssessAction":
		return &AssessAction{}
	case "AssignAction":
		return &AssignAction{}
	case "Atlas":
		return &Atlas{}
	case "Attorney":
		return &Attorney{}
	case "Audience":
		return &Audience{}
	case "AudioObject":
		return &AudioObject{}
	case "AudioObjectSnapshot":
		return &AudioObjectSnapshot{}
	case "Audiobook":
		return &Audiobook{}
	case "AuthorizeAction":
		return &AuthorizeAction{}
	case "AutoBodyShop":
		return &AutoBodyShop{}
	case "AutoDealer":
		return &AutoDealer{}
	case "AutoPartsStore":
		return &AutoPartsStore{}
	case "AutoRental":
		return &AutoRental{}
	case "AutoRepair":
		return &AutoRepair{}
	case "AutoWash":
		return &AutoWash{}
	case "AutomatedTeller":
		return &AutomatedTeller{}
	case "AutomotiveBusiness":
		return &AutomotiveBusiness{}
	case "BackgroundNewsArticle":
		return &BackgroundNewsArticle{}
	case "Bakery":
		return &Bakery{}
	case "BankAccount":
		return &BankAccount{}
	case "BankOrCreditUnion":
		return &BankOrCreditUnion{}
	case "BarOrPub":
		return &BarOrPub{}
	case "Barcode":
		return &Barcode{}
	case "Beach":
		return &Beach{}
	case "BeautySalon":
		return &BeautySalon{}
	case "BedAndBreakfast":
		return &BedAndBreakfast{}
	case "BedDetails":
		return &BedDetails{}
	case "BedType":
		return &BedType{}
	case "BefriendAction":
		return &BefriendAction{}
	case "BikeStore":
		return &BikeStore{}
	case "BioChemEntity":
		return &BioChemEntity{}
	case "Blog":
		return &Blog{}
	case "BlogPosting":
		return &BlogPosting{}
	case "BloodTest":
		return &BloodTest{}
	case "BoardingPolicyType":
		return &BoardingPolicyType{}
	case "BoatReservation":
		return &BoatReservation{}
	case "BoatTerminal":
		return &BoatTerminal{}
	case "BoatTrip":
		return &BoatTrip{}
	case "BodyMeasurementTypeEnumeration":
		return &BodyMeasurementTypeEnumeration{}
	case "BodyOfWater":
		return &BodyOfWater{}
	case "Bone":
		return &Bone{}
	case "Book":
		return &Book{}
	case "BookFormatType":
		return &BookFormatType{}
	case "BookSeries":
		return &BookSeries{}
	case "BookStore":
		return &BookStore{}
	case "BookmarkAction":
		return &BookmarkAction{}
	case "BorrowAction":
		return &BorrowAction{}
	case "BowlingAlley":
		return &BowlingAlley{}
	case "BrainStructure":
		return &BrainStructure{}
	case "Brand":
		return &Brand{}
	case "BreadcrumbList":
		return &BreadcrumbList{}
	case "Brewery":
		return &Brewery{}
	case "Bridge":
		return &Bridge{}
	case "BroadcastChannel":
		return &BroadcastChannel{}
	case "BroadcastEvent":
		return &BroadcastEvent{}
	case "BroadcastFrequencySpecification":
		return &BroadcastFrequencySpecification{}
	case "BroadcastService":
		return &BroadcastService{}
	case "BrokerageAccount":
		return &BrokerageAccount{}
	case "BuddhistTemple":
		return &BuddhistTemple{}
	case "BusOrCoach":
		return &BusOrCoach{}
	case "BusReservation":
		return &BusReservation{}
	case "BusStation":
		return &BusStation{}
	case "BusStop":
		return &BusStop{}
	case "BusTrip":
		return &BusTrip{}
	case "BusinessAudience":
		return &BusinessAudience{}
	case "BusinessEntityType":
		return &BusinessEntityType{}
	case "BusinessEvent":
		return &BusinessEvent{}
	case "BusinessFunction":
		return &BusinessFunction{}
	case "BuyAction":
		return &BuyAction{}
	case "CDCPMDRecord":
		return &CDCPMDRecord{}
	case "CableOrSatelliteService":
		return &CableOrSatelliteService{}
	case "CafeOrCoffeeShop":
		return &CafeOrCoffeeShop{}
	case "Campground":
		return &Campground{}
	case "CampingPitch":
		return &CampingPitch{}
	case "Canal":
		return &Canal{}
	case "CancelAction":
		return &CancelAction{}
	case "Car":
		return &Car{}
	case "CarUsageType":
		return &CarUsageType{}
	case "Casino":
		return &Casino{}
	case "CategoryCode":
		return &CategoryCode{}
	case "CategoryCodeSet":
		return &CategoryCodeSet{}
	case "CatholicChurch":
		return &CatholicChurch{}
	case "Cemetery":
		return &Cemetery{}
	case "Chapter":
		return &Chapter{}
	case "CheckAction":
		return &CheckAction{}
	case "CheckInAction":
		return &CheckInAction{}
	case "CheckOutAction":
		return &CheckOutAction{}
	case "CheckoutPage":
		return &CheckoutPage{}
	case "ChemicalSubstance":
		return &ChemicalSubstance{}
	case "ChildCare":
		return &ChildCare{}
	case "ChildrensEvent":
		return &ChildrensEvent{}
	case "ChooseAction":
		return &ChooseAction{}
	case "Church":
		return &Church{}
	case "City":
		return &City{}
	case "CityHall":
		return &CityHall{}
	case "CivicStructure":
		return &CivicStructure{}
	case "Claim":
		return &Claim{}
	case "ClaimReview":
		return &ClaimReview{}
	case "Class":
		return &Class{}
	case "Clip":
		return &Clip{}
	case "ClothingStore":
		return &ClothingStore{}
	case "Code":
		return &Code{}
	case "Collection":
		return &Collection{}
	case "CollectionPage":
		return &CollectionPage{}
	case "CollegeOrUniversity":
		return &CollegeOrUniversity{}
	case "ComedyClub":
		return &ComedyClub{}
	case "ComedyEvent":
		return &ComedyEvent{}
	case "ComicCoverArt":
		return &ComicCoverArt{}
	case "ComicIssue":
		return &ComicIssue{}
	case "ComicSeries":
		return &ComicSeries{}
	case "ComicStory":
		return &ComicStory{}
	case "Comment":
		return &Comment{}
	case "CommentAction":
		return &CommentAction{}
	case "CommunicateAction":
		return &CommunicateAction{}
	case "CompleteDataFeed":
		return &CompleteDataFeed{}
	case "CompoundPriceSpecification":
		return &CompoundPriceSpecification{}
	case "ComputerLanguage":
		return &ComputerLanguage{}
	case "ComputerStore":
		return &ComputerStore{}
	case "ConfirmAction":
		return &ConfirmAction{}
	case "Consortium":
		return &Consortium{}
	case "ConsumeAction":
		return &ConsumeAction{}
	case "ContactPage":
		return &ContactPage{}
	case "ContactPoint":
		return &ContactPoint{}
	case "ContactPointOption":
		return &ContactPointOption{}
	case "Continent":
		return &Continent{}
	case "ControlAction":
		return &ControlAction{}
	case "ConvenienceStore":
		return &ConvenienceStore{}
	case "Conversation":
		return &Conversation{}
	case "CookAction":
		return &CookAction{}
	case "Corporation":
		return &Corporation{}
	case "CorrectionComment":
		return &CorrectionComment{}
	case "Country":
		return &Country{}
	case "Course":
		return &Course{}
	case "CourseInstance":
		return &CourseInstance{}
	case "Courthouse":
		return &Courthouse{}
	case "CoverArt":
		return &CoverArt{}
	case "CovidTestingFacility":
		return &CovidTestingFacility{}
	case "CreateAction":
		return &CreateAction{}
	case "CreativeWork":
		return &CreativeWork{}
	case "CreativeWorkSeason":
		return &CreativeWorkSeason{}
	case "CreativeWorkSeries":
		return &CreativeWorkSeries{}
	case "CreditCard":
		return &CreditCard{}
	case "Crematorium":
		return &Crematorium{}
	case "CriticReview":
		return &CriticReview{}
	case "CurrencyConversionService":
		return &CurrencyConversionService{}
	case "DDxElement":
		return &DDxElement{}
	case "DanceEvent":
		return &DanceEvent{}
	case "DanceGroup":
		return &DanceGroup{}
	case "DataCatalog":
		return &DataCatalog{}
	case "DataDownload":
		return &DataDownload{}
	case "DataFeed":
		return &DataFeed{}
	case "DataFeedItem":
		return &DataFeedItem{}
	case "Dataset":
		return &Dataset{}
	case "DatedMoneySpecification":
		return &DatedMoneySpecification{}
	case "DayOfWeek":
		return &DayOfWeek{}
	case "DaySpa":
		return &DaySpa{}
	case "DeactivateAction":
		return &DeactivateAction{}
	case "DefenceEstablishment":
		return &DefenceEstablishment{}
	case "DefinedRegion":
		return &DefinedRegion{}
	case "DefinedTerm":
		return &DefinedTerm{}
	case "DefinedTermSet":
		return &DefinedTermSet{}
	case "DeleteAction":
		return &DeleteAction{}
	case "DeliveryChargeSpecification":
		return &DeliveryChargeSpecification{}
	case "DeliveryEvent":
		return &DeliveryEvent{}
	case "DeliveryMethod":
		return &DeliveryMethod{}
	case "DeliveryTimeSettings":
		return &DeliveryTimeSettings{}
	case "Demand":
		return &Demand{}
	case "Dentist":
		return &Dentist{}
	case "DepartAction":
		return &DepartAction{}
	case "DepartmentStore":
		return &DepartmentStore{}
	case "DepositAccount":
		return &DepositAccount{}
	case "DiagnosticLab":
		return &DiagnosticLab{}
	case "DiagnosticProcedure":
		return &DiagnosticProcedure{}
	case "Diet":
		return &Diet{}
	case "DietarySupplement":
		return &DietarySupplement{}
	case "DigitalDocument":
		return &DigitalDocument{}
	case "DigitalDocumentPermission":
		return &DigitalDocumentPermission{}
	case "DigitalDocumentPermissionType":
		return &DigitalDocumentPermissionType{}
	case "DigitalPlatformEnumeration":
		return &DigitalPlatformEnumeration{}
	case "DisagreeAction":
		return &DisagreeAction{}
	case "DiscoverAction":
		return &DiscoverAction{}
	case "DiscussionForumPosting":
		return &DiscussionForumPosting{}
	case "DislikeAction":
		return &DislikeAction{}
	case "Distance":
		return &Distance{}
	case "Distillery":
		return &Distillery{}
	case "DonateAction":
		return &DonateAction{}
	case "DoseSchedule":
		return &DoseSchedule{}
	case "DownloadAction":
		return &DownloadAction{}
	case "DrawAction":
		return &DrawAction{}
	case "Drawing":
		return &Drawing{}
	case "DrinkAction":
		return &DrinkAction{}
	case "DriveWheelConfigurationValue":
		return &DriveWheelConfigurationValue{}
	case "Drug":
		return &Drug{}
	case "DrugClass":
		return &DrugClass{}
	case "DrugCost":
		return &DrugCost{}
	case "DrugCostCategory":
		return &DrugCostCategory{}
	case "DrugLegalStatus":
		return &DrugLegalStatus{}
	case "DrugPregnancyCategory":
		return &DrugPregnancyCategory{}
	case "DrugPrescriptionStatus":
		return &DrugPrescriptionStatus{}
	case "DrugStrength":
		return &DrugStrength{}
	case "DryCleaningOrLaundry":
		return &DryCleaningOrLaundry{}
	case "Duration":
		return &Duration{}
	case "EUEnergyEfficiencyEnumeration":
		return &EUEnergyEfficiencyEnumeration{}
	case "EatAction":
		return &EatAction{}
	case "EducationEvent":
		return &EducationEvent{}
	case "EducationalAudience":
		return &EducationalAudience{}
	case "EducationalOccupationalCredential":
		return &EducationalOccupationalCredential{}
	case "EducationalOccupationalProgram":
		return &EducationalOccupationalProgram{}
	case "EducationalOrganization":
		return &EducationalOrganization{}
	case "Electrician":
		return &Electrician{}
	case "ElectronicsStore":
		return &ElectronicsStore{}
	case "ElementarySchool":
		return &ElementarySchool{}
	case "EmailMessage":
		return &EmailMessage{}
	case "Embassy":
		return &Embassy{}
	case "EmergencyService":
		return &EmergencyService{}
	case "EmployeeRole":
		return &EmployeeRole{}
	case "EmployerAggregateRating":
		return &EmployerAggregateRating{}
	case "EmployerReview":
		return &EmployerReview{}
	case "EmploymentAgency":
		return &EmploymentAgency{}
	case "EndorseAction":
		return &EndorseAction{}
	case "EndorsementRating":
		return &EndorsementRating{}
	case "Energy":
		return &Energy{}
	case "EnergyConsumptionDetails":
		return &EnergyConsumptionDetails{}
	case "EnergyEfficiencyEnumeration":
		return &EnergyEfficiencyEnumeration{}
	case "EnergyStarEnergyEfficiencyEnumeration":
		return &EnergyStarEnergyEfficiencyEnumeration{}
	case "EngineSpecification":
		return &EngineSpecification{}
	case "EntertainmentBusiness":
		return &EntertainmentBusiness{}
	case "EntryPoint":
		return &EntryPoint{}
	case "Enumeration":
		return &Enumeration{}
	case "Episode":
		return &Episode{}
	case "Event":
		return &Event{}
	case "EventAttendanceModeEnumeration":
		return &EventAttendanceModeEnumeration{}
	case "EventReservation":
		return &EventReservation{}
	case "EventSeries":
		return &EventSeries{}
	case "EventStatusType":
		return &EventStatusType{}
	case "EventVenue":
		return &EventVenue{}
	case "ExchangeRateSpecification":
		return &ExchangeRateSpecification{}
	case "ExerciseAction":
		return &ExerciseAction{}
	case "ExerciseGym":
		return &ExerciseGym{}
	case "ExercisePlan":
		return &ExercisePlan{}
	case "ExhibitionEvent":
		return &ExhibitionEvent{}
	case "FAQPage":
		return &FAQPage{}
	case "FMRadioChannel":
		return &FMRadioChannel{}
	case "FastFoodRestaurant":
		return &FastFoodRestaurant{}
	case "Festival":
		return &Festival{}
	case "FilmAction":
		return &FilmAction{}
	case "FinancialProduct":
		return &FinancialProduct{}
	case "FinancialService":
		return &FinancialService{}
	case "FindAction":
		return &FindAction{}
	case "FireStation":
		return &FireStation{}
	case "Flight":
		return &Flight{}
	case "FlightReservation":
		return &FlightReservation{}
	case "FloorPlan":
		return &FloorPlan{}
	case "Florist":
		return &Florist{}
	case "FollowAction":
		return &FollowAction{}
	case "FoodEstablishment":
		return &FoodEstablishment{}
	case "FoodEstablishmentReservation":
		return &FoodEstablishmentReservation{}
	case "FoodEvent":
		return &FoodEvent{}
	case "FoodService":
		return &FoodService{}
	case "FundingAgency":
		return &FundingAgency{}
	case "FundingScheme":
		return &FundingScheme{}
	case "FurnitureStore":
		return &FurnitureStore{}
	case "Game":
		return &Game{}
	case "GameAvailabilityEnumeration":
		return &GameAvailabilityEnumeration{}
	case "GamePlayMode":
		return &GamePlayMode{}
	case "GameServer":
		return &GameServer{}
	case "GameServerStatus":
		return &GameServerStatus{}
	case "GardenStore":
		return &GardenStore{}
	case "GasStation":
		return &GasStation{}
	case "GatedResidenceCommunity":
		return &GatedResidenceCommunity{}
	case "GenderType":
		return &GenderType{}
	case "Gene":
		return &Gene{}
	case "GeneralContractor":
		return &GeneralContractor{}
	case "GeoCircle":
		return &GeoCircle{}
	case "GeoCoordinates":
		return &GeoCoordinates{}
	case "GeoShape":
		return &GeoShape{}
	case "GeospatialGeometry":
		return &GeospatialGeometry{}
	case "GiveAction":
		return &GiveAction{}
	case "GolfCourse":
		return &GolfCourse{}
	case "GovernmentBenefitsType":
		return &GovernmentBenefitsType{}
	case "GovernmentBuilding":
		return &GovernmentBuilding{}
	case "GovernmentOffice":
		return &GovernmentOffice{}
	case "GovernmentOrganization":
		return &GovernmentOrganization{}
	case "GovernmentPermit":
		return &GovernmentPermit{}
	case "GovernmentService":
		return &GovernmentService{}
	case "Grant":
		return &Grant{}
	case "GroceryStore":
		return &GroceryStore{}
	case "Guide":
		return &Guide{}
	case "HVACBusiness":
		return &HVACBusiness{}
	case "Hackathon":
		return &Hackathon{}
	case "HairSalon":
		return &HairSalon{}
	case "HardwareStore":
		return &HardwareStore{}
	case "HealthAndBeautyBusiness":
		return &HealthAndBeautyBusiness{}
	case "HealthAspectEnumeration":
		return &HealthAspectEnumeration{}
	case "HealthClub":
		return &HealthClub{}
	case "HealthInsurancePlan":
		return &HealthInsurancePlan{}
	case "HealthPlanCostSharingSpecification":
		return &HealthPlanCostSharingSpecification{}
	case "HealthPlanFormulary":
		return &HealthPlanFormulary{}
	case "HealthPlanNetwork":
		return &HealthPlanNetwork{}
	case "HealthTopicContent":
		return &HealthTopicContent{}
	case "HighSchool":
		return &HighSchool{}
	case "HinduTemple":
		return &HinduTemple{}
	case "HobbyShop":
		return &HobbyShop{}
	case "HomeAndConstructionBusiness":
		return &HomeAndConstructionBusiness{}
	case "HomeGoodsStore":
		return &HomeGoodsStore{}
	case "Hospital":
		return &Hospital{}
	case "Hostel":
		return &Hostel{}
	case "Hotel":
		return &Hotel{}
	case "HotelRoom":
		return &HotelRoom{}
	case "House":
		return &House{}
	case "HousePainter":
		return &HousePainter{}
	case "HowTo":
		return &HowTo{}
	case "HowToDirection":
		return &HowToDirection{}
	case "HowToItem":
		return &HowToItem{}
	case "HowToSection":
		return &HowToSection{}
	case "HowToStep":
		return &HowToStep{}
	case "HowToSupply":
		return &HowToSupply{}
	case "HowToTip":
		return &HowToTip{}
	case "HowToTool":
		return &HowToTool{}
	case "HyperToc":
		return &HyperToc{}
	case "HyperTocEntry":
		return &HyperTocEntry{}
	case "IceCreamShop":
		return &IceCreamShop{}
	case "IgnoreAction":
		return &IgnoreAction{}
	case "ImageGallery":
		return &ImageGallery{}
	case "ImageObject":
		return &ImageObject{}
	case "ImageObjectSnapshot":
		return &ImageObjectSnapshot{}
	case "ImagingTest":
		return &ImagingTest{}
	case "IndividualProduct":
		return &IndividualProduct{}
	case "InfectiousAgentClass":
		return &InfectiousAgentClass{}
	case "InfectiousDisease":
		return &InfectiousDisease{}
	case "InformAction":
		return &InformAction{}
	case "InsertAction":
		return &InsertAction{}
	case "InstallAction":
		return &InstallAction{}
	case "InsuranceAgency":
		return &InsuranceAgency{}
	case "Intangible":
		return &Intangible{}
	case "InteractAction":
		return &InteractAction{}
	case "InteractionCounter":
		return &InteractionCounter{}
	case "InternetCafe":
		return &InternetCafe{}
	case "InvestmentFund":
		return &InvestmentFund{}
	case "InvestmentOrDeposit":
		return &InvestmentOrDeposit{}
	case "InviteAction":
		return &InviteAction{}
	case "Invoice":
		return &Invoice{}
	case "ItemAvailability":
		return &ItemAvailability{}
	case "ItemList":
		return &ItemList{}
	case "ItemListOrderType":
		return &ItemListOrderType{}
	case "ItemPage":
		return &ItemPage{}
	case "JewelryStore":
		return &JewelryStore{}
	case "JobPosting":
		return &JobPosting{}
	case "JoinAction":
		return &JoinAction{}
	case "Joint":
		return &Joint{}
	case "LakeBodyOfWater":
		return &LakeBodyOfWater{}
	case "Landform":
		return &Landform{}
	case "LandmarksOrHistoricalBuildings":
		return &LandmarksOrHistoricalBuildings{}
	case "Language":
		return &Language{}
	case "LearningResource":
		return &LearningResource{}
	case "LeaveAction":
		return &LeaveAction{}
	case "LegalForceStatus":
		return &LegalForceStatus{}
	case "LegalService":
		return &LegalService{}
	case "LegalValueLevel":
		return &LegalValueLevel{}
	case "Legislation":
		return &Legislation{}
	case "LegislationObject":
		return &LegislationObject{}
	case "LegislativeBuilding":
		return &LegislativeBuilding{}
	case "LendAction":
		return &LendAction{}
	case "Library":
		return &Library{}
	case "LibrarySystem":
		return &LibrarySystem{}
	case "LifestyleModification":
		return &LifestyleModification{}
	case "Ligament":
		return &Ligament{}
	case "LikeAction":
		return &LikeAction{}
	case "LinkRole":
		return &LinkRole{}
	case "LiquorStore":
		return &LiquorStore{}
	case "ListItem":
		return &ListItem{}
	case "ListenAction":
		return &ListenAction{}
	case "LiteraryEvent":
		return &LiteraryEvent{}
	case "LiveBlogPosting":
		return &LiveBlogPosting{}
	case "LoanOrCredit":
		return &LoanOrCredit{}
	case "LocalBusiness":
		return &LocalBusiness{}
	case "LocationFeatureSpecification":
		return &LocationFeatureSpecification{}
	case "Locksmith":
		return &Locksmith{}
	case "LodgingBusiness":
		return &LodgingBusiness{}
	case "LodgingReservation":
		return &LodgingReservation{}
	case "LoseAction":
		return &LoseAction{}
	case "LymphaticVessel":
		return &LymphaticVessel{}
	case "Manuscript":
		return &Manuscript{}
	case "Map":
		return &Map{}
	case "MapCategoryType":
		return &MapCategoryType{}
	case "MarryAction":
		return &MarryAction{}
	case "Mass":
		return &Mass{}
	case "MathSolver":
		return &MathSolver{}
	case "MaximumDoseSchedule":
		return &MaximumDoseSchedule{}
	case "MeasurementTypeEnumeration":
		return &MeasurementTypeEnumeration{}
	case "MediaGallery":
		return &MediaGallery{}
	case "MediaManipulationRatingEnumeration":
		return &MediaManipulationRatingEnumeration{}
	case "MediaObject":
		return &MediaObject{}
	case "MediaReview":
		return &MediaReview{}
	case "MediaReviewItem":
		return &MediaReviewItem{}
	case "MediaSubscription":
		return &MediaSubscription{}
	case "MedicalAudience":
		return &MedicalAudience{}
	case "MedicalAudienceType":
		return &MedicalAudienceType{}
	case "MedicalBusiness":
		return &MedicalBusiness{}
	case "MedicalCause":
		return &MedicalCause{}
	case "MedicalClinic":
		return &MedicalClinic{}
	case "MedicalCode":
		return &MedicalCode{}
	case "MedicalCondition":
		return &MedicalCondition{}
	case "MedicalConditionStage":
		return &MedicalConditionStage{}
	case "MedicalContraindication":
		return &MedicalContraindication{}
	case "MedicalDevice":
		return &MedicalDevice{}
	case "MedicalDevicePurpose":
		return &MedicalDevicePurpose{}
	case "MedicalEntity":
		return &MedicalEntity{}
	case "MedicalEnumeration":
		return &MedicalEnumeration{}
	case "MedicalEvidenceLevel":
		return &MedicalEvidenceLevel{}
	case "MedicalGuideline":
		return &MedicalGuideline{}
	case "MedicalGuidelineContraindication":
		return &MedicalGuidelineContraindication{}
	case "MedicalGuidelineRecommendation":
		return &MedicalGuidelineRecommendation{}
	case "MedicalImagingTechnique":
		return &MedicalImagingTechnique{}
	case "MedicalIndication":
		return &MedicalIndication{}
	case "MedicalIntangible":
		return &MedicalIntangible{}
	case "MedicalObservationalStudy":
		return &MedicalObservationalStudy{}
	case "MedicalObservationalStudyDesign":
		return &MedicalObservationalStudyDesign{}
	case "MedicalOrganization":
		return &MedicalOrganization{}
	case "MedicalProcedure":
		return &MedicalProcedure{}
	case "MedicalProcedureType":
		return &MedicalProcedureType{}
	case "MedicalRiskCalculator":
		return &MedicalRiskCalculator{}
	case "MedicalRiskEstimator":
		return &MedicalRiskEstimator{}
	case "MedicalRiskFactor":
		return &MedicalRiskFactor{}
	case "MedicalRiskScore":
		return &MedicalRiskScore{}
	case "MedicalScholarlyArticle":
		return &MedicalScholarlyArticle{}
	case "MedicalSign":
		return &MedicalSign{}
	case "MedicalSignOrSymptom":
		return &MedicalSignOrSymptom{}
	case "MedicalSpecialty":
		return &MedicalSpecialty{}
	case "MedicalStudy":
		return &MedicalStudy{}
	case "MedicalStudyStatus":
		return &MedicalStudyStatus{}
	case "MedicalSymptom":
		return &MedicalSymptom{}
	case "MedicalTest":
		return &MedicalTest{}
	case "MedicalTestPanel":
		return &MedicalTestPanel{}
	case "MedicalTherapy":
		return &MedicalTherapy{}
	case "MedicalTrial":
		return &MedicalTrial{}
	case "MedicalTrialDesign":
		return &MedicalTrialDesign{}
	case "MedicalWebPage":
		return &MedicalWebPage{}
	case "MedicineSystem":
		return &MedicineSystem{}
	case "MeetingRoom":
		return &MeetingRoom{}
	case "MensClothingStore":
		return &MensClothingStore{}
	case "Menu":
		return &Menu{}
	case "MenuItem":
		return &MenuItem{}
	case "MenuSection":
		return &MenuSection{}
	case "MerchantReturnEnumeration":
		return &MerchantReturnEnumeration{}
	case "MerchantReturnPolicy":
		return &MerchantReturnPolicy{}
	case "MerchantReturnPolicySeasonalOverride":
		return &MerchantReturnPolicySeasonalOverride{}
	case "Message":
		return &Message{}
	case "MiddleSchool":
		return &MiddleSchool{}
	case "MobileApplication":
		return &MobileApplication{}
	case "MobilePhoneStore":
		return &MobilePhoneStore{}
	case "MolecularEntity":
		return &MolecularEntity{}
	case "MonetaryAmount":
		return &MonetaryAmount{}
	case "MonetaryAmountDistribution":
		return &MonetaryAmountDistribution{}
	case "MonetaryGrant":
		return &MonetaryGrant{}
	case "MoneyTransfer":
		return &MoneyTransfer{}
	case "MortgageLoan":
		return &MortgageLoan{}
	case "Mosque":
		return &Mosque{}
	case "Motel":
		return &Motel{}
	case "Motorcycle":
		return &Motorcycle{}
	case "MotorcycleDealer":
		return &MotorcycleDealer{}
	case "MotorcycleRepair":
		return &MotorcycleRepair{}
	case "MotorizedBicycle":
		return &MotorizedBicycle{}
	case "Mountain":
		return &Mountain{}
	case "MoveAction":
		return &MoveAction{}
	case "Movie":
		return &Movie{}
	case "MovieClip":
		return &MovieClip{}
	case "MovieRentalStore":
		return &MovieRentalStore{}
	case "MovieSeries":
		return &MovieSeries{}
	case "MovieTheater":
		return &MovieTheater{}
	case "MovingCompany":
		return &MovingCompany{}
	case "Muscle":
		return &Muscle{}
	case "Museum":
		return &Museum{}
	case "MusicAlbum":
		return &MusicAlbum{}
	case "MusicAlbumProductionType":
		return &MusicAlbumProductionType{}
	case "MusicAlbumReleaseType":
		return &MusicAlbumReleaseType{}
	case "MusicComposition":
		return &MusicComposition{}
	case "MusicEvent":
		return &MusicEvent{}
	case "MusicGroup":
		return &MusicGroup{}
	case "MusicPlaylist":
		return &MusicPlaylist{}
	case "MusicRecording":
		return &MusicRecording{}
	case "MusicRelease":
		return &MusicRelease{}
	case "MusicReleaseFormatType":
		return &MusicReleaseFormatType{}
	case "MusicStore":
		return &MusicStore{}
	case "MusicVenue":
		return &MusicVenue{}
	case "MusicVideoObject":
		return &MusicVideoObject{}
	case "NGO":
		return &NGO{}
	case "NLNonprofitType":
		return &NLNonprofitType{}
	case "NailSalon":
		return &NailSalon{}
	case "Nerve":
		return &Nerve{}
	case "NewsArticle":
		return &NewsArticle{}
	case "NewsMediaOrganization":
		return &NewsMediaOrganization{}
	case "Newspaper":
		return &Newspaper{}
	case "NightClub":
		return &NightClub{}
	case "NonprofitType":
		return &NonprofitType{}
	case "Notary":
		return &Notary{}
	case "NoteDigitalDocument":
		return &NoteDigitalDocument{}
	case "NutritionInformation":
		return &NutritionInformation{}
	case "Observation":
		return &Observation{}
	case "Occupation":
		return &Occupation{}
	case "OccupationalExperienceRequirements":
		return &OccupationalExperienceRequirements{}
	case "OccupationalTherapy":
		return &OccupationalTherapy{}
	case "OceanBodyOfWater":
		return &OceanBodyOfWater{}
	case "Offer":
		return &Offer{}
	case "OfferCatalog":
		return &OfferCatalog{}
	case "OfferForLease":
		return &OfferForLease{}
	case "OfferForPurchase":
		return &OfferForPurchase{}
	case "OfferItemCondition":
		return &OfferItemCondition{}
	case "OfferShippingDetails":
		return &OfferShippingDetails{}
	case "OfficeEquipmentStore":
		return &OfficeEquipmentStore{}
	case "OnDemandEvent":
		return &OnDemandEvent{}
	case "OnlineBusiness":
		return &OnlineBusiness{}
	case "OnlineStore":
		return &OnlineStore{}
	case "OpeningHoursSpecification":
		return &OpeningHoursSpecification{}
	case "OpinionNewsArticle":
		return &OpinionNewsArticle{}
	case "Optician":
		return &Optician{}
	case "Order":
		return &Order{}
	case "OrderAction":
		return &OrderAction{}
	case "OrderItem":
		return &OrderItem{}
	case "OrderStatus":
		return &OrderStatus{}
	case "Organization":
		return &Organization{}
	case "OrganizationRole":
		return &OrganizationRole{}
	case "OrganizeAction":
		return &OrganizeAction{}
	case "OutletStore":
		return &OutletStore{}
	case "OwnershipInfo":
		return &OwnershipInfo{}
	case "PaintAction":
		return &PaintAction{}
	case "Painting":
		return &Painting{}
	case "PalliativeProcedure":
		return &PalliativeProcedure{}
	case "ParcelDelivery":
		return &ParcelDelivery{}
	case "ParentAudience":
		return &ParentAudience{}
	case "Park":
		return &Park{}
	case "ParkingFacility":
		return &ParkingFacility{}
	case "PathologyTest":
		return &PathologyTest{}
	case "Patient":
		return &Patient{}
	case "PawnShop":
		return &PawnShop{}
	case "PayAction":
		return &PayAction{}
	case "PaymentCard":
		return &PaymentCard{}
	case "PaymentChargeSpecification":
		return &PaymentChargeSpecification{}
	case "PaymentMethod":
		return &PaymentMethod{}
	case "PaymentService":
		return &PaymentService{}
	case "PaymentStatusType":
		return &PaymentStatusType{}
	case "PeopleAudience":
		return &PeopleAudience{}
	case "PerformAction":
		return &PerformAction{}
	case "PerformanceRole":
		return &PerformanceRole{}
	case "PerformingArtsTheater":
		return &PerformingArtsTheater{}
	case "PerformingGroup":
		return &PerformingGroup{}
	case "Periodical":
		return &Periodical{}
	case "Permit":
		return &Permit{}
	case "Person":
		return &Person{}
	case "PetStore":
		return &PetStore{}
	case "Pharmacy":
		return &Pharmacy{}
	case "Photograph":
		return &Photograph{}
	case "PhotographAction":
		return &PhotographAction{}
	case "PhysicalActivity":
		return &PhysicalActivity{}
	case "PhysicalActivityCategory":
		return &PhysicalActivityCategory{}
	case "PhysicalExam":
		return &PhysicalExam{}
	case "PhysicalTherapy":
		return &PhysicalTherapy{}
	case "Physician":
		return &Physician{}
	case "Place":
		return &Place{}
	case "PlaceOfWorship":
		return &PlaceOfWorship{}
	case "PlanAction":
		return &PlanAction{}
	case "Play":
		return &Play{}
	case "PlayAction":
		return &PlayAction{}
	case "PlayGameAction":
		return &PlayGameAction{}
	case "Playground":
		return &Playground{}
	case "Plumber":
		return &Plumber{}
	case "PodcastEpisode":
		return &PodcastEpisode{}
	case "PodcastSeason":
		return &PodcastSeason{}
	case "PodcastSeries":
		return &PodcastSeries{}
	case "PoliceStation":
		return &PoliceStation{}
	case "Pond":
		return &Pond{}
	case "PostOffice":
		return &PostOffice{}
	case "PostalAddress":
		return &PostalAddress{}
	case "PostalCodeRangeSpecification":
		return &PostalCodeRangeSpecification{}
	case "Poster":
		return &Poster{}
	case "PreOrderAction":
		return &PreOrderAction{}
	case "PrependAction":
		return &PrependAction{}
	case "Preschool":
		return &Preschool{}
	case "PresentationDigitalDocument":
		return &PresentationDigitalDocument{}
	case "PreventionIndication":
		return &PreventionIndication{}
	case "PriceComponentTypeEnumeration":
		return &PriceComponentTypeEnumeration{}
	case "PriceSpecification":
		return &PriceSpecification{}
	case "PriceTypeEnumeration":
		return &PriceTypeEnumeration{}
	case "Product":
		return &Product{}
	case "ProductCollection":
		return &ProductCollection{}
	case "ProductGroup":
		return &ProductGroup{}
	case "ProductModel":
		return &ProductModel{}
	case "ProfessionalService":
		return &ProfessionalService{}
	case "ProfilePage":
		return &ProfilePage{}
	case "ProgramMembership":
		return &ProgramMembership{}
	case "Project":
		return &Project{}
	case "Property":
		return &Property{}
	case "PropertyValue":
		return &PropertyValue{}
	case "PropertyValueSpecification":
		return &PropertyValueSpecification{}
	case "Protein":
		return &Protein{}
	case "PsychologicalTreatment":
		return &PsychologicalTreatment{}
	case "PublicSwimmingPool":
		return &PublicSwimmingPool{}
	case "PublicToilet":
		return &PublicToilet{}
	case "PublicationEvent":
		return &PublicationEvent{}
	case "PublicationIssue":
		return &PublicationIssue{}
	case "PublicationVolume":
		return &PublicationVolume{}
	case "QAPage":
		return &QAPage{}
	case "QualitativeValue":
		return &QualitativeValue{}
	case "QuantitativeValue":
		return &QuantitativeValue{}
	case "QuantitativeValueDistribution":
		return &QuantitativeValueDistribution{}
	case "Quantity":
		return &Quantity{}
	case "Question":
		return &Question{}
	case "Quiz":
		return &Quiz{}
	case "Quotation":
		return &Quotation{}
	case "QuoteAction":
		return &QuoteAction{}
	case "RVPark":
		return &RVPark{}
	case "RadiationTherapy":
		return &RadiationTherapy{}
	case "RadioBroadcastService":
		return &RadioBroadcastService{}
	case "RadioChannel":
		return &RadioChannel{}
	case "RadioClip":
		return &RadioClip{}
	case "RadioEpisode":
		return &RadioEpisode{}
	case "RadioSeason":
		return &RadioSeason{}
	case "RadioSeries":
		return &RadioSeries{}
	case "RadioStation":
		return &RadioStation{}
	case "Rating":
		return &Rating{}
	case "ReactAction":
		return &ReactAction{}
	case "ReadAction":
		return &ReadAction{}
	case "RealEstateAgent":
		return &RealEstateAgent{}
	case "RealEstateListing":
		return &RealEstateListing{}
	case "ReceiveAction":
		return &ReceiveAction{}
	case "Recipe":
		return &Recipe{}
	case "Recommendation":
		return &Recommendation{}
	case "RecommendedDoseSchedule":
		return &RecommendedDoseSchedule{}
	case "RecyclingCenter":
		return &RecyclingCenter{}
	case "RefundTypeEnumeration":
		return &RefundTypeEnumeration{}
	case "RegisterAction":
		return &RegisterAction{}
	case "RejectAction":
		return &RejectAction{}
	case "RentAction":
		return &RentAction{}
	case "RentalCarReservation":
		return &RentalCarReservation{}
	case "RepaymentSpecification":
		return &RepaymentSpecification{}
	case "ReplaceAction":
		return &ReplaceAction{}
	case "ReplyAction":
		return &ReplyAction{}
	case "Report":
		return &Report{}
	case "ReportageNewsArticle":
		return &ReportageNewsArticle{}
	case "ReportedDoseSchedule":
		return &ReportedDoseSchedule{}
	case "ResearchOrganization":
		return &ResearchOrganization{}
	case "ResearchProject":
		return &ResearchProject{}
	case "Researcher":
		return &Researcher{}
	case "Reservation":
		return &Reservation{}
	case "ReservationPackage":
		return &ReservationPackage{}
	case "ReservationStatusType":
		return &ReservationStatusType{}
	case "ReserveAction":
		return &ReserveAction{}
	case "Reservoir":
		return &Reservoir{}
	case "Residence":
		return &Residence{}
	case "Resort":
		return &Resort{}
	case "Restaurant":
		return &Restaurant{}
	case "RestrictedDiet":
		return &RestrictedDiet{}
	case "ResumeAction":
		return &ResumeAction{}
	case "ReturnAction":
		return &ReturnAction{}
	case "ReturnFeesEnumeration":
		return &ReturnFeesEnumeration{}
	case "ReturnLabelSourceEnumeration":
		return &ReturnLabelSourceEnumeration{}
	case "ReturnMethodEnumeration":
		return &ReturnMethodEnumeration{}
	case "Review":
		return &Review{}
	case "ReviewAction":
		return &ReviewAction{}
	case "ReviewNewsArticle":
		return &ReviewNewsArticle{}
	case "RiverBodyOfWater":
		return &RiverBodyOfWater{}
	case "Role":
		return &Role{}
	case "RoofingContractor":
		return &RoofingContractor{}
	case "Room":
		return &Room{}
	case "RsvpAction":
		return &RsvpAction{}
	case "RsvpResponseType":
		return &RsvpResponseType{}
	case "SaleEvent":
		return &SaleEvent{}
	case "SatiricalArticle":
		return &SatiricalArticle{}
	case "Schedule":
		return &Schedule{}
	case "ScheduleAction":
		return &ScheduleAction{}
	case "ScholarlyArticle":
		return &ScholarlyArticle{}
	case "School":
		return &School{}
	case "SchoolDistrict":
		return &SchoolDistrict{}
	case "ScreeningEvent":
		return &ScreeningEvent{}
	case "Sculpture":
		return &Sculpture{}
	case "SeaBodyOfWater":
		return &SeaBodyOfWater{}
	case "SearchAction":
		return &SearchAction{}
	case "SearchRescueOrganization":
		return &SearchRescueOrganization{}
	case "SearchResultsPage":
		return &SearchResultsPage{}
	case "Season":
		return &Season{}
	case "Seat":
		return &Seat{}
	case "SeekToAction":
		return &SeekToAction{}
	case "SelfStorage":
		return &SelfStorage{}
	case "SellAction":
		return &SellAction{}
	case "SendAction":
		return &SendAction{}
	case "Series":
		return &Series{}
	case "Service":
		return &Service{}
	case "ServiceChannel":
		return &ServiceChannel{}
	case "ShareAction":
		return &ShareAction{}
	case "SheetMusic":
		return &SheetMusic{}
	case "ShippingDeliveryTime":
		return &ShippingDeliveryTime{}
	case "ShippingRateSettings":
		return &ShippingRateSettings{}
	case "ShoeStore":
		return &ShoeStore{}
	case "ShoppingCenter":
		return &ShoppingCenter{}
	case "ShortStory":
		return &ShortStory{}
	case "SingleFamilyResidence":
		return &SingleFamilyResidence{}
	case "SiteNavigationElement":
		return &SiteNavigationElement{}
	case "SizeGroupEnumeration":
		return &SizeGroupEnumeration{}
	case "SizeSpecification":
		return &SizeSpecification{}
	case "SizeSystemEnumeration":
		return &SizeSystemEnumeration{}
	case "SkiResort":
		return &SkiResort{}
	case "SocialEvent":
		return &SocialEvent{}
	case "SocialMediaPosting":
		return &SocialMediaPosting{}
	case "SoftwareApplication":
		return &SoftwareApplication{}
	case "SoftwareSourceCode":
		return &SoftwareSourceCode{}
	case "SolveMathAction":
		return &SolveMathAction{}
	case "SomeProducts":
		return &SomeProducts{}
	case "SpeakableSpecification":
		return &SpeakableSpecification{}
	case "SpecialAnnouncement":
		return &SpecialAnnouncement{}
	case "Specialty":
		return &Specialty{}
	case "SportingGoodsStore":
		return &SportingGoodsStore{}
	case "SportsActivityLocation":
		return &SportsActivityLocation{}
	case "SportsClub":
		return &SportsClub{}
	case "SportsEvent":
		return &SportsEvent{}
	case "SportsOrganization":
		return &SportsOrganization{}
	case "SportsTeam":
		return &SportsTeam{}
	case "SpreadsheetDigitalDocument":
		return &SpreadsheetDigitalDocument{}
	case "StadiumOrArena":
		return &StadiumOrArena{}
	case "State":
		return &State{}
	case "Statement":
		return &Statement{}
	case "StatisticalPopulation":
		return &StatisticalPopulation{}
	case "StatusEnumeration":
		return &StatusEnumeration{}
	case "SteeringPositionValue":
		return &SteeringPositionValue{}
	case "Store":
		return &Store{}
	case "StructuredValue":
		return &StructuredValue{}
	case "SubscribeAction":
		return &SubscribeAction{}
	case "Substance":
		return &Substance{}
	case "SubwayStation":
		return &SubwayStation{}
	case "Suite":
		return &Suite{}
	case "SuperficialAnatomy":
		return &SuperficialAnatomy{}
	case "SurgicalProcedure":
		return &SurgicalProcedure{}
	case "SuspendAction":
		return &SuspendAction{}
	case "Synagogue":
		return &Synagogue{}
	case "TVClip":
		return &TVClip{}
	case "TVEpisode":
		return &TVEpisode{}
	case "TVSeason":
		return &TVSeason{}
	case "TVSeries":
		return &TVSeries{}
	case "Table":
		return &Table{}
	case "TakeAction":
		return &TakeAction{}
	case "TattooParlor":
		return &TattooParlor{}
	case "Taxi":
		return &Taxi{}
	case "TaxiReservation":
		return &TaxiReservation{}
	case "TaxiService":
		return &TaxiService{}
	case "TaxiStand":
		return &TaxiStand{}
	case "Taxon":
		return &Taxon{}
	case "TechArticle":
		return &TechArticle{}
	case "TelevisionChannel":
		return &TelevisionChannel{}
	case "TelevisionStation":
		return &TelevisionStation{}
	case "TennisComplex":
		return &TennisComplex{}
	case "TextDigitalDocument":
		return &TextDigitalDocument{}
	case "TheaterEvent":
		return &TheaterEvent{}
	case "TheaterGroup":
		return &TheaterGroup{}
	case "TherapeuticProcedure":
		return &TherapeuticProcedure{}
	case "Thesis":
		return &Thesis{}
	case "Thing":
		return &Thing{}
	case "Ticket":
		return &Ticket{}
	case "TieAction":
		return &TieAction{}
	case "TipAction":
		return &TipAction{}
	case "TireShop":
		return &TireShop{}
	case "TouristAttraction":
		return &TouristAttraction{}
	case "TouristDestination":
		return &TouristDestination{}
	case "TouristInformationCenter":
		return &TouristInformationCenter{}
	case "TouristTrip":
		return &TouristTrip{}
	case "ToyStore":
		return &ToyStore{}
	case "TrackAction":
		return &TrackAction{}
	case "TradeAction":
		return &TradeAction{}
	case "TrainReservation":
		return &TrainReservation{}
	case "TrainStation":
		return &TrainStation{}
	case "TrainTrip":
		return &TrainTrip{}
	case "TransferAction":
		return &TransferAction{}
	case "TravelAction":
		return &TravelAction{}
	case "TravelAgency":
		return &TravelAgency{}
	case "TreatmentIndication":
		return &TreatmentIndication{}
	case "Trip":
		return &Trip{}
	case "TypeAndQuantityNode":
		return &TypeAndQuantityNode{}
	case "UKNonprofitType":
		return &UKNonprofitType{}
	case "USNonprofitType":
		return &USNonprofitType{}
	case "UnRegisterAction":
		return &UnRegisterAction{}
	case "UnitPriceSpecification":
		return &UnitPriceSpecification{}
	case "UpdateAction":
		return &UpdateAction{}
	case "UseAction":
		return &UseAction{}
	case "UserBlocks":
		return &UserBlocks{}
	case "UserCheckins":
		return &UserCheckins{}
	case "UserComments":
		return &UserComments{}
	case "UserDownloads":
		return &UserDownloads{}
	case "UserInteraction":
		return &UserInteraction{}
	case "UserLikes":
		return &UserLikes{}
	case "UserPageVisits":
		return &UserPageVisits{}
	case "UserPlays":
		return &UserPlays{}
	case "UserPlusOnes":
		return &UserPlusOnes{}
	case "UserReview":
		return &UserReview{}
	case "UserTweets":
		return &UserTweets{}
	case "Vehicle":
		return &Vehicle{}
	case "Vein":
		return &Vein{}
	case "Vessel":
		return &Vessel{}
	case "VeterinaryCare":
		return &VeterinaryCare{}
	case "VideoGallery":
		return &VideoGallery{}
	case "VideoGame":
		return &VideoGame{}
	case "VideoGameClip":
		return &VideoGameClip{}
	case "VideoGameSeries":
		return &VideoGameSeries{}
	case "VideoObject":
		return &VideoObject{}
	case "VideoObjectSnapshot":
		return &VideoObjectSnapshot{}
	case "ViewAction":
		return &ViewAction{}
	case "VirtualLocation":
		return &VirtualLocation{}
	case "VisualArtsEvent":
		return &VisualArtsEvent{}
	case "VisualArtwork":
		return &VisualArtwork{}
	case "VitalSign":
		return &VitalSign{}
	case "Volcano":
		return &Volcano{}
	case "VoteAction":
		return &VoteAction{}
	case "WPAdBlock":
		return &WPAdBlock{}
	case "WPFooter":
		return &WPFooter{}
	case "WPHeader":
		return &WPHeader{}
	case "WPSideBar":
		return &WPSideBar{}
	case "WantAction":
		return &WantAction{}
	case "WarrantyPromise":
		return &WarrantyPromise{}
	case "WarrantyScope":
		return &WarrantyScope{}
	case "WatchAction":
		return &WatchAction{}
	case "Waterfall":
		return &Waterfall{}
	case "WearAction":
		return &WearAction{}
	case "WearableMeasurementTypeEnumeration":
		return &WearableMeasurementTypeEnumeration{}
	case "WearableSizeGroupEnumeration":
		return &WearableSizeGroupEnumeration{}
	case "WearableSizeSystemEnumeration":
		return &WearableSizeSystemEnumeration{}
	case "WebAPI":
		return &WebAPI{}
	case "WebApplication":
		return &WebApplication{}
	case "WebContent":
		return &WebContent{}
	case "WebPage":
		return &WebPage{}
	case "WebPageElement":
		return &WebPageElement{}
	case "WebSite":
		return &WebSite{}
	case "WholesaleStore":
		return &WholesaleStore{}
	case "WinAction":
		return &WinAction{}
	case "Winery":
		return &Winery{}
	case "WorkBasedProgram":
		return &WorkBasedProgram{}
	case "WorkersUnion":
		return &WorkersUnion{}
	case "WriteAction":
		return &WriteAction{}
	case "Zoo":
		return &Zoo{}
	}
	panic(name)
}

/*
A 3D model represents some kind of 3D content, which may have [[encoding]]s in one or more [[MediaObject]]s. Many 3D formats are available (e.g. see [Wikipedia](https://en.wikipedia.org/wiki/Category:3D_graphics_file_formats)); specific encoding formats can be represented using the [[encodingFormat]] property applied to the relevant [[MediaObject]]. For the
case of a single file published after Zip compression, the convention of appending '+zip' to the [[encodingFormat]] can be used. Geospatial, AR/VR, artistic/animation, gaming, engineering and scientific content can all be represented using [[3DModel]].
*/
type ThreeDModel struct {
	MediaObject

	IsResizable interface{} `json:"isResizable,omitempty"`
}

// A radio channel that uses AM.
type AMRadioChannel struct {
	RadioChannel
}

// Reference documentation for application programming interfaces (APIs).
type APIReference struct {
	TechArticle

	Assembly              interface{} `json:"assembly,omitempty"`
	AssemblyVersion       interface{} `json:"assemblyVersion,omitempty"`
	ExecutableLibraryName interface{} `json:"executableLibraryName,omitempty"`
	ProgrammingModel      interface{} `json:"programmingModel,omitempty"`
	TargetPlatform        interface{} `json:"targetPlatform,omitempty"`
}

// Web page type: About page.
type AboutPage struct {
	WebPage
}

// The act of committing to/adopting an object.\n\nRelated actions:\n\n* [[RejectAction]]: The antonym of AcceptAction.
type AcceptAction struct {
	AllocateAction
}

/*
An accommodation is a place that can accommodate human beings, e.g. a hotel room, a camping pitch, or a meeting room. Many accommodations are for overnight stays, but this is not a mandatory requirement.
For more specific types of accommodations not defined in schema.org, one can use additionalType with external vocabularies.
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type Accommodation struct {
	Place

	AccommodationCategory    interface{} `json:"accommodationCategory,omitempty"`
	AccommodationFloorPlan   interface{} `json:"accommodationFloorPlan,omitempty"`
	AmenityFeature           interface{} `json:"amenityFeature,omitempty"`
	FloorLevel               interface{} `json:"floorLevel,omitempty"`
	FloorSize                interface{} `json:"floorSize,omitempty"`
	LeaseLength              interface{} `json:"leaseLength,omitempty"`
	NumberOfBathroomsTotal   interface{} `json:"numberOfBathroomsTotal,omitempty"`
	NumberOfBedrooms         interface{} `json:"numberOfBedrooms,omitempty"`
	NumberOfFullBathrooms    interface{} `json:"numberOfFullBathrooms,omitempty"`
	NumberOfPartialBathrooms interface{} `json:"numberOfPartialBathrooms,omitempty"`
	NumberOfRooms            interface{} `json:"numberOfRooms,omitempty"`
	PermittedUsage           interface{} `json:"permittedUsage,omitempty"`
	PetsAllowed              interface{} `json:"petsAllowed,omitempty"`
	TourBookingPage          interface{} `json:"tourBookingPage,omitempty"`
	YearBuilt                interface{} `json:"yearBuilt,omitempty"`
}

/*
Accountancy business.\n\nAs a [[LocalBusiness]] it can be described as a [[provider]] of one or more [[Service]]\(s).

*/
type AccountingService struct {
	FinancialService
}

// The act of accomplishing something via previous efforts. It is an instantaneous action rather than an ongoing process.
type AchieveAction struct {
	Action
}

// An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
type Action struct {
	Thing

	ActionStatus interface{} `json:"actionStatus,omitempty"`
	Agent        interface{} `json:"agent,omitempty"`
	EndTime      interface{} `json:"endTime,omitempty"`
	Error_       interface{} `json:"error_,omitempty"`
	Instrument   interface{} `json:"instrument,omitempty"`
	Location     interface{} `json:"location,omitempty"`
	Object       interface{} `json:"object,omitempty"`
	Participant  interface{} `json:"participant,omitempty"`
	Provider     interface{} `json:"provider,omitempty"`
	Result       interface{} `json:"result,omitempty"`
	StartTime    interface{} `json:"startTime,omitempty"`
	Target       interface{} `json:"target,omitempty"`
}

// A set of requirements that a must be fulfilled in order to perform an Action.
type ActionAccessSpecification struct {
	Intangible

	AvailabilityEnds     interface{} `json:"availabilityEnds,omitempty"`
	AvailabilityStarts   interface{} `json:"availabilityStarts,omitempty"`
	Category             interface{} `json:"category,omitempty"`
	EligibleRegion       interface{} `json:"eligibleRegion,omitempty"`
	ExpectsAcceptanceOf  interface{} `json:"expectsAcceptanceOf,omitempty"`
	IneligibleRegion     interface{} `json:"ineligibleRegion,omitempty"`
	RequiresSubscription interface{} `json:"requiresSubscription,omitempty"`
}

// The status of an Action.
type ActionStatusType struct {
	StatusEnumeration
}

// The act of starting or activating a device or application (e.g. starting a timer or turning on a flashlight).
type ActivateAction struct {
	ControlAction
}

// The act of editing by adding an object to a collection.
type AddAction struct {
	UpdateAction
}

// A geographical region, typically under the jurisdiction of a particular government.
type AdministrativeArea struct {
	Place
}

// An adult entertainment establishment.
type AdultEntertainment struct {
	EntertainmentBusiness
}

// Enumeration of considerations that make a product relevant or potentially restricted for adults only.
type AdultOrientedEnumeration struct {
	Enumeration
}

// An [[Article]] that an external entity has paid to place or to produce to its specifications. Includes [advertorials](https://en.wikipedia.org/wiki/Advertorial), sponsored content, native advertising and other paid content.
type AdvertiserContentArticle struct {
	Article
}

// When a single product is associated with multiple offers (for example, the same pair of shoes is offered by different merchants), then AggregateOffer can be used.\n\nNote: AggregateOffers are normally expected to associate multiple offers that all share the same defined [[businessFunction]] value, or default to http://purl.org/goodrelations/v1#Sell if businessFunction is not explicitly defined.
type AggregateOffer struct {
	Offer

	HighPrice  interface{} `json:"highPrice,omitempty"`
	LowPrice   interface{} `json:"lowPrice,omitempty"`
	OfferCount interface{} `json:"offerCount,omitempty"`
	Offers     interface{} `json:"offers,omitempty"`
}

// The average rating based on multiple ratings or reviews.
type AggregateRating struct {
	Rating

	ItemReviewed interface{} `json:"itemReviewed,omitempty"`
	RatingCount  interface{} `json:"ratingCount,omitempty"`
	ReviewCount  interface{} `json:"reviewCount,omitempty"`
}

// The act of expressing a consistency of opinion with the object. An agent agrees to/about an object (a proposition, topic or theme) with participants.
type AgreeAction struct {
	ReactAction
}

// An organization that provides flights for passengers.
type Airline struct {
	Organization

	BoardingPolicy interface{} `json:"boardingPolicy,omitempty"`
	IataCode       interface{} `json:"iataCode,omitempty"`
}

// An airport.
type Airport struct {
	CivicStructure

	IataCode interface{} `json:"iataCode,omitempty"`
	IcaoCode interface{} `json:"icaoCode,omitempty"`
}

/*
An intangible item that describes an alignment between a learning resource and a node in an educational framework.

Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
*/
type AlignmentObject struct {
	Intangible

	AlignmentType        interface{} `json:"alignmentType,omitempty"`
	EducationalFramework interface{} `json:"educationalFramework,omitempty"`
	TargetDescription    interface{} `json:"targetDescription,omitempty"`
	TargetName           interface{} `json:"targetName,omitempty"`
	TargetUrl            interface{} `json:"targetUrl,omitempty"`
}

// The act of organizing tasks/objects/events by associating resources to it.
type AllocateAction struct {
	OrganizeAction
}

// A creative work with a visual storytelling format intended to be viewed online, particularly on mobile devices.
type AmpStory struct {
	CreativeWork
	// TODO: MediaObject
}

// An amusement park.
type AmusementPark struct {
	EntertainmentBusiness
}

// An AnalysisNewsArticle is a [[NewsArticle]] that, while based on factual reporting, incorporates the expertise of the author/producer, offering interpretations and conclusions.
type AnalysisNewsArticle struct {
	NewsArticle
}

// Any part of the human body, typically a component of an anatomical system. Organs, tissues, and cells are all anatomical structures.
type AnatomicalStructure struct {
	MedicalEntity

	AssociatedPathophysiology interface{} `json:"associatedPathophysiology,omitempty"`
	BodyLocation              interface{} `json:"bodyLocation,omitempty"`
	ConnectedTo               interface{} `json:"connectedTo,omitempty"`
	Diagram                   interface{} `json:"diagram,omitempty"`
	PartOfSystem              interface{} `json:"partOfSystem,omitempty"`
	RelatedCondition          interface{} `json:"relatedCondition,omitempty"`
	RelatedTherapy            interface{} `json:"relatedTherapy,omitempty"`
	SubStructure              interface{} `json:"subStructure,omitempty"`
}

// An anatomical system is a group of anatomical structures that work together to perform a certain task. Anatomical systems, such as organ systems, are one organizing principle of anatomy, and can includes circulatory, digestive, endocrine, integumentary, immune, lymphatic, muscular, nervous, reproductive, respiratory, skeletal, urinary, vestibular, and other systems.
type AnatomicalSystem struct {
	MedicalEntity

	AssociatedPathophysiology interface{} `json:"associatedPathophysiology,omitempty"`
	ComprisedOf               interface{} `json:"comprisedOf,omitempty"`
	RelatedCondition          interface{} `json:"relatedCondition,omitempty"`
	RelatedStructure          interface{} `json:"relatedStructure,omitempty"`
	RelatedTherapy            interface{} `json:"relatedTherapy,omitempty"`
}

// Animal shelter.
type AnimalShelter struct {
	LocalBusiness
}

// An answer offered to a question; perhaps correct, perhaps opinionated or wrong.
type Answer struct {
	Comment

	AnswerExplanation interface{} `json:"answerExplanation,omitempty"`
}

// An apartment (in American English) or flat (in British English) is a self-contained housing unit (a type of residential real estate) that occupies only part of a building (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Apartment">http://en.wikipedia.org/wiki/Apartment</a>).
type Apartment struct {
	Accommodation

	NumberOfRooms interface{} `json:"numberOfRooms,omitempty"`
	Occupancy     interface{} `json:"occupancy,omitempty"`
}

// Residence type: Apartment complex.
type ApartmentComplex struct {
	Residence

	NumberOfAccommodationUnits          interface{} `json:"numberOfAccommodationUnits,omitempty"`
	NumberOfAvailableAccommodationUnits interface{} `json:"numberOfAvailableAccommodationUnits,omitempty"`
	NumberOfBedrooms                    interface{} `json:"numberOfBedrooms,omitempty"`
	PetsAllowed                         interface{} `json:"petsAllowed,omitempty"`
	TourBookingPage                     interface{} `json:"tourBookingPage,omitempty"`
}

// The act of inserting at the end if an ordered collection.
type AppendAction struct {
	InsertAction
}

// The act of registering to an organization/service without the guarantee to receive it.\n\nRelated actions:\n\n* [[RegisterAction]]: Unlike RegisterAction, ApplyAction has no guarantees that the application will be accepted.
type ApplyAction struct {
	OrganizeAction
}

// An indication for a medical therapy that has been formally specified or approved by a regulatory body that regulates use of the therapy; for example, the US FDA approves indications for most drugs in the US.
type ApprovedIndication struct {
	MedicalIndication
}

// Aquarium.
type Aquarium struct {
	CivicStructure
}

//
type ArchiveComponent struct {
	CreativeWork

	HoldingArchive interface{} `json:"holdingArchive,omitempty"`
	ItemLocation   interface{} `json:"itemLocation,omitempty"`
}

//
type ArchiveOrganization struct {
	LocalBusiness

	ArchiveHeld interface{} `json:"archiveHeld,omitempty"`
}

// The act of arriving at a place. An agent arrives at a destination from a fromLocation, optionally with participants.
type ArriveAction struct {
	MoveAction
}

// An art gallery.
type ArtGallery struct {
	EntertainmentBusiness
}

// A type of blood vessel that specifically carries blood away from the heart.
type Artery struct {
	Vessel

	ArterialBranch interface{} `json:"arterialBranch,omitempty"`
	SupplyTo       interface{} `json:"supplyTo,omitempty"`
}

// An article, such as a news article or piece of investigative report. Newspapers and magazines have articles of many different types and this is intended to cover them all.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
type Article struct {
	CreativeWork

	ArticleBody    interface{} `json:"articleBody,omitempty"`
	ArticleSection interface{} `json:"articleSection,omitempty"`
	Backstory      interface{} `json:"backstory,omitempty"`
	PageEnd        interface{} `json:"pageEnd,omitempty"`
	PageStart      interface{} `json:"pageStart,omitempty"`
	Pagination     interface{} `json:"pagination,omitempty"`
	Speakable      interface{} `json:"speakable,omitempty"`
	WordCount      interface{} `json:"wordCount,omitempty"`
}

// The act of posing a question / favor to someone.\n\nRelated actions:\n\n* [[ReplyAction]]: Appears generally as a response to AskAction.
type AskAction struct {
	CommunicateAction

	Question interface{} `json:"question,omitempty"`
}

// A [[NewsArticle]] expressing an open call by a [[NewsMediaOrganization]] asking the public for input, insights, clarifications, anecdotes, documentation, etc., on an issue, for reporting purposes.
type AskPublicNewsArticle struct {
	NewsArticle
}

// The act of forming one's opinion, reaction or sentiment.
type AssessAction struct {
	Action
}

// The act of allocating an action/event/task to some destination (someone or something).
type AssignAction struct {
	AllocateAction
}

// A collection or bound volume of maps, charts, plates or tables, physical or in media form illustrating any subject.
type Atlas struct {
	CreativeWork
}

// Professional service: Attorney. \n\nThis type is deprecated - [[LegalService]] is more inclusive and less ambiguous.
type Attorney struct {
	LegalService
}

// Intended audience for an item, i.e. the group for whom the item was created.
type Audience struct {
	Intangible

	AudienceType   interface{} `json:"audienceType,omitempty"`
	GeographicArea interface{} `json:"geographicArea,omitempty"`
}

// An audio file.
type AudioObject struct {
	MediaObject

	Caption             interface{} `json:"caption,omitempty"`
	EmbeddedTextCaption interface{} `json:"embeddedTextCaption,omitempty"`
	Transcript          interface{} `json:"transcript,omitempty"`
}

// A specific and exact (byte-for-byte) version of an [[AudioObject]]. Two byte-for-byte identical files, for the purposes of this type, considered identical. If they have different embedded metadata the files will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual content, do not affect this notion of identity.
type AudioObjectSnapshot struct {
	AudioObject
}

// An audiobook.
type Audiobook struct {
	AudioObject
	// TODO: Book

	Duration interface{} `json:"duration,omitempty"`
	ReadBy   interface{} `json:"readBy,omitempty"`
}

// The act of granting permission to an object.
type AuthorizeAction struct {
	AllocateAction

	Recipient interface{} `json:"recipient,omitempty"`
}

// Auto body shop.
type AutoBodyShop struct {
	AutomotiveBusiness
}

// An car dealership.
type AutoDealer struct {
	AutomotiveBusiness
}

// An auto parts store.
type AutoPartsStore struct {
	AutomotiveBusiness
	// TODO: Store
}

// A car rental business.
type AutoRental struct {
	AutomotiveBusiness
}

// Car repair business.
type AutoRepair struct {
	AutomotiveBusiness
}

// A car wash business.
type AutoWash struct {
	AutomotiveBusiness
}

// ATM/cash machine.
type AutomatedTeller struct {
	FinancialService
}

// Car repair, sales, or parts.
type AutomotiveBusiness struct {
	LocalBusiness
}

// A [[NewsArticle]] providing historical context, definition and detail on a specific topic (aka "explainer" or "backgrounder"). For example, an in-depth article or frequently-asked-questions ([FAQ](https://en.wikipedia.org/wiki/FAQ)) document on topics such as Climate Change or the European Union. Other kinds of background material from a non-news setting are often described using [[Book]] or [[Article]], in particular [[ScholarlyArticle]]. See also [[NewsArticle]] for related vocabulary from a learning/education perspective.
type BackgroundNewsArticle struct {
	NewsArticle
}

// A bakery.
type Bakery struct {
	FoodEstablishment
}

// A product or service offered by a bank whereby one may deposit, withdraw or transfer money and in some cases be paid interest.
type BankAccount struct {
	FinancialProduct

	AccountMinimumInflow  interface{} `json:"accountMinimumInflow,omitempty"`
	AccountOverdraftLimit interface{} `json:"accountOverdraftLimit,omitempty"`
	BankAccountType       interface{} `json:"bankAccountType,omitempty"`
}

// Bank or credit union.
type BankOrCreditUnion struct {
	FinancialService
}

// A bar or pub.
type BarOrPub struct {
	FoodEstablishment
}

// An image of a visual machine-readable code such as a barcode or QR code.
type Barcode struct {
	ImageObject
}

// Beach.
type Beach struct {
	CivicStructure
}

// Beauty salon.
type BeautySalon struct {
	HealthAndBeautyBusiness
}

/*
Bed and breakfast.
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type BedAndBreakfast struct {
	LodgingBusiness
}

// An entity holding detailed information about the available bed types, e.g. the quantity of twin beds for a hotel room. For the single case of just one bed of a certain type, you can use bed directly with a text. See also [[BedType]] (under development).
type BedDetails struct {
	Intangible

	NumberOfBeds interface{} `json:"numberOfBeds,omitempty"`
	TypeOfBed    interface{} `json:"typeOfBed,omitempty"`
}

// A type of bed. This is used for indicating the bed or beds available in an accommodation.
type BedType struct {
	QualitativeValue
}

// The act of forming a personal connection with someone (object) mutually/bidirectionally/symmetrically.\n\nRelated actions:\n\n* [[FollowAction]]: Unlike FollowAction, BefriendAction implies that the connection is reciprocal.
type BefriendAction struct {
	InteractAction
}

// A bike store.
type BikeStore struct {
	Store
}

// Any biological, chemical, or biochemical thing. For example: a protein; a gene; a chemical; a synthetic chemical.
type BioChemEntity struct {
	Thing

	AssociatedDisease              interface{} `json:"associatedDisease,omitempty"`
	BioChemInteraction             interface{} `json:"bioChemInteraction,omitempty"`
	BioChemSimilarity              interface{} `json:"bioChemSimilarity,omitempty"`
	BiologicalRole                 interface{} `json:"biologicalRole,omitempty"`
	Funding                        interface{} `json:"funding,omitempty"`
	HasBioChemEntityPart           interface{} `json:"hasBioChemEntityPart,omitempty"`
	HasMolecularFunction           interface{} `json:"hasMolecularFunction,omitempty"`
	HasRepresentation              interface{} `json:"hasRepresentation,omitempty"`
	IsEncodedByBioChemEntity       interface{} `json:"isEncodedByBioChemEntity,omitempty"`
	IsInvolvedInBiologicalProcess  interface{} `json:"isInvolvedInBiologicalProcess,omitempty"`
	IsLocatedInSubcellularLocation interface{} `json:"isLocatedInSubcellularLocation,omitempty"`
	IsPartOfBioChemEntity          interface{} `json:"isPartOfBioChemEntity,omitempty"`
	TaxonomicRange                 interface{} `json:"taxonomicRange,omitempty"`
}

// A [blog](https://en.wikipedia.org/wiki/Blog), sometimes known as a "weblog". Note that the individual posts ([[BlogPosting]]s) in a [[Blog]] are often colloqually referred to by the same term.
type Blog struct {
	CreativeWork

	BlogPost  interface{} `json:"blogPost,omitempty"`
	BlogPosts interface{} `json:"blogPosts,omitempty"`
	Issn      interface{} `json:"issn,omitempty"`
}

// A blog post.
type BlogPosting struct {
	SocialMediaPosting
}

// A medical test performed on a sample of a patient's blood.
type BloodTest struct {
	MedicalTest
}

// A type of boarding policy used by an airline.
type BoardingPolicyType struct {
	Enumeration
}

/*
A reservation for boat travel.

Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
*/
type BoatReservation struct {
	Reservation
}

// A terminal for boats, ships, and other water vessels.
type BoatTerminal struct {
	CivicStructure
}

// A trip on a commercial ferry line.
type BoatTrip struct {
	Trip

	ArrivalBoatTerminal   interface{} `json:"arrivalBoatTerminal,omitempty"`
	DepartureBoatTerminal interface{} `json:"departureBoatTerminal,omitempty"`
}

// Enumerates types (or dimensions) of a person's body measurements, for example for fitting of clothes.
type BodyMeasurementTypeEnumeration struct {
	MeasurementTypeEnumeration
}

// A body of water, such as a sea, ocean, or lake.
type BodyOfWater struct {
	Landform
}

// Rigid connective tissue that comprises up the skeletal structure of the human body.
type Bone struct {
	AnatomicalStructure
}

// A book.
type Book struct {
	CreativeWork

	Abridged      interface{} `json:"abridged,omitempty"`
	BookEdition   interface{} `json:"bookEdition,omitempty"`
	BookFormat    interface{} `json:"bookFormat,omitempty"`
	Illustrator   interface{} `json:"illustrator,omitempty"`
	Isbn          interface{} `json:"isbn,omitempty"`
	NumberOfPages interface{} `json:"numberOfPages,omitempty"`
}

// The publication format of the book.
type BookFormatType struct {
	Enumeration
}

// A series of books. Included books can be indicated with the hasPart property.
type BookSeries struct {
	CreativeWorkSeries
}

// A bookstore.
type BookStore struct {
	Store
}

// An agent bookmarks/flags/labels/tags/marks an object.
type BookmarkAction struct {
	OrganizeAction
}

// Boolean: True or False.
type Boolean struct{}

// The act of obtaining an object under an agreement to return it at a later date. Reciprocal of LendAction.\n\nRelated actions:\n\n* [[LendAction]]: Reciprocal of BorrowAction.
type BorrowAction struct {
	TransferAction

	Lender interface{} `json:"lender,omitempty"`
}

// A bowling alley.
type BowlingAlley struct {
	SportsActivityLocation
}

// Any anatomical structure which pertains to the soft nervous tissue functioning as the coordinating center of sensation and intellectual and nervous activity.
type BrainStructure struct {
	AnatomicalStructure
}

// A brand is a name used by an organization or business person for labeling a product, product group, or similar.
type Brand struct {
	Intangible

	AggregateRating interface{} `json:"aggregateRating,omitempty"`
	Logo            interface{} `json:"logo,omitempty"`
	Review          interface{} `json:"review,omitempty"`
	Slogan          interface{} `json:"slogan,omitempty"`
}

/*
A BreadcrumbList is an ItemList consisting of a chain of linked Web pages, typically described using at least their URL and their name, and typically ending with the current page.\n\nThe [[position]] property is used to reconstruct the order of the items in a BreadcrumbList The convention is that a breadcrumb list has an [[itemListOrder]] of [[ItemListOrderAscending]] (lower values listed first), and that the first items in this list correspond to the "top" or beginning of the breadcrumb trail, e.g. with a site or section homepage. The specific values of 'position' are not assigned meaning for a BreadcrumbList, but they should be integers, e.g. beginning with '1' for the first item in the list.

*/
type BreadcrumbList struct {
	ItemList
}

// Brewery.
type Brewery struct {
	FoodEstablishment
}

// A bridge.
type Bridge struct {
	CivicStructure
}

// A unique instance of a BroadcastService on a CableOrSatelliteService lineup.
type BroadcastChannel struct {
	Intangible

	BroadcastChannelId       interface{} `json:"broadcastChannelId,omitempty"`
	BroadcastFrequency       interface{} `json:"broadcastFrequency,omitempty"`
	BroadcastServiceTier     interface{} `json:"broadcastServiceTier,omitempty"`
	Genre                    interface{} `json:"genre,omitempty"`
	InBroadcastLineup        interface{} `json:"inBroadcastLineup,omitempty"`
	ProvidesBroadcastService interface{} `json:"providesBroadcastService,omitempty"`
}

// An over the air or online broadcast event.
type BroadcastEvent struct {
	PublicationEvent

	BroadcastOfEvent interface{} `json:"broadcastOfEvent,omitempty"`
	IsLiveBroadcast  interface{} `json:"isLiveBroadcast,omitempty"`
	SubtitleLanguage interface{} `json:"subtitleLanguage,omitempty"`
	VideoFormat      interface{} `json:"videoFormat,omitempty"`
}

// The frequency in MHz and the modulation used for a particular BroadcastService.
type BroadcastFrequencySpecification struct {
	Intangible

	BroadcastFrequencyValue   interface{} `json:"broadcastFrequencyValue,omitempty"`
	BroadcastSignalModulation interface{} `json:"broadcastSignalModulation,omitempty"`
	BroadcastSubChannel       interface{} `json:"broadcastSubChannel,omitempty"`
}

// A delivery service through which content is provided via broadcast over the air or online.
type BroadcastService struct {
	Service

	Area                 interface{} `json:"area,omitempty"`
	BroadcastAffiliateOf interface{} `json:"broadcastAffiliateOf,omitempty"`
	BroadcastDisplayName interface{} `json:"broadcastDisplayName,omitempty"`
	BroadcastFrequency   interface{} `json:"broadcastFrequency,omitempty"`
	BroadcastTimezone    interface{} `json:"broadcastTimezone,omitempty"`
	Broadcaster          interface{} `json:"broadcaster,omitempty"`
	CallSign             interface{} `json:"callSign,omitempty"`
	HasBroadcastChannel  interface{} `json:"hasBroadcastChannel,omitempty"`
	InLanguage           interface{} `json:"inLanguage,omitempty"`
	ParentService        interface{} `json:"parentService,omitempty"`
	VideoFormat          interface{} `json:"videoFormat,omitempty"`
}

// An account that allows an investor to deposit funds and place investment orders with a licensed broker or brokerage firm.
type BrokerageAccount struct {
	InvestmentOrDeposit
}

// A Buddhist temple.
type BuddhistTemple struct {
	PlaceOfWorship
}

// A bus (also omnibus or autobus) is a road vehicle designed to carry passengers. Coaches are luxury busses, usually in service for long distance travel.
type BusOrCoach struct {
	Vehicle

	AcrissCode interface{} `json:"acrissCode,omitempty"`
	RoofLoad   interface{} `json:"roofLoad,omitempty"`
}

// A reservation for bus travel. \n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
type BusReservation struct {
	Reservation
}

// A bus station.
type BusStation struct {
	CivicStructure
}

// A bus stop.
type BusStop struct {
	CivicStructure
}

// A trip on a commercial bus line.
type BusTrip struct {
	Trip

	ArrivalBusStop   interface{} `json:"arrivalBusStop,omitempty"`
	BusName          interface{} `json:"busName,omitempty"`
	BusNumber        interface{} `json:"busNumber,omitempty"`
	DepartureBusStop interface{} `json:"departureBusStop,omitempty"`
}

// A set of characteristics belonging to businesses, e.g. who compose an item's target audience.
type BusinessAudience struct {
	Audience

	NumberOfEmployees interface{} `json:"numberOfEmployees,omitempty"`
	YearlyRevenue     interface{} `json:"yearlyRevenue,omitempty"`
	YearsInOperation  interface{} `json:"yearsInOperation,omitempty"`
}

/*
A business entity type is a conceptual entity representing the legal form, the size, the main line of business, the position in the value chain, or any combination thereof, of an organization or business person.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#Business\n* http://purl.org/goodrelations/v1#Enduser\n* http://purl.org/goodrelations/v1#PublicInstitution\n* http://purl.org/goodrelations/v1#Reseller

*/
type BusinessEntityType struct {
	Enumeration
}

// Event type: Business event.
type BusinessEvent struct {
	Event
}

/*
The business function specifies the type of activity or access (i.e., the bundle of rights) offered by the organization or business person through the offer. Typical are sell, rental or lease, maintenance or repair, manufacture / produce, recycle / dispose, engineering / construction, or installation. Proprietary specifications of access rights are also instances of this class.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#ConstructionInstallation\n* http://purl.org/goodrelations/v1#Dispose\n* http://purl.org/goodrelations/v1#LeaseOut\n* http://purl.org/goodrelations/v1#Maintain\n* http://purl.org/goodrelations/v1#ProvideService\n* http://purl.org/goodrelations/v1#Repair\n* http://purl.org/goodrelations/v1#Sell\n* http://purl.org/goodrelations/v1#Buy

*/
type BusinessFunction struct {
	Enumeration
}

// The act of giving money to a seller in exchange for goods or services rendered. An agent buys an object, product, or service from a seller for a price. Reciprocal of SellAction.
type BuyAction struct {
	TradeAction

	Seller          interface{} `json:"seller,omitempty"`
	Vendor          interface{} `json:"vendor,omitempty"`
	WarrantyPromise interface{} `json:"warrantyPromise,omitempty"`
}

/*
A CDCPMDRecord is a data structure representing a record in a CDC tabular data format
      used for hospital data reporting. See [documentation](/docs/cdc-covid.html) for details, and the linked CDC materials for authoritative
      definitions used as the source here.

*/
type CDCPMDRecord struct {
	StructuredValue

	CvdCollectionDate       interface{} `json:"cvdCollectionDate,omitempty"`
	CvdFacilityCounty       interface{} `json:"cvdFacilityCounty,omitempty"`
	CvdFacilityId           interface{} `json:"cvdFacilityId,omitempty"`
	CvdNumBeds              interface{} `json:"cvdNumBeds,omitempty"`
	CvdNumBedsOcc           interface{} `json:"cvdNumBedsOcc,omitempty"`
	CvdNumC19Died           interface{} `json:"cvdNumC19Died,omitempty"`
	CvdNumC19HOPats         interface{} `json:"cvdNumC19HOPats,omitempty"`
	CvdNumC19HospPats       interface{} `json:"cvdNumC19HospPats,omitempty"`
	CvdNumC19MechVentPats   interface{} `json:"cvdNumC19MechVentPats,omitempty"`
	CvdNumC19OFMechVentPats interface{} `json:"cvdNumC19OFMechVentPats,omitempty"`
	CvdNumC19OverflowPats   interface{} `json:"cvdNumC19OverflowPats,omitempty"`
	CvdNumICUBeds           interface{} `json:"cvdNumICUBeds,omitempty"`
	CvdNumICUBedsOcc        interface{} `json:"cvdNumICUBedsOcc,omitempty"`
	CvdNumTotBeds           interface{} `json:"cvdNumTotBeds,omitempty"`
	CvdNumVent              interface{} `json:"cvdNumVent,omitempty"`
	CvdNumVentUse           interface{} `json:"cvdNumVentUse,omitempty"`
	DatePosted              interface{} `json:"datePosted,omitempty"`
}

// A service which provides access to media programming like TV or radio. Access may be via cable or satellite.
type CableOrSatelliteService struct {
	Service
}

// A cafe or coffee shop.
type CafeOrCoffeeShop struct {
	FoodEstablishment
}

/*
A camping site, campsite, or [[Campground]] is a place used for overnight stay in the outdoors, typically containing individual [[CampingPitch]] locations. \n\n
In British English a campsite is an area, usually divided into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English use of the word is synonymous with the American English expression campground. In American English the term campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a camper; a campground may contain many campsites (Source: Wikipedia see [https://en.wikipedia.org/wiki/Campsite](https://en.wikipedia.org/wiki/Campsite)).\n\n

See also the dedicated [document on the use of schema.org for marking up hotels and other forms of accommodations](/docs/hotels.html).
*/
type Campground struct {
	CivicStructure
	// TODO: LodgingBusiness
}

/*
A [[CampingPitch]] is an individual place for overnight stay in the outdoors, typically being part of a larger camping site, or [[Campground]].\n\n
In British English a campsite, or campground, is an area, usually divided into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English use of the word is synonymous with the American English expression campground. In American English the term campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a camper; a campground may contain many campsites.
(Source: Wikipedia see [https://en.wikipedia.org/wiki/Campsite](https://en.wikipedia.org/wiki/Campsite)).\n\n
See also the dedicated [document on the use of schema.org for marking up hotels and other forms of accommodations](/docs/hotels.html).
*/
type CampingPitch struct {
	Accommodation
}

// A canal, like the Panama Canal.
type Canal struct {
	BodyOfWater
}

// The act of asserting that a future event/action is no longer going to happen.\n\nRelated actions:\n\n* [[ConfirmAction]]: The antonym of CancelAction.
type CancelAction struct {
	PlanAction
}

// A car is a wheeled, self-powered motor vehicle used for transportation.
type Car struct {
	Vehicle

	AcrissCode interface{} `json:"acrissCode,omitempty"`
	RoofLoad   interface{} `json:"roofLoad,omitempty"`
}

// A value indicating a special usage of a car, e.g. commercial rental, driving school, or as a taxi.
type CarUsageType struct {
	Enumeration
}

// A casino.
type Casino struct {
	EntertainmentBusiness
}

// A Category Code.
type CategoryCode struct {
	DefinedTerm

	CodeValue interface{} `json:"codeValue,omitempty"`
	InCodeSet interface{} `json:"inCodeSet,omitempty"`
}

// A set of Category Code values.
type CategoryCodeSet struct {
	DefinedTermSet

	HasCategoryCode interface{} `json:"hasCategoryCode,omitempty"`
}

// A Catholic church.
type CatholicChurch struct {
	Church
}

// A graveyard.
type Cemetery struct {
	CivicStructure
}

// One of the sections into which a book is divided. A chapter usually has a section number or a name.
type Chapter struct {
	CreativeWork

	PageEnd    interface{} `json:"pageEnd,omitempty"`
	PageStart  interface{} `json:"pageStart,omitempty"`
	Pagination interface{} `json:"pagination,omitempty"`
}

// An agent inspects, determines, investigates, inquires, or examines an object's accuracy, quality, condition, or state.
type CheckAction struct {
	FindAction
}

// The act of an agent communicating (service provider, social media, etc) their arrival by registering/confirming for a previously reserved service (e.g. flight check in) or at a place (e.g. hotel), possibly resulting in a result (boarding pass, etc).\n\nRelated actions:\n\n* [[CheckOutAction]]: The antonym of CheckInAction.\n* [[ArriveAction]]: Unlike ArriveAction, CheckInAction implies that the agent is informing/confirming the start of a previously reserved service.\n* [[ConfirmAction]]: Unlike ConfirmAction, CheckInAction implies that the agent is informing/confirming the *start* of a previously reserved service rather than its validity/existence.
type CheckInAction struct {
	CommunicateAction
}

// The act of an agent communicating (service provider, social media, etc) their departure of a previously reserved service (e.g. flight check in) or place (e.g. hotel).\n\nRelated actions:\n\n* [[CheckInAction]]: The antonym of CheckOutAction.\n* [[DepartAction]]: Unlike DepartAction, CheckOutAction implies that the agent is informing/confirming the end of a previously reserved service.\n* [[CancelAction]]: Unlike CancelAction, CheckOutAction implies that the agent is informing/confirming the end of a previously reserved service.
type CheckOutAction struct {
	CommunicateAction
}

// Web page type: Checkout page.
type CheckoutPage struct {
	WebPage
}

// A chemical substance is 'a portion of matter of constant composition, composed of molecular entities of the same type or of different types' (source: [ChEBI:59999](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=59999)).
type ChemicalSubstance struct {
	BioChemEntity

	ChemicalComposition interface{} `json:"chemicalComposition,omitempty"`
	ChemicalRole        interface{} `json:"chemicalRole,omitempty"`
	PotentialUse        interface{} `json:"potentialUse,omitempty"`
}

// A Childcare center.
type ChildCare struct {
	LocalBusiness
}

// Event type: Children's event.
type ChildrensEvent struct {
	Event
}

// The act of expressing a preference from a set of options or a large or unbounded set of choices/options.
type ChooseAction struct {
	AssessAction

	ActionOption interface{} `json:"actionOption,omitempty"`
	Option       interface{} `json:"option,omitempty"`
}

// A church.
type Church struct {
	PlaceOfWorship
}

// A city or town.
type City struct {
	AdministrativeArea
}

// A city hall.
type CityHall struct {
	GovernmentBuilding
}

// A public structure, such as a town hall or concert hall.
type CivicStructure struct {
	Place

	OpeningHours interface{} `json:"openingHours,omitempty"`
}

/*
A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.

  Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].

  At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.

*/
type Claim struct {
	CreativeWork

	Appearance       interface{} `json:"appearance,omitempty"`
	ClaimInterpreter interface{} `json:"claimInterpreter,omitempty"`
	FirstAppearance  interface{} `json:"firstAppearance,omitempty"`
}

// A fact-checking review of claims made (or reported) in some creative work (referenced via itemReviewed).
type ClaimReview struct {
	Review

	ClaimReviewed interface{} `json:"claimReviewed,omitempty"`
}

// A class, also often called a 'Type'; equivalent to rdfs:Class.
type Class struct {
	Intangible

	SupersededBy interface{} `json:"supersededBy,omitempty"`
}

// A short TV or radio program or a segment/part of a program.
type Clip struct {
	CreativeWork

	Actor         interface{} `json:"actor,omitempty"`
	Actors        interface{} `json:"actors,omitempty"`
	ClipNumber    interface{} `json:"clipNumber,omitempty"`
	Director      interface{} `json:"director,omitempty"`
	Directors     interface{} `json:"directors,omitempty"`
	EndOffset     interface{} `json:"endOffset,omitempty"`
	MusicBy       interface{} `json:"musicBy,omitempty"`
	PartOfEpisode interface{} `json:"partOfEpisode,omitempty"`
	PartOfSeason  interface{} `json:"partOfSeason,omitempty"`
	PartOfSeries  interface{} `json:"partOfSeries,omitempty"`
	StartOffset   interface{} `json:"startOffset,omitempty"`
}

// A clothing store.
type ClothingStore struct {
	Store
}

// Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts, templates.
type Code struct {
	CreativeWork
}

// A collection of items e.g. creative works or products.
type Collection struct {
	CreativeWork

	CollectionSize interface{} `json:"collectionSize,omitempty"`
}

// Web page type: Collection page.
type CollectionPage struct {
	WebPage
}

// A college, university, or other third-level educational institution.
type CollegeOrUniversity struct {
	EducationalOrganization
}

// A comedy club.
type ComedyClub struct {
	EntertainmentBusiness
}

// Event type: Comedy event.
type ComedyEvent struct {
	Event
}

// The artwork on the cover of a comic.
type ComicCoverArt struct {
	ComicStory
	// TODO: CoverArt
}

/*
Individual comic issues are serially published as
    	part of a larger series. For the sake of consistency, even one-shot issues
    	belong to a series comprised of a single issue. All comic issues can be
    	uniquely identified by: the combination of the name and volume number of the
    	series to which the issue belongs; the issue number; and the variant
    	description of the issue (if any).
*/
type ComicIssue struct {
	PublicationIssue

	Artist       interface{} `json:"artist,omitempty"`
	Colorist     interface{} `json:"colorist,omitempty"`
	Inker        interface{} `json:"inker,omitempty"`
	Letterer     interface{} `json:"letterer,omitempty"`
	Penciler     interface{} `json:"penciler,omitempty"`
	VariantCover interface{} `json:"variantCover,omitempty"`
}

/*
A sequential publication of comic stories under a
    	unifying title, for example "The Amazing Spider-Man" or "Groo the
    	Wanderer".
*/
type ComicSeries struct {
	Periodical
}

/*
The term "story" is any indivisible, re-printable
    	unit of a comic, including the interior stories, covers, and backmatter. Most
    	comics have at least two stories: a cover (ComicCoverArt) and an interior story.
*/
type ComicStory struct {
	CreativeWork

	Artist   interface{} `json:"artist,omitempty"`
	Colorist interface{} `json:"colorist,omitempty"`
	Inker    interface{} `json:"inker,omitempty"`
	Letterer interface{} `json:"letterer,omitempty"`
	Penciler interface{} `json:"penciler,omitempty"`
}

// A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
type Comment struct {
	CreativeWork

	DownvoteCount interface{} `json:"downvoteCount,omitempty"`
	ParentItem    interface{} `json:"parentItem,omitempty"`
	UpvoteCount   interface{} `json:"upvoteCount,omitempty"`
}

// The act of generating a comment about a subject.
type CommentAction struct {
	CommunicateAction

	ResultComment interface{} `json:"resultComment,omitempty"`
}

// The act of conveying information to another person via a communication medium (instrument) such as speech, email, or telephone conversation.
type CommunicateAction struct {
	InteractAction

	About      interface{} `json:"about,omitempty"`
	InLanguage interface{} `json:"inLanguage,omitempty"`
	Language   interface{} `json:"language,omitempty"`
	Recipient  interface{} `json:"recipient,omitempty"`
}

/*
A [[CompleteDataFeed]] is a [[DataFeed]] whose standard representation includes content for every item currently in the feed.

This is the equivalent of Atom's element as defined in Feed Paging and Archiving [RFC 5005](https://tools.ietf.org/html/rfc5005), For example (and as defined for Atom), when using data from a feed that represents a collection of items that varies over time (e.g. "Top Twenty Records") there is no need to have newer entries mixed in alongside older, obsolete entries. By marking this feed as a CompleteDataFeed, old entries can be safely discarded when the feed is refreshed, since we can assume the feed has provided descriptions for all current items.
*/
type CompleteDataFeed struct {
	DataFeed
}

// A compound price specification is one that bundles multiple prices that all apply in combination for different dimensions of consumption. Use the name property of the attached unit price specification for indicating the dimension of a price component (e.g. "electricity" or "final cleaning").
type CompoundPriceSpecification struct {
	PriceSpecification

	PriceComponent interface{} `json:"priceComponent,omitempty"`
	PriceType      interface{} `json:"priceType,omitempty"`
}

// This type covers computer programming languages such as Scheme and Lisp, as well as other language-like computer representations. Natural languages are best represented with the [[Language]] type.
type ComputerLanguage struct {
	Intangible
}

// A computer store.
type ComputerStore struct {
	Store
}

// The act of notifying someone that a future event/action is going to happen as expected.\n\nRelated actions:\n\n* [[CancelAction]]: The antonym of ConfirmAction.
type ConfirmAction struct {
	InformAction
}

// A Consortium is a membership [[Organization]] whose members are typically Organizations.
type Consortium struct {
	Organization
}

// The act of ingesting information/resources/food.
type ConsumeAction struct {
	Action

	ActionAccessibilityRequirement interface{} `json:"actionAccessibilityRequirement,omitempty"`
	ExpectsAcceptanceOf            interface{} `json:"expectsAcceptanceOf,omitempty"`
}

// Web page type: Contact page.
type ContactPage struct {
	WebPage
}

// A contact point&#x2014;for example, a Customer Complaints department.
type ContactPoint struct {
	StructuredValue

	AreaServed        interface{} `json:"areaServed,omitempty"`
	AvailableLanguage interface{} `json:"availableLanguage,omitempty"`
	ContactOption     interface{} `json:"contactOption,omitempty"`
	ContactType       interface{} `json:"contactType,omitempty"`
	Email             interface{} `json:"email,omitempty"`
	FaxNumber         interface{} `json:"faxNumber,omitempty"`
	HoursAvailable    interface{} `json:"hoursAvailable,omitempty"`
	ProductSupported  interface{} `json:"productSupported,omitempty"`
	ServiceArea       interface{} `json:"serviceArea,omitempty"`
	Telephone         interface{} `json:"telephone,omitempty"`
}

// Enumerated options related to a ContactPoint.
type ContactPointOption struct {
	Enumeration
}

// One of the continents (for example, Europe or Africa).
type Continent struct {
	Landform
}

// An agent controls a device or application.
type ControlAction struct {
	Action
}

// A convenience store.
type ConvenienceStore struct {
	Store
}

// One or more messages between organizations or people on a particular topic. Individual messages can be linked to the conversation with isPartOf or hasPart properties.
type Conversation struct {
	CreativeWork
}

// The act of producing/preparing food.
type CookAction struct {
	CreateAction

	FoodEstablishment interface{} `json:"foodEstablishment,omitempty"`
	FoodEvent         interface{} `json:"foodEvent,omitempty"`
	Recipe            interface{} `json:"recipe,omitempty"`
}

// Organization: A business corporation.
type Corporation struct {
	Organization

	TickerSymbol interface{} `json:"tickerSymbol,omitempty"`
}

// A [[comment]] that corrects [[CreativeWork]].
type CorrectionComment struct {
	Comment
}

// A country.
type Country struct {
	AdministrativeArea
}

// A description of an educational course which may be offered as distinct instances at which take place at different times or take place at different locations, or be offered through different media or modes of study. An educational course is a sequence of one or more educational events and/or creative works which aims to build knowledge, competence or ability of learners.
type Course struct {
	CreativeWork
	// TODO: LearningResource

	CourseCode                    interface{} `json:"courseCode,omitempty"`
	CoursePrerequisites           interface{} `json:"coursePrerequisites,omitempty"`
	EducationalCredentialAwarded  interface{} `json:"educationalCredentialAwarded,omitempty"`
	HasCourseInstance             interface{} `json:"hasCourseInstance,omitempty"`
	NumberOfCredits               interface{} `json:"numberOfCredits,omitempty"`
	OccupationalCredentialAwarded interface{} `json:"occupationalCredentialAwarded,omitempty"`
}

// An instance of a [[Course]] which is distinct from other instances because it is offered at a different time or location or through different media or modes of study or to a specific section of students.
type CourseInstance struct {
	Event

	CourseMode     interface{} `json:"courseMode,omitempty"`
	CourseWorkload interface{} `json:"courseWorkload,omitempty"`
	Instructor     interface{} `json:"instructor,omitempty"`
}

// A courthouse.
type Courthouse struct {
	GovernmentBuilding
}

// The artwork on the outer surface of a CreativeWork.
type CoverArt struct {
	VisualArtwork
}

/*
A CovidTestingFacility is a [[MedicalClinic]] where testing for the COVID-19 Coronavirus
      disease is available. If the facility is being made available from an established [[Pharmacy]], [[Hotel]], or other
      non-medical organization, multiple types can be listed. This makes it easier to re-use existing schema.org information
      about that place e.g. contact info, address, opening hours. Note that in an emergency, such information may not always be reliable.

*/
type CovidTestingFacility struct {
	MedicalClinic
}

// The act of deliberately creating/producing/generating/building a result out of the agent.
type CreateAction struct {
	Action
}

// The most generic kind of creative work, including books, movies, photographs, software programs, etc.
type CreativeWork struct {
	Thing

	About                interface{} `json:"about,omitempty"`
	Abstract             interface{} `json:"abstract,omitempty"`
	AccessMode           interface{} `json:"accessMode,omitempty"`
	AccessModeSufficient interface{} `json:"accessModeSufficient,omitempty"`
	AccessibilityAPI     interface{} `json:"accessibilityAPI,omitempty"`
	AccessibilityControl interface{} `json:"accessibilityControl,omitempty"`
	AccessibilityFeature interface{} `json:"accessibilityFeature,omitempty"`
	AccessibilityHazard  interface{} `json:"accessibilityHazard,omitempty"`
	AccessibilitySummary interface{} `json:"accessibilitySummary,omitempty"`
	AccountablePerson    interface{} `json:"accountablePerson,omitempty"`
	AcquireLicensePage   interface{} `json:"acquireLicensePage,omitempty"`
	AggregateRating      interface{} `json:"aggregateRating,omitempty"`
	AlternativeHeadline  interface{} `json:"alternativeHeadline,omitempty"`
	ArchivedAt           interface{} `json:"archivedAt,omitempty"`
	Assesses             interface{} `json:"assesses,omitempty"`
	AssociatedMedia      interface{} `json:"associatedMedia,omitempty"`
	Audience             interface{} `json:"audience,omitempty"`
	Audio                interface{} `json:"audio,omitempty"`
	Author               interface{} `json:"author,omitempty"`
	Award                interface{} `json:"award,omitempty"`
	Awards               interface{} `json:"awards,omitempty"`
	Character            interface{} `json:"character,omitempty"`
	Citation             interface{} `json:"citation,omitempty"`
	Comment              interface{} `json:"comment,omitempty"`
	CommentCount         interface{} `json:"commentCount,omitempty"`
	ConditionsOfAccess   interface{} `json:"conditionsOfAccess,omitempty"`
	ContentLocation      interface{} `json:"contentLocation,omitempty"`
	ContentRating        interface{} `json:"contentRating,omitempty"`
	ContentReferenceTime interface{} `json:"contentReferenceTime,omitempty"`
	Contributor          interface{} `json:"contributor,omitempty"`
	CopyrightHolder      interface{} `json:"copyrightHolder,omitempty"`
	CopyrightNotice      interface{} `json:"copyrightNotice,omitempty"`
	CopyrightYear        interface{} `json:"copyrightYear,omitempty"`
	Correction           interface{} `json:"correction,omitempty"`
	CountryOfOrigin      interface{} `json:"countryOfOrigin,omitempty"`
	CreativeWorkStatus   interface{} `json:"creativeWorkStatus,omitempty"`
	Creator              interface{} `json:"creator,omitempty"`
	CreditText           interface{} `json:"creditText,omitempty"`
	DateCreated          interface{} `json:"dateCreated,omitempty"`
	DateModified         interface{} `json:"dateModified,omitempty"`
	DatePublished        interface{} `json:"datePublished,omitempty"`
	DiscussionUrl        interface{} `json:"discussionUrl,omitempty"`
	EditEIDR             interface{} `json:"editEIDR,omitempty"`
	Editor               interface{} `json:"editor,omitempty"`
	EducationalAlignment interface{} `json:"educationalAlignment,omitempty"`
	EducationalLevel     interface{} `json:"educationalLevel,omitempty"`
	EducationalUse       interface{} `json:"educationalUse,omitempty"`
	Encoding             interface{} `json:"encoding,omitempty"`
	EncodingFormat       interface{} `json:"encodingFormat,omitempty"`
	Encodings            interface{} `json:"encodings,omitempty"`
	ExampleOfWork        interface{} `json:"exampleOfWork,omitempty"`
	Expires              interface{} `json:"expires,omitempty"`
	FileFormat           interface{} `json:"fileFormat,omitempty"`
	Funder               interface{} `json:"funder,omitempty"`
	Funding              interface{} `json:"funding,omitempty"`
	Genre                interface{} `json:"genre,omitempty"`
	HasPart              interface{} `json:"hasPart,omitempty"`
	Headline             interface{} `json:"headline,omitempty"`
	InLanguage           interface{} `json:"inLanguage,omitempty"`
	InteractionStatistic interface{} `json:"interactionStatistic,omitempty"`
	InteractivityType    interface{} `json:"interactivityType,omitempty"`
	InterpretedAsClaim   interface{} `json:"interpretedAsClaim,omitempty"`
	IsAccessibleForFree  interface{} `json:"isAccessibleForFree,omitempty"`
	IsBasedOn            interface{} `json:"isBasedOn,omitempty"`
	IsBasedOnUrl         interface{} `json:"isBasedOnUrl,omitempty"`
	IsFamilyFriendly     interface{} `json:"isFamilyFriendly,omitempty"`
	IsPartOf             interface{} `json:"isPartOf,omitempty"`
	Keywords             interface{} `json:"keywords,omitempty"`
	LearningResourceType interface{} `json:"learningResourceType,omitempty"`
	License              interface{} `json:"license,omitempty"`
	LocationCreated      interface{} `json:"locationCreated,omitempty"`
	MainEntity           interface{} `json:"mainEntity,omitempty"`
	Maintainer           interface{} `json:"maintainer,omitempty"`
	Material             interface{} `json:"material,omitempty"`
	MaterialExtent       interface{} `json:"materialExtent,omitempty"`
	Mentions             interface{} `json:"mentions,omitempty"`
	Offers               interface{} `json:"offers,omitempty"`
	Pattern              interface{} `json:"pattern,omitempty"`
	Position             interface{} `json:"position,omitempty"`
	Producer             interface{} `json:"producer,omitempty"`
	Provider             interface{} `json:"provider,omitempty"`
	Publication          interface{} `json:"publication,omitempty"`
	Publisher            interface{} `json:"publisher,omitempty"`
	PublisherImprint     interface{} `json:"publisherImprint,omitempty"`
	PublishingPrinciples interface{} `json:"publishingPrinciples,omitempty"`
	RecordedAt           interface{} `json:"recordedAt,omitempty"`
	ReleasedEvent        interface{} `json:"releasedEvent,omitempty"`
	Review               interface{} `json:"review,omitempty"`
	Reviews              interface{} `json:"reviews,omitempty"`
	SchemaVersion        interface{} `json:"schemaVersion,omitempty"`
	SdDatePublished      interface{} `json:"sdDatePublished,omitempty"`
	SdLicense            interface{} `json:"sdLicense,omitempty"`
	SdPublisher          interface{} `json:"sdPublisher,omitempty"`
	Size                 interface{} `json:"size,omitempty"`
	SourceOrganization   interface{} `json:"sourceOrganization,omitempty"`
	Spatial              interface{} `json:"spatial,omitempty"`
	SpatialCoverage      interface{} `json:"spatialCoverage,omitempty"`
	Sponsor              interface{} `json:"sponsor,omitempty"`
	Teaches              interface{} `json:"teaches,omitempty"`
	Temporal             interface{} `json:"temporal,omitempty"`
	TemporalCoverage     interface{} `json:"temporalCoverage,omitempty"`
	Text                 interface{} `json:"text,omitempty"`
	ThumbnailUrl         interface{} `json:"thumbnailUrl,omitempty"`
	TimeRequired         interface{} `json:"timeRequired,omitempty"`
	TranslationOfWork    interface{} `json:"translationOfWork,omitempty"`
	Translator           interface{} `json:"translator,omitempty"`
	TypicalAgeRange      interface{} `json:"typicalAgeRange,omitempty"`
	UsageInfo            interface{} `json:"usageInfo,omitempty"`
	Version              interface{} `json:"version,omitempty"`
	Video                interface{} `json:"video,omitempty"`
	WorkExample          interface{} `json:"workExample,omitempty"`
	WorkTranslation      interface{} `json:"workTranslation,omitempty"`
}

// A media season e.g. tv, radio, video game etc.
type CreativeWorkSeason struct {
	CreativeWork

	Actor             interface{} `json:"actor,omitempty"`
	Director          interface{} `json:"director,omitempty"`
	EndDate           interface{} `json:"endDate,omitempty"`
	Episode           interface{} `json:"episode,omitempty"`
	Episodes          interface{} `json:"episodes,omitempty"`
	NumberOfEpisodes  interface{} `json:"numberOfEpisodes,omitempty"`
	PartOfSeries      interface{} `json:"partOfSeries,omitempty"`
	ProductionCompany interface{} `json:"productionCompany,omitempty"`
	SeasonNumber      interface{} `json:"seasonNumber,omitempty"`
	StartDate         interface{} `json:"startDate,omitempty"`
	Trailer           interface{} `json:"trailer,omitempty"`
}

/*
A CreativeWorkSeries in schema.org is a group of related items, typically but not necessarily of the same kind. CreativeWorkSeries are usually organized into some order, often chronological. Unlike [[ItemList]] which is a general purpose data structure for lists of things, the emphasis with CreativeWorkSeries is on published materials (written e.g. books and periodicals, or media such as tv, radio and games).\n\nSpecific subtypes are available for describing [[TVSeries]], [[RadioSeries]], [[MovieSeries]], [[BookSeries]], [[Periodical]] and [[VideoGameSeries]]. In each case, the [[hasPart]] / [[isPartOf]] properties can be used to relate the CreativeWorkSeries to its parts. The general CreativeWorkSeries type serves largely just to organize these more specific and practical subtypes.\n\nIt is common for properties applicable to an item from the series to be usefully applied to the containing group. Schema.org attempts to anticipate some of these cases, but publishers should be free to apply properties of the series parts to the series as a whole wherever they seem appropriate.

*/
type CreativeWorkSeries struct {
	CreativeWork
	// TODO: Series

	EndDate   interface{} `json:"endDate,omitempty"`
	Issn      interface{} `json:"issn,omitempty"`
	StartDate interface{} `json:"startDate,omitempty"`
}

/*
A card payment method of a particular brand or name.  Used to mark up a particular payment method and/or the financial product/service that supplies the card account.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#AmericanExpress\n* http://purl.org/goodrelations/v1#DinersClub\n* http://purl.org/goodrelations/v1#Discover\n* http://purl.org/goodrelations/v1#JCB\n* http://purl.org/goodrelations/v1#MasterCard\n* http://purl.org/goodrelations/v1#VISA

*/
type CreditCard struct {
	LoanOrCredit
	// TODO: PaymentCard
}

// A crematorium.
type Crematorium struct {
	CivicStructure
}

// A [[CriticReview]] is a more specialized form of Review written or published by a source that is recognized for its reviewing activities. These can include online columns, travel and food guides, TV and radio shows, blogs and other independent Web sites. [[CriticReview]]s are typically more in-depth and professionally written. For simpler, casually written user/visitor/viewer/customer reviews, it is more appropriate to use the [[UserReview]] type. Review aggregator sites such as Metacritic already separate out the site's user reviews from selected critic reviews that originate from third-party sources.
type CriticReview struct {
	Review
}

// Text representing a CSS selector.
type CssSelectorType struct {
	Text
}

// A service to convert funds from one currency to another currency.
type CurrencyConversionService struct {
	FinancialProduct
}

// An alternative, closely-related condition typically considered later in the differential diagnosis process along with the signs that are used to distinguish it.
type DDxElement struct {
	MedicalIntangible

	Diagnosis          interface{} `json:"diagnosis,omitempty"`
	DistinguishingSign interface{} `json:"distinguishingSign,omitempty"`
}

// Event type: A social dance.
type DanceEvent struct {
	Event
}

// A dance group&#x2014;for example, the Alvin Ailey Dance Theater or Riverdance.
type DanceGroup struct {
	PerformingGroup
}

// A collection of datasets.
type DataCatalog struct {
	CreativeWork

	Dataset              interface{} `json:"dataset,omitempty"`
	MeasurementTechnique interface{} `json:"measurementTechnique,omitempty"`
}

// A dataset in downloadable form.
type DataDownload struct {
	MediaObject

	MeasurementTechnique interface{} `json:"measurementTechnique,omitempty"`
}

// A single feed providing structured information about one or more entities or topics.
type DataFeed struct {
	Dataset

	DataFeedElement interface{} `json:"dataFeedElement,omitempty"`
}

// A single item within a larger data feed.
type DataFeedItem struct {
	Intangible

	DateCreated  interface{} `json:"dateCreated,omitempty"`
	DateDeleted  interface{} `json:"dateDeleted,omitempty"`
	DateModified interface{} `json:"dateModified,omitempty"`
	Item         interface{} `json:"item,omitempty"`
}

// The basic data types such as Integers, Strings, etc.
type DataType struct{}

// A body of structured information describing some topic(s) of interest.
type Dataset struct {
	CreativeWork

	Catalog               interface{} `json:"catalog,omitempty"`
	DatasetTimeInterval   interface{} `json:"datasetTimeInterval,omitempty"`
	Distribution          interface{} `json:"distribution,omitempty"`
	IncludedDataCatalog   interface{} `json:"includedDataCatalog,omitempty"`
	IncludedInDataCatalog interface{} `json:"includedInDataCatalog,omitempty"`
	Issn                  interface{} `json:"issn,omitempty"`
	MeasurementTechnique  interface{} `json:"measurementTechnique,omitempty"`
	VariableMeasured      interface{} `json:"variableMeasured,omitempty"`
}

// A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
type Date struct{}

// A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
type DateTime struct{}

// A DatedMoneySpecification represents monetary values with optional start and end dates. For example, this could represent an employee's salary over a specific period of time. __Note:__ This type has been superseded by [[MonetaryAmount]] use of that type is recommended
type DatedMoneySpecification struct {
	StructuredValue

	Amount    interface{} `json:"amount,omitempty"`
	Currency  interface{} `json:"currency,omitempty"`
	EndDate   interface{} `json:"endDate,omitempty"`
	StartDate interface{} `json:"startDate,omitempty"`
}

/*
The day of the week, e.g. used to specify to which day the opening hours of an OpeningHoursSpecification refer.

Originally, URLs from [GoodRelations](http://purl.org/goodrelations/v1) were used (for [[Monday]], [[Tuesday]], [[Wednesday]], [[Thursday]], [[Friday]], [[Saturday]], [[Sunday]] plus a special entry for [[PublicHolidays]]); these have now been integrated directly into schema.org.

*/
type DayOfWeek struct {
	Enumeration
}

// A day spa.
type DaySpa struct {
	HealthAndBeautyBusiness
}

// The act of stopping or deactivating a device or application (e.g. stopping a timer or turning off a flashlight).
type DeactivateAction struct {
	ControlAction
}

// A defence establishment, such as an army or navy base.
type DefenceEstablishment struct {
	GovernmentBuilding
}

/*
A DefinedRegion is a geographic area defined by potentially arbitrary (rather than political, administrative or natural geographical) criteria. Properties are provided for defining a region by reference to sets of postal codes.

Examples: a delivery destination when shopping. Region where regional pricing is configured.

Requirement 1:
Country: US
States: "NY", "CA"

Requirement 2:
Country: US
PostalCode Set: { [94000-94585], [97000, 97999], [13000, 13599]}
{ [12345, 12345], [78945, 78945], }
Region = state, canton, prefecture, autonomous community...
*/
type DefinedRegion struct {
	StructuredValue

	AddressCountry   interface{} `json:"addressCountry,omitempty"`
	AddressRegion    interface{} `json:"addressRegion,omitempty"`
	PostalCode       interface{} `json:"postalCode,omitempty"`
	PostalCodePrefix interface{} `json:"postalCodePrefix,omitempty"`
	PostalCodeRange  interface{} `json:"postalCodeRange,omitempty"`
}

// A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
type DefinedTerm struct {
	Intangible

	InDefinedTermSet interface{} `json:"inDefinedTermSet,omitempty"`
	TermCode         interface{} `json:"termCode,omitempty"`
}

// A set of defined terms for example a set of categories or a classification scheme, a glossary, dictionary or enumeration.
type DefinedTermSet struct {
	CreativeWork

	HasDefinedTerm interface{} `json:"hasDefinedTerm,omitempty"`
}

// The act of editing a recipient by removing one of its objects.
type DeleteAction struct {
	UpdateAction
}

// The price for the delivery of an offer using a particular delivery method.
type DeliveryChargeSpecification struct {
	PriceSpecification

	AppliesToDeliveryMethod interface{} `json:"appliesToDeliveryMethod,omitempty"`
	AreaServed              interface{} `json:"areaServed,omitempty"`
	EligibleRegion          interface{} `json:"eligibleRegion,omitempty"`
	IneligibleRegion        interface{} `json:"ineligibleRegion,omitempty"`
}

// An event involving the delivery of an item.
type DeliveryEvent struct {
	Event

	AccessCode        interface{} `json:"accessCode,omitempty"`
	AvailableFrom     interface{} `json:"availableFrom,omitempty"`
	AvailableThrough  interface{} `json:"availableThrough,omitempty"`
	HasDeliveryMethod interface{} `json:"hasDeliveryMethod,omitempty"`
}

/*
A delivery method is a standardized procedure for transferring the product or service to the destination of fulfillment chosen by the customer. Delivery methods are characterized by the means of transportation used, and by the organization or group that is the contracting party for the sending organization or person.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#DeliveryModeDirectDownload\n* http://purl.org/goodrelations/v1#DeliveryModeFreight\n* http://purl.org/goodrelations/v1#DeliveryModeMail\n* http://purl.org/goodrelations/v1#DeliveryModeOwnFleet\n* http://purl.org/goodrelations/v1#DeliveryModePickUp\n* http://purl.org/goodrelations/v1#DHL\n* http://purl.org/goodrelations/v1#FederalExpress\n* http://purl.org/goodrelations/v1#UPS

*/
type DeliveryMethod struct {
	Enumeration
}

// A DeliveryTimeSettings represents re-usable pieces of shipping information, relating to timing. It is designed for publication on an URL that may be referenced via the [[shippingSettingsLink]] property of a [[OfferShippingDetails]]. Several occurrences can be published, distinguished (and identified/referenced) by their different values for [[transitTimeLabel]].
type DeliveryTimeSettings struct {
	StructuredValue

	DeliveryTime         interface{} `json:"deliveryTime,omitempty"`
	IsUnlabelledFallback interface{} `json:"isUnlabelledFallback,omitempty"`
	ShippingDestination  interface{} `json:"shippingDestination,omitempty"`
	TransitTimeLabel     interface{} `json:"transitTimeLabel,omitempty"`
}

// A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
type Demand struct {
	Intangible

	AcceptedPaymentMethod     interface{} `json:"acceptedPaymentMethod,omitempty"`
	AdvanceBookingRequirement interface{} `json:"advanceBookingRequirement,omitempty"`
	AreaServed                interface{} `json:"areaServed,omitempty"`
	Availability              interface{} `json:"availability,omitempty"`
	AvailabilityEnds          interface{} `json:"availabilityEnds,omitempty"`
	AvailabilityStarts        interface{} `json:"availabilityStarts,omitempty"`
	AvailableAtOrFrom         interface{} `json:"availableAtOrFrom,omitempty"`
	AvailableDeliveryMethod   interface{} `json:"availableDeliveryMethod,omitempty"`
	BusinessFunction          interface{} `json:"businessFunction,omitempty"`
	DeliveryLeadTime          interface{} `json:"deliveryLeadTime,omitempty"`
	EligibleCustomerType      interface{} `json:"eligibleCustomerType,omitempty"`
	EligibleDuration          interface{} `json:"eligibleDuration,omitempty"`
	EligibleQuantity          interface{} `json:"eligibleQuantity,omitempty"`
	EligibleRegion            interface{} `json:"eligibleRegion,omitempty"`
	EligibleTransactionVolume interface{} `json:"eligibleTransactionVolume,omitempty"`
	Gtin                      interface{} `json:"gtin,omitempty"`
	Gtin12                    interface{} `json:"gtin12,omitempty"`
	Gtin13                    interface{} `json:"gtin13,omitempty"`
	Gtin14                    interface{} `json:"gtin14,omitempty"`
	Gtin8                     interface{} `json:"gtin8,omitempty"`
	IncludesObject            interface{} `json:"includesObject,omitempty"`
	IneligibleRegion          interface{} `json:"ineligibleRegion,omitempty"`
	InventoryLevel            interface{} `json:"inventoryLevel,omitempty"`
	ItemCondition             interface{} `json:"itemCondition,omitempty"`
	ItemOffered               interface{} `json:"itemOffered,omitempty"`
	Mpn                       interface{} `json:"mpn,omitempty"`
	PriceSpecification        interface{} `json:"priceSpecification,omitempty"`
	Seller                    interface{} `json:"seller,omitempty"`
	SerialNumber              interface{} `json:"serialNumber,omitempty"`
	Sku                       interface{} `json:"sku,omitempty"`
	ValidFrom                 interface{} `json:"validFrom,omitempty"`
	ValidThrough              interface{} `json:"validThrough,omitempty"`
	Warranty                  interface{} `json:"warranty,omitempty"`
}

// A dentist.
type Dentist struct {
	LocalBusiness
	// TODO: MedicalBusiness
	// TODO: MedicalOrganization
}

// The act of  departing from a place. An agent departs from an fromLocation for a destination, optionally with participants.
type DepartAction struct {
	MoveAction
}

// A department store.
type DepartmentStore struct {
	Store
}

// A type of Bank Account with a main purpose of depositing funds to gain interest or other benefits.
type DepositAccount struct {
	BankAccount
	// TODO: InvestmentOrDeposit
}

// A medical laboratory that offers on-site or off-site diagnostic services.
type DiagnosticLab struct {
	MedicalOrganization

	AvailableTest interface{} `json:"availableTest,omitempty"`
}

// A medical procedure intended primarily for diagnostic, as opposed to therapeutic, purposes.
type DiagnosticProcedure struct {
	MedicalProcedure
}

// A strategy of regulating the intake of food to achieve or maintain a specific health-related goal.
type Diet struct {
	CreativeWork
	// TODO: LifestyleModification

	DietFeatures          interface{} `json:"dietFeatures,omitempty"`
	Endorsers             interface{} `json:"endorsers,omitempty"`
	ExpertConsiderations  interface{} `json:"expertConsiderations,omitempty"`
	PhysiologicalBenefits interface{} `json:"physiologicalBenefits,omitempty"`
	Risks                 interface{} `json:"risks,omitempty"`
}

// A product taken by mouth that contains a dietary ingredient intended to supplement the diet. Dietary ingredients may include vitamins, minerals, herbs or other botanicals, amino acids, and substances such as enzymes, organ tissues, glandulars and metabolites.
type DietarySupplement struct {
	Substance

	ActiveIngredient    interface{} `json:"activeIngredient,omitempty"`
	IsProprietary       interface{} `json:"isProprietary,omitempty"`
	LegalStatus         interface{} `json:"legalStatus,omitempty"`
	Manufacturer        interface{} `json:"manufacturer,omitempty"`
	MaximumIntake       interface{} `json:"maximumIntake,omitempty"`
	MechanismOfAction   interface{} `json:"mechanismOfAction,omitempty"`
	NonProprietaryName  interface{} `json:"nonProprietaryName,omitempty"`
	ProprietaryName     interface{} `json:"proprietaryName,omitempty"`
	RecommendedIntake   interface{} `json:"recommendedIntake,omitempty"`
	SafetyConsideration interface{} `json:"safetyConsideration,omitempty"`
	TargetPopulation    interface{} `json:"targetPopulation,omitempty"`
}

// An electronic file or document.
type DigitalDocument struct {
	CreativeWork

	HasDigitalDocumentPermission interface{} `json:"hasDigitalDocumentPermission,omitempty"`
}

// A permission for a particular person or group to access a particular file.
type DigitalDocumentPermission struct {
	Intangible

	Grantee        interface{} `json:"grantee,omitempty"`
	PermissionType interface{} `json:"permissionType,omitempty"`
}

// A type of permission which can be granted for accessing a digital document.
type DigitalDocumentPermissionType struct {
	Enumeration
}

// Enumerates some common technology platforms, for use with properties such as [[actionPlatform]]. It is not supposed to be comprehensive - when a suitable code is not enumerated here, textual or URL values can be used instead. These codes are at a fairly high level and do not deal with versioning and other nuance. Additional codes can be suggested [in github](https://github.com/schemaorg/schemaorg/issues/3057).
type DigitalPlatformEnumeration struct {
	Enumeration
}

// The act of expressing a difference of opinion with the object. An agent disagrees to/about an object (a proposition, topic or theme) with participants.
type DisagreeAction struct {
	ReactAction
}

// The act of discovering/finding an object.
type DiscoverAction struct {
	FindAction
}

// A posting to a discussion forum.
type DiscussionForumPosting struct {
	SocialMediaPosting
}

// The act of expressing a negative sentiment about the object. An agent dislikes an object (a proposition, topic or theme) with participants.
type DislikeAction struct {
	ReactAction
}

// Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
type Distance struct {
	Quantity
}

// A distillery.
type Distillery struct {
	FoodEstablishment
}

// The act of providing goods, services, or money without compensation, often for philanthropic reasons.
type DonateAction struct {
	TradeAction

	Recipient interface{} `json:"recipient,omitempty"`
}

// A specific dosing schedule for a drug or supplement.
type DoseSchedule struct {
	MedicalIntangible

	DoseUnit         interface{} `json:"doseUnit,omitempty"`
	DoseValue        interface{} `json:"doseValue,omitempty"`
	Frequency        interface{} `json:"frequency,omitempty"`
	TargetPopulation interface{} `json:"targetPopulation,omitempty"`
}

// The act of downloading an object.
type DownloadAction struct {
	TransferAction
}

// The act of producing a visual/graphical representation of an object, typically with a pen/pencil and paper as instruments.
type DrawAction struct {
	CreateAction
}

// A picture or diagram made with a pencil, pen, or crayon rather than paint.
type Drawing struct {
	CreativeWork
}

// The act of swallowing liquids.
type DrinkAction struct {
	ConsumeAction
}

// A value indicating which roadwheels will receive torque.
type DriveWheelConfigurationValue struct {
	QualitativeValue
}

// A chemical or biologic substance, used as a medical therapy, that has a physiological effect on an organism. Here the term drug is used interchangeably with the term medicine although clinical knowledge make a clear difference between them.
type Drug struct {
	Substance

	ActiveIngredient              interface{} `json:"activeIngredient,omitempty"`
	AdministrationRoute           interface{} `json:"administrationRoute,omitempty"`
	AlcoholWarning                interface{} `json:"alcoholWarning,omitempty"`
	AvailableStrength             interface{} `json:"availableStrength,omitempty"`
	BreastfeedingWarning          interface{} `json:"breastfeedingWarning,omitempty"`
	ClincalPharmacology           interface{} `json:"clincalPharmacology,omitempty"`
	ClinicalPharmacology          interface{} `json:"clinicalPharmacology,omitempty"`
	DosageForm                    interface{} `json:"dosageForm,omitempty"`
	DoseSchedule                  interface{} `json:"doseSchedule,omitempty"`
	DrugClass                     interface{} `json:"drugClass,omitempty"`
	DrugUnit                      interface{} `json:"drugUnit,omitempty"`
	FoodWarning                   interface{} `json:"foodWarning,omitempty"`
	IncludedInHealthInsurancePlan interface{} `json:"includedInHealthInsurancePlan,omitempty"`
	InteractingDrug               interface{} `json:"interactingDrug,omitempty"`
	IsAvailableGenerically        interface{} `json:"isAvailableGenerically,omitempty"`
	IsProprietary                 interface{} `json:"isProprietary,omitempty"`
	LabelDetails                  interface{} `json:"labelDetails,omitempty"`
	LegalStatus                   interface{} `json:"legalStatus,omitempty"`
	Manufacturer                  interface{} `json:"manufacturer,omitempty"`
	MaximumIntake                 interface{} `json:"maximumIntake,omitempty"`
	MechanismOfAction             interface{} `json:"mechanismOfAction,omitempty"`
	NonProprietaryName            interface{} `json:"nonProprietaryName,omitempty"`
	Overdosage                    interface{} `json:"overdosage,omitempty"`
	PregnancyCategory             interface{} `json:"pregnancyCategory,omitempty"`
	PregnancyWarning              interface{} `json:"pregnancyWarning,omitempty"`
	PrescribingInfo               interface{} `json:"prescribingInfo,omitempty"`
	PrescriptionStatus            interface{} `json:"prescriptionStatus,omitempty"`
	ProprietaryName               interface{} `json:"proprietaryName,omitempty"`
	RelatedDrug                   interface{} `json:"relatedDrug,omitempty"`
	Rxcui                         interface{} `json:"rxcui,omitempty"`
	Warning                       interface{} `json:"warning,omitempty"`
}

// A class of medical drugs, e.g., statins. Classes can represent general pharmacological class, common mechanisms of action, common physiological effects, etc.
type DrugClass struct {
	MedicalEntity

	Drug interface{} `json:"drug,omitempty"`
}

// The cost per unit of a medical drug. Note that this type is not meant to represent the price in an offer of a drug for sale; see the Offer type for that. This type will typically be used to tag wholesale or average retail cost of a drug, or maximum reimbursable cost. Costs of medical drugs vary widely depending on how and where they are paid for, so while this type captures some of the variables, costs should be used with caution by consumers of this schema's markup.
type DrugCost struct {
	MedicalEntity

	ApplicableLocation interface{} `json:"applicableLocation,omitempty"`
	CostCategory       interface{} `json:"costCategory,omitempty"`
	CostCurrency       interface{} `json:"costCurrency,omitempty"`
	CostOrigin         interface{} `json:"costOrigin,omitempty"`
	CostPerUnit        interface{} `json:"costPerUnit,omitempty"`
	DrugUnit           interface{} `json:"drugUnit,omitempty"`
}

// Enumerated categories of medical drug costs.
type DrugCostCategory struct {
	MedicalEnumeration
}

// The legal availability status of a medical drug.
type DrugLegalStatus struct {
	MedicalIntangible

	ApplicableLocation interface{} `json:"applicableLocation,omitempty"`
}

// Categories that represent an assessment of the risk of fetal injury due to a drug or pharmaceutical used as directed by the mother during pregnancy.
type DrugPregnancyCategory struct {
	MedicalEnumeration
}

// Indicates whether this drug is available by prescription or over-the-counter.
type DrugPrescriptionStatus struct {
	MedicalEnumeration
}

// A specific strength in which a medical drug is available in a specific country.
type DrugStrength struct {
	MedicalIntangible

	ActiveIngredient interface{} `json:"activeIngredient,omitempty"`
	AvailableIn      interface{} `json:"availableIn,omitempty"`
	MaximumIntake    interface{} `json:"maximumIntake,omitempty"`
	StrengthUnit     interface{} `json:"strengthUnit,omitempty"`
	StrengthValue    interface{} `json:"strengthValue,omitempty"`
}

// A dry-cleaning business.
type DryCleaningOrLaundry struct {
	LocalBusiness
}

// Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
type Duration struct {
	Quantity
}

// Enumerates the EU energy efficiency classes A-G as well as A+, A++, and A+++ as defined in EU directive 2017/1369.
type EUEnergyEfficiencyEnumeration struct {
	EnergyEfficiencyEnumeration
}

// The act of swallowing solid objects.
type EatAction struct {
	ConsumeAction
}

// Event type: Education event.
type EducationEvent struct {
	Event

	Assesses         interface{} `json:"assesses,omitempty"`
	EducationalLevel interface{} `json:"educationalLevel,omitempty"`
	Teaches          interface{} `json:"teaches,omitempty"`
}

// An EducationalAudience.
type EducationalAudience struct {
	Audience

	EducationalRole interface{} `json:"educationalRole,omitempty"`
}

// An educational or occupational credential. A diploma, academic degree, certification, qualification, badge, etc., that may be awarded to a person or other entity that meets the requirements defined by the credentialer.
type EducationalOccupationalCredential struct {
	CreativeWork

	CompetencyRequired interface{} `json:"competencyRequired,omitempty"`
	CredentialCategory interface{} `json:"credentialCategory,omitempty"`
	EducationalLevel   interface{} `json:"educationalLevel,omitempty"`
	RecognizedBy       interface{} `json:"recognizedBy,omitempty"`
	ValidFor           interface{} `json:"validFor,omitempty"`
	ValidIn            interface{} `json:"validIn,omitempty"`
}

// A program offered by an institution which determines the learning progress to achieve an outcome, usually a credential like a degree or certificate. This would define a discrete set of opportunities (e.g., job, courses) that together constitute a program with a clear start, end, set of requirements, and transition to a new occupational opportunity (e.g., a job), or sometimes a higher educational opportunity (e.g., an advanced degree).
type EducationalOccupationalProgram struct {
	Intangible

	ApplicationDeadline           interface{} `json:"applicationDeadline,omitempty"`
	ApplicationStartDate          interface{} `json:"applicationStartDate,omitempty"`
	DayOfWeek                     interface{} `json:"dayOfWeek,omitempty"`
	EducationalCredentialAwarded  interface{} `json:"educationalCredentialAwarded,omitempty"`
	EducationalProgramMode        interface{} `json:"educationalProgramMode,omitempty"`
	EndDate                       interface{} `json:"endDate,omitempty"`
	FinancialAidEligible          interface{} `json:"financialAidEligible,omitempty"`
	HasCourse                     interface{} `json:"hasCourse,omitempty"`
	MaximumEnrollment             interface{} `json:"maximumEnrollment,omitempty"`
	NumberOfCredits               interface{} `json:"numberOfCredits,omitempty"`
	OccupationalCategory          interface{} `json:"occupationalCategory,omitempty"`
	OccupationalCredentialAwarded interface{} `json:"occupationalCredentialAwarded,omitempty"`
	Offers                        interface{} `json:"offers,omitempty"`
	ProgramPrerequisites          interface{} `json:"programPrerequisites,omitempty"`
	ProgramType                   interface{} `json:"programType,omitempty"`
	Provider                      interface{} `json:"provider,omitempty"`
	SalaryUponCompletion          interface{} `json:"salaryUponCompletion,omitempty"`
	StartDate                     interface{} `json:"startDate,omitempty"`
	TermDuration                  interface{} `json:"termDuration,omitempty"`
	TermsPerYear                  interface{} `json:"termsPerYear,omitempty"`
	TimeOfDay                     interface{} `json:"timeOfDay,omitempty"`
	TimeToComplete                interface{} `json:"timeToComplete,omitempty"`
	TrainingSalary                interface{} `json:"trainingSalary,omitempty"`
	TypicalCreditsPerTerm         interface{} `json:"typicalCreditsPerTerm,omitempty"`
}

// An educational organization.
type EducationalOrganization struct {
	CivicStructure
	// TODO: Organization

	Alumni interface{} `json:"alumni,omitempty"`
}

// An electrician.
type Electrician struct {
	HomeAndConstructionBusiness
}

// An electronics store.
type ElectronicsStore struct {
	Store
}

// An elementary school.
type ElementarySchool struct {
	EducationalOrganization
}

// An email message.
type EmailMessage struct {
	Message
}

// An embassy.
type Embassy struct {
	GovernmentBuilding
}

// An emergency service, such as a fire station or ER.
type EmergencyService struct {
	LocalBusiness
}

// A subclass of OrganizationRole used to describe employee relationships.
type EmployeeRole struct {
	OrganizationRole

	BaseSalary     interface{} `json:"baseSalary,omitempty"`
	SalaryCurrency interface{} `json:"salaryCurrency,omitempty"`
}

// An aggregate rating of an Organization related to its role as an employer.
type EmployerAggregateRating struct {
	AggregateRating
}

// An [[EmployerReview]] is a review of an [[Organization]] regarding its role as an employer, written by a current or former employee of that organization.
type EmployerReview struct {
	Review
}

// An employment agency.
type EmploymentAgency struct {
	LocalBusiness
}

// An agent approves/certifies/likes/supports/sanction an object.
type EndorseAction struct {
	ReactAction

	Endorsee interface{} `json:"endorsee,omitempty"`
}

/*
An EndorsementRating is a rating that expresses some level of endorsement, for example inclusion in a "critic's pick" blog, a
"Like" or "+1" on a social network. It can be considered the [[result]] of an [[EndorseAction]] in which the [[object]] of the action is rated positively by
some [[agent]]. As is common elsewhere in schema.org, it is sometimes more useful to describe the results of such an action without explicitly describing the [[Action]].

An [[EndorsementRating]] may be part of a numeric scale or organized system, but this is not required: having an explicit type for indicating a positive,
endorsement rating is particularly useful in the absence of numeric scales as it helps consumers understand that the rating is broadly positive.
*/
type EndorsementRating struct {
	Rating
}

// Properties that take Energy as values are of the form '&lt;Number&gt; &lt;Energy unit of measure&gt;'.
type Energy struct {
	Quantity
}

// EnergyConsumptionDetails represents information related to the energy efficiency of a product that consumes energy. The information that can be provided is based on international regulations such as for example [EU directive 2017/1369](https://eur-lex.europa.eu/eli/reg/2017/1369/oj) for energy labeling and the [Energy labeling rule](https://www.ftc.gov/enforcement/rules/rulemaking-regulatory-reform-proceedings/energy-water-use-labeling-consumer) under the Energy Policy and Conservation Act (EPCA) in the US.
type EnergyConsumptionDetails struct {
	Intangible

	EnergyEfficiencyScaleMax    interface{} `json:"energyEfficiencyScaleMax,omitempty"`
	EnergyEfficiencyScaleMin    interface{} `json:"energyEfficiencyScaleMin,omitempty"`
	HasEnergyEfficiencyCategory interface{} `json:"hasEnergyEfficiencyCategory,omitempty"`
}

// Enumerates energy efficiency levels (also known as "classes" or "ratings") and certifications that are part of several international energy efficiency standards.
type EnergyEfficiencyEnumeration struct {
	Enumeration
}

// Used to indicate whether a product is EnergyStar certified.
type EnergyStarEnergyEfficiencyEnumeration struct {
	EnergyEfficiencyEnumeration
}

// Information about the engine of the vehicle. A vehicle can have multiple engines represented by multiple engine specification entities.
type EngineSpecification struct {
	StructuredValue

	EngineDisplacement interface{} `json:"engineDisplacement,omitempty"`
	EnginePower        interface{} `json:"enginePower,omitempty"`
	EngineType         interface{} `json:"engineType,omitempty"`
	FuelType           interface{} `json:"fuelType,omitempty"`
	Torque             interface{} `json:"torque,omitempty"`
}

// A business providing entertainment.
type EntertainmentBusiness struct {
	LocalBusiness
}

// An entry point, within some Web-based protocol.
type EntryPoint struct {
	Intangible

	ActionApplication interface{} `json:"actionApplication,omitempty"`
	ActionPlatform    interface{} `json:"actionPlatform,omitempty"`
	Application       interface{} `json:"application,omitempty"`
	ContentType       interface{} `json:"contentType,omitempty"`
	EncodingType      interface{} `json:"encodingType,omitempty"`
	HttpMethod        interface{} `json:"httpMethod,omitempty"`
	UrlTemplate       interface{} `json:"urlTemplate,omitempty"`
}

// Lists or enumerations—for example, a list of cuisines or music genres, etc.
type Enumeration struct {
	Intangible

	SupersededBy interface{} `json:"supersededBy,omitempty"`
}

// A media episode (e.g. TV, radio, video game) which can be part of a series or season.
type Episode struct {
	CreativeWork

	Actor             interface{} `json:"actor,omitempty"`
	Actors            interface{} `json:"actors,omitempty"`
	Director          interface{} `json:"director,omitempty"`
	Directors         interface{} `json:"directors,omitempty"`
	Duration          interface{} `json:"duration,omitempty"`
	EpisodeNumber     interface{} `json:"episodeNumber,omitempty"`
	MusicBy           interface{} `json:"musicBy,omitempty"`
	PartOfSeason      interface{} `json:"partOfSeason,omitempty"`
	PartOfSeries      interface{} `json:"partOfSeries,omitempty"`
	ProductionCompany interface{} `json:"productionCompany,omitempty"`
	Trailer           interface{} `json:"trailer,omitempty"`
}

// An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
type Event struct {
	Thing

	About                           interface{} `json:"about,omitempty"`
	Actor                           interface{} `json:"actor,omitempty"`
	AggregateRating                 interface{} `json:"aggregateRating,omitempty"`
	Attendee                        interface{} `json:"attendee,omitempty"`
	Attendees                       interface{} `json:"attendees,omitempty"`
	Audience                        interface{} `json:"audience,omitempty"`
	Composer                        interface{} `json:"composer,omitempty"`
	Contributor                     interface{} `json:"contributor,omitempty"`
	Director                        interface{} `json:"director,omitempty"`
	DoorTime                        interface{} `json:"doorTime,omitempty"`
	Duration                        interface{} `json:"duration,omitempty"`
	EndDate                         interface{} `json:"endDate,omitempty"`
	EventAttendanceMode             interface{} `json:"eventAttendanceMode,omitempty"`
	EventSchedule                   interface{} `json:"eventSchedule,omitempty"`
	EventStatus                     interface{} `json:"eventStatus,omitempty"`
	Funder                          interface{} `json:"funder,omitempty"`
	Funding                         interface{} `json:"funding,omitempty"`
	InLanguage                      interface{} `json:"inLanguage,omitempty"`
	IsAccessibleForFree             interface{} `json:"isAccessibleForFree,omitempty"`
	Keywords                        interface{} `json:"keywords,omitempty"`
	Location                        interface{} `json:"location,omitempty"`
	MaximumAttendeeCapacity         interface{} `json:"maximumAttendeeCapacity,omitempty"`
	MaximumPhysicalAttendeeCapacity interface{} `json:"maximumPhysicalAttendeeCapacity,omitempty"`
	MaximumVirtualAttendeeCapacity  interface{} `json:"maximumVirtualAttendeeCapacity,omitempty"`
	Offers                          interface{} `json:"offers,omitempty"`
	Organizer                       interface{} `json:"organizer,omitempty"`
	Performer                       interface{} `json:"performer,omitempty"`
	Performers                      interface{} `json:"performers,omitempty"`
	PreviousStartDate               interface{} `json:"previousStartDate,omitempty"`
	RecordedIn                      interface{} `json:"recordedIn,omitempty"`
	RemainingAttendeeCapacity       interface{} `json:"remainingAttendeeCapacity,omitempty"`
	Review                          interface{} `json:"review,omitempty"`
	Sponsor                         interface{} `json:"sponsor,omitempty"`
	StartDate                       interface{} `json:"startDate,omitempty"`
	SubEvent                        interface{} `json:"subEvent,omitempty"`
	SubEvents                       interface{} `json:"subEvents,omitempty"`
	SuperEvent                      interface{} `json:"superEvent,omitempty"`
	Translator                      interface{} `json:"translator,omitempty"`
	TypicalAgeRange                 interface{} `json:"typicalAgeRange,omitempty"`
	WorkFeatured                    interface{} `json:"workFeatured,omitempty"`
	WorkPerformed                   interface{} `json:"workPerformed,omitempty"`
}

// An EventAttendanceModeEnumeration value is one of potentially several modes of organising an event, relating to whether it is online or offline.
type EventAttendanceModeEnumeration struct {
	Enumeration
}

// A reservation for an event like a concert, sporting event, or lecture.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
type EventReservation struct {
	Reservation
}

/*
A series of [[Event]]s. Included events can relate with the series using the [[superEvent]] property.

An EventSeries is a collection of events that share some unifying characteristic. For example, "The Olympic Games" is a series, which
is repeated regularly. The "2012 London Olympics" can be presented both as an [[Event]] in the series "Olympic Games", and as an
[[EventSeries]] that included a number of sporting competitions as Events.

The nature of the association between the events in an [[EventSeries]] can vary, but typical examples could
include a thematic event series (e.g. topical meetups or classes), or a series of regular events that share a location, attendee group and/or organizers.

EventSeries has been defined as a kind of Event to make it easy for publishers to use it in an Event context without
worrying about which kinds of series are really event-like enough to call an Event. In general an EventSeries
may seem more Event-like when the period of time is compact and when aspects such as location are fixed, but
it may also sometimes prove useful to describe a longer-term series as an Event.

*/
type EventSeries struct {
	Event
	// TODO: Series
}

// EventStatusType is an enumeration type whose instances represent several states that an Event may be in.
type EventStatusType struct {
	StatusEnumeration
}

// An event venue.
type EventVenue struct {
	CivicStructure
}

// A structured value representing exchange rate.
type ExchangeRateSpecification struct {
	StructuredValue

	Currency            interface{} `json:"currency,omitempty"`
	CurrentExchangeRate interface{} `json:"currentExchangeRate,omitempty"`
	ExchangeRateSpread  interface{} `json:"exchangeRateSpread,omitempty"`
}

// The act of participating in exertive activity for the purposes of improving health and fitness.
type ExerciseAction struct {
	PlayAction

	Course                 interface{} `json:"course,omitempty"`
	Diet                   interface{} `json:"diet,omitempty"`
	Distance               interface{} `json:"distance,omitempty"`
	ExerciseCourse         interface{} `json:"exerciseCourse,omitempty"`
	ExercisePlan           interface{} `json:"exercisePlan,omitempty"`
	ExerciseRelatedDiet    interface{} `json:"exerciseRelatedDiet,omitempty"`
	ExerciseType           interface{} `json:"exerciseType,omitempty"`
	FromLocation           interface{} `json:"fromLocation,omitempty"`
	Opponent               interface{} `json:"opponent,omitempty"`
	SportsActivityLocation interface{} `json:"sportsActivityLocation,omitempty"`
	SportsEvent            interface{} `json:"sportsEvent,omitempty"`
	SportsTeam             interface{} `json:"sportsTeam,omitempty"`
	ToLocation             interface{} `json:"toLocation,omitempty"`
}

// A gym.
type ExerciseGym struct {
	SportsActivityLocation
}

// Fitness-related activity designed for a specific health-related purpose, including defined exercise routines as well as activity prescribed by a clinician.
type ExercisePlan struct {
	CreativeWork
	// TODO: PhysicalActivity

	ActivityDuration   interface{} `json:"activityDuration,omitempty"`
	ActivityFrequency  interface{} `json:"activityFrequency,omitempty"`
	AdditionalVariable interface{} `json:"additionalVariable,omitempty"`
	ExerciseType       interface{} `json:"exerciseType,omitempty"`
	Intensity          interface{} `json:"intensity,omitempty"`
	Repetitions        interface{} `json:"repetitions,omitempty"`
	RestPeriods        interface{} `json:"restPeriods,omitempty"`
	Workload           interface{} `json:"workload,omitempty"`
}

// Event type: Exhibition event, e.g. at a museum, library, archive, tradeshow, ...
type ExhibitionEvent struct {
	Event
}

// A [[FAQPage]] is a [[WebPage]] presenting one or more "[Frequently asked questions](https://en.wikipedia.org/wiki/FAQ)" (see also [[QAPage]]).
type FAQPage struct {
	WebPage
}

// A radio channel that uses FM.
type FMRadioChannel struct {
	RadioChannel
}

// A fast-food restaurant.
type FastFoodRestaurant struct {
	FoodEstablishment
}

// Event type: Festival.
type Festival struct {
	Event
}

// The act of capturing sound and moving images on film, video, or digitally.
type FilmAction struct {
	CreateAction
}

// A product provided to consumers and businesses by financial institutions such as banks, insurance companies, brokerage firms, consumer finance companies, and investment companies which comprise the financial services industry.
type FinancialProduct struct {
	Service

	AnnualPercentageRate            interface{} `json:"annualPercentageRate,omitempty"`
	FeesAndCommissionsSpecification interface{} `json:"feesAndCommissionsSpecification,omitempty"`
	InterestRate                    interface{} `json:"interestRate,omitempty"`
}

// Financial services business.
type FinancialService struct {
	LocalBusiness

	FeesAndCommissionsSpecification interface{} `json:"feesAndCommissionsSpecification,omitempty"`
}

// The act of finding an object.\n\nRelated actions:\n\n* [[SearchAction]]: FindAction is generally lead by a SearchAction, but not necessarily.
type FindAction struct {
	Action
}

// A fire station. With firemen.
type FireStation struct {
	CivicStructure
	// TODO: EmergencyService
}

// An airline flight.
type Flight struct {
	Trip

	Aircraft                interface{} `json:"aircraft,omitempty"`
	ArrivalAirport          interface{} `json:"arrivalAirport,omitempty"`
	ArrivalGate             interface{} `json:"arrivalGate,omitempty"`
	ArrivalTerminal         interface{} `json:"arrivalTerminal,omitempty"`
	BoardingPolicy          interface{} `json:"boardingPolicy,omitempty"`
	Carrier                 interface{} `json:"carrier,omitempty"`
	DepartureAirport        interface{} `json:"departureAirport,omitempty"`
	DepartureGate           interface{} `json:"departureGate,omitempty"`
	DepartureTerminal       interface{} `json:"departureTerminal,omitempty"`
	EstimatedFlightDuration interface{} `json:"estimatedFlightDuration,omitempty"`
	FlightDistance          interface{} `json:"flightDistance,omitempty"`
	FlightNumber            interface{} `json:"flightNumber,omitempty"`
	MealService             interface{} `json:"mealService,omitempty"`
	Seller                  interface{} `json:"seller,omitempty"`
	WebCheckinTime          interface{} `json:"webCheckinTime,omitempty"`
}

// A reservation for air travel.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
type FlightReservation struct {
	Reservation

	BoardingGroup           interface{} `json:"boardingGroup,omitempty"`
	PassengerPriorityStatus interface{} `json:"passengerPriorityStatus,omitempty"`
	PassengerSequenceNumber interface{} `json:"passengerSequenceNumber,omitempty"`
	SecurityScreening       interface{} `json:"securityScreening,omitempty"`
}

// Data type: Floating number.
type Float struct {
	Number
}

// A FloorPlan is an explicit representation of a collection of similar accommodations, allowing the provision of common information (room counts, sizes, layout diagrams) and offers for rental or sale. In typical use, some [[ApartmentComplex]] has an [[accommodationFloorPlan]] which is a [[FloorPlan]].  A FloorPlan is always in the context of a particular place, either a larger [[ApartmentComplex]] or a single [[Apartment]]. The visual/spatial aspects of a floor plan (i.e. room layout, [see wikipedia](https://en.wikipedia.org/wiki/Floor_plan)) can be indicated using [[image]].
type FloorPlan struct {
	Intangible

	AmenityFeature                      interface{} `json:"amenityFeature,omitempty"`
	FloorSize                           interface{} `json:"floorSize,omitempty"`
	IsPlanForApartment                  interface{} `json:"isPlanForApartment,omitempty"`
	LayoutImage                         interface{} `json:"layoutImage,omitempty"`
	NumberOfAccommodationUnits          interface{} `json:"numberOfAccommodationUnits,omitempty"`
	NumberOfAvailableAccommodationUnits interface{} `json:"numberOfAvailableAccommodationUnits,omitempty"`
	NumberOfBathroomsTotal              interface{} `json:"numberOfBathroomsTotal,omitempty"`
	NumberOfBedrooms                    interface{} `json:"numberOfBedrooms,omitempty"`
	NumberOfFullBathrooms               interface{} `json:"numberOfFullBathrooms,omitempty"`
	NumberOfPartialBathrooms            interface{} `json:"numberOfPartialBathrooms,omitempty"`
	NumberOfRooms                       interface{} `json:"numberOfRooms,omitempty"`
	PetsAllowed                         interface{} `json:"petsAllowed,omitempty"`
}

// A florist.
type Florist struct {
	Store
}

// The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically to get updates polled from.\n\nRelated actions:\n\n* [[BefriendAction]]: Unlike BefriendAction, FollowAction implies that the connection is *not* necessarily reciprocal.\n* [[SubscribeAction]]: Unlike SubscribeAction, FollowAction implies that the follower acts as an active agent constantly/actively polling for updates.\n* [[RegisterAction]]: Unlike RegisterAction, FollowAction implies that the agent is interested in continuing receiving updates from the object.\n* [[JoinAction]]: Unlike JoinAction, FollowAction implies that the agent is interested in getting updates from the object.\n* [[TrackAction]]: Unlike TrackAction, FollowAction refers to the polling of updates of all aspects of animate objects rather than the location of inanimate objects (e.g. you track a package, but you don't follow it).
type FollowAction struct {
	InteractAction

	Followee interface{} `json:"followee,omitempty"`
}

// A food-related business.
type FoodEstablishment struct {
	LocalBusiness

	AcceptsReservations interface{} `json:"acceptsReservations,omitempty"`
	HasMenu             interface{} `json:"hasMenu,omitempty"`
	Menu                interface{} `json:"menu,omitempty"`
	ServesCuisine       interface{} `json:"servesCuisine,omitempty"`
	StarRating          interface{} `json:"starRating,omitempty"`
}

// A reservation to dine at a food-related business.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
type FoodEstablishmentReservation struct {
	Reservation

	EndTime   interface{} `json:"endTime,omitempty"`
	PartySize interface{} `json:"partySize,omitempty"`
	StartTime interface{} `json:"startTime,omitempty"`
}

// Event type: Food event.
type FoodEvent struct {
	Event
}

// A food service, like breakfast, lunch, or dinner.
type FoodService struct {
	Service
}

/*
A FundingAgency is an organization that implements one or more [[FundingScheme]]s and manages
    the granting process (via [[Grant]]s, typically [[MonetaryGrant]]s).
    A funding agency is not always required for grant funding, e.g. philanthropic giving, corporate sponsorship etc.

Examples of funding agencies include ERC, REA, NIH, Bill and Melinda Gates Foundation...

*/
type FundingAgency struct {
	Project
}

/*
A FundingScheme combines organizational, project and policy aspects of grant-based funding
    that sets guidelines, principles and mechanisms to support other kinds of projects and activities.
    Funding is typically organized via [[Grant]] funding. Examples of funding schemes: Swiss Priority Programmes (SPPs); EU Framework 7 (FP7); Horizon 2020; the NIH-R01 Grant Program; Wellcome institutional strategic support fund. For large scale public sector funding, the management and administration of grant awards is often handled by other, dedicated, organizations - [[FundingAgency]]s such as ERC, REA, ...
*/
type FundingScheme struct {
	Organization
}

// A furniture store.
type FurnitureStore struct {
	Store
}

// The Game type represents things which are games. These are typically rule-governed recreational activities, e.g. role-playing games in which players assume the role of characters in a fictional setting.
type Game struct {
	CreativeWork

	CharacterAttribute interface{} `json:"characterAttribute,omitempty"`
	GameItem           interface{} `json:"gameItem,omitempty"`
	GameLocation       interface{} `json:"gameLocation,omitempty"`
	NumberOfPlayers    interface{} `json:"numberOfPlayers,omitempty"`
	Quest              interface{} `json:"quest,omitempty"`
}

// For a [[VideoGame]], such as used with a [[PlayGameAction]], an enumeration of the kind of game availability offered.
type GameAvailabilityEnumeration struct {
	Enumeration
}

// Indicates whether this game is multi-player, co-op or single-player.
type GamePlayMode struct {
	Enumeration
}

// Server that provides game interaction in a multiplayer game.
type GameServer struct {
	Intangible

	Game          interface{} `json:"game,omitempty"`
	PlayersOnline interface{} `json:"playersOnline,omitempty"`
	ServerStatus  interface{} `json:"serverStatus,omitempty"`
}

// Status of a game server.
type GameServerStatus struct {
	StatusEnumeration
}

// A garden store.
type GardenStore struct {
	Store
}

// A gas station.
type GasStation struct {
	AutomotiveBusiness
}

// Residence type: Gated community.
type GatedResidenceCommunity struct {
	Residence
}

// An enumeration of genders.
type GenderType struct {
	Enumeration
}

// A discrete unit of inheritance which affects one or more biological traits (Source: [https://en.wikipedia.org/wiki/Gene](https://en.wikipedia.org/wiki/Gene)). Examples include FOXP2 (Forkhead box protein P2), SCARNA21 (small Cajal body-specific RNA 21), A- (agouti genotype).
type Gene struct {
	BioChemEntity

	AlternativeOf         interface{} `json:"alternativeOf,omitempty"`
	EncodesBioChemEntity  interface{} `json:"encodesBioChemEntity,omitempty"`
	ExpressedIn           interface{} `json:"expressedIn,omitempty"`
	HasBioPolymerSequence interface{} `json:"hasBioPolymerSequence,omitempty"`
}

// A general contractor.
type GeneralContractor struct {
	HomeAndConstructionBusiness
}

/*
A GeoCircle is a GeoShape representing a circular geographic area. As it is a GeoShape
          it provides the simple textual property 'circle', but also allows the combination of postalCode alongside geoRadius.
          The center of the circle can be indicated via the 'geoMidpoint' property, or more approximately using 'address', 'postalCode'.

*/
type GeoCircle struct {
	GeoShape

	GeoMidpoint interface{} `json:"geoMidpoint,omitempty"`
	GeoRadius   interface{} `json:"geoRadius,omitempty"`
}

// The geographic coordinates of a place or event.
type GeoCoordinates struct {
	StructuredValue

	Address        interface{} `json:"address,omitempty"`
	AddressCountry interface{} `json:"addressCountry,omitempty"`
	Elevation      interface{} `json:"elevation,omitempty"`
	Latitude       interface{} `json:"latitude,omitempty"`
	Longitude      interface{} `json:"longitude,omitempty"`
	PostalCode     interface{} `json:"postalCode,omitempty"`
}

// The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
type GeoShape struct {
	StructuredValue

	Address        interface{} `json:"address,omitempty"`
	AddressCountry interface{} `json:"addressCountry,omitempty"`
	Box            interface{} `json:"box,omitempty"`
	Circle         interface{} `json:"circle,omitempty"`
	Elevation      interface{} `json:"elevation,omitempty"`
	Line           interface{} `json:"line,omitempty"`
	Polygon        interface{} `json:"polygon,omitempty"`
	PostalCode     interface{} `json:"postalCode,omitempty"`
}

// (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
type GeospatialGeometry struct {
	Intangible

	GeoContains   interface{} `json:"geoContains,omitempty"`
	GeoCoveredBy  interface{} `json:"geoCoveredBy,omitempty"`
	GeoCovers     interface{} `json:"geoCovers,omitempty"`
	GeoCrosses    interface{} `json:"geoCrosses,omitempty"`
	GeoDisjoint   interface{} `json:"geoDisjoint,omitempty"`
	GeoEquals     interface{} `json:"geoEquals,omitempty"`
	GeoIntersects interface{} `json:"geoIntersects,omitempty"`
	GeoOverlaps   interface{} `json:"geoOverlaps,omitempty"`
	GeoTouches    interface{} `json:"geoTouches,omitempty"`
	GeoWithin     interface{} `json:"geoWithin,omitempty"`
}

// The act of transferring ownership of an object to a destination. Reciprocal of TakeAction.\n\nRelated actions:\n\n* [[TakeAction]]: Reciprocal of GiveAction.\n* [[SendAction]]: Unlike SendAction, GiveAction implies that ownership is being transferred (e.g. I may send my laptop to you, but that doesn't mean I'm giving it to you).
type GiveAction struct {
	TransferAction

	Recipient interface{} `json:"recipient,omitempty"`
}

// A golf course.
type GolfCourse struct {
	SportsActivityLocation
}

// GovernmentBenefitsType enumerates several kinds of government benefits to support the COVID-19 situation. Note that this structure may not capture all benefits offered.
type GovernmentBenefitsType struct {
	Enumeration
}

// A government building.
type GovernmentBuilding struct {
	CivicStructure
}

// A government office&#x2014;for example, an IRS or DMV office.
type GovernmentOffice struct {
	LocalBusiness
}

// A governmental organization or agency.
type GovernmentOrganization struct {
	Organization
}

// A permit issued by a government agency.
type GovernmentPermit struct {
	Permit
}

// A service provided by a government organization, e.g. food stamps, veterans benefits, etc.
type GovernmentService struct {
	Service

	Jurisdiction    interface{} `json:"jurisdiction,omitempty"`
	ServiceOperator interface{} `json:"serviceOperator,omitempty"`
}

/*
A grant, typically financial or otherwise quantifiable, of resources. Typically a [[funder]] sponsors some [[MonetaryAmount]] to an [[Organization]] or [[Person]],
    sometimes not necessarily via a dedicated or long-lived [[Project]], resulting in one or more outputs, or [[fundedItem]]s. For financial sponsorship, indicate the [[funder]] of a [[MonetaryGrant]]. For non-financial support, indicate [[sponsor]] of [[Grant]]s of resources (e.g. office space).

Grants support  activities directed towards some agreed collective goals, often but not always organized as [[Project]]s. Long-lived projects are sometimes sponsored by a variety of grants over time, but it is also common for a project to be associated with a single grant.

The amount of a [[Grant]] is represented using [[amount]] as a [[MonetaryAmount]].

*/
type Grant struct {
	Intangible

	FundedItem interface{} `json:"fundedItem,omitempty"`
	Funder     interface{} `json:"funder,omitempty"`
	Sponsor    interface{} `json:"sponsor,omitempty"`
}

// A grocery store.
type GroceryStore struct {
	Store
}

// [[Guide]] is a page or article that recommend specific products or services, or aspects of a thing for a user to consider. A [[Guide]] may represent a Buying Guide and detail aspects of products or services for a user to consider. A [[Guide]] may represent a Product Guide and recommend specific products or services. A [[Guide]] may represent a Ranked List and recommend specific products or services with ranking.
type Guide struct {
	CreativeWork

	ReviewAspect interface{} `json:"reviewAspect,omitempty"`
}

// A business that provide Heating, Ventilation and Air Conditioning services.
type HVACBusiness struct {
	HomeAndConstructionBusiness
}

// A [hackathon](https://en.wikipedia.org/wiki/Hackathon) event.
type Hackathon struct {
	Event
}

// A hair salon.
type HairSalon struct {
	HealthAndBeautyBusiness
}

// A hardware store.
type HardwareStore struct {
	Store
}

// Health and beauty.
type HealthAndBeautyBusiness struct {
	LocalBusiness
}

// HealthAspectEnumeration enumerates several aspects of health content online, each of which might be described using [[hasHealthAspect]] and [[HealthTopicContent]].
type HealthAspectEnumeration struct {
	Enumeration
}

// A health club.
type HealthClub struct {
	HealthAndBeautyBusiness
	// TODO: SportsActivityLocation
}

// A US-style health insurance plan, including PPOs, EPOs, and HMOs.
type HealthInsurancePlan struct {
	Intangible

	BenefitsSummaryUrl          interface{} `json:"benefitsSummaryUrl,omitempty"`
	ContactPoint                interface{} `json:"contactPoint,omitempty"`
	HealthPlanDrugOption        interface{} `json:"healthPlanDrugOption,omitempty"`
	HealthPlanDrugTier          interface{} `json:"healthPlanDrugTier,omitempty"`
	HealthPlanId                interface{} `json:"healthPlanId,omitempty"`
	HealthPlanMarketingUrl      interface{} `json:"healthPlanMarketingUrl,omitempty"`
	IncludesHealthPlanFormulary interface{} `json:"includesHealthPlanFormulary,omitempty"`
	IncludesHealthPlanNetwork   interface{} `json:"includesHealthPlanNetwork,omitempty"`
	UsesHealthPlanIdStandard    interface{} `json:"usesHealthPlanIdStandard,omitempty"`
}

// A description of costs to the patient under a given network or formulary.
type HealthPlanCostSharingSpecification struct {
	Intangible

	HealthPlanCoinsuranceOption interface{} `json:"healthPlanCoinsuranceOption,omitempty"`
	HealthPlanCoinsuranceRate   interface{} `json:"healthPlanCoinsuranceRate,omitempty"`
	HealthPlanCopay             interface{} `json:"healthPlanCopay,omitempty"`
	HealthPlanCopayOption       interface{} `json:"healthPlanCopayOption,omitempty"`
	HealthPlanPharmacyCategory  interface{} `json:"healthPlanPharmacyCategory,omitempty"`
}

// For a given health insurance plan, the specification for costs and coverage of prescription drugs.
type HealthPlanFormulary struct {
	Intangible

	HealthPlanCostSharing    interface{} `json:"healthPlanCostSharing,omitempty"`
	HealthPlanDrugTier       interface{} `json:"healthPlanDrugTier,omitempty"`
	OffersPrescriptionByMail interface{} `json:"offersPrescriptionByMail,omitempty"`
}

// A US-style health insurance plan network.
type HealthPlanNetwork struct {
	Intangible

	HealthPlanCostSharing interface{} `json:"healthPlanCostSharing,omitempty"`
	HealthPlanNetworkId   interface{} `json:"healthPlanNetworkId,omitempty"`
	HealthPlanNetworkTier interface{} `json:"healthPlanNetworkTier,omitempty"`
}

/*
[[HealthTopicContent]] is [[WebContent]] that is about some aspect of a health topic, e.g. a condition, its symptoms or treatments. Such content may be comprised of several parts or sections and use different types of media. Multiple instances of [[WebContent]] (and hence [[HealthTopicContent]]) can be related using [[hasPart]] / [[isPartOf]] where there is some kind of content hierarchy, and their content described with [[about]] and [[mentions]] e.g. building upon the existing [[MedicalCondition]] vocabulary.

*/
type HealthTopicContent struct {
	WebContent

	HasHealthAspect interface{} `json:"hasHealthAspect,omitempty"`
}

// A high school.
type HighSchool struct {
	EducationalOrganization
}

// A Hindu temple.
type HinduTemple struct {
	PlaceOfWorship
}

// A store that sells materials useful or necessary for various hobbies.
type HobbyShop struct {
	Store
}

// A construction business.\n\nA HomeAndConstructionBusiness is a [[LocalBusiness]] that provides services around homes and buildings.\n\nAs a [[LocalBusiness]] it can be described as a [[provider]] of one or more [[Service]]\(s).
type HomeAndConstructionBusiness struct {
	LocalBusiness
}

// A home goods store.
type HomeGoodsStore struct {
	Store
}

// A hospital.
type Hospital struct {
	CivicStructure
	// TODO: EmergencyService
	// TODO: MedicalOrganization

	AvailableService        interface{} `json:"availableService,omitempty"`
	HealthcareReportingData interface{} `json:"healthcareReportingData,omitempty"`
	MedicalSpecialty        interface{} `json:"medicalSpecialty,omitempty"`
}

/*
A hostel - cheap accommodation, often in shared dormitories.
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type Hostel struct {
	LodgingBusiness
}

/*
A hotel is an establishment that provides lodging paid on a short-term basis (Source: Wikipedia, the free encyclopedia, see http://en.wikipedia.org/wiki/Hotel).
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type Hotel struct {
	LodgingBusiness
}

/*
A hotel room is a single room in a hotel.
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type HotelRoom struct {
	Room

	Bed       interface{} `json:"bed,omitempty"`
	Occupancy interface{} `json:"occupancy,omitempty"`
}

// A house is a building or structure that has the ability to be occupied for habitation by humans or other creatures (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/House">http://en.wikipedia.org/wiki/House</a>).
type House struct {
	Accommodation

	NumberOfRooms interface{} `json:"numberOfRooms,omitempty"`
}

// A house painting service.
type HousePainter struct {
	HomeAndConstructionBusiness
}

// Instructions that explain how to achieve a result by performing a sequence of steps.
type HowTo struct {
	CreativeWork

	EstimatedCost interface{} `json:"estimatedCost,omitempty"`
	PerformTime   interface{} `json:"performTime,omitempty"`
	PrepTime      interface{} `json:"prepTime,omitempty"`
	Step          interface{} `json:"step,omitempty"`
	Steps         interface{} `json:"steps,omitempty"`
	Supply        interface{} `json:"supply,omitempty"`
	Tool          interface{} `json:"tool,omitempty"`
	TotalTime     interface{} `json:"totalTime,omitempty"`
	Yield         interface{} `json:"yield,omitempty"`
}

// A direction indicating a single action to do in the instructions for how to achieve a result.
type HowToDirection struct {
	CreativeWork
	// TODO: ListItem

	AfterMedia  interface{} `json:"afterMedia,omitempty"`
	BeforeMedia interface{} `json:"beforeMedia,omitempty"`
	DuringMedia interface{} `json:"duringMedia,omitempty"`
	PerformTime interface{} `json:"performTime,omitempty"`
	PrepTime    interface{} `json:"prepTime,omitempty"`
	Supply      interface{} `json:"supply,omitempty"`
	Tool        interface{} `json:"tool,omitempty"`
	TotalTime   interface{} `json:"totalTime,omitempty"`
}

// An item used as either a tool or supply when performing the instructions for how to to achieve a result.
type HowToItem struct {
	ListItem

	RequiredQuantity interface{} `json:"requiredQuantity,omitempty"`
}

// A sub-grouping of steps in the instructions for how to achieve a result (e.g. steps for making a pie crust within a pie recipe).
type HowToSection struct {
	CreativeWork
	// TODO: ItemList
	// TODO: ListItem

	Steps interface{} `json:"steps,omitempty"`
}

// A step in the instructions for how to achieve a result. It is an ordered list with HowToDirection and/or HowToTip items.
type HowToStep struct {
	CreativeWork
	// TODO: ItemList
	// TODO: ListItem
}

// A supply consumed when performing the instructions for how to achieve a result.
type HowToSupply struct {
	HowToItem

	EstimatedCost interface{} `json:"estimatedCost,omitempty"`
}

// An explanation in the instructions for how to achieve a result. It provides supplementary information about a technique, supply, author's preference, etc. It can explain what could be done, or what should not be done, but doesn't specify what should be done (see HowToDirection).
type HowToTip struct {
	CreativeWork
	// TODO: ListItem
}

// A tool used (but not consumed) when performing instructions for how to achieve a result.
type HowToTool struct {
	HowToItem
}

// A HyperToc represents a hypertext table of contents for complex media objects, such as [[VideoObject]], [[AudioObject]]. Items in the table of contents are indicated using the [[tocEntry]] property, and typed [[HyperTocEntry]]. For cases where the same larger work is split into multiple files, [[associatedMedia]] can be used on individual [[HyperTocEntry]] items.
type HyperToc struct {
	CreativeWork

	AssociatedMedia interface{} `json:"associatedMedia,omitempty"`
	TocEntry        interface{} `json:"tocEntry,omitempty"`
}

// A HyperToEntry is an item within a [[HyperToc]], which represents a hypertext table of contents for complex media objects, such as [[VideoObject]], [[AudioObject]]. The media object itself is indicated using [[associatedMedia]]. Each section of interest within that content can be described with a [[HyperTocEntry]], with associated [[startOffset]] and [[endOffset]]. When several entries are all from the same file, [[associatedMedia]] is used on the overarching [[HyperTocEntry]]; if the content has been split into multiple files, they can be referenced using [[associatedMedia]] on each [[HyperTocEntry]].
type HyperTocEntry struct {
	CreativeWork

	AssociatedMedia interface{} `json:"associatedMedia,omitempty"`
	TocContinuation interface{} `json:"tocContinuation,omitempty"`
	Utterances      interface{} `json:"utterances,omitempty"`
}

// An ice cream shop.
type IceCreamShop struct {
	FoodEstablishment
}

// The act of intentionally disregarding the object. An agent ignores an object.
type IgnoreAction struct {
	AssessAction
}

// Web page type: Image gallery page.
type ImageGallery struct {
	MediaGallery
}

// An image file.
type ImageObject struct {
	MediaObject

	Caption              interface{} `json:"caption,omitempty"`
	EmbeddedTextCaption  interface{} `json:"embeddedTextCaption,omitempty"`
	ExifData             interface{} `json:"exifData,omitempty"`
	RepresentativeOfPage interface{} `json:"representativeOfPage,omitempty"`
	Thumbnail            interface{} `json:"thumbnail,omitempty"`
}

// A specific and exact (byte-for-byte) version of an [[ImageObject]]. Two byte-for-byte identical files, for the purposes of this type, considered identical. If they have different embedded metadata (e.g. XMP, EXIF) the files will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual content, do not affect this notion of identity.
type ImageObjectSnapshot struct {
	ImageObject
}

// Any medical imaging modality typically used for diagnostic purposes.
type ImagingTest struct {
	MedicalTest

	ImagingTechnique interface{} `json:"imagingTechnique,omitempty"`
}

// A single, identifiable product instance (e.g. a laptop with a particular serial number).
type IndividualProduct struct {
	Product

	SerialNumber interface{} `json:"serialNumber,omitempty"`
}

// Classes of agents or pathogens that transmit infectious diseases. Enumerated type.
type InfectiousAgentClass struct {
	MedicalEnumeration
}

// An infectious disease is a clinically evident human disease resulting from the presence of pathogenic microbial agents, like pathogenic viruses, pathogenic bacteria, fungi, protozoa, multicellular parasites, and prions. To be considered an infectious disease, such pathogens are known to be able to cause this disease.
type InfectiousDisease struct {
	MedicalCondition

	InfectiousAgent      interface{} `json:"infectiousAgent,omitempty"`
	InfectiousAgentClass interface{} `json:"infectiousAgentClass,omitempty"`
	TransmissionMethod   interface{} `json:"transmissionMethod,omitempty"`
}

// The act of notifying someone of information pertinent to them, with no expectation of a response.
type InformAction struct {
	CommunicateAction

	Event interface{} `json:"event,omitempty"`
}

// The act of adding at a specific location in an ordered collection.
type InsertAction struct {
	AddAction

	ToLocation interface{} `json:"toLocation,omitempty"`
}

// The act of installing an application.
type InstallAction struct {
	ConsumeAction
}

// An Insurance agency.
type InsuranceAgency struct {
	FinancialService
}

// A utility class that serves as the umbrella for a number of 'intangible' things such as quantities, structured values, etc.
type Intangible struct {
	Thing
}

// Data type: Integer.
type Integer struct {
	Number
}

// The act of interacting with another person or organization.
type InteractAction struct {
	Action
}

// A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
type InteractionCounter struct {
	StructuredValue

	EndTime              interface{} `json:"endTime,omitempty"`
	InteractionService   interface{} `json:"interactionService,omitempty"`
	InteractionType      interface{} `json:"interactionType,omitempty"`
	Location             interface{} `json:"location,omitempty"`
	StartTime            interface{} `json:"startTime,omitempty"`
	UserInteractionCount interface{} `json:"userInteractionCount,omitempty"`
}

// An internet cafe.
type InternetCafe struct {
	LocalBusiness
}

// A company or fund that gathers capital from a number of investors to create a pool of money that is then re-invested into stocks, bonds and other assets.
type InvestmentFund struct {
	InvestmentOrDeposit
}

// A type of financial product that typically requires the client to transfer funds to a financial service in return for potential beneficial financial return.
type InvestmentOrDeposit struct {
	FinancialProduct

	Amount interface{} `json:"amount,omitempty"`
}

// The act of asking someone to attend an event. Reciprocal of RsvpAction.
type InviteAction struct {
	CommunicateAction

	Event interface{} `json:"event,omitempty"`
}

// A statement of the money due for goods or services; a bill.
type Invoice struct {
	Intangible

	AccountId            interface{} `json:"accountId,omitempty"`
	BillingPeriod        interface{} `json:"billingPeriod,omitempty"`
	Broker               interface{} `json:"broker,omitempty"`
	Category             interface{} `json:"category,omitempty"`
	ConfirmationNumber   interface{} `json:"confirmationNumber,omitempty"`
	Customer             interface{} `json:"customer,omitempty"`
	MinimumPaymentDue    interface{} `json:"minimumPaymentDue,omitempty"`
	PaymentDue           interface{} `json:"paymentDue,omitempty"`
	PaymentDueDate       interface{} `json:"paymentDueDate,omitempty"`
	PaymentMethod        interface{} `json:"paymentMethod,omitempty"`
	PaymentMethodId      interface{} `json:"paymentMethodId,omitempty"`
	PaymentStatus        interface{} `json:"paymentStatus,omitempty"`
	Provider             interface{} `json:"provider,omitempty"`
	ReferencesOrder      interface{} `json:"referencesOrder,omitempty"`
	ScheduledPaymentDate interface{} `json:"scheduledPaymentDate,omitempty"`
	TotalPaymentDue      interface{} `json:"totalPaymentDue,omitempty"`
}

// A list of possible product availability options.
type ItemAvailability struct {
	Enumeration
}

// A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
type ItemList struct {
	Intangible

	ItemListElement interface{} `json:"itemListElement,omitempty"`
	ItemListOrder   interface{} `json:"itemListOrder,omitempty"`
	NumberOfItems   interface{} `json:"numberOfItems,omitempty"`
}

// Enumerated for values for itemListOrder for indicating how an ordered ItemList is organized.
type ItemListOrderType struct {
	Enumeration
}

// A page devoted to a single item, such as a particular product or hotel.
type ItemPage struct {
	WebPage
}

// A jewelry store.
type JewelryStore struct {
	Store
}

// A listing that describes a job opening in a certain organization.
type JobPosting struct {
	Intangible

	ApplicantLocationRequirements interface{} `json:"applicantLocationRequirements,omitempty"`
	ApplicationContact            interface{} `json:"applicationContact,omitempty"`
	BaseSalary                    interface{} `json:"baseSalary,omitempty"`
	Benefits                      interface{} `json:"benefits,omitempty"`
	DatePosted                    interface{} `json:"datePosted,omitempty"`
	DirectApply                   interface{} `json:"directApply,omitempty"`
	EducationRequirements         interface{} `json:"educationRequirements,omitempty"`
	EligibilityToWorkRequirement  interface{} `json:"eligibilityToWorkRequirement,omitempty"`
	EmployerOverview              interface{} `json:"employerOverview,omitempty"`
	EmploymentType                interface{} `json:"employmentType,omitempty"`
	EmploymentUnit                interface{} `json:"employmentUnit,omitempty"`
	EstimatedSalary               interface{} `json:"estimatedSalary,omitempty"`
	ExperienceInPlaceOfEducation  interface{} `json:"experienceInPlaceOfEducation,omitempty"`
	ExperienceRequirements        interface{} `json:"experienceRequirements,omitempty"`
	HiringOrganization            interface{} `json:"hiringOrganization,omitempty"`
	IncentiveCompensation         interface{} `json:"incentiveCompensation,omitempty"`
	Incentives                    interface{} `json:"incentives,omitempty"`
	Industry                      interface{} `json:"industry,omitempty"`
	JobBenefits                   interface{} `json:"jobBenefits,omitempty"`
	JobImmediateStart             interface{} `json:"jobImmediateStart,omitempty"`
	JobLocation                   interface{} `json:"jobLocation,omitempty"`
	JobLocationType               interface{} `json:"jobLocationType,omitempty"`
	JobStartDate                  interface{} `json:"jobStartDate,omitempty"`
	OccupationalCategory          interface{} `json:"occupationalCategory,omitempty"`
	PhysicalRequirement           interface{} `json:"physicalRequirement,omitempty"`
	Qualifications                interface{} `json:"qualifications,omitempty"`
	RelevantOccupation            interface{} `json:"relevantOccupation,omitempty"`
	Responsibilities              interface{} `json:"responsibilities,omitempty"`
	SalaryCurrency                interface{} `json:"salaryCurrency,omitempty"`
	SecurityClearanceRequirement  interface{} `json:"securityClearanceRequirement,omitempty"`
	SensoryRequirement            interface{} `json:"sensoryRequirement,omitempty"`
	Skills                        interface{} `json:"skills,omitempty"`
	SpecialCommitments            interface{} `json:"specialCommitments,omitempty"`
	Title                         interface{} `json:"title,omitempty"`
	TotalJobOpenings              interface{} `json:"totalJobOpenings,omitempty"`
	ValidThrough                  interface{} `json:"validThrough,omitempty"`
	WorkHours                     interface{} `json:"workHours,omitempty"`
}

// An agent joins an event/group with participants/friends at a location.\n\nRelated actions:\n\n* [[RegisterAction]]: Unlike RegisterAction, JoinAction refers to joining a group/team of people.\n* [[SubscribeAction]]: Unlike SubscribeAction, JoinAction does not imply that you'll be receiving updates.\n* [[FollowAction]]: Unlike FollowAction, JoinAction does not imply that you'll be polling for updates.
type JoinAction struct {
	InteractAction

	Event interface{} `json:"event,omitempty"`
}

// The anatomical location at which two or more bones make contact.
type Joint struct {
	AnatomicalStructure

	BiomechnicalClass interface{} `json:"biomechnicalClass,omitempty"`
	FunctionalClass   interface{} `json:"functionalClass,omitempty"`
	StructuralClass   interface{} `json:"structuralClass,omitempty"`
}

// A lake (for example, Lake Pontrachain).
type LakeBodyOfWater struct {
	BodyOfWater
}

// A landform or physical feature.  Landform elements include mountains, plains, lakes, rivers, seascape and oceanic waterbody interface features such as bays, peninsulas, seas and so forth, including sub-aqueous terrain features such as submersed mountain ranges, volcanoes, and the great ocean basins.
type Landform struct {
	Place
}

// An historical landmark or building.
type LandmarksOrHistoricalBuildings struct {
	Place
}

// Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
type Language struct {
	Intangible
}

/*
The LearningResource type can be used to indicate [[CreativeWork]]s (whether physical or digital) that have a particular and explicit orientation towards learning, education, skill acquisition, and other educational purposes.

[[LearningResource]] is expected to be used as an addition to a primary type such as [[Book]], [[VideoObject]], [[Product]] etc.

[[EducationEvent]] serves a similar purpose for event-like things (e.g. a [[Trip]]). A [[LearningResource]] may be created as a result of an [[EducationEvent]], for example by recording one.
*/
type LearningResource struct {
	CreativeWork

	Assesses             interface{} `json:"assesses,omitempty"`
	CompetencyRequired   interface{} `json:"competencyRequired,omitempty"`
	EducationalAlignment interface{} `json:"educationalAlignment,omitempty"`
	EducationalLevel     interface{} `json:"educationalLevel,omitempty"`
	EducationalUse       interface{} `json:"educationalUse,omitempty"`
	LearningResourceType interface{} `json:"learningResourceType,omitempty"`
	Teaches              interface{} `json:"teaches,omitempty"`
}

// An agent leaves an event / group with participants/friends at a location.\n\nRelated actions:\n\n* [[JoinAction]]: The antonym of LeaveAction.\n* [[UnRegisterAction]]: Unlike UnRegisterAction, LeaveAction implies leaving a group/team of people rather than a service.
type LeaveAction struct {
	InteractAction

	Event interface{} `json:"event,omitempty"`
}

// A list of possible statuses for the legal force of a legislation.
type LegalForceStatus struct {
	StatusEnumeration
}

// A LegalService is a business that provides legally-oriented services, advice and representation, e.g. law firms.\n\nAs a [[LocalBusiness]] it can be described as a [[provider]] of one or more [[Service]]\(s).
type LegalService struct {
	LocalBusiness
}

// A list of possible levels for the legal validity of a legislation.
type LegalValueLevel struct {
	Enumeration
}

// A legal document such as an act, decree, bill, etc. (enforceable or not) or a component of a legal act (like an article).
type Legislation struct {
	CreativeWork

	Jurisdiction            interface{} `json:"jurisdiction,omitempty"`
	LegislationApplies      interface{} `json:"legislationApplies,omitempty"`
	LegislationChanges      interface{} `json:"legislationChanges,omitempty"`
	LegislationConsolidates interface{} `json:"legislationConsolidates,omitempty"`
	LegislationDate         interface{} `json:"legislationDate,omitempty"`
	LegislationDateVersion  interface{} `json:"legislationDateVersion,omitempty"`
	LegislationIdentifier   interface{} `json:"legislationIdentifier,omitempty"`
	LegislationJurisdiction interface{} `json:"legislationJurisdiction,omitempty"`
	LegislationLegalForce   interface{} `json:"legislationLegalForce,omitempty"`
	LegislationPassedBy     interface{} `json:"legislationPassedBy,omitempty"`
	LegislationResponsible  interface{} `json:"legislationResponsible,omitempty"`
	LegislationTransposes   interface{} `json:"legislationTransposes,omitempty"`
	LegislationType         interface{} `json:"legislationType,omitempty"`
}

// A specific object or file containing a Legislation. Note that the same Legislation can be published in multiple files. For example, a digitally signed PDF, a plain PDF and an HTML version.
type LegislationObject struct {
	Legislation
	// TODO: MediaObject

	LegislationLegalValue interface{} `json:"legislationLegalValue,omitempty"`
}

// A legislative building&#x2014;for example, the state capitol.
type LegislativeBuilding struct {
	GovernmentBuilding
}

// The act of providing an object under an agreement that it will be returned at a later date. Reciprocal of BorrowAction.\n\nRelated actions:\n\n* [[BorrowAction]]: Reciprocal of LendAction.
type LendAction struct {
	TransferAction

	Borrower interface{} `json:"borrower,omitempty"`
}

// A library.
type Library struct {
	LocalBusiness
}

// A [[LibrarySystem]] is a collaborative system amongst several libraries.
type LibrarySystem struct {
	Organization
}

// A process of care involving exercise, changes to diet, fitness routines, and other lifestyle changes aimed at improving a health condition.
type LifestyleModification struct {
	MedicalEntity
}

// A short band of tough, flexible, fibrous connective tissue that functions to connect multiple bones, cartilages, and structurally support joints.
type Ligament struct {
	AnatomicalStructure
}

// The act of expressing a positive sentiment about the object. An agent likes an object (a proposition, topic or theme) with participants.
type LikeAction struct {
	ReactAction
}

// A Role that represents a Web link e.g. as expressed via the 'url' property. Its linkRelationship property can indicate URL-based and plain textual link types e.g. those in IANA link registry or others such as 'amphtml'. This structure provides a placeholder where details from HTML's link element can be represented outside of HTML, e.g. in JSON-LD feeds.
type LinkRole struct {
	Role

	InLanguage       interface{} `json:"inLanguage,omitempty"`
	LinkRelationship interface{} `json:"linkRelationship,omitempty"`
}

// A shop that sells alcoholic drinks such as wine, beer, whisky and other spirits.
type LiquorStore struct {
	Store
}

// An list item, e.g. a step in a checklist or how-to description.
type ListItem struct {
	Intangible

	Item         interface{} `json:"item,omitempty"`
	NextItem     interface{} `json:"nextItem,omitempty"`
	Position     interface{} `json:"position,omitempty"`
	PreviousItem interface{} `json:"previousItem,omitempty"`
}

// The act of consuming audio content.
type ListenAction struct {
	ConsumeAction
}

// Event type: Literary event.
type LiteraryEvent struct {
	Event
}

// A [[LiveBlogPosting]] is a [[BlogPosting]] intended to provide a rolling textual coverage of an ongoing event through continuous updates.
type LiveBlogPosting struct {
	BlogPosting

	CoverageEndTime   interface{} `json:"coverageEndTime,omitempty"`
	CoverageStartTime interface{} `json:"coverageStartTime,omitempty"`
	LiveBlogUpdate    interface{} `json:"liveBlogUpdate,omitempty"`
}

// A financial product for the loaning of an amount of money, or line of credit, under agreed terms and charges.
type LoanOrCredit struct {
	FinancialProduct

	Amount             interface{} `json:"amount,omitempty"`
	Currency           interface{} `json:"currency,omitempty"`
	GracePeriod        interface{} `json:"gracePeriod,omitempty"`
	LoanRepaymentForm  interface{} `json:"loanRepaymentForm,omitempty"`
	LoanTerm           interface{} `json:"loanTerm,omitempty"`
	LoanType           interface{} `json:"loanType,omitempty"`
	RecourseLoan       interface{} `json:"recourseLoan,omitempty"`
	RenegotiableLoan   interface{} `json:"renegotiableLoan,omitempty"`
	RequiredCollateral interface{} `json:"requiredCollateral,omitempty"`
}

// A particular physical business or branch of an organization. Examples of LocalBusiness include a restaurant, a particular branch of a restaurant chain, a branch of a bank, a medical practice, a club, a bowling alley, etc.
type LocalBusiness struct {
	Organization
	// TODO: Place

	BranchOf           interface{} `json:"branchOf,omitempty"`
	CurrenciesAccepted interface{} `json:"currenciesAccepted,omitempty"`
	OpeningHours       interface{} `json:"openingHours,omitempty"`
	PaymentAccepted    interface{} `json:"paymentAccepted,omitempty"`
	PriceRange         interface{} `json:"priceRange,omitempty"`
}

// Specifies a location feature by providing a structured value representing a feature of an accommodation as a property-value pair of varying degrees of formality.
type LocationFeatureSpecification struct {
	PropertyValue

	HoursAvailable interface{} `json:"hoursAvailable,omitempty"`
	ValidFrom      interface{} `json:"validFrom,omitempty"`
	ValidThrough   interface{} `json:"validThrough,omitempty"`
}

// A locksmith.
type Locksmith struct {
	HomeAndConstructionBusiness
}

// A lodging business, such as a motel, hotel, or inn.
type LodgingBusiness struct {
	LocalBusiness

	AmenityFeature    interface{} `json:"amenityFeature,omitempty"`
	Audience          interface{} `json:"audience,omitempty"`
	AvailableLanguage interface{} `json:"availableLanguage,omitempty"`
	CheckinTime       interface{} `json:"checkinTime,omitempty"`
	CheckoutTime      interface{} `json:"checkoutTime,omitempty"`
	NumberOfRooms     interface{} `json:"numberOfRooms,omitempty"`
	PetsAllowed       interface{} `json:"petsAllowed,omitempty"`
	StarRating        interface{} `json:"starRating,omitempty"`
}

// A reservation for lodging at a hotel, motel, inn, etc.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
type LodgingReservation struct {
	Reservation

	CheckinTime            interface{} `json:"checkinTime,omitempty"`
	CheckoutTime           interface{} `json:"checkoutTime,omitempty"`
	LodgingUnitDescription interface{} `json:"lodgingUnitDescription,omitempty"`
	LodgingUnitType        interface{} `json:"lodgingUnitType,omitempty"`
	NumAdults              interface{} `json:"numAdults,omitempty"`
	NumChildren            interface{} `json:"numChildren,omitempty"`
}

// The act of being defeated in a competitive activity.
type LoseAction struct {
	AchieveAction

	Winner interface{} `json:"winner,omitempty"`
}

// A type of blood vessel that specifically carries lymph fluid unidirectionally toward the heart.
type LymphaticVessel struct {
	Vessel

	OriginatesFrom interface{} `json:"originatesFrom,omitempty"`
	RegionDrained  interface{} `json:"regionDrained,omitempty"`
	RunsTo         interface{} `json:"runsTo,omitempty"`
}

// A book, document, or piece of music written by hand rather than typed or printed.
type Manuscript struct {
	CreativeWork
}

// A map.
type Map struct {
	CreativeWork

	MapType interface{} `json:"mapType,omitempty"`
}

// An enumeration of several kinds of Map.
type MapCategoryType struct {
	Enumeration
}

// The act of marrying a person.
type MarryAction struct {
	InteractAction
}

// Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'.
type Mass struct {
	Quantity
}

// A math solver which is capable of solving a subset of mathematical problems.
type MathSolver struct {
	CreativeWork

	MathExpression interface{} `json:"mathExpression,omitempty"`
}

// The maximum dosing schedule considered safe for a drug or supplement as recommended by an authority or by the drug/supplement's manufacturer. Capture the recommending authority in the recognizingAuthority property of MedicalEntity.
type MaximumDoseSchedule struct {
	DoseSchedule
}

// Enumeration of common measurement types (or dimensions), for example "chest" for a person, "inseam" for pants, "gauge" for screws, or "wheel" for bicycles.
type MeasurementTypeEnumeration struct {
	Enumeration
}

// Web page type: Media gallery page. A mixed-media page that can contains media such as images, videos, and other multimedia.
type MediaGallery struct {
	CollectionPage
}

//  Codes for use with the [[mediaAuthenticityCategory]] property, indicating the authenticity of a media object (in the context of how it was published or shared). In general these codes are not mutually exclusive, although some combinations (such as 'original' versus 'transformed', 'edited' and 'staged') would be contradictory if applied in the same [[MediaReview]]. Note that the application of these codes is with regard to a piece of media shared or published in a particular context.
type MediaManipulationRatingEnumeration struct {
	Enumeration
}

// A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
type MediaObject struct {
	CreativeWork

	AssociatedArticle    interface{} `json:"associatedArticle,omitempty"`
	Bitrate              interface{} `json:"bitrate,omitempty"`
	ContentSize          interface{} `json:"contentSize,omitempty"`
	ContentUrl           interface{} `json:"contentUrl,omitempty"`
	Duration             interface{} `json:"duration,omitempty"`
	EmbedUrl             interface{} `json:"embedUrl,omitempty"`
	EncodesCreativeWork  interface{} `json:"encodesCreativeWork,omitempty"`
	EncodingFormat       interface{} `json:"encodingFormat,omitempty"`
	EndTime              interface{} `json:"endTime,omitempty"`
	Height               interface{} `json:"height,omitempty"`
	IneligibleRegion     interface{} `json:"ineligibleRegion,omitempty"`
	InterpretedAsClaim   interface{} `json:"interpretedAsClaim,omitempty"`
	PlayerType           interface{} `json:"playerType,omitempty"`
	ProductionCompany    interface{} `json:"productionCompany,omitempty"`
	RegionsAllowed       interface{} `json:"regionsAllowed,omitempty"`
	RequiresSubscription interface{} `json:"requiresSubscription,omitempty"`
	Sha256               interface{} `json:"sha256,omitempty"`
	StartTime            interface{} `json:"startTime,omitempty"`
	UploadDate           interface{} `json:"uploadDate,omitempty"`
	Width                interface{} `json:"width,omitempty"`
}

/*
A [[MediaReview]] is a more specialized form of Review dedicated to the evaluation of media content online, typically in the context of fact-checking and misinformation.
    For more general reviews of media in the broader sense, use [[UserReview]], [[CriticReview]] or other [[Review]] types. This definition is
    a work in progress. While the [[MediaManipulationRatingEnumeration]] list reflects significant community review amongst fact-checkers and others working
    to combat misinformation, the specific structures for representing media objects, their versions and publication context, is still evolving. Similarly, best practices for the relationship between [[MediaReview]] and [[ClaimReview]] markup has not yet been finalized.
*/
type MediaReview struct {
	Review

	MediaAuthenticityCategory       interface{} `json:"mediaAuthenticityCategory,omitempty"`
	OriginalMediaContextDescription interface{} `json:"originalMediaContextDescription,omitempty"`
	OriginalMediaLink               interface{} `json:"originalMediaLink,omitempty"`
}

// Represents an item or group of closely related items treated as a unit for the sake of evaluation in a [[MediaReview]]. Authorship etc. apply to the items rather than to the curation/grouping or reviewing party.
type MediaReviewItem struct {
	CreativeWork

	MediaItemAppearance interface{} `json:"mediaItemAppearance,omitempty"`
}

// A subscription which allows a user to access media including audio, video, books, etc.
type MediaSubscription struct {
	Intangible

	Authenticator       interface{} `json:"authenticator,omitempty"`
	ExpectsAcceptanceOf interface{} `json:"expectsAcceptanceOf,omitempty"`
}

// Target audiences for medical web pages.
type MedicalAudience struct {
	Audience
	// TODO: PeopleAudience
}

// Target audiences types for medical web pages. Enumerated type.
type MedicalAudienceType struct {
	MedicalEnumeration
}

// A particular physical or virtual business of an organization for medical purposes. Examples of MedicalBusiness include differents business run by health professionals.
type MedicalBusiness struct {
	LocalBusiness
}

// The causative agent(s) that are responsible for the pathophysiologic process that eventually results in a medical condition, symptom or sign. In this schema, unless otherwise specified this is meant to be the proximate cause of the medical condition, symptom or sign. The proximate cause is defined as the causative agent that most directly results in the medical condition, symptom or sign. For example, the HIV virus could be considered a cause of AIDS. Or in a diagnostic context, if a patient fell and sustained a hip fracture and two days later sustained a pulmonary embolism which eventuated in a cardiac arrest, the cause of the cardiac arrest (the proximate cause) would be the pulmonary embolism and not the fall. Medical causes can include cardiovascular, chemical, dermatologic, endocrine, environmental, gastroenterologic, genetic, hematologic, gynecologic, iatrogenic, infectious, musculoskeletal, neurologic, nutritional, obstetric, oncologic, otolaryngologic, pharmacologic, psychiatric, pulmonary, renal, rheumatologic, toxic, traumatic, or urologic causes; medical conditions can be causes as well.
type MedicalCause struct {
	MedicalEntity

	CauseOf interface{} `json:"causeOf,omitempty"`
}

// A facility, often associated with a hospital or medical school, that is devoted to the specific diagnosis and/or healthcare. Previously limited to outpatients but with evolution it may be open to inpatients as well.
type MedicalClinic struct {
	MedicalBusiness
	// TODO: MedicalOrganization

	AvailableService interface{} `json:"availableService,omitempty"`
	MedicalSpecialty interface{} `json:"medicalSpecialty,omitempty"`
}

// A code for a medical entity.
type MedicalCode struct {
	CategoryCode
	// TODO: MedicalIntangible

	CodeValue    interface{} `json:"codeValue,omitempty"`
	CodingSystem interface{} `json:"codingSystem,omitempty"`
}

// Any condition of the human body that affects the normal functioning of a person, whether physically or mentally. Includes diseases, injuries, disabilities, disorders, syndromes, etc.
type MedicalCondition struct {
	MedicalEntity

	AssociatedAnatomy     interface{} `json:"associatedAnatomy,omitempty"`
	DifferentialDiagnosis interface{} `json:"differentialDiagnosis,omitempty"`
	Drug                  interface{} `json:"drug,omitempty"`
	Epidemiology          interface{} `json:"epidemiology,omitempty"`
	ExpectedPrognosis     interface{} `json:"expectedPrognosis,omitempty"`
	NaturalProgression    interface{} `json:"naturalProgression,omitempty"`
	Pathophysiology       interface{} `json:"pathophysiology,omitempty"`
	PossibleComplication  interface{} `json:"possibleComplication,omitempty"`
	PossibleTreatment     interface{} `json:"possibleTreatment,omitempty"`
	PrimaryPrevention     interface{} `json:"primaryPrevention,omitempty"`
	RiskFactor            interface{} `json:"riskFactor,omitempty"`
	SecondaryPrevention   interface{} `json:"secondaryPrevention,omitempty"`
	SignOrSymptom         interface{} `json:"signOrSymptom,omitempty"`
	Stage                 interface{} `json:"stage,omitempty"`
	Status                interface{} `json:"status,omitempty"`
	TypicalTest           interface{} `json:"typicalTest,omitempty"`
}

// A stage of a medical condition, such as 'Stage IIIa'.
type MedicalConditionStage struct {
	MedicalIntangible

	StageAsNumber  interface{} `json:"stageAsNumber,omitempty"`
	SubStageSuffix interface{} `json:"subStageSuffix,omitempty"`
}

// A condition or factor that serves as a reason to withhold a certain medical therapy. Contraindications can be absolute (there are no reasonable circumstances for undertaking a course of action) or relative (the patient is at higher risk of complications, but that these risks may be outweighed by other considerations or mitigated by other measures).
type MedicalContraindication struct {
	MedicalEntity
}

// Any object used in a medical capacity, such as to diagnose or treat a patient.
type MedicalDevice struct {
	MedicalEntity

	AdverseOutcome        interface{} `json:"adverseOutcome,omitempty"`
	Contraindication      interface{} `json:"contraindication,omitempty"`
	PostOp                interface{} `json:"postOp,omitempty"`
	PreOp                 interface{} `json:"preOp,omitempty"`
	Procedure             interface{} `json:"procedure,omitempty"`
	SeriousAdverseOutcome interface{} `json:"seriousAdverseOutcome,omitempty"`
}

// Categories of medical devices, organized by the purpose or intended use of the device.
type MedicalDevicePurpose struct {
	MedicalEnumeration
}

// The most generic type of entity related to health and the practice of medicine.
type MedicalEntity struct {
	Thing

	Code                 interface{} `json:"code,omitempty"`
	Funding              interface{} `json:"funding,omitempty"`
	Guideline            interface{} `json:"guideline,omitempty"`
	LegalStatus          interface{} `json:"legalStatus,omitempty"`
	MedicineSystem       interface{} `json:"medicineSystem,omitempty"`
	RecognizingAuthority interface{} `json:"recognizingAuthority,omitempty"`
	RelevantSpecialty    interface{} `json:"relevantSpecialty,omitempty"`
	Study                interface{} `json:"study,omitempty"`
}

// Enumerations related to health and the practice of medicine: A concept that is used to attribute a quality to another concept, as a qualifier, a collection of items or a listing of all of the elements of a set in medicine practice.
type MedicalEnumeration struct {
	Enumeration
}

// Level of evidence for a medical guideline. Enumerated type.
type MedicalEvidenceLevel struct {
	MedicalEnumeration
}

// Any recommendation made by a standard society (e.g. ACC/AHA) or consensus statement that denotes how to diagnose and treat a particular condition. Note: this type should be used to tag the actual guideline recommendation; if the guideline recommendation occurs in a larger scholarly article, use MedicalScholarlyArticle to tag the overall article, not this type. Note also: the organization making the recommendation should be captured in the recognizingAuthority base property of MedicalEntity.
type MedicalGuideline struct {
	MedicalEntity

	EvidenceLevel    interface{} `json:"evidenceLevel,omitempty"`
	EvidenceOrigin   interface{} `json:"evidenceOrigin,omitempty"`
	GuidelineDate    interface{} `json:"guidelineDate,omitempty"`
	GuidelineSubject interface{} `json:"guidelineSubject,omitempty"`
}

// A guideline contraindication that designates a process as harmful and where quality of the data supporting the contraindication is sound.
type MedicalGuidelineContraindication struct {
	MedicalGuideline
}

// A guideline recommendation that is regarded as efficacious and where quality of the data supporting the recommendation is sound.
type MedicalGuidelineRecommendation struct {
	MedicalGuideline

	RecommendationStrength interface{} `json:"recommendationStrength,omitempty"`
}

// Any medical imaging modality typically used for diagnostic purposes. Enumerated type.
type MedicalImagingTechnique struct {
	MedicalEnumeration
}

// A condition or factor that indicates use of a medical therapy, including signs, symptoms, risk factors, anatomical states, etc.
type MedicalIndication struct {
	MedicalEntity
}

// A utility class that serves as the umbrella for a number of 'intangible' things in the medical space.
type MedicalIntangible struct {
	MedicalEntity
}

// An observational study is a type of medical study that attempts to infer the possible effect of a treatment through observation of a cohort of subjects over a period of time. In an observational study, the assignment of subjects into treatment groups versus control groups is outside the control of the investigator. This is in contrast with controlled studies, such as the randomized controlled trials represented by MedicalTrial, where each subject is randomly assigned to a treatment group or a control group before the start of the treatment.
type MedicalObservationalStudy struct {
	MedicalStudy

	StudyDesign interface{} `json:"studyDesign,omitempty"`
}

// Design models for observational medical studies. Enumerated type.
type MedicalObservationalStudyDesign struct {
	MedicalEnumeration
}

// A medical organization (physical or not), such as hospital, institution or clinic.
type MedicalOrganization struct {
	Organization

	HealthPlanNetworkId    interface{} `json:"healthPlanNetworkId,omitempty"`
	IsAcceptingNewPatients interface{} `json:"isAcceptingNewPatients,omitempty"`
	MedicalSpecialty       interface{} `json:"medicalSpecialty,omitempty"`
}

// A process of care used in either a diagnostic, therapeutic, preventive or palliative capacity that relies on invasive (surgical), non-invasive, or other techniques.
type MedicalProcedure struct {
	MedicalEntity

	BodyLocation  interface{} `json:"bodyLocation,omitempty"`
	Followup      interface{} `json:"followup,omitempty"`
	HowPerformed  interface{} `json:"howPerformed,omitempty"`
	Preparation   interface{} `json:"preparation,omitempty"`
	ProcedureType interface{} `json:"procedureType,omitempty"`
	Status        interface{} `json:"status,omitempty"`
}

// An enumeration that describes different types of medical procedures.
type MedicalProcedureType struct {
	MedicalEnumeration
}

// A complex mathematical calculation requiring an online calculator, used to assess prognosis. Note: use the url property of Thing to record any URLs for online calculators.
type MedicalRiskCalculator struct {
	MedicalRiskEstimator
}

// Any rule set or interactive tool for estimating the risk of developing a complication or condition.
type MedicalRiskEstimator struct {
	MedicalEntity

	EstimatesRiskOf    interface{} `json:"estimatesRiskOf,omitempty"`
	IncludedRiskFactor interface{} `json:"includedRiskFactor,omitempty"`
}

// A risk factor is anything that increases a person's likelihood of developing or contracting a disease, medical condition, or complication.
type MedicalRiskFactor struct {
	MedicalEntity

	IncreasesRiskOf interface{} `json:"increasesRiskOf,omitempty"`
}

// A simple system that adds up the number of risk factors to yield a score that is associated with prognosis, e.g. CHAD score, TIMI risk score.
type MedicalRiskScore struct {
	MedicalRiskEstimator

	Algorithm interface{} `json:"algorithm,omitempty"`
}

// A scholarly article in the medical domain.
type MedicalScholarlyArticle struct {
	ScholarlyArticle

	PublicationType interface{} `json:"publicationType,omitempty"`
}

// Any physical manifestation of a person's medical condition discoverable by objective diagnostic tests or physical examination.
type MedicalSign struct {
	MedicalSignOrSymptom

	IdentifyingExam interface{} `json:"identifyingExam,omitempty"`
	IdentifyingTest interface{} `json:"identifyingTest,omitempty"`
}

// Any feature associated or not with a medical condition. In medicine a symptom is generally subjective while a sign is objective.
type MedicalSignOrSymptom struct {
	MedicalCondition

	PossibleTreatment interface{} `json:"possibleTreatment,omitempty"`
}

// Any specific branch of medical science or practice. Medical specialities include clinical specialties that pertain to particular organ systems and their respective disease states, as well as allied health specialties. Enumerated type.
type MedicalSpecialty struct {
	MedicalEnumeration
	// TODO: Specialty
}

// A medical study is an umbrella type covering all kinds of research studies relating to human medicine or health, including observational studies and interventional trials and registries, randomized, controlled or not. When the specific type of study is known, use one of the extensions of this type, such as MedicalTrial or MedicalObservationalStudy. Also, note that this type should be used to mark up data that describes the study itself; to tag an article that publishes the results of a study, use MedicalScholarlyArticle. Note: use the code property of MedicalEntity to store study IDs, e.g. clinicaltrials.gov ID.
type MedicalStudy struct {
	MedicalEntity

	HealthCondition interface{} `json:"healthCondition,omitempty"`
	Sponsor         interface{} `json:"sponsor,omitempty"`
	Status          interface{} `json:"status,omitempty"`
	StudyLocation   interface{} `json:"studyLocation,omitempty"`
	StudySubject    interface{} `json:"studySubject,omitempty"`
}

// The status of a medical study. Enumerated type.
type MedicalStudyStatus struct {
	MedicalEnumeration
}

// Any complaint sensed and expressed by the patient (therefore defined as subjective)  like stomachache, lower-back pain, or fatigue.
type MedicalSymptom struct {
	MedicalSignOrSymptom
}

// Any medical test, typically performed for diagnostic purposes.
type MedicalTest struct {
	MedicalEntity

	AffectedBy     interface{} `json:"affectedBy,omitempty"`
	NormalRange    interface{} `json:"normalRange,omitempty"`
	SignDetected   interface{} `json:"signDetected,omitempty"`
	UsedToDiagnose interface{} `json:"usedToDiagnose,omitempty"`
	UsesDevice     interface{} `json:"usesDevice,omitempty"`
}

// Any collection of tests commonly ordered together.
type MedicalTestPanel struct {
	MedicalTest

	SubTest interface{} `json:"subTest,omitempty"`
}

// Any medical intervention designed to prevent, treat, and cure human diseases and medical conditions, including both curative and palliative therapies. Medical therapies are typically processes of care relying upon pharmacotherapy, behavioral therapy, supportive therapy (with fluid or nutrition for example), or detoxification (e.g. hemodialysis) aimed at improving or preventing a health condition.
type MedicalTherapy struct {
	TherapeuticProcedure

	Contraindication      interface{} `json:"contraindication,omitempty"`
	DuplicateTherapy      interface{} `json:"duplicateTherapy,omitempty"`
	SeriousAdverseOutcome interface{} `json:"seriousAdverseOutcome,omitempty"`
}

// A medical trial is a type of medical study that uses scientific process used to compare the safety and efficacy of medical therapies or medical procedures. In general, medical trials are controlled and subjects are allocated at random to the different treatment and/or control groups.
type MedicalTrial struct {
	MedicalStudy

	TrialDesign interface{} `json:"trialDesign,omitempty"`
}

// Design models for medical trials. Enumerated type.
type MedicalTrialDesign struct {
	MedicalEnumeration
}

// A web page that provides medical information.
type MedicalWebPage struct {
	WebPage

	Aspect          interface{} `json:"aspect,omitempty"`
	MedicalAudience interface{} `json:"medicalAudience,omitempty"`
}

// Systems of medical practice.
type MedicineSystem struct {
	MedicalEnumeration
}

/*
A meeting room, conference room, or conference hall is a room provided for singular events such as business conferences and meetings (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Conference_hall">http://en.wikipedia.org/wiki/Conference_hall</a>).
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type MeetingRoom struct {
	Room
}

// A men's clothing store.
type MensClothingStore struct {
	Store
}

// A structured representation of food or drink items available from a FoodEstablishment.
type Menu struct {
	CreativeWork

	HasMenuItem    interface{} `json:"hasMenuItem,omitempty"`
	HasMenuSection interface{} `json:"hasMenuSection,omitempty"`
}

// A food or drink item listed in a menu or menu section.
type MenuItem struct {
	Intangible

	MenuAddOn       interface{} `json:"menuAddOn,omitempty"`
	Nutrition       interface{} `json:"nutrition,omitempty"`
	Offers          interface{} `json:"offers,omitempty"`
	SuitableForDiet interface{} `json:"suitableForDiet,omitempty"`
}

// A sub-grouping of food or drink items in a menu. E.g. courses (such as 'Dinner', 'Breakfast', etc.), specific type of dishes (such as 'Meat', 'Vegan', 'Drinks', etc.), or some other classification made by the menu provider.
type MenuSection struct {
	CreativeWork

	HasMenuItem    interface{} `json:"hasMenuItem,omitempty"`
	HasMenuSection interface{} `json:"hasMenuSection,omitempty"`
}

// Enumerates several kinds of product return policies.
type MerchantReturnEnumeration struct {
	Enumeration
}

// A MerchantReturnPolicy provides information about product return policies associated with an [[Organization]], [[Product]], or [[Offer]].
type MerchantReturnPolicy struct {
	Intangible

	AdditionalProperty                      interface{} `json:"additionalProperty,omitempty"`
	ApplicableCountry                       interface{} `json:"applicableCountry,omitempty"`
	CustomerRemorseReturnFees               interface{} `json:"customerRemorseReturnFees,omitempty"`
	CustomerRemorseReturnLabelSource        interface{} `json:"customerRemorseReturnLabelSource,omitempty"`
	CustomerRemorseReturnShippingFeesAmount interface{} `json:"customerRemorseReturnShippingFeesAmount,omitempty"`
	InStoreReturnsOffered                   interface{} `json:"inStoreReturnsOffered,omitempty"`
	ItemCondition                           interface{} `json:"itemCondition,omitempty"`
	ItemDefectReturnFees                    interface{} `json:"itemDefectReturnFees,omitempty"`
	ItemDefectReturnLabelSource             interface{} `json:"itemDefectReturnLabelSource,omitempty"`
	ItemDefectReturnShippingFeesAmount      interface{} `json:"itemDefectReturnShippingFeesAmount,omitempty"`
	MerchantReturnDays                      interface{} `json:"merchantReturnDays,omitempty"`
	MerchantReturnLink                      interface{} `json:"merchantReturnLink,omitempty"`
	RefundType                              interface{} `json:"refundType,omitempty"`
	RestockingFee                           interface{} `json:"restockingFee,omitempty"`
	ReturnFees                              interface{} `json:"returnFees,omitempty"`
	ReturnLabelSource                       interface{} `json:"returnLabelSource,omitempty"`
	ReturnMethod                            interface{} `json:"returnMethod,omitempty"`
	ReturnPolicyCategory                    interface{} `json:"returnPolicyCategory,omitempty"`
	ReturnPolicyCountry                     interface{} `json:"returnPolicyCountry,omitempty"`
	ReturnPolicySeasonalOverride            interface{} `json:"returnPolicySeasonalOverride,omitempty"`
	ReturnShippingFeesAmount                interface{} `json:"returnShippingFeesAmount,omitempty"`
}

// A seasonal override of a return policy, for example used for holidays.
type MerchantReturnPolicySeasonalOverride struct {
	Intangible

	EndDate              interface{} `json:"endDate,omitempty"`
	MerchantReturnDays   interface{} `json:"merchantReturnDays,omitempty"`
	ReturnPolicyCategory interface{} `json:"returnPolicyCategory,omitempty"`
	StartDate            interface{} `json:"startDate,omitempty"`
}

// A single message from a sender to one or more organizations or people.
type Message struct {
	CreativeWork

	BccRecipient      interface{} `json:"bccRecipient,omitempty"`
	CcRecipient       interface{} `json:"ccRecipient,omitempty"`
	DateRead          interface{} `json:"dateRead,omitempty"`
	DateReceived      interface{} `json:"dateReceived,omitempty"`
	DateSent          interface{} `json:"dateSent,omitempty"`
	MessageAttachment interface{} `json:"messageAttachment,omitempty"`
	Recipient         interface{} `json:"recipient,omitempty"`
	Sender            interface{} `json:"sender,omitempty"`
	ToRecipient       interface{} `json:"toRecipient,omitempty"`
}

// A middle school (typically for children aged around 11-14, although this varies somewhat).
type MiddleSchool struct {
	EducationalOrganization
}

// A software application designed specifically to work well on a mobile device such as a telephone.
type MobileApplication struct {
	SoftwareApplication

	CarrierRequirements interface{} `json:"carrierRequirements,omitempty"`
}

// A store that sells mobile phones and related accessories.
type MobilePhoneStore struct {
	Store
}

// Any constitutionally or isotopically distinct atom, molecule, ion, ion pair, radical, radical ion, complex, conformer etc., identifiable as a separately distinguishable entity.
type MolecularEntity struct {
	BioChemEntity

	ChemicalRole                interface{} `json:"chemicalRole,omitempty"`
	InChI                       interface{} `json:"inChI,omitempty"`
	InChIKey                    interface{} `json:"inChIKey,omitempty"`
	IupacName                   interface{} `json:"iupacName,omitempty"`
	MolecularFormula            interface{} `json:"molecularFormula,omitempty"`
	MolecularWeight             interface{} `json:"molecularWeight,omitempty"`
	MonoisotopicMolecularWeight interface{} `json:"monoisotopicMolecularWeight,omitempty"`
	PotentialUse                interface{} `json:"potentialUse,omitempty"`
	Smiles                      interface{} `json:"smiles,omitempty"`
}

// A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]] Types to describe the price of an Offer, Invoice, etc.
type MonetaryAmount struct {
	StructuredValue

	Currency     interface{} `json:"currency,omitempty"`
	MaxValue     interface{} `json:"maxValue,omitempty"`
	MinValue     interface{} `json:"minValue,omitempty"`
	ValidFrom    interface{} `json:"validFrom,omitempty"`
	ValidThrough interface{} `json:"validThrough,omitempty"`
	Value        interface{} `json:"value,omitempty"`
}

// A statistical distribution of monetary amounts.
type MonetaryAmountDistribution struct {
	QuantitativeValueDistribution

	Currency interface{} `json:"currency,omitempty"`
}

// A monetary grant.
type MonetaryGrant struct {
	Grant

	Amount interface{} `json:"amount,omitempty"`
	Funder interface{} `json:"funder,omitempty"`
}

// The act of transferring money from one place to another place. This may occur electronically or physically.
type MoneyTransfer struct {
	TransferAction

	Amount          interface{} `json:"amount,omitempty"`
	BeneficiaryBank interface{} `json:"beneficiaryBank,omitempty"`
}

// A loan in which property or real estate is used as collateral. (A loan securitized against some real estate).
type MortgageLoan struct {
	LoanOrCredit

	DomiciledMortgage         interface{} `json:"domiciledMortgage,omitempty"`
	LoanMortgageMandateAmount interface{} `json:"loanMortgageMandateAmount,omitempty"`
}

// A mosque.
type Mosque struct {
	PlaceOfWorship
}

/*
A motel.
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type Motel struct {
	LodgingBusiness
}

// A motorcycle or motorbike is a single-track, two-wheeled motor vehicle.
type Motorcycle struct {
	Vehicle
}

// A motorcycle dealer.
type MotorcycleDealer struct {
	AutomotiveBusiness
}

// A motorcycle repair shop.
type MotorcycleRepair struct {
	AutomotiveBusiness
}

// A motorized bicycle is a bicycle with an attached motor used to power the vehicle, or to assist with pedaling.
type MotorizedBicycle struct {
	Vehicle
}

// A mountain, like Mount Whitney or Mount Everest.
type Mountain struct {
	Landform
}

// The act of an agent relocating to a place.\n\nRelated actions:\n\n* [[TransferAction]]: Unlike TransferAction, the subject of the move is a living Person or Organization rather than an inanimate object.
type MoveAction struct {
	Action

	FromLocation interface{} `json:"fromLocation,omitempty"`
	ToLocation   interface{} `json:"toLocation,omitempty"`
}

// A movie.
type Movie struct {
	CreativeWork

	Actor             interface{} `json:"actor,omitempty"`
	Actors            interface{} `json:"actors,omitempty"`
	CountryOfOrigin   interface{} `json:"countryOfOrigin,omitempty"`
	Director          interface{} `json:"director,omitempty"`
	Directors         interface{} `json:"directors,omitempty"`
	Duration          interface{} `json:"duration,omitempty"`
	MusicBy           interface{} `json:"musicBy,omitempty"`
	ProductionCompany interface{} `json:"productionCompany,omitempty"`
	SubtitleLanguage  interface{} `json:"subtitleLanguage,omitempty"`
	TitleEIDR         interface{} `json:"titleEIDR,omitempty"`
	Trailer           interface{} `json:"trailer,omitempty"`
}

// A short segment/part of a movie.
type MovieClip struct {
	Clip
}

// A movie rental store.
type MovieRentalStore struct {
	Store
}

// A series of movies. Included movies can be indicated with the hasPart property.
type MovieSeries struct {
	CreativeWorkSeries

	Actor             interface{} `json:"actor,omitempty"`
	Actors            interface{} `json:"actors,omitempty"`
	Director          interface{} `json:"director,omitempty"`
	Directors         interface{} `json:"directors,omitempty"`
	MusicBy           interface{} `json:"musicBy,omitempty"`
	ProductionCompany interface{} `json:"productionCompany,omitempty"`
	Trailer           interface{} `json:"trailer,omitempty"`
}

// A movie theater.
type MovieTheater struct {
	CivicStructure
	// TODO: EntertainmentBusiness

	ScreenCount interface{} `json:"screenCount,omitempty"`
}

// A moving company.
type MovingCompany struct {
	HomeAndConstructionBusiness
}

// A muscle is an anatomical structure consisting of a contractile form of tissue that animals use to effect movement.
type Muscle struct {
	AnatomicalStructure

	Antagonist   interface{} `json:"antagonist,omitempty"`
	BloodSupply  interface{} `json:"bloodSupply,omitempty"`
	Insertion    interface{} `json:"insertion,omitempty"`
	MuscleAction interface{} `json:"muscleAction,omitempty"`
	Nerve        interface{} `json:"nerve,omitempty"`
}

// A museum.
type Museum struct {
	CivicStructure
}

// A collection of music tracks.
type MusicAlbum struct {
	MusicPlaylist

	AlbumProductionType interface{} `json:"albumProductionType,omitempty"`
	AlbumRelease        interface{} `json:"albumRelease,omitempty"`
	AlbumReleaseType    interface{} `json:"albumReleaseType,omitempty"`
	ByArtist            interface{} `json:"byArtist,omitempty"`
}

// Classification of the album by it's type of content: soundtrack, live album, studio album, etc.
type MusicAlbumProductionType struct {
	Enumeration
}

// The kind of release which this album is: single, EP or album.
type MusicAlbumReleaseType struct {
	Enumeration
}

// A musical composition.
type MusicComposition struct {
	CreativeWork

	Composer             interface{} `json:"composer,omitempty"`
	FirstPerformance     interface{} `json:"firstPerformance,omitempty"`
	IncludedComposition  interface{} `json:"includedComposition,omitempty"`
	IswcCode             interface{} `json:"iswcCode,omitempty"`
	Lyricist             interface{} `json:"lyricist,omitempty"`
	Lyrics               interface{} `json:"lyrics,omitempty"`
	MusicArrangement     interface{} `json:"musicArrangement,omitempty"`
	MusicCompositionForm interface{} `json:"musicCompositionForm,omitempty"`
	MusicalKey           interface{} `json:"musicalKey,omitempty"`
	RecordedAs           interface{} `json:"recordedAs,omitempty"`
}

// Event type: Music event.
type MusicEvent struct {
	Event
}

// A musical group, such as a band, an orchestra, or a choir. Can also be a solo musician.
type MusicGroup struct {
	PerformingGroup

	Album            interface{} `json:"album,omitempty"`
	Albums           interface{} `json:"albums,omitempty"`
	Genre            interface{} `json:"genre,omitempty"`
	MusicGroupMember interface{} `json:"musicGroupMember,omitempty"`
	Track            interface{} `json:"track,omitempty"`
	Tracks           interface{} `json:"tracks,omitempty"`
}

// A collection of music tracks in playlist form.
type MusicPlaylist struct {
	CreativeWork

	NumTracks interface{} `json:"numTracks,omitempty"`
	Track     interface{} `json:"track,omitempty"`
	Tracks    interface{} `json:"tracks,omitempty"`
}

// A music recording (track), usually a single song.
type MusicRecording struct {
	CreativeWork

	ByArtist    interface{} `json:"byArtist,omitempty"`
	Duration    interface{} `json:"duration,omitempty"`
	InAlbum     interface{} `json:"inAlbum,omitempty"`
	InPlaylist  interface{} `json:"inPlaylist,omitempty"`
	IsrcCode    interface{} `json:"isrcCode,omitempty"`
	RecordingOf interface{} `json:"recordingOf,omitempty"`
}

// A MusicRelease is a specific release of a music album.
type MusicRelease struct {
	MusicPlaylist

	CatalogNumber      interface{} `json:"catalogNumber,omitempty"`
	CreditedTo         interface{} `json:"creditedTo,omitempty"`
	Duration           interface{} `json:"duration,omitempty"`
	MusicReleaseFormat interface{} `json:"musicReleaseFormat,omitempty"`
	RecordLabel        interface{} `json:"recordLabel,omitempty"`
	ReleaseOf          interface{} `json:"releaseOf,omitempty"`
}

// Format of this release (the type of recording media used, ie. compact disc, digital media, LP, etc.).
type MusicReleaseFormatType struct {
	Enumeration
}

// A music store.
type MusicStore struct {
	Store
}

// A music venue.
type MusicVenue struct {
	CivicStructure
}

// A music video file.
type MusicVideoObject struct {
	MediaObject
}

// Organization: Non-governmental Organization.
type NGO struct {
	Organization
}

// NLNonprofitType: Non-profit organization type originating from the Netherlands.
type NLNonprofitType struct {
	NonprofitType
}

// A nail salon.
type NailSalon struct {
	HealthAndBeautyBusiness
}

// A common pathway for the electrochemical nerve impulses that are transmitted along each of the axons.
type Nerve struct {
	AnatomicalStructure

	Branch      interface{} `json:"branch,omitempty"`
	NerveMotor  interface{} `json:"nerveMotor,omitempty"`
	SensoryUnit interface{} `json:"sensoryUnit,omitempty"`
	SourcedFrom interface{} `json:"sourcedFrom,omitempty"`
}

/*
A NewsArticle is an article whose content reports news, or provides background context and supporting materials for understanding the news.

A more detailed overview of [schema.org News markup](/docs/news.html) is also available.
*/
type NewsArticle struct {
	Article

	Dateline     interface{} `json:"dateline,omitempty"`
	PrintColumn  interface{} `json:"printColumn,omitempty"`
	PrintEdition interface{} `json:"printEdition,omitempty"`
	PrintPage    interface{} `json:"printPage,omitempty"`
	PrintSection interface{} `json:"printSection,omitempty"`
}

// A News/Media organization such as a newspaper or TV station.
type NewsMediaOrganization struct {
	Organization

	ActionableFeedbackPolicy        interface{} `json:"actionableFeedbackPolicy,omitempty"`
	CorrectionsPolicy               interface{} `json:"correctionsPolicy,omitempty"`
	DiversityPolicy                 interface{} `json:"diversityPolicy,omitempty"`
	DiversityStaffingReport         interface{} `json:"diversityStaffingReport,omitempty"`
	EthicsPolicy                    interface{} `json:"ethicsPolicy,omitempty"`
	Masthead                        interface{} `json:"masthead,omitempty"`
	MissionCoveragePrioritiesPolicy interface{} `json:"missionCoveragePrioritiesPolicy,omitempty"`
	NoBylinesPolicy                 interface{} `json:"noBylinesPolicy,omitempty"`
	OwnershipFundingInfo            interface{} `json:"ownershipFundingInfo,omitempty"`
	UnnamedSourcesPolicy            interface{} `json:"unnamedSourcesPolicy,omitempty"`
	VerificationFactCheckingPolicy  interface{} `json:"verificationFactCheckingPolicy,omitempty"`
}

// A publication containing information about varied topics that are pertinent to general information, a geographic area, or a specific subject matter (i.e. business, culture, education). Often published daily.
type Newspaper struct {
	Periodical
}

// A nightclub or discotheque.
type NightClub struct {
	EntertainmentBusiness
}

// NonprofitType enumerates several kinds of official non-profit types of which a non-profit organization can be.
type NonprofitType struct {
	Enumeration
}

// A notary.
type Notary struct {
	LegalService
}

// A file containing a note, primarily for the author.
type NoteDigitalDocument struct {
	DigitalDocument
}

// Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
type Number struct{}

// Nutritional information about the recipe.
type NutritionInformation struct {
	StructuredValue

	Calories              interface{} `json:"calories,omitempty"`
	CarbohydrateContent   interface{} `json:"carbohydrateContent,omitempty"`
	CholesterolContent    interface{} `json:"cholesterolContent,omitempty"`
	FatContent            interface{} `json:"fatContent,omitempty"`
	FiberContent          interface{} `json:"fiberContent,omitempty"`
	ProteinContent        interface{} `json:"proteinContent,omitempty"`
	SaturatedFatContent   interface{} `json:"saturatedFatContent,omitempty"`
	ServingSize           interface{} `json:"servingSize,omitempty"`
	SodiumContent         interface{} `json:"sodiumContent,omitempty"`
	SugarContent          interface{} `json:"sugarContent,omitempty"`
	TransFatContent       interface{} `json:"transFatContent,omitempty"`
	UnsaturatedFatContent interface{} `json:"unsaturatedFatContent,omitempty"`
}

/*
Instances of the class [[Observation]] are used to specify observations about an entity (which may or may not be an instance of a [[StatisticalPopulation]]), at a particular time. The principal properties of an [[Observation]] are [[observedNode]], [[measuredProperty]], [[measuredValue]] (or [[median]], etc.) and [[observationDate]] ([[measuredProperty]] properties can, but need not always, be W3C RDF Data Cube "measure properties", as in the [lifeExpectancy example](https://www.w3.org/TR/vocab-data-cube/#dsd-example)).
See also [[StatisticalPopulation]], and the [data and datasets](/docs/data-and-datasets.html) overview for more details.

*/
type Observation struct {
	Intangible

	MarginOfError    interface{} `json:"marginOfError,omitempty"`
	MeasuredProperty interface{} `json:"measuredProperty,omitempty"`
	MeasuredValue    interface{} `json:"measuredValue,omitempty"`
	ObservationDate  interface{} `json:"observationDate,omitempty"`
	ObservedNode     interface{} `json:"observedNode,omitempty"`
}

// A profession, may involve prolonged training and/or a formal qualification.
type Occupation struct {
	Intangible

	EducationRequirements  interface{} `json:"educationRequirements,omitempty"`
	EstimatedSalary        interface{} `json:"estimatedSalary,omitempty"`
	ExperienceRequirements interface{} `json:"experienceRequirements,omitempty"`
	OccupationLocation     interface{} `json:"occupationLocation,omitempty"`
	OccupationalCategory   interface{} `json:"occupationalCategory,omitempty"`
	Qualifications         interface{} `json:"qualifications,omitempty"`
	Responsibilities       interface{} `json:"responsibilities,omitempty"`
	Skills                 interface{} `json:"skills,omitempty"`
}

// Indicates employment-related experience requirements, e.g. [[monthsOfExperience]].
type OccupationalExperienceRequirements struct {
	Intangible

	MonthsOfExperience interface{} `json:"monthsOfExperience,omitempty"`
}

// A treatment of people with physical, emotional, or social problems, using purposeful activity to help them overcome or learn to deal with their problems.
type OccupationalTherapy struct {
	MedicalTherapy
}

// An ocean (for example, the Pacific).
type OceanBodyOfWater struct {
	BodyOfWater
}

// An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
type Offer struct {
	Intangible

	AcceptedPaymentMethod     interface{} `json:"acceptedPaymentMethod,omitempty"`
	AddOn                     interface{} `json:"addOn,omitempty"`
	AdvanceBookingRequirement interface{} `json:"advanceBookingRequirement,omitempty"`
	AggregateRating           interface{} `json:"aggregateRating,omitempty"`
	AreaServed                interface{} `json:"areaServed,omitempty"`
	Availability              interface{} `json:"availability,omitempty"`
	AvailabilityEnds          interface{} `json:"availabilityEnds,omitempty"`
	AvailabilityStarts        interface{} `json:"availabilityStarts,omitempty"`
	AvailableAtOrFrom         interface{} `json:"availableAtOrFrom,omitempty"`
	AvailableDeliveryMethod   interface{} `json:"availableDeliveryMethod,omitempty"`
	BusinessFunction          interface{} `json:"businessFunction,omitempty"`
	Category                  interface{} `json:"category,omitempty"`
	DeliveryLeadTime          interface{} `json:"deliveryLeadTime,omitempty"`
	EligibleCustomerType      interface{} `json:"eligibleCustomerType,omitempty"`
	EligibleDuration          interface{} `json:"eligibleDuration,omitempty"`
	EligibleQuantity          interface{} `json:"eligibleQuantity,omitempty"`
	EligibleRegion            interface{} `json:"eligibleRegion,omitempty"`
	EligibleTransactionVolume interface{} `json:"eligibleTransactionVolume,omitempty"`
	Gtin                      interface{} `json:"gtin,omitempty"`
	Gtin12                    interface{} `json:"gtin12,omitempty"`
	Gtin13                    interface{} `json:"gtin13,omitempty"`
	Gtin14                    interface{} `json:"gtin14,omitempty"`
	Gtin8                     interface{} `json:"gtin8,omitempty"`
	HasAdultConsideration     interface{} `json:"hasAdultConsideration,omitempty"`
	HasMeasurement            interface{} `json:"hasMeasurement,omitempty"`
	HasMerchantReturnPolicy   interface{} `json:"hasMerchantReturnPolicy,omitempty"`
	IncludesObject            interface{} `json:"includesObject,omitempty"`
	IneligibleRegion          interface{} `json:"ineligibleRegion,omitempty"`
	InventoryLevel            interface{} `json:"inventoryLevel,omitempty"`
	IsFamilyFriendly          interface{} `json:"isFamilyFriendly,omitempty"`
	ItemCondition             interface{} `json:"itemCondition,omitempty"`
	ItemOffered               interface{} `json:"itemOffered,omitempty"`
	LeaseLength               interface{} `json:"leaseLength,omitempty"`
	Mpn                       interface{} `json:"mpn,omitempty"`
	OfferedBy                 interface{} `json:"offeredBy,omitempty"`
	Price                     interface{} `json:"price,omitempty"`
	PriceCurrency             interface{} `json:"priceCurrency,omitempty"`
	PriceSpecification        interface{} `json:"priceSpecification,omitempty"`
	PriceValidUntil           interface{} `json:"priceValidUntil,omitempty"`
	Review                    interface{} `json:"review,omitempty"`
	Reviews                   interface{} `json:"reviews,omitempty"`
	Seller                    interface{} `json:"seller,omitempty"`
	SerialNumber              interface{} `json:"serialNumber,omitempty"`
	ShippingDetails           interface{} `json:"shippingDetails,omitempty"`
	Sku                       interface{} `json:"sku,omitempty"`
	ValidFrom                 interface{} `json:"validFrom,omitempty"`
	ValidThrough              interface{} `json:"validThrough,omitempty"`
	Warranty                  interface{} `json:"warranty,omitempty"`
}

// An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs that are offeredBy the same provider.
type OfferCatalog struct {
	ItemList
}

/*
An [[OfferForLease]] in Schema.org represents an [[Offer]] to lease out something, i.e. an [[Offer]] whose
  [[businessFunction]] is [lease out](http://purl.org/goodrelations/v1#LeaseOut.). See [Good Relations](https://en.wikipedia.org/wiki/GoodRelations) for
  background on the underlying concepts.

*/
type OfferForLease struct {
	Offer
}

/*
An [[OfferForPurchase]] in Schema.org represents an [[Offer]] to sell something, i.e. an [[Offer]] whose
  [[businessFunction]] is [sell](http://purl.org/goodrelations/v1#Sell.). See [Good Relations](https://en.wikipedia.org/wiki/GoodRelations) for
  background on the underlying concepts.

*/
type OfferForPurchase struct {
	Offer
}

// A list of possible conditions for the item.
type OfferItemCondition struct {
	Enumeration
}

/*
OfferShippingDetails represents information about shipping destinations.

Multiple of these entities can be used to represent different shipping rates for different destinations:

One entity for Alaska/Hawaii. A different one for continental US.A different one for all France.

Multiple of these entities can be used to represent different shipping costs and delivery times.

Two entities that are identical but differ in rate and time:

e.g. Cheaper and slower: $5 in 5-7days
or Fast and expensive: $15 in 1-2 days.
*/
type OfferShippingDetails struct {
	StructuredValue

	DeliveryTime         interface{} `json:"deliveryTime,omitempty"`
	DoesNotShip          interface{} `json:"doesNotShip,omitempty"`
	ShippingDestination  interface{} `json:"shippingDestination,omitempty"`
	ShippingLabel        interface{} `json:"shippingLabel,omitempty"`
	ShippingRate         interface{} `json:"shippingRate,omitempty"`
	ShippingSettingsLink interface{} `json:"shippingSettingsLink,omitempty"`
	TransitTimeLabel     interface{} `json:"transitTimeLabel,omitempty"`
}

// An office equipment store.
type OfficeEquipmentStore struct {
	Store
}

// A publication event e.g. catch-up TV or radio podcast, during which a program is available on-demand.
type OnDemandEvent struct {
	PublicationEvent
}

// A particular online business, either standalone or the online part of a broader organization. Examples include an eCommerce site, an online travel booking site, an online learning site, an online logistics and shipping provider, an online (virtual) doctor, etc.
type OnlineBusiness struct {
	Organization
}

// An eCommerce site.
type OnlineStore struct {
	OnlineBusiness
}

/*
A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n
The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.

*/
type OpeningHoursSpecification struct {
	StructuredValue

	Closes       interface{} `json:"closes,omitempty"`
	DayOfWeek    interface{} `json:"dayOfWeek,omitempty"`
	Opens        interface{} `json:"opens,omitempty"`
	ValidFrom    interface{} `json:"validFrom,omitempty"`
	ValidThrough interface{} `json:"validThrough,omitempty"`
}

// An [[OpinionNewsArticle]] is a [[NewsArticle]] that primarily expresses opinions rather than journalistic reporting of news and events. For example, a [[NewsArticle]] consisting of a column or [[Blog]]/[[BlogPosting]] entry in the Opinions section of a news publication.
type OpinionNewsArticle struct {
	NewsArticle
}

// A store that sells reading glasses and similar devices for improving vision.
type Optician struct {
	MedicalBusiness
}

// An order is a confirmation of a transaction (a receipt), which can contain multiple line items, each represented by an Offer that has been accepted by the customer.
type Order struct {
	Intangible

	AcceptedOffer      interface{} `json:"acceptedOffer,omitempty"`
	BillingAddress     interface{} `json:"billingAddress,omitempty"`
	Broker             interface{} `json:"broker,omitempty"`
	ConfirmationNumber interface{} `json:"confirmationNumber,omitempty"`
	Customer           interface{} `json:"customer,omitempty"`
	Discount           interface{} `json:"discount,omitempty"`
	DiscountCode       interface{} `json:"discountCode,omitempty"`
	DiscountCurrency   interface{} `json:"discountCurrency,omitempty"`
	IsGift             interface{} `json:"isGift,omitempty"`
	Merchant           interface{} `json:"merchant,omitempty"`
	OrderDate          interface{} `json:"orderDate,omitempty"`
	OrderDelivery      interface{} `json:"orderDelivery,omitempty"`
	OrderNumber        interface{} `json:"orderNumber,omitempty"`
	OrderStatus        interface{} `json:"orderStatus,omitempty"`
	OrderedItem        interface{} `json:"orderedItem,omitempty"`
	PartOfInvoice      interface{} `json:"partOfInvoice,omitempty"`
	PaymentDue         interface{} `json:"paymentDue,omitempty"`
	PaymentDueDate     interface{} `json:"paymentDueDate,omitempty"`
	PaymentMethod      interface{} `json:"paymentMethod,omitempty"`
	PaymentMethodId    interface{} `json:"paymentMethodId,omitempty"`
	PaymentUrl         interface{} `json:"paymentUrl,omitempty"`
	Seller             interface{} `json:"seller,omitempty"`
}

// An agent orders an object/product/service to be delivered/sent.
type OrderAction struct {
	TradeAction

	DeliveryMethod interface{} `json:"deliveryMethod,omitempty"`
}

// An order item is a line of an order. It includes the quantity and shipping details of a bought offer.
type OrderItem struct {
	Intangible

	OrderDelivery   interface{} `json:"orderDelivery,omitempty"`
	OrderItemNumber interface{} `json:"orderItemNumber,omitempty"`
	OrderItemStatus interface{} `json:"orderItemStatus,omitempty"`
	OrderQuantity   interface{} `json:"orderQuantity,omitempty"`
	OrderedItem     interface{} `json:"orderedItem,omitempty"`
}

// Enumerated status values for Order.
type OrderStatus struct {
	StatusEnumeration
}

// An organization such as a school, NGO, corporation, club, etc.
type Organization struct {
	Thing

	ActionableFeedbackPolicy interface{} `json:"actionableFeedbackPolicy,omitempty"`
	Address                  interface{} `json:"address,omitempty"`
	AggregateRating          interface{} `json:"aggregateRating,omitempty"`
	Alumni                   interface{} `json:"alumni,omitempty"`
	AreaServed               interface{} `json:"areaServed,omitempty"`
	Award                    interface{} `json:"award,omitempty"`
	Awards                   interface{} `json:"awards,omitempty"`
	Brand                    interface{} `json:"brand,omitempty"`
	ContactPoint             interface{} `json:"contactPoint,omitempty"`
	ContactPoints            interface{} `json:"contactPoints,omitempty"`
	CorrectionsPolicy        interface{} `json:"correctionsPolicy,omitempty"`
	Department               interface{} `json:"department,omitempty"`
	DissolutionDate          interface{} `json:"dissolutionDate,omitempty"`
	DiversityPolicy          interface{} `json:"diversityPolicy,omitempty"`
	DiversityStaffingReport  interface{} `json:"diversityStaffingReport,omitempty"`
	Duns                     interface{} `json:"duns,omitempty"`
	Email                    interface{} `json:"email,omitempty"`
	Employee                 interface{} `json:"employee,omitempty"`
	Employees                interface{} `json:"employees,omitempty"`
	EthicsPolicy             interface{} `json:"ethicsPolicy,omitempty"`
	Event                    interface{} `json:"event,omitempty"`
	Events                   interface{} `json:"events,omitempty"`
	FaxNumber                interface{} `json:"faxNumber,omitempty"`
	Founder                  interface{} `json:"founder,omitempty"`
	Founders                 interface{} `json:"founders,omitempty"`
	FoundingDate             interface{} `json:"foundingDate,omitempty"`
	FoundingLocation         interface{} `json:"foundingLocation,omitempty"`
	Funder                   interface{} `json:"funder,omitempty"`
	Funding                  interface{} `json:"funding,omitempty"`
	GlobalLocationNumber     interface{} `json:"globalLocationNumber,omitempty"`
	HasCredential            interface{} `json:"hasCredential,omitempty"`
	HasMerchantReturnPolicy  interface{} `json:"hasMerchantReturnPolicy,omitempty"`
	HasOfferCatalog          interface{} `json:"hasOfferCatalog,omitempty"`
	HasPOS                   interface{} `json:"hasPOS,omitempty"`
	InteractionStatistic     interface{} `json:"interactionStatistic,omitempty"`
	IsicV4                   interface{} `json:"isicV4,omitempty"`
	Iso6523Code              interface{} `json:"iso6523Code,omitempty"`
	Keywords                 interface{} `json:"keywords,omitempty"`
	KnowsAbout               interface{} `json:"knowsAbout,omitempty"`
	KnowsLanguage            interface{} `json:"knowsLanguage,omitempty"`
	LegalName                interface{} `json:"legalName,omitempty"`
	LeiCode                  interface{} `json:"leiCode,omitempty"`
	Location                 interface{} `json:"location,omitempty"`
	Logo                     interface{} `json:"logo,omitempty"`
	MakesOffer               interface{} `json:"makesOffer,omitempty"`
	Member                   interface{} `json:"member,omitempty"`
	MemberOf                 interface{} `json:"memberOf,omitempty"`
	Members                  interface{} `json:"members,omitempty"`
	Naics                    interface{} `json:"naics,omitempty"`
	NonprofitStatus          interface{} `json:"nonprofitStatus,omitempty"`
	NumberOfEmployees        interface{} `json:"numberOfEmployees,omitempty"`
	OwnershipFundingInfo     interface{} `json:"ownershipFundingInfo,omitempty"`
	Owns                     interface{} `json:"owns,omitempty"`
	ParentOrganization       interface{} `json:"parentOrganization,omitempty"`
	PublishingPrinciples     interface{} `json:"publishingPrinciples,omitempty"`
	Review                   interface{} `json:"review,omitempty"`
	Reviews                  interface{} `json:"reviews,omitempty"`
	Seeks                    interface{} `json:"seeks,omitempty"`
	ServiceArea              interface{} `json:"serviceArea,omitempty"`
	Slogan                   interface{} `json:"slogan,omitempty"`
	Sponsor                  interface{} `json:"sponsor,omitempty"`
	SubOrganization          interface{} `json:"subOrganization,omitempty"`
	TaxID                    interface{} `json:"taxID,omitempty"`
	Telephone                interface{} `json:"telephone,omitempty"`
	UnnamedSourcesPolicy     interface{} `json:"unnamedSourcesPolicy,omitempty"`
	VatID                    interface{} `json:"vatID,omitempty"`
}

// A subclass of Role used to describe roles within organizations.
type OrganizationRole struct {
	Role

	NumberedPosition interface{} `json:"numberedPosition,omitempty"`
}

// The act of manipulating/administering/supervising/controlling one or more objects.
type OrganizeAction struct {
	Action
}

// An outlet store.
type OutletStore struct {
	Store
}

// A structured value providing information about when a certain organization or person owned a certain product.
type OwnershipInfo struct {
	StructuredValue

	AcquiredFrom interface{} `json:"acquiredFrom,omitempty"`
	OwnedFrom    interface{} `json:"ownedFrom,omitempty"`
	OwnedThrough interface{} `json:"ownedThrough,omitempty"`
	TypeOfGood   interface{} `json:"typeOfGood,omitempty"`
}

// The act of producing a painting, typically with paint and canvas as instruments.
type PaintAction struct {
	CreateAction
}

// A painting.
type Painting struct {
	CreativeWork
}

// A medical procedure intended primarily for palliative purposes, aimed at relieving the symptoms of an underlying health condition.
type PalliativeProcedure struct {
	MedicalProcedure
	// TODO: MedicalTherapy
}

// The delivery of a parcel either via the postal service or a commercial service.
type ParcelDelivery struct {
	Intangible

	Carrier              interface{} `json:"carrier,omitempty"`
	DeliveryAddress      interface{} `json:"deliveryAddress,omitempty"`
	DeliveryStatus       interface{} `json:"deliveryStatus,omitempty"`
	ExpectedArrivalFrom  interface{} `json:"expectedArrivalFrom,omitempty"`
	ExpectedArrivalUntil interface{} `json:"expectedArrivalUntil,omitempty"`
	HasDeliveryMethod    interface{} `json:"hasDeliveryMethod,omitempty"`
	ItemShipped          interface{} `json:"itemShipped,omitempty"`
	OriginAddress        interface{} `json:"originAddress,omitempty"`
	PartOfOrder          interface{} `json:"partOfOrder,omitempty"`
	Provider             interface{} `json:"provider,omitempty"`
	TrackingNumber       interface{} `json:"trackingNumber,omitempty"`
	TrackingUrl          interface{} `json:"trackingUrl,omitempty"`
}

// A set of characteristics describing parents, who can be interested in viewing some content.
type ParentAudience struct {
	PeopleAudience

	ChildMaxAge interface{} `json:"childMaxAge,omitempty"`
	ChildMinAge interface{} `json:"childMinAge,omitempty"`
}

// A park.
type Park struct {
	CivicStructure
}

// A parking lot or other parking facility.
type ParkingFacility struct {
	CivicStructure
}

// A medical test performed by a laboratory that typically involves examination of a tissue sample by a pathologist.
type PathologyTest struct {
	MedicalTest

	TissueSample interface{} `json:"tissueSample,omitempty"`
}

// A patient is any person recipient of health care services.
type Patient struct {
	MedicalAudience
	// TODO: Person

	Diagnosis       interface{} `json:"diagnosis,omitempty"`
	Drug            interface{} `json:"drug,omitempty"`
	HealthCondition interface{} `json:"healthCondition,omitempty"`
}

// A shop that will buy, or lend money against the security of, personal possessions.
type PawnShop struct {
	Store
}

// An agent pays a price to a participant.
type PayAction struct {
	TradeAction

	Recipient interface{} `json:"recipient,omitempty"`
}

// A payment method using a credit, debit, store or other card to associate the payment with an account.
type PaymentCard struct {
	FinancialProduct
	// TODO: PaymentMethod

	CashBack                      interface{} `json:"cashBack,omitempty"`
	ContactlessPayment            interface{} `json:"contactlessPayment,omitempty"`
	FloorLimit                    interface{} `json:"floorLimit,omitempty"`
	MonthlyMinimumRepaymentAmount interface{} `json:"monthlyMinimumRepaymentAmount,omitempty"`
}

// The costs of settling the payment using a particular payment method.
type PaymentChargeSpecification struct {
	PriceSpecification

	AppliesToDeliveryMethod interface{} `json:"appliesToDeliveryMethod,omitempty"`
	AppliesToPaymentMethod  interface{} `json:"appliesToPaymentMethod,omitempty"`
}

/*
A payment method is a standardized procedure for transferring the monetary amount for a purchase. Payment methods are characterized by the legal and technical structures used, and by the organization or group carrying out the transaction.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#ByBankTransferInAdvance\n* http://purl.org/goodrelations/v1#ByInvoice\n* http://purl.org/goodrelations/v1#Cash\n* http://purl.org/goodrelations/v1#CheckInAdvance\n* http://purl.org/goodrelations/v1#COD\n* http://purl.org/goodrelations/v1#DirectDebit\n* http://purl.org/goodrelations/v1#GoogleCheckout\n* http://purl.org/goodrelations/v1#PayPal\n* http://purl.org/goodrelations/v1#PaySwarm

*/
type PaymentMethod struct {
	Enumeration
}

// A Service to transfer funds from a person or organization to a beneficiary person or organization.
type PaymentService struct {
	FinancialProduct
}

// A specific payment status. For example, PaymentDue, PaymentComplete, etc.
type PaymentStatusType struct {
	StatusEnumeration
}

// A set of characteristics belonging to people, e.g. who compose an item's target audience.
type PeopleAudience struct {
	Audience

	HealthCondition      interface{} `json:"healthCondition,omitempty"`
	RequiredGender       interface{} `json:"requiredGender,omitempty"`
	RequiredMaxAge       interface{} `json:"requiredMaxAge,omitempty"`
	RequiredMinAge       interface{} `json:"requiredMinAge,omitempty"`
	SuggestedAge         interface{} `json:"suggestedAge,omitempty"`
	SuggestedGender      interface{} `json:"suggestedGender,omitempty"`
	SuggestedMaxAge      interface{} `json:"suggestedMaxAge,omitempty"`
	SuggestedMeasurement interface{} `json:"suggestedMeasurement,omitempty"`
	SuggestedMinAge      interface{} `json:"suggestedMinAge,omitempty"`
}

// The act of participating in performance arts.
type PerformAction struct {
	PlayAction

	EntertainmentBusiness interface{} `json:"entertainmentBusiness,omitempty"`
}

// A PerformanceRole is a Role that some entity places with regard to a theatrical performance, e.g. in a Movie, TVSeries etc.
type PerformanceRole struct {
	Role

	CharacterName interface{} `json:"characterName,omitempty"`
}

// A theater or other performing art center.
type PerformingArtsTheater struct {
	CivicStructure
}

// A performance group, such as a band, an orchestra, or a circus.
type PerformingGroup struct {
	Organization
}

// A publication in any medium issued in successive parts bearing numerical or chronological designations and intended, such as a magazine, scholarly journal, or newspaper to continue indefinitely.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
type Periodical struct {
	CreativeWorkSeries
}

// A permit issued by an organization, e.g. a parking pass.
type Permit struct {
	Intangible

	IssuedBy       interface{} `json:"issuedBy,omitempty"`
	IssuedThrough  interface{} `json:"issuedThrough,omitempty"`
	PermitAudience interface{} `json:"permitAudience,omitempty"`
	ValidFor       interface{} `json:"validFor,omitempty"`
	ValidFrom      interface{} `json:"validFrom,omitempty"`
	ValidIn        interface{} `json:"validIn,omitempty"`
	ValidUntil     interface{} `json:"validUntil,omitempty"`
}

// A person (alive, dead, undead, or fictional).
type Person struct {
	Thing

	AdditionalName       interface{} `json:"additionalName,omitempty"`
	Address              interface{} `json:"address,omitempty"`
	Affiliation          interface{} `json:"affiliation,omitempty"`
	AlumniOf             interface{} `json:"alumniOf,omitempty"`
	Award                interface{} `json:"award,omitempty"`
	Awards               interface{} `json:"awards,omitempty"`
	BirthDate            interface{} `json:"birthDate,omitempty"`
	BirthPlace           interface{} `json:"birthPlace,omitempty"`
	Brand                interface{} `json:"brand,omitempty"`
	CallSign             interface{} `json:"callSign,omitempty"`
	Children             interface{} `json:"children,omitempty"`
	Colleague            interface{} `json:"colleague,omitempty"`
	Colleagues           interface{} `json:"colleagues,omitempty"`
	ContactPoint         interface{} `json:"contactPoint,omitempty"`
	ContactPoints        interface{} `json:"contactPoints,omitempty"`
	DeathDate            interface{} `json:"deathDate,omitempty"`
	DeathPlace           interface{} `json:"deathPlace,omitempty"`
	Duns                 interface{} `json:"duns,omitempty"`
	Email                interface{} `json:"email,omitempty"`
	FamilyName           interface{} `json:"familyName,omitempty"`
	FaxNumber            interface{} `json:"faxNumber,omitempty"`
	Follows              interface{} `json:"follows,omitempty"`
	Funder               interface{} `json:"funder,omitempty"`
	Funding              interface{} `json:"funding,omitempty"`
	Gender               interface{} `json:"gender,omitempty"`
	GivenName            interface{} `json:"givenName,omitempty"`
	GlobalLocationNumber interface{} `json:"globalLocationNumber,omitempty"`
	HasCredential        interface{} `json:"hasCredential,omitempty"`
	HasOccupation        interface{} `json:"hasOccupation,omitempty"`
	HasOfferCatalog      interface{} `json:"hasOfferCatalog,omitempty"`
	HasPOS               interface{} `json:"hasPOS,omitempty"`
	Height               interface{} `json:"height,omitempty"`
	HomeLocation         interface{} `json:"homeLocation,omitempty"`
	HonorificPrefix      interface{} `json:"honorificPrefix,omitempty"`
	HonorificSuffix      interface{} `json:"honorificSuffix,omitempty"`
	InteractionStatistic interface{} `json:"interactionStatistic,omitempty"`
	IsicV4               interface{} `json:"isicV4,omitempty"`
	JobTitle             interface{} `json:"jobTitle,omitempty"`
	Knows                interface{} `json:"knows,omitempty"`
	KnowsAbout           interface{} `json:"knowsAbout,omitempty"`
	KnowsLanguage        interface{} `json:"knowsLanguage,omitempty"`
	MakesOffer           interface{} `json:"makesOffer,omitempty"`
	MemberOf             interface{} `json:"memberOf,omitempty"`
	Naics                interface{} `json:"naics,omitempty"`
	Nationality          interface{} `json:"nationality,omitempty"`
	NetWorth             interface{} `json:"netWorth,omitempty"`
	Owns                 interface{} `json:"owns,omitempty"`
	Parent               interface{} `json:"parent,omitempty"`
	Parents              interface{} `json:"parents,omitempty"`
	PerformerIn          interface{} `json:"performerIn,omitempty"`
	PublishingPrinciples interface{} `json:"publishingPrinciples,omitempty"`
	RelatedTo            interface{} `json:"relatedTo,omitempty"`
	Seeks                interface{} `json:"seeks,omitempty"`
	Sibling              interface{} `json:"sibling,omitempty"`
	Siblings             interface{} `json:"siblings,omitempty"`
	Sponsor              interface{} `json:"sponsor,omitempty"`
	Spouse               interface{} `json:"spouse,omitempty"`
	TaxID                interface{} `json:"taxID,omitempty"`
	Telephone            interface{} `json:"telephone,omitempty"`
	VatID                interface{} `json:"vatID,omitempty"`
	Weight               interface{} `json:"weight,omitempty"`
	WorkLocation         interface{} `json:"workLocation,omitempty"`
	WorksFor             interface{} `json:"worksFor,omitempty"`
}

// A pet store.
type PetStore struct {
	Store
}

// A pharmacy or drugstore.
type Pharmacy struct {
	MedicalBusiness
	// TODO: MedicalOrganization
}

// A photograph.
type Photograph struct {
	CreativeWork
}

// The act of capturing still images of objects using a camera.
type PhotographAction struct {
	CreateAction
}

// Any bodily activity that enhances or maintains physical fitness and overall health and wellness. Includes activity that is part of daily living and routine, structured exercise, and exercise prescribed as part of a medical treatment or recovery plan.
type PhysicalActivity struct {
	LifestyleModification

	AssociatedAnatomy interface{} `json:"associatedAnatomy,omitempty"`
	Category          interface{} `json:"category,omitempty"`
	Epidemiology      interface{} `json:"epidemiology,omitempty"`
	Pathophysiology   interface{} `json:"pathophysiology,omitempty"`
}

// Categories of physical activity, organized by physiologic classification.
type PhysicalActivityCategory struct {
	Enumeration
}

// A type of physical examination of a patient performed by a physician.
type PhysicalExam struct {
	MedicalEnumeration
	// TODO: MedicalProcedure
}

// A process of progressive physical care and rehabilitation aimed at improving a health condition.
type PhysicalTherapy struct {
	MedicalTherapy
}

// A doctor's office.
type Physician struct {
	MedicalBusiness
	// TODO: MedicalOrganization

	AvailableService    interface{} `json:"availableService,omitempty"`
	HospitalAffiliation interface{} `json:"hospitalAffiliation,omitempty"`
	MedicalSpecialty    interface{} `json:"medicalSpecialty,omitempty"`
}

// Entities that have a somewhat fixed, physical extension.
type Place struct {
	Thing

	AdditionalProperty               interface{} `json:"additionalProperty,omitempty"`
	Address                          interface{} `json:"address,omitempty"`
	AggregateRating                  interface{} `json:"aggregateRating,omitempty"`
	AmenityFeature                   interface{} `json:"amenityFeature,omitempty"`
	BranchCode                       interface{} `json:"branchCode,omitempty"`
	ContainedIn                      interface{} `json:"containedIn,omitempty"`
	ContainedInPlace                 interface{} `json:"containedInPlace,omitempty"`
	ContainsPlace                    interface{} `json:"containsPlace,omitempty"`
	Event                            interface{} `json:"event,omitempty"`
	Events                           interface{} `json:"events,omitempty"`
	FaxNumber                        interface{} `json:"faxNumber,omitempty"`
	Geo                              interface{} `json:"geo,omitempty"`
	GeoContains                      interface{} `json:"geoContains,omitempty"`
	GeoCoveredBy                     interface{} `json:"geoCoveredBy,omitempty"`
	GeoCovers                        interface{} `json:"geoCovers,omitempty"`
	GeoCrosses                       interface{} `json:"geoCrosses,omitempty"`
	GeoDisjoint                      interface{} `json:"geoDisjoint,omitempty"`
	GeoEquals                        interface{} `json:"geoEquals,omitempty"`
	GeoIntersects                    interface{} `json:"geoIntersects,omitempty"`
	GeoOverlaps                      interface{} `json:"geoOverlaps,omitempty"`
	GeoTouches                       interface{} `json:"geoTouches,omitempty"`
	GeoWithin                        interface{} `json:"geoWithin,omitempty"`
	GlobalLocationNumber             interface{} `json:"globalLocationNumber,omitempty"`
	HasDriveThroughService           interface{} `json:"hasDriveThroughService,omitempty"`
	HasMap                           interface{} `json:"hasMap,omitempty"`
	IsAccessibleForFree              interface{} `json:"isAccessibleForFree,omitempty"`
	IsicV4                           interface{} `json:"isicV4,omitempty"`
	Keywords                         interface{} `json:"keywords,omitempty"`
	Latitude                         interface{} `json:"latitude,omitempty"`
	Logo                             interface{} `json:"logo,omitempty"`
	Longitude                        interface{} `json:"longitude,omitempty"`
	Map_                             interface{} `json:"map_,omitempty"`
	Maps                             interface{} `json:"maps,omitempty"`
	MaximumAttendeeCapacity          interface{} `json:"maximumAttendeeCapacity,omitempty"`
	OpeningHoursSpecification        interface{} `json:"openingHoursSpecification,omitempty"`
	Photo                            interface{} `json:"photo,omitempty"`
	Photos                           interface{} `json:"photos,omitempty"`
	PublicAccess                     interface{} `json:"publicAccess,omitempty"`
	Review                           interface{} `json:"review,omitempty"`
	Reviews                          interface{} `json:"reviews,omitempty"`
	Slogan                           interface{} `json:"slogan,omitempty"`
	SmokingAllowed                   interface{} `json:"smokingAllowed,omitempty"`
	SpecialOpeningHoursSpecification interface{} `json:"specialOpeningHoursSpecification,omitempty"`
	Telephone                        interface{} `json:"telephone,omitempty"`
	TourBookingPage                  interface{} `json:"tourBookingPage,omitempty"`
}

// Place of worship, such as a church, synagogue, or mosque.
type PlaceOfWorship struct {
	CivicStructure
}

// The act of planning the execution of an event/task/action/reservation/plan to a future date.
type PlanAction struct {
	OrganizeAction

	ScheduledTime interface{} `json:"scheduledTime,omitempty"`
}

// A play is a form of literature, usually consisting of dialogue between characters, intended for theatrical performance rather than just reading. Note: A performance of a Play would be a [[TheaterEvent]] or [[BroadcastEvent]] - the *Play* being the [[workPerformed]].
type Play struct {
	CreativeWork
}

// The act of playing/exercising/training/performing for enjoyment, leisure, recreation, Competition or exercise.\n\nRelated actions:\n\n* [[ListenAction]]: Unlike ListenAction (which is under ConsumeAction), PlayAction refers to performing for an audience or at an event, rather than consuming music.\n* [[WatchAction]]: Unlike WatchAction (which is under ConsumeAction), PlayAction refers to showing/displaying for an audience or at an event, rather than consuming visual content.
type PlayAction struct {
	Action

	Audience interface{} `json:"audience,omitempty"`
	Event    interface{} `json:"event,omitempty"`
}

// The act of playing a video game.
type PlayGameAction struct {
	ConsumeAction

	GameAvailabilityType interface{} `json:"gameAvailabilityType,omitempty"`
}

// A playground.
type Playground struct {
	CivicStructure
}

// A plumbing service.
type Plumber struct {
	HomeAndConstructionBusiness
}

// A single episode of a podcast series.
type PodcastEpisode struct {
	Episode
}

// A single season of a podcast. Many podcasts do not break down into separate seasons. In that case, PodcastSeries should be used.
type PodcastSeason struct {
	CreativeWorkSeason
}

// A podcast is an episodic series of digital audio or video files which a user can download and listen to.
type PodcastSeries struct {
	CreativeWorkSeries

	Actor   interface{} `json:"actor,omitempty"`
	WebFeed interface{} `json:"webFeed,omitempty"`
}

// A police station.
type PoliceStation struct {
	CivicStructure
	// TODO: EmergencyService
}

// A pond.
type Pond struct {
	BodyOfWater
}

// A post office.
type PostOffice struct {
	GovernmentOffice
}

// The mailing address.
type PostalAddress struct {
	ContactPoint

	AddressCountry      interface{} `json:"addressCountry,omitempty"`
	AddressLocality     interface{} `json:"addressLocality,omitempty"`
	AddressRegion       interface{} `json:"addressRegion,omitempty"`
	PostOfficeBoxNumber interface{} `json:"postOfficeBoxNumber,omitempty"`
	PostalCode          interface{} `json:"postalCode,omitempty"`
	StreetAddress       interface{} `json:"streetAddress,omitempty"`
}

// Indicates a range of postalcodes, usually defined as the set of valid codes between [[postalCodeBegin]] and [[postalCodeEnd]], inclusively.
type PostalCodeRangeSpecification struct {
	StructuredValue

	PostalCodeBegin interface{} `json:"postalCodeBegin,omitempty"`
	PostalCodeEnd   interface{} `json:"postalCodeEnd,omitempty"`
}

// A large, usually printed placard, bill, or announcement, often illustrated, that is posted to advertise or publicize something.
type Poster struct {
	CreativeWork
}

// An agent orders a (not yet released) object/product/service to be delivered/sent.
type PreOrderAction struct {
	TradeAction
}

// The act of inserting at the beginning if an ordered collection.
type PrependAction struct {
	InsertAction
}

// A preschool.
type Preschool struct {
	EducationalOrganization
}

// A file containing slides or used for a presentation.
type PresentationDigitalDocument struct {
	DigitalDocument
}

// An indication for preventing an underlying condition, symptom, etc.
type PreventionIndication struct {
	MedicalIndication
}

// Enumerates different price components that together make up the total price for an offered product.
type PriceComponentTypeEnumeration struct {
	Enumeration
}

// A structured value representing a price or price range. Typically, only the subclasses of this type are used for markup. It is recommended to use [[MonetaryAmount]] to describe independent amounts of money such as a salary, credit card limits, etc.
type PriceSpecification struct {
	StructuredValue

	EligibleQuantity          interface{} `json:"eligibleQuantity,omitempty"`
	EligibleTransactionVolume interface{} `json:"eligibleTransactionVolume,omitempty"`
	MaxPrice                  interface{} `json:"maxPrice,omitempty"`
	MinPrice                  interface{} `json:"minPrice,omitempty"`
	Price                     interface{} `json:"price,omitempty"`
	PriceCurrency             interface{} `json:"priceCurrency,omitempty"`
	ValidFrom                 interface{} `json:"validFrom,omitempty"`
	ValidThrough              interface{} `json:"validThrough,omitempty"`
	ValueAddedTaxIncluded     interface{} `json:"valueAddedTaxIncluded,omitempty"`
}

// Enumerates different price types, for example list price, invoice price, and sale price.
type PriceTypeEnumeration struct {
	Enumeration
}

// Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
type Product struct {
	Thing

	AdditionalProperty          interface{} `json:"additionalProperty,omitempty"`
	AggregateRating             interface{} `json:"aggregateRating,omitempty"`
	Audience                    interface{} `json:"audience,omitempty"`
	Award                       interface{} `json:"award,omitempty"`
	Awards                      interface{} `json:"awards,omitempty"`
	Brand                       interface{} `json:"brand,omitempty"`
	Category                    interface{} `json:"category,omitempty"`
	Color                       interface{} `json:"color,omitempty"`
	CountryOfAssembly           interface{} `json:"countryOfAssembly,omitempty"`
	CountryOfLastProcessing     interface{} `json:"countryOfLastProcessing,omitempty"`
	CountryOfOrigin             interface{} `json:"countryOfOrigin,omitempty"`
	Depth                       interface{} `json:"depth,omitempty"`
	Funding                     interface{} `json:"funding,omitempty"`
	Gtin                        interface{} `json:"gtin,omitempty"`
	Gtin12                      interface{} `json:"gtin12,omitempty"`
	Gtin13                      interface{} `json:"gtin13,omitempty"`
	Gtin14                      interface{} `json:"gtin14,omitempty"`
	Gtin8                       interface{} `json:"gtin8,omitempty"`
	HasAdultConsideration       interface{} `json:"hasAdultConsideration,omitempty"`
	HasEnergyConsumptionDetails interface{} `json:"hasEnergyConsumptionDetails,omitempty"`
	HasMeasurement              interface{} `json:"hasMeasurement,omitempty"`
	HasMerchantReturnPolicy     interface{} `json:"hasMerchantReturnPolicy,omitempty"`
	Height                      interface{} `json:"height,omitempty"`
	InProductGroupWithID        interface{} `json:"inProductGroupWithID,omitempty"`
	IsAccessoryOrSparePartFor   interface{} `json:"isAccessoryOrSparePartFor,omitempty"`
	IsConsumableFor             interface{} `json:"isConsumableFor,omitempty"`
	IsFamilyFriendly            interface{} `json:"isFamilyFriendly,omitempty"`
	IsRelatedTo                 interface{} `json:"isRelatedTo,omitempty"`
	IsSimilarTo                 interface{} `json:"isSimilarTo,omitempty"`
	IsVariantOf                 interface{} `json:"isVariantOf,omitempty"`
	ItemCondition               interface{} `json:"itemCondition,omitempty"`
	Keywords                    interface{} `json:"keywords,omitempty"`
	Logo                        interface{} `json:"logo,omitempty"`
	Manufacturer                interface{} `json:"manufacturer,omitempty"`
	Material                    interface{} `json:"material,omitempty"`
	Model                       interface{} `json:"model,omitempty"`
	Mpn                         interface{} `json:"mpn,omitempty"`
	Nsn                         interface{} `json:"nsn,omitempty"`
	Offers                      interface{} `json:"offers,omitempty"`
	Pattern                     interface{} `json:"pattern,omitempty"`
	ProductID                   interface{} `json:"productID,omitempty"`
	ProductionDate              interface{} `json:"productionDate,omitempty"`
	PurchaseDate                interface{} `json:"purchaseDate,omitempty"`
	ReleaseDate                 interface{} `json:"releaseDate,omitempty"`
	Review                      interface{} `json:"review,omitempty"`
	Reviews                     interface{} `json:"reviews,omitempty"`
	Size                        interface{} `json:"size,omitempty"`
	Sku                         interface{} `json:"sku,omitempty"`
	Slogan                      interface{} `json:"slogan,omitempty"`
	Weight                      interface{} `json:"weight,omitempty"`
	Width                       interface{} `json:"width,omitempty"`
}

// A set of products (either [[ProductGroup]]s or specific variants) that are listed together e.g. in an [[Offer]].
type ProductCollection struct {
	Collection
	// TODO: Product

	IncludesObject interface{} `json:"includesObject,omitempty"`
}

/*
A ProductGroup represents a group of [[Product]]s that vary only in certain well-described ways, such as by [[size]], [[color]], [[material]] etc.

While a ProductGroup itself is not directly offered for sale, the various varying products that it represents can be. The ProductGroup serves as a prototype or template, standing in for all of the products who have an [[isVariantOf]] relationship to it. As such, properties (including additional types) can be applied to the ProductGroup to represent characteristics shared by each of the (possibly very many) variants. Properties that reference a ProductGroup are not included in this mechanism; neither are the following specific properties [[variesBy]], [[hasVariant]], [[url]].
*/
type ProductGroup struct {
	Product

	HasVariant     interface{} `json:"hasVariant,omitempty"`
	ProductGroupID interface{} `json:"productGroupID,omitempty"`
	VariesBy       interface{} `json:"variesBy,omitempty"`
}

// A datasheet or vendor specification of a product (in the sense of a prototypical description).
type ProductModel struct {
	Product

	IsVariantOf   interface{} `json:"isVariantOf,omitempty"`
	PredecessorOf interface{} `json:"predecessorOf,omitempty"`
	SuccessorOf   interface{} `json:"successorOf,omitempty"`
}

/*
Original definition: "provider of professional services."\n\nThe general [[ProfessionalService]] type for local businesses was deprecated due to confusion with [[Service]]. For reference, the types that it included were: [[Dentist]],
        [[AccountingService]], [[Attorney]], [[Notary]], as well as types for several kinds of [[HomeAndConstructionBusiness]]: [[Electrician]], [[GeneralContractor]],
        [[HousePainter]], [[Locksmith]], [[Plumber]], [[RoofingContractor]]. [[LegalService]] was introduced as a more inclusive supertype of [[Attorney]].
*/
type ProfessionalService struct {
	LocalBusiness
}

// Web page type: Profile page.
type ProfilePage struct {
	WebPage
}

// Used to describe membership in a loyalty programs (e.g. "StarAliance"), traveler clubs (e.g. "AAA"), purchase clubs ("Safeway Club"), etc.
type ProgramMembership struct {
	Intangible

	HostingOrganization    interface{} `json:"hostingOrganization,omitempty"`
	Member                 interface{} `json:"member,omitempty"`
	Members                interface{} `json:"members,omitempty"`
	MembershipNumber       interface{} `json:"membershipNumber,omitempty"`
	MembershipPointsEarned interface{} `json:"membershipPointsEarned,omitempty"`
	ProgramName            interface{} `json:"programName,omitempty"`
}

/*
An enterprise (potentially individual but typically collaborative), planned to achieve a particular aim.
Use properties from [[Organization]], [[subOrganization]]/[[parentOrganization]] to indicate project sub-structures.

*/
type Project struct {
	Organization
}

// Data type: PronounceableText.
type PronounceableText struct {
	Text

	InLanguage         interface{} `json:"inLanguage,omitempty"`
	PhoneticText       interface{} `json:"phoneticText,omitempty"`
	SpeechToTextMarkup interface{} `json:"speechToTextMarkup,omitempty"`
	TextValue          interface{} `json:"textValue,omitempty"`
}

// A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
type Property struct {
	Intangible

	DomainIncludes interface{} `json:"domainIncludes,omitempty"`
	InverseOf      interface{} `json:"inverseOf,omitempty"`
	RangeIncludes  interface{} `json:"rangeIncludes,omitempty"`
	SupersededBy   interface{} `json:"supersededBy,omitempty"`
}

/*
A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.

*/
type PropertyValue struct {
	StructuredValue

	MaxValue             interface{} `json:"maxValue,omitempty"`
	MeasurementTechnique interface{} `json:"measurementTechnique,omitempty"`
	MinValue             interface{} `json:"minValue,omitempty"`
	PropertyID           interface{} `json:"propertyID,omitempty"`
	UnitCode             interface{} `json:"unitCode,omitempty"`
	UnitText             interface{} `json:"unitText,omitempty"`
	Value                interface{} `json:"value,omitempty"`
	ValueReference       interface{} `json:"valueReference,omitempty"`
}

// A Property value specification.
type PropertyValueSpecification struct {
	Intangible

	DefaultValue   interface{} `json:"defaultValue,omitempty"`
	MaxValue       interface{} `json:"maxValue,omitempty"`
	MinValue       interface{} `json:"minValue,omitempty"`
	MultipleValues interface{} `json:"multipleValues,omitempty"`
	ReadonlyValue  interface{} `json:"readonlyValue,omitempty"`
	StepValue      interface{} `json:"stepValue,omitempty"`
	ValueMaxLength interface{} `json:"valueMaxLength,omitempty"`
	ValueMinLength interface{} `json:"valueMinLength,omitempty"`
	ValueName      interface{} `json:"valueName,omitempty"`
	ValuePattern   interface{} `json:"valuePattern,omitempty"`
	ValueRequired  interface{} `json:"valueRequired,omitempty"`
}

// Protein is here used in its widest possible definition, as classes of amino acid based molecules. Amyloid-beta Protein in human (UniProt P05067), eukaryota (e.g. an OrthoDB group) or even a single molecule that one can point to are all of type schema:Protein. A protein can thus be a subclass of another protein, e.g. schema:Protein as a UniProt record can have multiple isoforms inside it which would also be schema:Protein. They can be imagined, synthetic, hypothetical or naturally occurring.
type Protein struct {
	BioChemEntity

	HasBioPolymerSequence interface{} `json:"hasBioPolymerSequence,omitempty"`
}

// A process of care relying upon counseling, dialogue and communication  aimed at improving a mental health condition without use of drugs.
type PsychologicalTreatment struct {
	TherapeuticProcedure
}

// A public swimming pool.
type PublicSwimmingPool struct {
	SportsActivityLocation
}

// A public toilet is a room or small building containing one or more toilets (and possibly also urinals) which is available for use by the general public, or by customers or employees of certain businesses.
type PublicToilet struct {
	CivicStructure
}

// A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
type PublicationEvent struct {
	Event

	Free        interface{} `json:"free,omitempty"`
	PublishedBy interface{} `json:"publishedBy,omitempty"`
	PublishedOn interface{} `json:"publishedOn,omitempty"`
}

// A part of a successively published publication such as a periodical or publication volume, often numbered, usually containing a grouping of works such as articles.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
type PublicationIssue struct {
	CreativeWork

	IssueNumber interface{} `json:"issueNumber,omitempty"`
	PageEnd     interface{} `json:"pageEnd,omitempty"`
	PageStart   interface{} `json:"pageStart,omitempty"`
	Pagination  interface{} `json:"pagination,omitempty"`
}

// A part of a successively published publication such as a periodical or multi-volume work, often numbered. It may represent a time span, such as a year.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
type PublicationVolume struct {
	CreativeWork

	PageEnd      interface{} `json:"pageEnd,omitempty"`
	PageStart    interface{} `json:"pageStart,omitempty"`
	Pagination   interface{} `json:"pagination,omitempty"`
	VolumeNumber interface{} `json:"volumeNumber,omitempty"`
}

// A QAPage is a WebPage focussed on a specific Question and its Answer(s), e.g. in a question answering site or documenting Frequently Asked Questions (FAQs).
type QAPage struct {
	WebPage
}

// A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
type QualitativeValue struct {
	Enumeration

	AdditionalProperty interface{} `json:"additionalProperty,omitempty"`
	Equal              interface{} `json:"equal,omitempty"`
	Greater            interface{} `json:"greater,omitempty"`
	GreaterOrEqual     interface{} `json:"greaterOrEqual,omitempty"`
	Lesser             interface{} `json:"lesser,omitempty"`
	LesserOrEqual      interface{} `json:"lesserOrEqual,omitempty"`
	NonEqual           interface{} `json:"nonEqual,omitempty"`
	ValueReference     interface{} `json:"valueReference,omitempty"`
}

//  A point value or interval for product characteristics and other purposes.
type QuantitativeValue struct {
	StructuredValue

	AdditionalProperty interface{} `json:"additionalProperty,omitempty"`
	MaxValue           interface{} `json:"maxValue,omitempty"`
	MinValue           interface{} `json:"minValue,omitempty"`
	UnitCode           interface{} `json:"unitCode,omitempty"`
	UnitText           interface{} `json:"unitText,omitempty"`
	Value              interface{} `json:"value,omitempty"`
	ValueReference     interface{} `json:"valueReference,omitempty"`
}

// A statistical distribution of values.
type QuantitativeValueDistribution struct {
	StructuredValue

	Duration     interface{} `json:"duration,omitempty"`
	Median       interface{} `json:"median,omitempty"`
	Percentile10 interface{} `json:"percentile10,omitempty"`
	Percentile25 interface{} `json:"percentile25,omitempty"`
	Percentile75 interface{} `json:"percentile75,omitempty"`
	Percentile90 interface{} `json:"percentile90,omitempty"`
}

// Quantities such as distance, time, mass, weight, etc. Particular instances of say Mass are entities like '3 Kg' or '4 milligrams'.
type Quantity struct {
	Intangible
}

// A specific question - e.g. from a user seeking answers online, or collected in a Frequently Asked Questions (FAQ) document.
type Question struct {
	Comment

	AcceptedAnswer  interface{} `json:"acceptedAnswer,omitempty"`
	AnswerCount     interface{} `json:"answerCount,omitempty"`
	EduQuestionType interface{} `json:"eduQuestionType,omitempty"`
	SuggestedAnswer interface{} `json:"suggestedAnswer,omitempty"`
}

// Quiz: A test of knowledge, skills and abilities.
type Quiz struct {
	LearningResource
}

// A quotation. Often but not necessarily from some written work, attributable to a real world author and - if associated with a fictional character - to any fictional Person. Use [[isBasedOn]] to link to source/origin. The [[recordedIn]] property can be used to reference a Quotation from an [[Event]].
type Quotation struct {
	CreativeWork

	SpokenByCharacter interface{} `json:"spokenByCharacter,omitempty"`
}

// An agent quotes/estimates/appraises an object/product/service with a price at a location/store.
type QuoteAction struct {
	TradeAction
}

// A place offering space for "Recreational Vehicles", Caravans, mobile homes and the like.
type RVPark struct {
	CivicStructure
}

// A process of care using radiation aimed at improving a health condition.
type RadiationTherapy struct {
	MedicalTherapy
}

// A delivery service through which radio content is provided via broadcast over the air or online.
type RadioBroadcastService struct {
	BroadcastService
}

// A unique instance of a radio BroadcastService on a CableOrSatelliteService lineup.
type RadioChannel struct {
	BroadcastChannel
}

// A short radio program or a segment/part of a radio program.
type RadioClip struct {
	Clip
}

// A radio episode which can be part of a series or season.
type RadioEpisode struct {
	Episode
}

// Season dedicated to radio broadcast and associated online delivery.
type RadioSeason struct {
	CreativeWorkSeason
}

// CreativeWorkSeries dedicated to radio broadcast and associated online delivery.
type RadioSeries struct {
	CreativeWorkSeries

	Actor             interface{} `json:"actor,omitempty"`
	Actors            interface{} `json:"actors,omitempty"`
	ContainsSeason    interface{} `json:"containsSeason,omitempty"`
	Director          interface{} `json:"director,omitempty"`
	Directors         interface{} `json:"directors,omitempty"`
	Episode           interface{} `json:"episode,omitempty"`
	Episodes          interface{} `json:"episodes,omitempty"`
	MusicBy           interface{} `json:"musicBy,omitempty"`
	NumberOfEpisodes  interface{} `json:"numberOfEpisodes,omitempty"`
	NumberOfSeasons   interface{} `json:"numberOfSeasons,omitempty"`
	ProductionCompany interface{} `json:"productionCompany,omitempty"`
	Season            interface{} `json:"season,omitempty"`
	Seasons           interface{} `json:"seasons,omitempty"`
	Trailer           interface{} `json:"trailer,omitempty"`
}

// A radio station.
type RadioStation struct {
	LocalBusiness
}

// A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
type Rating struct {
	Intangible

	Author            interface{} `json:"author,omitempty"`
	BestRating        interface{} `json:"bestRating,omitempty"`
	RatingExplanation interface{} `json:"ratingExplanation,omitempty"`
	RatingValue       interface{} `json:"ratingValue,omitempty"`
	ReviewAspect      interface{} `json:"reviewAspect,omitempty"`
	WorstRating       interface{} `json:"worstRating,omitempty"`
}

// The act of responding instinctively and emotionally to an object, expressing a sentiment.
type ReactAction struct {
	AssessAction
}

// The act of consuming written content.
type ReadAction struct {
	ConsumeAction
}

// A real-estate agent.
type RealEstateAgent struct {
	LocalBusiness
}

/*
A [[RealEstateListing]] is a listing that describes one or more real-estate [[Offer]]s (whose [[businessFunction]] is typically to lease out, or to sell).
  The [[RealEstateListing]] type itself represents the overall listing, as manifested in some [[WebPage]].

*/
type RealEstateListing struct {
	WebPage

	DatePosted  interface{} `json:"datePosted,omitempty"`
	LeaseLength interface{} `json:"leaseLength,omitempty"`
}

// The act of physically/electronically taking delivery of an object that has been transferred from an origin to a destination. Reciprocal of SendAction.\n\nRelated actions:\n\n* [[SendAction]]: The reciprocal of ReceiveAction.\n* [[TakeAction]]: Unlike TakeAction, ReceiveAction does not imply that the ownership has been transfered (e.g. I can receive a package, but it does not mean the package is now mine).
type ReceiveAction struct {
	TransferAction

	DeliveryMethod interface{} `json:"deliveryMethod,omitempty"`
	Sender         interface{} `json:"sender,omitempty"`
}

// A recipe. For dietary restrictions covered by the recipe, a few common restrictions are enumerated via [[suitableForDiet]]. The [[keywords]] property can also be used to add more detail.
type Recipe struct {
	HowTo

	CookTime           interface{} `json:"cookTime,omitempty"`
	CookingMethod      interface{} `json:"cookingMethod,omitempty"`
	Ingredients        interface{} `json:"ingredients,omitempty"`
	Nutrition          interface{} `json:"nutrition,omitempty"`
	RecipeCategory     interface{} `json:"recipeCategory,omitempty"`
	RecipeCuisine      interface{} `json:"recipeCuisine,omitempty"`
	RecipeIngredient   interface{} `json:"recipeIngredient,omitempty"`
	RecipeInstructions interface{} `json:"recipeInstructions,omitempty"`
	RecipeYield        interface{} `json:"recipeYield,omitempty"`
	SuitableForDiet    interface{} `json:"suitableForDiet,omitempty"`
}

// [[Recommendation]] is a type of [[Review]] that suggests or proposes something as the best option or best course of action. Recommendations may be for products or services, or other concrete things, as in the case of a ranked list or product guide. A [[Guide]] may list multiple recommendations for different categories. For example, in a [[Guide]] about which TVs to buy, the author may have several [[Recommendation]]s.
type Recommendation struct {
	Review

	Category interface{} `json:"category,omitempty"`
}

// A recommended dosing schedule for a drug or supplement as prescribed or recommended by an authority or by the drug/supplement's manufacturer. Capture the recommending authority in the recognizingAuthority property of MedicalEntity.
type RecommendedDoseSchedule struct {
	DoseSchedule
}

// A recycling center.
type RecyclingCenter struct {
	LocalBusiness
}

// Enumerates several kinds of product return refund types.
type RefundTypeEnumeration struct {
	Enumeration
}

// The act of registering to be a user of a service, product or web page.\n\nRelated actions:\n\n* [[JoinAction]]: Unlike JoinAction, RegisterAction implies you are registering to be a user of a service, *not* a group/team of people.\n* [FollowAction]]: Unlike FollowAction, RegisterAction doesn't imply that the agent is expecting to poll for updates from the object.\n* [[SubscribeAction]]: Unlike SubscribeAction, RegisterAction doesn't imply that the agent is expecting updates from the object.
type RegisterAction struct {
	InteractAction
}

// The act of rejecting to/adopting an object.\n\nRelated actions:\n\n* [[AcceptAction]]: The antonym of RejectAction.
type RejectAction struct {
	AllocateAction
}

// The act of giving money in return for temporary use, but not ownership, of an object such as a vehicle or property. For example, an agent rents a property from a landlord in exchange for a periodic payment.
type RentAction struct {
	TradeAction

	Landlord        interface{} `json:"landlord,omitempty"`
	RealEstateAgent interface{} `json:"realEstateAgent,omitempty"`
}

// A reservation for a rental car.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
type RentalCarReservation struct {
	Reservation

	DropoffLocation interface{} `json:"dropoffLocation,omitempty"`
	DropoffTime     interface{} `json:"dropoffTime,omitempty"`
	PickupLocation  interface{} `json:"pickupLocation,omitempty"`
	PickupTime      interface{} `json:"pickupTime,omitempty"`
}

// A structured value representing repayment.
type RepaymentSpecification struct {
	StructuredValue

	DownPayment            interface{} `json:"downPayment,omitempty"`
	EarlyPrepaymentPenalty interface{} `json:"earlyPrepaymentPenalty,omitempty"`
	LoanPaymentAmount      interface{} `json:"loanPaymentAmount,omitempty"`
	LoanPaymentFrequency   interface{} `json:"loanPaymentFrequency,omitempty"`
	NumberOfLoanPayments   interface{} `json:"numberOfLoanPayments,omitempty"`
}

// The act of editing a recipient by replacing an old object with a new object.
type ReplaceAction struct {
	UpdateAction

	Replacee interface{} `json:"replacee,omitempty"`
	Replacer interface{} `json:"replacer,omitempty"`
}

// The act of responding to a question/message asked/sent by the object. Related to [[AskAction]]\n\nRelated actions:\n\n* [[AskAction]]: Appears generally as an origin of a ReplyAction.
type ReplyAction struct {
	CommunicateAction

	ResultComment interface{} `json:"resultComment,omitempty"`
}

// A Report generated by governmental or non-governmental organization.
type Report struct {
	Article

	ReportNumber interface{} `json:"reportNumber,omitempty"`
}

/*
The [[ReportageNewsArticle]] type is a subtype of [[NewsArticle]] representing
 news articles which are the result of journalistic news reporting conventions.

In practice many news publishers produce a wide variety of article types, many of which might be considered a [[NewsArticle]] but not a [[ReportageNewsArticle]]. For example, opinion pieces, reviews, analysis, sponsored or satirical articles, or articles that combine several of these elements.

The [[ReportageNewsArticle]] type is based on a stricter ideal for "news" as a work of journalism, with articles based on factual information either observed or verified by the author, or reported and verified from knowledgeable sources.  This often includes perspectives from multiple viewpoints on a particular issue (distinguishing news reports from public relations or propaganda).  News reports in the [[ReportageNewsArticle]] sense de-emphasize the opinion of the author, with commentary and value judgements typically expressed elsewhere.

A [[ReportageNewsArticle]] which goes deeper into analysis can also be marked with an additional type of [[AnalysisNewsArticle]].
*/
type ReportageNewsArticle struct {
	NewsArticle
}

// A patient-reported or observed dosing schedule for a drug or supplement.
type ReportedDoseSchedule struct {
	DoseSchedule
}

// A Research Organization (e.g. scientific institute, research company).
type ResearchOrganization struct {
	Organization
}

// A Research project.
type ResearchProject struct {
	Project
}

// Researchers.
type Researcher struct {
	Audience
}

// Describes a reservation for travel, dining or an event. Some reservations require tickets. \n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, restaurant reservations, flights, or rental cars, use [[Offer]].
type Reservation struct {
	Intangible

	BookingAgent          interface{} `json:"bookingAgent,omitempty"`
	BookingTime           interface{} `json:"bookingTime,omitempty"`
	Broker                interface{} `json:"broker,omitempty"`
	ModifiedTime          interface{} `json:"modifiedTime,omitempty"`
	PriceCurrency         interface{} `json:"priceCurrency,omitempty"`
	ProgramMembershipUsed interface{} `json:"programMembershipUsed,omitempty"`
	Provider              interface{} `json:"provider,omitempty"`
	ReservationFor        interface{} `json:"reservationFor,omitempty"`
	ReservationId         interface{} `json:"reservationId,omitempty"`
	ReservationStatus     interface{} `json:"reservationStatus,omitempty"`
	ReservedTicket        interface{} `json:"reservedTicket,omitempty"`
	TotalPrice            interface{} `json:"totalPrice,omitempty"`
	UnderName             interface{} `json:"underName,omitempty"`
}

// A group of multiple reservations with common values for all sub-reservations.
type ReservationPackage struct {
	Reservation

	SubReservation interface{} `json:"subReservation,omitempty"`
}

// Enumerated status values for Reservation.
type ReservationStatusType struct {
	StatusEnumeration
}

// Reserving a concrete object.\n\nRelated actions:\n\n* [[ScheduleAction]]: Unlike ScheduleAction, ReserveAction reserves concrete objects (e.g. a table, a hotel) towards a time slot / spatial allocation.
type ReserveAction struct {
	PlanAction
}

// A reservoir of water, typically an artificially created lake, like the Lake Kariba reservoir.
type Reservoir struct {
	BodyOfWater
}

// The place where a person lives.
type Residence struct {
	Place

	AccommodationFloorPlan interface{} `json:"accommodationFloorPlan,omitempty"`
}

/*
A resort is a place used for relaxation or recreation, attracting visitors for holidays or vacations. Resorts are places, towns or sometimes commercial establishment operated by a single company (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Resort">http://en.wikipedia.org/wiki/Resort</a>).
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.

*/
type Resort struct {
	LodgingBusiness
}

// A restaurant.
type Restaurant struct {
	FoodEstablishment
}

// A diet restricted to certain foods or preparations for cultural, religious, health or lifestyle reasons.
type RestrictedDiet struct {
	Enumeration
}

// The act of resuming a device or application which was formerly paused (e.g. resume music playback or resume a timer).
type ResumeAction struct {
	ControlAction
}

// The act of returning to the origin that which was previously received (concrete objects) or taken (ownership).
type ReturnAction struct {
	TransferAction

	Recipient interface{} `json:"recipient,omitempty"`
}

// Enumerates several kinds of policies for product return fees.
type ReturnFeesEnumeration struct {
	Enumeration
}

// Enumerates several types of return labels for product returns.
type ReturnLabelSourceEnumeration struct {
	Enumeration
}

// Enumerates several types of product return methods.
type ReturnMethodEnumeration struct {
	Enumeration
}

// A review of an item - for example, of a restaurant, movie, or store.
type Review struct {
	CreativeWork

	AssociatedClaimReview interface{} `json:"associatedClaimReview,omitempty"`
	AssociatedMediaReview interface{} `json:"associatedMediaReview,omitempty"`
	AssociatedReview      interface{} `json:"associatedReview,omitempty"`
	ItemReviewed          interface{} `json:"itemReviewed,omitempty"`
	NegativeNotes         interface{} `json:"negativeNotes,omitempty"`
	PositiveNotes         interface{} `json:"positiveNotes,omitempty"`
	ReviewAspect          interface{} `json:"reviewAspect,omitempty"`
	ReviewBody            interface{} `json:"reviewBody,omitempty"`
	ReviewRating          interface{} `json:"reviewRating,omitempty"`
}

// The act of producing a balanced opinion about the object for an audience. An agent reviews an object with participants resulting in a review.
type ReviewAction struct {
	AssessAction

	ResultReview interface{} `json:"resultReview,omitempty"`
}

// A [[NewsArticle]] and [[CriticReview]] providing a professional critic's assessment of a service, product, performance, or artistic or literary work.
type ReviewNewsArticle struct {
	CriticReview
	// TODO: NewsArticle
}

// A river (for example, the broad majestic Shannon).
type RiverBodyOfWater struct {
	BodyOfWater
}

// Represents additional information about a relationship or property. For example a Role can be used to say that a 'member' role linking some SportsTeam to a player occurred during a particular time period. Or that a Person's 'actor' role in a Movie was for some particular characterName. Such properties can be attached to a Role entity, which is then associated with the main entities using ordinary properties like 'member' or 'actor'.\n\nSee also [blog post](http://blog.schema.org/2014/06/introducing-role.html).
type Role struct {
	Intangible

	EndDate       interface{} `json:"endDate,omitempty"`
	NamedPosition interface{} `json:"namedPosition,omitempty"`
	RoleName      interface{} `json:"roleName,omitempty"`
	StartDate     interface{} `json:"startDate,omitempty"`
}

// A roofing contractor.
type RoofingContractor struct {
	HomeAndConstructionBusiness
}

/*
A room is a distinguishable space within a structure, usually separated from other spaces by interior walls. (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Room">http://en.wikipedia.org/wiki/Room</a>).
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type Room struct {
	Accommodation
}

// The act of notifying an event organizer as to whether you expect to attend the event.
type RsvpAction struct {
	InformAction

	AdditionalNumberOfGuests interface{} `json:"additionalNumberOfGuests,omitempty"`
	Comment                  interface{} `json:"comment,omitempty"`
	RsvpResponse             interface{} `json:"rsvpResponse,omitempty"`
}

// RsvpResponseType is an enumeration type whose instances represent responding to an RSVP request.
type RsvpResponseType struct {
	Enumeration
}

// Event type: Sales event.
type SaleEvent struct {
	Event
}

// An [[Article]] whose content is primarily [[satirical]](https://en.wikipedia.org/wiki/Satire) in nature, i.e. unlikely to be literally true. A satirical article is sometimes but not necessarily also a [[NewsArticle]]. [[ScholarlyArticle]]s are also sometimes satirized.
type SatiricalArticle struct {
	Article
}

/*
A schedule defines a repeating time period used to describe a regularly occurring [[Event]]. At a minimum a schedule will specify [[repeatFrequency]] which describes the interval between occurences of the event. Additional information can be provided to specify the schedule more precisely.
      This includes identifying the day(s) of the week or month when the recurring event will take place, in addition to its start and end time. Schedules may also
      have start and end dates to indicate when they are active, e.g. to define a limited calendar of events.
*/
type Schedule struct {
	Intangible

	ByDay            interface{} `json:"byDay,omitempty"`
	ByMonth          interface{} `json:"byMonth,omitempty"`
	ByMonthDay       interface{} `json:"byMonthDay,omitempty"`
	ByMonthWeek      interface{} `json:"byMonthWeek,omitempty"`
	Duration         interface{} `json:"duration,omitempty"`
	EndDate          interface{} `json:"endDate,omitempty"`
	EndTime          interface{} `json:"endTime,omitempty"`
	ExceptDate       interface{} `json:"exceptDate,omitempty"`
	RepeatCount      interface{} `json:"repeatCount,omitempty"`
	RepeatFrequency  interface{} `json:"repeatFrequency,omitempty"`
	ScheduleTimezone interface{} `json:"scheduleTimezone,omitempty"`
	StartDate        interface{} `json:"startDate,omitempty"`
	StartTime        interface{} `json:"startTime,omitempty"`
}

// Scheduling future actions, events, or tasks.\n\nRelated actions:\n\n* [[ReserveAction]]: Unlike ReserveAction, ScheduleAction allocates future actions (e.g. an event, a task, etc) towards a time slot / spatial allocation.
type ScheduleAction struct {
	PlanAction
}

// A scholarly article.
type ScholarlyArticle struct {
	Article
}

// A school.
type School struct {
	EducationalOrganization
}

// A School District is an administrative area for the administration of schools.
type SchoolDistrict struct {
	AdministrativeArea
}

// A screening of a movie or other video.
type ScreeningEvent struct {
	Event

	SubtitleLanguage interface{} `json:"subtitleLanguage,omitempty"`
	VideoFormat      interface{} `json:"videoFormat,omitempty"`
	WorkPresented    interface{} `json:"workPresented,omitempty"`
}

// A piece of sculpture.
type Sculpture struct {
	CreativeWork
}

// A sea (for example, the Caspian sea).
type SeaBodyOfWater struct {
	BodyOfWater
}

// The act of searching for an object.\n\nRelated actions:\n\n* [[FindAction]]: SearchAction generally leads to a FindAction, but not necessarily.
type SearchAction struct {
	Action

	Query interface{} `json:"query,omitempty"`
}

// A Search and Rescue organization of some kind.
type SearchRescueOrganization struct {
	Organization
}

// Web page type: Search results page.
type SearchResultsPage struct {
	WebPage
}

// A media season e.g. tv, radio, video game etc.
type Season struct {
	CreativeWork
}

// Used to describe a seat, such as a reserved seat in an event reservation.
type Seat struct {
	Intangible

	SeatNumber  interface{} `json:"seatNumber,omitempty"`
	SeatRow     interface{} `json:"seatRow,omitempty"`
	SeatSection interface{} `json:"seatSection,omitempty"`
	SeatingType interface{} `json:"seatingType,omitempty"`
}

// This is the [[Action]] of navigating to a specific [[startOffset]] timestamp within a [[VideoObject]], typically represented with a URL template structure.
type SeekToAction struct {
	Action

	StartOffset interface{} `json:"startOffset,omitempty"`
}

// A self-storage facility.
type SelfStorage struct {
	LocalBusiness
}

// The act of taking money from a buyer in exchange for goods or services rendered. An agent sells an object, product, or service to a buyer for a price. Reciprocal of BuyAction.
type SellAction struct {
	TradeAction

	Buyer           interface{} `json:"buyer,omitempty"`
	WarrantyPromise interface{} `json:"warrantyPromise,omitempty"`
}

// The act of physically/electronically dispatching an object for transfer from an origin to a destination.Related actions:\n\n* [[ReceiveAction]]: The reciprocal of SendAction.\n* [[GiveAction]]: Unlike GiveAction, SendAction does not imply the transfer of ownership (e.g. I can send you my laptop, but I'm not necessarily giving it to you).
type SendAction struct {
	TransferAction

	DeliveryMethod interface{} `json:"deliveryMethod,omitempty"`
	Recipient      interface{} `json:"recipient,omitempty"`
}

// A Series in schema.org is a group of related items, typically but not necessarily of the same kind. See also [[CreativeWorkSeries]], [[EventSeries]].
type Series struct {
	Intangible
}

// A service provided by an organization, e.g. delivery service, print services, etc.
type Service struct {
	Intangible

	AggregateRating  interface{} `json:"aggregateRating,omitempty"`
	AreaServed       interface{} `json:"areaServed,omitempty"`
	Audience         interface{} `json:"audience,omitempty"`
	AvailableChannel interface{} `json:"availableChannel,omitempty"`
	Award            interface{} `json:"award,omitempty"`
	Brand            interface{} `json:"brand,omitempty"`
	Broker           interface{} `json:"broker,omitempty"`
	Category         interface{} `json:"category,omitempty"`
	HasOfferCatalog  interface{} `json:"hasOfferCatalog,omitempty"`
	HoursAvailable   interface{} `json:"hoursAvailable,omitempty"`
	IsRelatedTo      interface{} `json:"isRelatedTo,omitempty"`
	IsSimilarTo      interface{} `json:"isSimilarTo,omitempty"`
	Logo             interface{} `json:"logo,omitempty"`
	Offers           interface{} `json:"offers,omitempty"`
	Produces         interface{} `json:"produces,omitempty"`
	Provider         interface{} `json:"provider,omitempty"`
	ProviderMobility interface{} `json:"providerMobility,omitempty"`
	Review           interface{} `json:"review,omitempty"`
	ServiceArea      interface{} `json:"serviceArea,omitempty"`
	ServiceAudience  interface{} `json:"serviceAudience,omitempty"`
	ServiceOutput    interface{} `json:"serviceOutput,omitempty"`
	ServiceType      interface{} `json:"serviceType,omitempty"`
	Slogan           interface{} `json:"slogan,omitempty"`
	TermsOfService   interface{} `json:"termsOfService,omitempty"`
}

// A means for accessing a service, e.g. a government office location, web site, or phone number.
type ServiceChannel struct {
	Intangible

	AvailableLanguage    interface{} `json:"availableLanguage,omitempty"`
	ProcessingTime       interface{} `json:"processingTime,omitempty"`
	ProvidesService      interface{} `json:"providesService,omitempty"`
	ServiceLocation      interface{} `json:"serviceLocation,omitempty"`
	ServicePhone         interface{} `json:"servicePhone,omitempty"`
	ServicePostalAddress interface{} `json:"servicePostalAddress,omitempty"`
	ServiceSmsNumber     interface{} `json:"serviceSmsNumber,omitempty"`
	ServiceUrl           interface{} `json:"serviceUrl,omitempty"`
}

// The act of distributing content to people for their amusement or edification.
type ShareAction struct {
	CommunicateAction
}

// Printed music, as opposed to performed or recorded music.
type SheetMusic struct {
	CreativeWork
}

// ShippingDeliveryTime provides various pieces of information about delivery times for shipping.
type ShippingDeliveryTime struct {
	StructuredValue

	BusinessDays interface{} `json:"businessDays,omitempty"`
	CutoffTime   interface{} `json:"cutoffTime,omitempty"`
	HandlingTime interface{} `json:"handlingTime,omitempty"`
	TransitTime  interface{} `json:"transitTime,omitempty"`
}

// A ShippingRateSettings represents re-usable pieces of shipping information. It is designed for publication on an URL that may be referenced via the [[shippingSettingsLink]] property of an [[OfferShippingDetails]]. Several occurrences can be published, distinguished and matched (i.e. identified/referenced) by their different values for [[shippingLabel]].
type ShippingRateSettings struct {
	StructuredValue

	DoesNotShip           interface{} `json:"doesNotShip,omitempty"`
	FreeShippingThreshold interface{} `json:"freeShippingThreshold,omitempty"`
	IsUnlabelledFallback  interface{} `json:"isUnlabelledFallback,omitempty"`
	ShippingDestination   interface{} `json:"shippingDestination,omitempty"`
	ShippingLabel         interface{} `json:"shippingLabel,omitempty"`
	ShippingRate          interface{} `json:"shippingRate,omitempty"`
}

// A shoe store.
type ShoeStore struct {
	Store
}

// A shopping center or mall.
type ShoppingCenter struct {
	LocalBusiness
}

// Short story or tale. A brief work of literature, usually written in narrative prose.
type ShortStory struct {
	CreativeWork
}

// Residence type: Single-family home.
type SingleFamilyResidence struct {
	House

	NumberOfRooms interface{} `json:"numberOfRooms,omitempty"`
	Occupancy     interface{} `json:"occupancy,omitempty"`
}

// A navigation element of the page.
type SiteNavigationElement struct {
	WebPageElement
}

// Enumerates common size groups for various product categories.
type SizeGroupEnumeration struct {
	Enumeration
}

// Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
type SizeSpecification struct {
	QualitativeValue

	HasMeasurement       interface{} `json:"hasMeasurement,omitempty"`
	SizeGroup            interface{} `json:"sizeGroup,omitempty"`
	SizeSystem           interface{} `json:"sizeSystem,omitempty"`
	SuggestedAge         interface{} `json:"suggestedAge,omitempty"`
	SuggestedGender      interface{} `json:"suggestedGender,omitempty"`
	SuggestedMeasurement interface{} `json:"suggestedMeasurement,omitempty"`
}

// Enumerates common size systems for different categories of products, for example "EN-13402" or "UK" for wearables or "Imperial" for screws.
type SizeSystemEnumeration struct {
	Enumeration
}

// A ski resort.
type SkiResort struct {
	Resort
	// TODO: SportsActivityLocation
}

// Event type: Social event.
type SocialEvent struct {
	Event
}

// A post to a social media platform, including blog posts, tweets, Facebook posts, etc.
type SocialMediaPosting struct {
	Article

	SharedContent interface{} `json:"sharedContent,omitempty"`
}

// A software application.
type SoftwareApplication struct {
	CreativeWork

	ApplicationCategory    interface{} `json:"applicationCategory,omitempty"`
	ApplicationSubCategory interface{} `json:"applicationSubCategory,omitempty"`
	ApplicationSuite       interface{} `json:"applicationSuite,omitempty"`
	AvailableOnDevice      interface{} `json:"availableOnDevice,omitempty"`
	CountriesNotSupported  interface{} `json:"countriesNotSupported,omitempty"`
	CountriesSupported     interface{} `json:"countriesSupported,omitempty"`
	Device                 interface{} `json:"device,omitempty"`
	DownloadUrl            interface{} `json:"downloadUrl,omitempty"`
	FeatureList            interface{} `json:"featureList,omitempty"`
	FileSize               interface{} `json:"fileSize,omitempty"`
	InstallUrl             interface{} `json:"installUrl,omitempty"`
	MemoryRequirements     interface{} `json:"memoryRequirements,omitempty"`
	OperatingSystem        interface{} `json:"operatingSystem,omitempty"`
	Permissions            interface{} `json:"permissions,omitempty"`
	ProcessorRequirements  interface{} `json:"processorRequirements,omitempty"`
	ReleaseNotes           interface{} `json:"releaseNotes,omitempty"`
	Requirements           interface{} `json:"requirements,omitempty"`
	Screenshot             interface{} `json:"screenshot,omitempty"`
	SoftwareAddOn          interface{} `json:"softwareAddOn,omitempty"`
	SoftwareHelp           interface{} `json:"softwareHelp,omitempty"`
	SoftwareRequirements   interface{} `json:"softwareRequirements,omitempty"`
	SoftwareVersion        interface{} `json:"softwareVersion,omitempty"`
	StorageRequirements    interface{} `json:"storageRequirements,omitempty"`
	SupportingData         interface{} `json:"supportingData,omitempty"`
}

// Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts, templates.
type SoftwareSourceCode struct {
	CreativeWork

	CodeRepository      interface{} `json:"codeRepository,omitempty"`
	CodeSampleType      interface{} `json:"codeSampleType,omitempty"`
	ProgrammingLanguage interface{} `json:"programmingLanguage,omitempty"`
	Runtime             interface{} `json:"runtime,omitempty"`
	RuntimePlatform     interface{} `json:"runtimePlatform,omitempty"`
	SampleType          interface{} `json:"sampleType,omitempty"`
	TargetProduct       interface{} `json:"targetProduct,omitempty"`
}

// The action that takes in a math expression and directs users to a page potentially capable of solving/simplifying that expression.
type SolveMathAction struct {
	Action

	EduQuestionType interface{} `json:"eduQuestionType,omitempty"`
}

// A placeholder for multiple similar products of the same kind.
type SomeProducts struct {
	Product

	InventoryLevel interface{} `json:"inventoryLevel,omitempty"`
}

// A SpeakableSpecification indicates (typically via [[xpath]] or [[cssSelector]]) sections of a document that are highlighted as particularly [[speakable]]. Instances of this type are expected to be used primarily as values of the [[speakable]] property.
type SpeakableSpecification struct {
	Intangible

	CssSelector interface{} `json:"cssSelector,omitempty"`
	Xpath       interface{} `json:"xpath,omitempty"`
}

/*
A SpecialAnnouncement combines a simple date-stamped textual information update
      with contextualized Web links and other structured data.  It represents an information update made by a
      locally-oriented organization, for example schools, pharmacies, healthcare providers,  community groups, police,
      local government.

For work in progress guidelines on Coronavirus-related markup see [this doc](https://docs.google.com/document/d/14ikaGCKxo50rRM7nvKSlbUpjyIk2WMQd3IkB1lItlrM/edit#).

The motivating scenario for SpecialAnnouncement is the [Coronavirus pandemic](https://en.wikipedia.org/wiki/2019%E2%80%9320_coronavirus_pandemic), and the initial vocabulary is oriented to this urgent situation. Schema.org
expect to improve the markup iteratively as it is deployed and as feedback emerges from use. In addition to our
usual [Github entry](https://github.com/schemaorg/schemaorg/issues/2490), feedback comments can also be provided in [this document](https://docs.google.com/document/d/1fpdFFxk8s87CWwACs53SGkYv3aafSxz_DTtOQxMrBJQ/edit#).


While this schema is designed to communicate urgent crisis-related information, it is not the same as an emergency warning technology like [CAP](https://en.wikipedia.org/wiki/Common_Alerting_Protocol), although there may be overlaps. The intent is to cover
the kinds of everyday practical information being posted to existing websites during an emergency situation.

Several kinds of information can be provided:

We encourage the provision of "name", "text", "datePosted", "expires" (if appropriate), "category" and
"url" as a simple baseline. It is important to provide a value for "category" where possible, most ideally as a well known
URL from Wikipedia or Wikidata. In the case of the 2019-2020 Coronavirus pandemic, this should be "https://en.wikipedia.org/w/index.php?title=2019-20\_coronavirus\_pandemic" or "https://www.wikidata.org/wiki/Q81068910".

For many of the possible properties, values can either be simple links or an inline description, depending on whether a summary is available. For a link, provide just the URL of the appropriate page as the property's value. For an inline description, use a [[WebContent]] type, and provide the url as a property of that, alongside at least a simple "[[text]]" summary of the page. It is
unlikely that a single SpecialAnnouncement will need all of the possible properties simultaneously.

We expect that in many cases the page referenced might contain more specialized structured data, e.g. contact info, [[openingHours]], [[Event]], [[FAQPage]] etc. By linking to those pages from a [[SpecialAnnouncement]] you can help make it clearer that the events are related to the situation (e.g. Coronavirus) indicated by the [[category]] property of the [[SpecialAnnouncement]].

Many [[SpecialAnnouncement]]s will relate to particular regions and to identifiable local organizations. Use [[spatialCoverage]] for the region, and [[announcementLocation]] to indicate specific [[LocalBusiness]]es and [[CivicStructure]]s. If the announcement affects both a particular region and a specific location (for example, a library closure that serves an entire region), use both [[spatialCoverage]] and [[announcementLocation]].

The [[about]] property can be used to indicate entities that are the focus of the announcement. We now recommend using [[about]] only
for representing non-location entities (e.g. a [[Course]] or a [[RadioStation]]). For places, use [[announcementLocation]] and [[spatialCoverage]]. Consumers of this markup should be aware that the initial design encouraged the use of /about for locations too.

The basic content of [[SpecialAnnouncement]] is similar to that of an [RSS](https://en.wikipedia.org/wiki/RSS) or [Atom](https://en.wikipedia.org/wiki/Atom_(Web_standard)) feed. For publishers without such feeds, basic feed-like information can be shared by posting
[[SpecialAnnouncement]] updates in a page, e.g. using JSON-LD. For sites with Atom/RSS functionality, you can point to a feed
with the [[webFeed]] property. This can be a simple URL, or an inline [[DataFeed]] object, with [[encodingFormat]] providing
media type information e.g. "application/rss+xml" or "application/atom+xml".
*/
type SpecialAnnouncement struct {
	CreativeWork

	AnnouncementLocation        interface{} `json:"announcementLocation,omitempty"`
	Category                    interface{} `json:"category,omitempty"`
	DatePosted                  interface{} `json:"datePosted,omitempty"`
	DiseasePreventionInfo       interface{} `json:"diseasePreventionInfo,omitempty"`
	DiseaseSpreadStatistics     interface{} `json:"diseaseSpreadStatistics,omitempty"`
	GettingTestedInfo           interface{} `json:"gettingTestedInfo,omitempty"`
	GovernmentBenefitsInfo      interface{} `json:"governmentBenefitsInfo,omitempty"`
	NewsUpdatesAndGuidelines    interface{} `json:"newsUpdatesAndGuidelines,omitempty"`
	PublicTransportClosuresInfo interface{} `json:"publicTransportClosuresInfo,omitempty"`
	QuarantineGuidelines        interface{} `json:"quarantineGuidelines,omitempty"`
	SchoolClosuresInfo          interface{} `json:"schoolClosuresInfo,omitempty"`
	TravelBans                  interface{} `json:"travelBans,omitempty"`
	WebFeed                     interface{} `json:"webFeed,omitempty"`
}

// Any branch of a field in which people typically develop specific expertise, usually after significant study, time, and effort.
type Specialty struct {
	Enumeration
}

// A sporting goods store.
type SportingGoodsStore struct {
	Store
}

// A sports location, such as a playing field.
type SportsActivityLocation struct {
	LocalBusiness
}

// A sports club.
type SportsClub struct {
	SportsActivityLocation
}

// Event type: Sports event.
type SportsEvent struct {
	Event

	AwayTeam   interface{} `json:"awayTeam,omitempty"`
	Competitor interface{} `json:"competitor,omitempty"`
	HomeTeam   interface{} `json:"homeTeam,omitempty"`
	Sport      interface{} `json:"sport,omitempty"`
}

// Represents the collection of all sports organizations, including sports teams, governing bodies, and sports associations.
type SportsOrganization struct {
	Organization

	Sport interface{} `json:"sport,omitempty"`
}

// Organization: Sports team.
type SportsTeam struct {
	SportsOrganization

	Athlete interface{} `json:"athlete,omitempty"`
	Coach   interface{} `json:"coach,omitempty"`
	Gender  interface{} `json:"gender,omitempty"`
}

// A spreadsheet file.
type SpreadsheetDigitalDocument struct {
	DigitalDocument
}

// A stadium.
type StadiumOrArena struct {
	CivicStructure
	// TODO: SportsActivityLocation
}

// A state or province of a country.
type State struct {
	AdministrativeArea
}

// A statement about something, for example a fun or interesting fact. If known, the main entity this statement is about, can be indicated using mainEntity. For more formal claims (e.g. in Fact Checking), consider using [[Claim]] instead. Use the [[text]] property to capture the text of the statement.
type Statement struct {
	CreativeWork
}

/*
A StatisticalPopulation is a set of instances of a certain given type that satisfy some set of constraints. The property [[populationType]] is used to specify the type. Any property that can be used on instances of that type can appear on the statistical population. For example, a [[StatisticalPopulation]] representing all [[Person]]s with a [[homeLocation]] of East Podunk California, would be described by applying the appropriate [[homeLocation]] and [[populationType]] properties to a [[StatisticalPopulation]] item that stands for that set of people.
The properties [[numConstraints]] and [[constrainingProperty]] are used to specify which of the populations properties are used to specify the population. Note that the sense of "population" used here is the general sense of a statistical
population, and does not imply that the population consists of people. For example, a [[populationType]] of [[Event]] or [[NewsArticle]] could be used. See also [[Observation]], and the [data and datasets](/docs/data-and-datasets.html) overview for more details.

*/
type StatisticalPopulation struct {
	Intangible

	ConstrainingProperty interface{} `json:"constrainingProperty,omitempty"`
	NumConstraints       interface{} `json:"numConstraints,omitempty"`
	PopulationType       interface{} `json:"populationType,omitempty"`
}

// Lists or enumerations dealing with status types.
type StatusEnumeration struct {
	Enumeration
}

// A value indicating a steering position.
type SteeringPositionValue struct {
	QualitativeValue
}

// A retail good store.
type Store struct {
	LocalBusiness
}

// Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
type StructuredValue struct {
	Intangible
}

// The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically to get updates pushed to.\n\nRelated actions:\n\n* [[FollowAction]]: Unlike FollowAction, SubscribeAction implies that the subscriber acts as a passive agent being constantly/actively pushed for updates.\n* [[RegisterAction]]: Unlike RegisterAction, SubscribeAction implies that the agent is interested in continuing receiving updates from the object.\n* [[JoinAction]]: Unlike JoinAction, SubscribeAction implies that the agent is interested in continuing receiving updates from the object.
type SubscribeAction struct {
	InteractAction
}

// Any matter of defined composition that has discrete existence, whose origin may be biological, mineral or chemical.
type Substance struct {
	MedicalEntity

	ActiveIngredient interface{} `json:"activeIngredient,omitempty"`
	MaximumIntake    interface{} `json:"maximumIntake,omitempty"`
}

// A subway station.
type SubwayStation struct {
	CivicStructure
}

/*
A suite in a hotel or other public accommodation, denotes a class of luxury accommodations, the key feature of which is multiple rooms (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Suite_(hotel)">http://en.wikipedia.org/wiki/Suite_(hotel)</a>).
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type Suite struct {
	Accommodation

	Bed           interface{} `json:"bed,omitempty"`
	NumberOfRooms interface{} `json:"numberOfRooms,omitempty"`
	Occupancy     interface{} `json:"occupancy,omitempty"`
}

// Anatomical features that can be observed by sight (without dissection), including the form and proportions of the human body as well as surface landmarks that correspond to deeper subcutaneous structures. Superficial anatomy plays an important role in sports medicine, phlebotomy, and other medical specialties as underlying anatomical structures can be identified through surface palpation. For example, during back surgery, superficial anatomy can be used to palpate and count vertebrae to find the site of incision. Or in phlebotomy, superficial anatomy can be used to locate an underlying vein; for example, the median cubital vein can be located by palpating the borders of the cubital fossa (such as the epicondyles of the humerus) and then looking for the superficial signs of the vein, such as size, prominence, ability to refill after depression, and feel of surrounding tissue support. As another example, in a subluxation (dislocation) of the glenohumeral joint, the bony structure becomes pronounced with the deltoid muscle failing to cover the glenohumeral joint allowing the edges of the scapula to be superficially visible. Here, the superficial anatomy is the visible edges of the scapula, implying the underlying dislocation of the joint (the related anatomical structure).
type SuperficialAnatomy struct {
	MedicalEntity

	AssociatedPathophysiology interface{} `json:"associatedPathophysiology,omitempty"`
	RelatedAnatomy            interface{} `json:"relatedAnatomy,omitempty"`
	RelatedCondition          interface{} `json:"relatedCondition,omitempty"`
	RelatedTherapy            interface{} `json:"relatedTherapy,omitempty"`
	Significance              interface{} `json:"significance,omitempty"`
}

// A medical procedure involving an incision with instruments; performed for diagnose, or therapeutic purposes.
type SurgicalProcedure struct {
	MedicalProcedure
}

// The act of momentarily pausing a device or application (e.g. pause music playback or pause a timer).
type SuspendAction struct {
	ControlAction
}

// A synagogue.
type Synagogue struct {
	PlaceOfWorship
}

// A short TV program or a segment/part of a TV program.
type TVClip struct {
	Clip

	PartOfTVSeries interface{} `json:"partOfTVSeries,omitempty"`
}

// A TV episode which can be part of a series or season.
type TVEpisode struct {
	Episode

	CountryOfOrigin  interface{} `json:"countryOfOrigin,omitempty"`
	PartOfTVSeries   interface{} `json:"partOfTVSeries,omitempty"`
	SubtitleLanguage interface{} `json:"subtitleLanguage,omitempty"`
	TitleEIDR        interface{} `json:"titleEIDR,omitempty"`
}

// Season dedicated to TV broadcast and associated online delivery.
type TVSeason struct {
	CreativeWork
	// TODO: CreativeWorkSeason

	CountryOfOrigin interface{} `json:"countryOfOrigin,omitempty"`
	PartOfTVSeries  interface{} `json:"partOfTVSeries,omitempty"`
}

// CreativeWorkSeries dedicated to TV broadcast and associated online delivery.
type TVSeries struct {
	CreativeWork
	// TODO: CreativeWorkSeries

	Actor             interface{} `json:"actor,omitempty"`
	Actors            interface{} `json:"actors,omitempty"`
	ContainsSeason    interface{} `json:"containsSeason,omitempty"`
	CountryOfOrigin   interface{} `json:"countryOfOrigin,omitempty"`
	Director          interface{} `json:"director,omitempty"`
	Directors         interface{} `json:"directors,omitempty"`
	Episode           interface{} `json:"episode,omitempty"`
	Episodes          interface{} `json:"episodes,omitempty"`
	MusicBy           interface{} `json:"musicBy,omitempty"`
	NumberOfEpisodes  interface{} `json:"numberOfEpisodes,omitempty"`
	NumberOfSeasons   interface{} `json:"numberOfSeasons,omitempty"`
	ProductionCompany interface{} `json:"productionCompany,omitempty"`
	Season            interface{} `json:"season,omitempty"`
	Seasons           interface{} `json:"seasons,omitempty"`
	Trailer           interface{} `json:"trailer,omitempty"`
}

// A table on a Web page.
type Table struct {
	WebPageElement
}

// The act of gaining ownership of an object from an origin. Reciprocal of GiveAction.\n\nRelated actions:\n\n* [[GiveAction]]: The reciprocal of TakeAction.\n* [[ReceiveAction]]: Unlike ReceiveAction, TakeAction implies that ownership has been transfered.
type TakeAction struct {
	TransferAction
}

// A tattoo parlor.
type TattooParlor struct {
	HealthAndBeautyBusiness
}

// A taxi.
type Taxi struct {
	Service
}

// A reservation for a taxi.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
type TaxiReservation struct {
	Reservation

	PartySize      interface{} `json:"partySize,omitempty"`
	PickupLocation interface{} `json:"pickupLocation,omitempty"`
	PickupTime     interface{} `json:"pickupTime,omitempty"`
}

// A service for a vehicle for hire with a driver for local travel. Fares are usually calculated based on distance traveled.
type TaxiService struct {
	Service
}

// A taxi stand.
type TaxiStand struct {
	CivicStructure
}

// A set of organisms asserted to represent a natural cohesive biological unit.
type Taxon struct {
	Thing

	ChildTaxon     interface{} `json:"childTaxon,omitempty"`
	HasDefinedTerm interface{} `json:"hasDefinedTerm,omitempty"`
	ParentTaxon    interface{} `json:"parentTaxon,omitempty"`
	TaxonRank      interface{} `json:"taxonRank,omitempty"`
}

// A technical article - Example: How-to (task) topics, step-by-step, procedural troubleshooting, specifications, etc.
type TechArticle struct {
	Article

	Dependencies     interface{} `json:"dependencies,omitempty"`
	ProficiencyLevel interface{} `json:"proficiencyLevel,omitempty"`
}

// A unique instance of a television BroadcastService on a CableOrSatelliteService lineup.
type TelevisionChannel struct {
	BroadcastChannel
}

// A television station.
type TelevisionStation struct {
	LocalBusiness
}

// A tennis complex.
type TennisComplex struct {
	SportsActivityLocation
}

// Data type: Text.
type Text struct{}

// A file composed primarily of text.
type TextDigitalDocument struct {
	DigitalDocument
}

// Event type: Theater performance.
type TheaterEvent struct {
	Event
}

// A theater group or company, for example, the Royal Shakespeare Company or Druid Theatre.
type TheaterGroup struct {
	PerformingGroup
}

// A medical procedure intended primarily for therapeutic purposes, aimed at improving a health condition.
type TherapeuticProcedure struct {
	MedicalProcedure

	AdverseOutcome interface{} `json:"adverseOutcome,omitempty"`
	DoseSchedule   interface{} `json:"doseSchedule,omitempty"`
	Drug           interface{} `json:"drug,omitempty"`
}

// A thesis or dissertation document submitted in support of candidature for an academic degree or professional qualification.
type Thesis struct {
	CreativeWork

	InSupportOf interface{} `json:"inSupportOf,omitempty"`
}

// The most generic type of item.
type Thing struct {
	AdditionalType            interface{} `json:"additionalType,omitempty"`
	AlternateName             interface{} `json:"alternateName,omitempty"`
	Description               interface{} `json:"description,omitempty"`
	DisambiguatingDescription interface{} `json:"disambiguatingDescription,omitempty"`
	Identifier                interface{} `json:"identifier,omitempty"`
	Image                     interface{} `json:"image,omitempty"`
	MainEntityOfPage          interface{} `json:"mainEntityOfPage,omitempty"`
	Name                      interface{} `json:"name,omitempty"`
	PotentialAction           interface{} `json:"potentialAction,omitempty"`
	SameAs                    interface{} `json:"sameAs,omitempty"`
	SubjectOf                 interface{} `json:"subjectOf,omitempty"`
	Url                       interface{} `json:"url,omitempty"`
}

// Used to describe a ticket to an event, a flight, a bus ride, etc.
type Ticket struct {
	Intangible

	DateIssued    interface{} `json:"dateIssued,omitempty"`
	IssuedBy      interface{} `json:"issuedBy,omitempty"`
	PriceCurrency interface{} `json:"priceCurrency,omitempty"`
	TicketNumber  interface{} `json:"ticketNumber,omitempty"`
	TicketToken   interface{} `json:"ticketToken,omitempty"`
	TicketedSeat  interface{} `json:"ticketedSeat,omitempty"`
	TotalPrice    interface{} `json:"totalPrice,omitempty"`
	UnderName     interface{} `json:"underName,omitempty"`
}

// The act of reaching a draw in a competitive activity.
type TieAction struct {
	AchieveAction
}

// A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
type Time struct{}

// The act of giving money voluntarily to a beneficiary in recognition of services rendered.
type TipAction struct {
	TradeAction

	Recipient interface{} `json:"recipient,omitempty"`
}

// A tire shop.
type TireShop struct {
	Store
}

// A tourist attraction.  In principle any Thing can be a [[TouristAttraction]], from a [[Mountain]] and [[LandmarksOrHistoricalBuildings]] to a [[LocalBusiness]].  This Type can be used on its own to describe a general [[TouristAttraction]], or be used as an [[additionalType]] to add tourist attraction properties to any other type.  (See examples below)
type TouristAttraction struct {
	Place

	AvailableLanguage interface{} `json:"availableLanguage,omitempty"`
	TouristType       interface{} `json:"touristType,omitempty"`
}

/*
A tourist destination. In principle any [[Place]] can be a [[TouristDestination]] from a [[City]], Region or [[Country]] to an [[AmusementPark]] or [[Hotel]]. This Type can be used on its own to describe a general [[TouristDestination]], or be used as an [[additionalType]] to add tourist relevant properties to any other [[Place]].  A [[TouristDestination]] is defined as a [[Place]] that contains, or is colocated with, one or more [[TouristAttraction]]s, often linked by a similar theme or interest to a particular [[touristType]]. The [UNWTO](http://www2.unwto.org/) defines Destination (main destination of a tourism trip) as the place visited that is central to the decision to take the trip.
  (See examples below).
*/
type TouristDestination struct {
	Place

	IncludesAttraction interface{} `json:"includesAttraction,omitempty"`
	TouristType        interface{} `json:"touristType,omitempty"`
}

// A tourist information center.
type TouristInformationCenter struct {
	LocalBusiness
}

/*
A tourist trip. A created itinerary of visits to one or more places of interest ([[TouristAttraction]]/[[TouristDestination]]) often linked by a similar theme, geographic area, or interest to a particular [[touristType]]. The [UNWTO](http://www2.unwto.org/) defines tourism trip as the Trip taken by visitors.
  (See examples below).
*/
type TouristTrip struct {
	Trip

	TouristType interface{} `json:"touristType,omitempty"`
}

// A toy store.
type ToyStore struct {
	Store
}

// An agent tracks an object for updates.\n\nRelated actions:\n\n* [[FollowAction]]: Unlike FollowAction, TrackAction refers to the interest on the location of innanimates objects.\n* [[SubscribeAction]]: Unlike SubscribeAction, TrackAction refers to  the interest on the location of innanimate objects.
type TrackAction struct {
	FindAction

	DeliveryMethod interface{} `json:"deliveryMethod,omitempty"`
}

// The act of participating in an exchange of goods and services for monetary compensation. An agent trades an object, product or service with a participant in exchange for a one time or periodic payment.
type TradeAction struct {
	Action

	Price              interface{} `json:"price,omitempty"`
	PriceCurrency      interface{} `json:"priceCurrency,omitempty"`
	PriceSpecification interface{} `json:"priceSpecification,omitempty"`
}

// A reservation for train travel.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
type TrainReservation struct {
	Reservation
}

// A train station.
type TrainStation struct {
	CivicStructure
}

// A trip on a commercial train line.
type TrainTrip struct {
	Trip

	ArrivalPlatform   interface{} `json:"arrivalPlatform,omitempty"`
	ArrivalStation    interface{} `json:"arrivalStation,omitempty"`
	DeparturePlatform interface{} `json:"departurePlatform,omitempty"`
	DepartureStation  interface{} `json:"departureStation,omitempty"`
	TrainName         interface{} `json:"trainName,omitempty"`
	TrainNumber       interface{} `json:"trainNumber,omitempty"`
}

// The act of transferring/moving (abstract or concrete) animate or inanimate objects from one place to another.
type TransferAction struct {
	Action

	FromLocation interface{} `json:"fromLocation,omitempty"`
	ToLocation   interface{} `json:"toLocation,omitempty"`
}

// The act of traveling from an fromLocation to a destination by a specified mode of transport, optionally with participants.
type TravelAction struct {
	MoveAction

	Distance interface{} `json:"distance,omitempty"`
}

// A travel agency.
type TravelAgency struct {
	LocalBusiness
}

// An indication for treating an underlying condition, symptom, etc.
type TreatmentIndication struct {
	MedicalIndication
}

// A trip or journey. An itinerary of visits to one or more places.
type Trip struct {
	Intangible

	ArrivalTime   interface{} `json:"arrivalTime,omitempty"`
	DepartureTime interface{} `json:"departureTime,omitempty"`
	Itinerary     interface{} `json:"itinerary,omitempty"`
	Offers        interface{} `json:"offers,omitempty"`
	PartOfTrip    interface{} `json:"partOfTrip,omitempty"`
	Provider      interface{} `json:"provider,omitempty"`
	SubTrip       interface{} `json:"subTrip,omitempty"`
}

// A structured value indicating the quantity, unit of measurement, and business function of goods included in a bundle offer.
type TypeAndQuantityNode struct {
	StructuredValue

	AmountOfThisGood interface{} `json:"amountOfThisGood,omitempty"`
	BusinessFunction interface{} `json:"businessFunction,omitempty"`
	TypeOfGood       interface{} `json:"typeOfGood,omitempty"`
	UnitCode         interface{} `json:"unitCode,omitempty"`
	UnitText         interface{} `json:"unitText,omitempty"`
}

// UKNonprofitType: Non-profit organization type originating from the United Kingdom.
type UKNonprofitType struct {
	NonprofitType
}

// Data type: URL.
type URL struct {
	Text
}

// USNonprofitType: Non-profit organization type originating from the United States.
type USNonprofitType struct {
	NonprofitType
}

// The act of un-registering from a service.\n\nRelated actions:\n\n* [[RegisterAction]]: antonym of UnRegisterAction.\n* [[LeaveAction]]: Unlike LeaveAction, UnRegisterAction implies that you are unregistering from a service you werer previously registered, rather than leaving a team/group of people.
type UnRegisterAction struct {
	InteractAction
}

// The price asked for a given offer by the respective organization or person.
type UnitPriceSpecification struct {
	PriceSpecification

	BillingDuration    interface{} `json:"billingDuration,omitempty"`
	BillingIncrement   interface{} `json:"billingIncrement,omitempty"`
	BillingStart       interface{} `json:"billingStart,omitempty"`
	PriceComponentType interface{} `json:"priceComponentType,omitempty"`
	PriceType          interface{} `json:"priceType,omitempty"`
	ReferenceQuantity  interface{} `json:"referenceQuantity,omitempty"`
	UnitCode           interface{} `json:"unitCode,omitempty"`
	UnitText           interface{} `json:"unitText,omitempty"`
}

// The act of managing by changing/editing the state of the object.
type UpdateAction struct {
	Action

	Collection       interface{} `json:"collection,omitempty"`
	TargetCollection interface{} `json:"targetCollection,omitempty"`
}

// The act of applying an object to its intended purpose.
type UseAction struct {
	ConsumeAction
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserBlocks struct {
	UserInteraction
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserCheckins struct {
	UserInteraction
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserComments struct {
	UserInteraction

	CommentText interface{} `json:"commentText,omitempty"`
	CommentTime interface{} `json:"commentTime,omitempty"`
	Creator     interface{} `json:"creator,omitempty"`
	Discusses   interface{} `json:"discusses,omitempty"`
	ReplyToUrl  interface{} `json:"replyToUrl,omitempty"`
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserDownloads struct {
	UserInteraction
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserInteraction struct {
	Event
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserLikes struct {
	UserInteraction
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserPageVisits struct {
	UserInteraction
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserPlays struct {
	UserInteraction
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserPlusOnes struct {
	UserInteraction
}

// A review created by an end-user (e.g. consumer, purchaser, attendee etc.), in contrast with [[CriticReview]].
type UserReview struct {
	Review
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserTweets struct {
	UserInteraction
}

// A vehicle is a device that is designed or used to transport people or cargo over land, water, air, or through space.
type Vehicle struct {
	Product

	AccelerationTime            interface{} `json:"accelerationTime,omitempty"`
	BodyType                    interface{} `json:"bodyType,omitempty"`
	CallSign                    interface{} `json:"callSign,omitempty"`
	CargoVolume                 interface{} `json:"cargoVolume,omitempty"`
	DateVehicleFirstRegistered  interface{} `json:"dateVehicleFirstRegistered,omitempty"`
	DriveWheelConfiguration     interface{} `json:"driveWheelConfiguration,omitempty"`
	EmissionsCO2                interface{} `json:"emissionsCO2,omitempty"`
	FuelCapacity                interface{} `json:"fuelCapacity,omitempty"`
	FuelConsumption             interface{} `json:"fuelConsumption,omitempty"`
	FuelEfficiency              interface{} `json:"fuelEfficiency,omitempty"`
	FuelType                    interface{} `json:"fuelType,omitempty"`
	KnownVehicleDamages         interface{} `json:"knownVehicleDamages,omitempty"`
	MeetsEmissionStandard       interface{} `json:"meetsEmissionStandard,omitempty"`
	MileageFromOdometer         interface{} `json:"mileageFromOdometer,omitempty"`
	ModelDate                   interface{} `json:"modelDate,omitempty"`
	NumberOfAirbags             interface{} `json:"numberOfAirbags,omitempty"`
	NumberOfAxles               interface{} `json:"numberOfAxles,omitempty"`
	NumberOfDoors               interface{} `json:"numberOfDoors,omitempty"`
	NumberOfForwardGears        interface{} `json:"numberOfForwardGears,omitempty"`
	NumberOfPreviousOwners      interface{} `json:"numberOfPreviousOwners,omitempty"`
	Payload                     interface{} `json:"payload,omitempty"`
	ProductionDate              interface{} `json:"productionDate,omitempty"`
	PurchaseDate                interface{} `json:"purchaseDate,omitempty"`
	SeatingCapacity             interface{} `json:"seatingCapacity,omitempty"`
	Speed                       interface{} `json:"speed,omitempty"`
	SteeringPosition            interface{} `json:"steeringPosition,omitempty"`
	TongueWeight                interface{} `json:"tongueWeight,omitempty"`
	TrailerWeight               interface{} `json:"trailerWeight,omitempty"`
	VehicleConfiguration        interface{} `json:"vehicleConfiguration,omitempty"`
	VehicleEngine               interface{} `json:"vehicleEngine,omitempty"`
	VehicleIdentificationNumber interface{} `json:"vehicleIdentificationNumber,omitempty"`
	VehicleInteriorColor        interface{} `json:"vehicleInteriorColor,omitempty"`
	VehicleInteriorType         interface{} `json:"vehicleInteriorType,omitempty"`
	VehicleModelDate            interface{} `json:"vehicleModelDate,omitempty"`
	VehicleSeatingCapacity      interface{} `json:"vehicleSeatingCapacity,omitempty"`
	VehicleSpecialUsage         interface{} `json:"vehicleSpecialUsage,omitempty"`
	VehicleTransmission         interface{} `json:"vehicleTransmission,omitempty"`
	WeightTotal                 interface{} `json:"weightTotal,omitempty"`
	Wheelbase                   interface{} `json:"wheelbase,omitempty"`
}

// A type of blood vessel that specifically carries blood to the heart.
type Vein struct {
	Vessel

	DrainsTo      interface{} `json:"drainsTo,omitempty"`
	RegionDrained interface{} `json:"regionDrained,omitempty"`
	Tributary     interface{} `json:"tributary,omitempty"`
}

// A component of the human body circulatory system comprised of an intricate network of hollow tubes that transport blood throughout the entire body.
type Vessel struct {
	AnatomicalStructure
}

// A vet's office.
type VeterinaryCare struct {
	MedicalOrganization
}

// Web page type: Video gallery page.
type VideoGallery struct {
	MediaGallery
}

// A video game is an electronic game that involves human interaction with a user interface to generate visual feedback on a video device.
type VideoGame struct {
	Game
	// TODO: SoftwareApplication

	Actor        interface{} `json:"actor,omitempty"`
	Actors       interface{} `json:"actors,omitempty"`
	CheatCode    interface{} `json:"cheatCode,omitempty"`
	Director     interface{} `json:"director,omitempty"`
	Directors    interface{} `json:"directors,omitempty"`
	GameEdition  interface{} `json:"gameEdition,omitempty"`
	GamePlatform interface{} `json:"gamePlatform,omitempty"`
	GameServer   interface{} `json:"gameServer,omitempty"`
	GameTip      interface{} `json:"gameTip,omitempty"`
	MusicBy      interface{} `json:"musicBy,omitempty"`
	PlayMode     interface{} `json:"playMode,omitempty"`
	Trailer      interface{} `json:"trailer,omitempty"`
}

// A short segment/part of a video game.
type VideoGameClip struct {
	Clip
}

// A video game series.
type VideoGameSeries struct {
	CreativeWorkSeries

	Actor              interface{} `json:"actor,omitempty"`
	Actors             interface{} `json:"actors,omitempty"`
	CharacterAttribute interface{} `json:"characterAttribute,omitempty"`
	CheatCode          interface{} `json:"cheatCode,omitempty"`
	ContainsSeason     interface{} `json:"containsSeason,omitempty"`
	Director           interface{} `json:"director,omitempty"`
	Directors          interface{} `json:"directors,omitempty"`
	Episode            interface{} `json:"episode,omitempty"`
	Episodes           interface{} `json:"episodes,omitempty"`
	GameItem           interface{} `json:"gameItem,omitempty"`
	GameLocation       interface{} `json:"gameLocation,omitempty"`
	GamePlatform       interface{} `json:"gamePlatform,omitempty"`
	MusicBy            interface{} `json:"musicBy,omitempty"`
	NumberOfEpisodes   interface{} `json:"numberOfEpisodes,omitempty"`
	NumberOfPlayers    interface{} `json:"numberOfPlayers,omitempty"`
	NumberOfSeasons    interface{} `json:"numberOfSeasons,omitempty"`
	PlayMode           interface{} `json:"playMode,omitempty"`
	ProductionCompany  interface{} `json:"productionCompany,omitempty"`
	Quest              interface{} `json:"quest,omitempty"`
	Season             interface{} `json:"season,omitempty"`
	Seasons            interface{} `json:"seasons,omitempty"`
	Trailer            interface{} `json:"trailer,omitempty"`
}

// A video file.
type VideoObject struct {
	MediaObject

	Actor               interface{} `json:"actor,omitempty"`
	Actors              interface{} `json:"actors,omitempty"`
	Caption             interface{} `json:"caption,omitempty"`
	Director            interface{} `json:"director,omitempty"`
	Directors           interface{} `json:"directors,omitempty"`
	EmbeddedTextCaption interface{} `json:"embeddedTextCaption,omitempty"`
	MusicBy             interface{} `json:"musicBy,omitempty"`
	Thumbnail           interface{} `json:"thumbnail,omitempty"`
	Transcript          interface{} `json:"transcript,omitempty"`
	VideoFrameSize      interface{} `json:"videoFrameSize,omitempty"`
	VideoQuality        interface{} `json:"videoQuality,omitempty"`
}

// A specific and exact (byte-for-byte) version of a [[VideoObject]]. Two byte-for-byte identical files, for the purposes of this type, considered identical. If they have different embedded metadata the files will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual content, do not affect this notion of identity.
type VideoObjectSnapshot struct {
	VideoObject
}

// The act of consuming static visual content.
type ViewAction struct {
	ConsumeAction
}

// An online or virtual location for attending events. For example, one may attend an online seminar or educational event. While a virtual location may be used as the location of an event, virtual locations should not be confused with physical locations in the real world.
type VirtualLocation struct {
	Intangible
}

// Event type: Visual arts event.
type VisualArtsEvent struct {
	Event
}

// A work of art that is primarily visual in character.
type VisualArtwork struct {
	CreativeWork

	ArtEdition     interface{} `json:"artEdition,omitempty"`
	ArtMedium      interface{} `json:"artMedium,omitempty"`
	Artform        interface{} `json:"artform,omitempty"`
	Artist         interface{} `json:"artist,omitempty"`
	ArtworkSurface interface{} `json:"artworkSurface,omitempty"`
	Colorist       interface{} `json:"colorist,omitempty"`
	Depth          interface{} `json:"depth,omitempty"`
	Height         interface{} `json:"height,omitempty"`
	Inker          interface{} `json:"inker,omitempty"`
	Letterer       interface{} `json:"letterer,omitempty"`
	Penciler       interface{} `json:"penciler,omitempty"`
	Surface        interface{} `json:"surface,omitempty"`
	Width          interface{} `json:"width,omitempty"`
}

// Vital signs are measures of various physiological functions in order to assess the most basic body functions.
type VitalSign struct {
	MedicalSign
}

// A volcano, like Fuji san.
type Volcano struct {
	Landform
}

// The act of expressing a preference from a fixed/finite/structured set of choices/options.
type VoteAction struct {
	ChooseAction

	Candidate interface{} `json:"candidate,omitempty"`
}

// An advertising section of the page.
type WPAdBlock struct {
	WebPageElement
}

// The footer section of the page.
type WPFooter struct {
	WebPageElement
}

// The header section of the page.
type WPHeader struct {
	WebPageElement
}

// A sidebar section of the page.
type WPSideBar struct {
	WebPageElement
}

// The act of expressing a desire about the object. An agent wants an object.
type WantAction struct {
	ReactAction
}

// A structured value representing the duration and scope of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.
type WarrantyPromise struct {
	StructuredValue

	DurationOfWarranty interface{} `json:"durationOfWarranty,omitempty"`
	WarrantyScope      interface{} `json:"warrantyScope,omitempty"`
}

/*
A range of of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#Labor-BringIn\n* http://purl.org/goodrelations/v1#PartsAndLabor-BringIn\n* http://purl.org/goodrelations/v1#PartsAndLabor-PickUp

*/
type WarrantyScope struct {
	Enumeration
}

// The act of consuming dynamic/moving visual content.
type WatchAction struct {
	ConsumeAction
}

// A waterfall, like Niagara.
type Waterfall struct {
	BodyOfWater
}

// The act of dressing oneself in clothing.
type WearAction struct {
	UseAction
}

// Enumerates common types of measurement for wearables products.
type WearableMeasurementTypeEnumeration struct {
	MeasurementTypeEnumeration
}

// Enumerates common size groups (also known as "size types") for wearable products.
type WearableSizeGroupEnumeration struct {
	SizeGroupEnumeration
}

// Enumerates common size systems specific for wearable products
type WearableSizeSystemEnumeration struct {
	SizeSystemEnumeration
}

// An application programming interface accessible over Web/Internet technologies.
type WebAPI struct {
	Service

	Documentation interface{} `json:"documentation,omitempty"`
}

// Web applications.
type WebApplication struct {
	SoftwareApplication

	BrowserRequirements interface{} `json:"browserRequirements,omitempty"`
}

// WebContent is a type representing all [[WebPage]], [[WebSite]] and [[WebPageElement]] content. It is sometimes the case that detailed distinctions between Web pages, sites and their parts is not always important or obvious. The  [[WebContent]] type makes it easier to describe Web-addressable content without requiring such distinctions to always be stated. (The intent is that the existing types [[WebPage]], [[WebSite]] and [[WebPageElement]] will eventually be declared as subtypes of [[WebContent]]).
type WebContent struct {
	CreativeWork
}

// A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
type WebPage struct {
	CreativeWork

	Breadcrumb         interface{} `json:"breadcrumb,omitempty"`
	LastReviewed       interface{} `json:"lastReviewed,omitempty"`
	MainContentOfPage  interface{} `json:"mainContentOfPage,omitempty"`
	PrimaryImageOfPage interface{} `json:"primaryImageOfPage,omitempty"`
	RelatedLink        interface{} `json:"relatedLink,omitempty"`
	ReviewedBy         interface{} `json:"reviewedBy,omitempty"`
	SignificantLink    interface{} `json:"significantLink,omitempty"`
	SignificantLinks   interface{} `json:"significantLinks,omitempty"`
	Speakable          interface{} `json:"speakable,omitempty"`
	Specialty          interface{} `json:"specialty,omitempty"`
}

// A web page element, like a table or an image.
type WebPageElement struct {
	CreativeWork

	CssSelector interface{} `json:"cssSelector,omitempty"`
	Xpath       interface{} `json:"xpath,omitempty"`
}

// A WebSite is a set of related web pages and other items typically served from a single web domain and accessible via URLs.
type WebSite struct {
	CreativeWork

	Issn interface{} `json:"issn,omitempty"`
}

// A wholesale store.
type WholesaleStore struct {
	Store
}

// The act of achieving victory in a competitive activity.
type WinAction struct {
	AchieveAction

	Loser interface{} `json:"loser,omitempty"`
}

// A winery.
type Winery struct {
	FoodEstablishment
}

// A program with both an educational and employment component. Typically based at a workplace and structured around work-based learning, with the aim of instilling competencies related to an occupation. WorkBasedProgram is used to distinguish programs such as apprenticeships from school, college or other classroom based educational programs.
type WorkBasedProgram struct {
	EducationalOccupationalProgram

	OccupationalCategory interface{} `json:"occupationalCategory,omitempty"`
	TrainingSalary       interface{} `json:"trainingSalary,omitempty"`
}

// A Workers Union (also known as a Labor Union, Labour Union, or Trade Union) is an organization that promotes the interests of its worker members by collectively bargaining with management, organizing, and political lobbying.
type WorkersUnion struct {
	Organization
}

// The act of authoring written creative content.
type WriteAction struct {
	CreateAction

	InLanguage interface{} `json:"inLanguage,omitempty"`
	Language   interface{} `json:"language,omitempty"`
}

// Text representing an XPath (typically but not necessarily version 1.0).
type XPathType struct {
	Text
}

// A zoo.
type Zoo struct {
	CivicStructure
}
