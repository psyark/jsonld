package jsonld

// Code generated by jsonld.codegen; DO NOT EDIT.

func NewThing(name string) interface{} {
	switch name {
	case "ThreeDModel":
		return &ThreeDModel{}
	case "AMRadioChannel":
		return &AMRadioChannel{}
	case "APIReference":
		return &APIReference{}
	case "AboutPage":
		return &AboutPage{}
	case "AcceptAction":
		return &AcceptAction{}
	case "Accommodation":
		return &Accommodation{}
	case "AccountingService":
		return &AccountingService{}
	case "AchieveAction":
		return &AchieveAction{}
	case "Action":
		return &Action{}
	case "ActionAccessSpecification":
		return &ActionAccessSpecification{}
	case "ActionStatusType":
		return &ActionStatusType{}
	case "ActivateAction":
		return &ActivateAction{}
	case "AddAction":
		return &AddAction{}
	case "AdministrativeArea":
		return &AdministrativeArea{}
	case "AdultEntertainment":
		return &AdultEntertainment{}
	case "AdultOrientedEnumeration":
		return &AdultOrientedEnumeration{}
	case "AdvertiserContentArticle":
		return &AdvertiserContentArticle{}
	case "AggregateOffer":
		return &AggregateOffer{}
	case "AggregateRating":
		return &AggregateRating{}
	case "AgreeAction":
		return &AgreeAction{}
	case "Airline":
		return &Airline{}
	case "Airport":
		return &Airport{}
	case "AlignmentObject":
		return &AlignmentObject{}
	case "AllocateAction":
		return &AllocateAction{}
	case "AmpStory":
		return &AmpStory{}
	case "AmusementPark":
		return &AmusementPark{}
	case "AnalysisNewsArticle":
		return &AnalysisNewsArticle{}
	case "AnatomicalStructure":
		return &AnatomicalStructure{}
	case "AnatomicalSystem":
		return &AnatomicalSystem{}
	case "AnimalShelter":
		return &AnimalShelter{}
	case "Answer":
		return &Answer{}
	case "Apartment":
		return &Apartment{}
	case "ApartmentComplex":
		return &ApartmentComplex{}
	case "AppendAction":
		return &AppendAction{}
	case "ApplyAction":
		return &ApplyAction{}
	case "ApprovedIndication":
		return &ApprovedIndication{}
	case "Aquarium":
		return &Aquarium{}
	case "ArchiveComponent":
		return &ArchiveComponent{}
	case "ArchiveOrganization":
		return &ArchiveOrganization{}
	case "ArriveAction":
		return &ArriveAction{}
	case "ArtGallery":
		return &ArtGallery{}
	case "Artery":
		return &Artery{}
	case "Article":
		return &Article{}
	case "AskAction":
		return &AskAction{}
	case "AskPublicNewsArticle":
		return &AskPublicNewsArticle{}
	case "AssessAction":
		return &AssessAction{}
	case "AssignAction":
		return &AssignAction{}
	case "Atlas":
		return &Atlas{}
	case "Attorney":
		return &Attorney{}
	case "Audience":
		return &Audience{}
	case "AudioObject":
		return &AudioObject{}
	case "AudioObjectSnapshot":
		return &AudioObjectSnapshot{}
	case "Audiobook":
		return &Audiobook{}
	case "AuthorizeAction":
		return &AuthorizeAction{}
	case "AutoBodyShop":
		return &AutoBodyShop{}
	case "AutoDealer":
		return &AutoDealer{}
	case "AutoPartsStore":
		return &AutoPartsStore{}
	case "AutoRental":
		return &AutoRental{}
	case "AutoRepair":
		return &AutoRepair{}
	case "AutoWash":
		return &AutoWash{}
	case "AutomatedTeller":
		return &AutomatedTeller{}
	case "AutomotiveBusiness":
		return &AutomotiveBusiness{}
	case "BackgroundNewsArticle":
		return &BackgroundNewsArticle{}
	case "Bakery":
		return &Bakery{}
	case "BankAccount":
		return &BankAccount{}
	case "BankOrCreditUnion":
		return &BankOrCreditUnion{}
	case "BarOrPub":
		return &BarOrPub{}
	case "Barcode":
		return &Barcode{}
	case "Beach":
		return &Beach{}
	case "BeautySalon":
		return &BeautySalon{}
	case "BedAndBreakfast":
		return &BedAndBreakfast{}
	case "BedDetails":
		return &BedDetails{}
	case "BedType":
		return &BedType{}
	case "BefriendAction":
		return &BefriendAction{}
	case "BikeStore":
		return &BikeStore{}
	case "BioChemEntity":
		return &BioChemEntity{}
	case "Blog":
		return &Blog{}
	case "BlogPosting":
		return &BlogPosting{}
	case "BloodTest":
		return &BloodTest{}
	case "BoardingPolicyType":
		return &BoardingPolicyType{}
	case "BoatReservation":
		return &BoatReservation{}
	case "BoatTerminal":
		return &BoatTerminal{}
	case "BoatTrip":
		return &BoatTrip{}
	case "BodyMeasurementTypeEnumeration":
		return &BodyMeasurementTypeEnumeration{}
	case "BodyOfWater":
		return &BodyOfWater{}
	case "Bone":
		return &Bone{}
	case "Book":
		return &Book{}
	case "BookFormatType":
		return &BookFormatType{}
	case "BookSeries":
		return &BookSeries{}
	case "BookStore":
		return &BookStore{}
	case "BookmarkAction":
		return &BookmarkAction{}
	case "BorrowAction":
		return &BorrowAction{}
	case "BowlingAlley":
		return &BowlingAlley{}
	case "BrainStructure":
		return &BrainStructure{}
	case "Brand":
		return &Brand{}
	case "BreadcrumbList":
		return &BreadcrumbList{}
	case "Brewery":
		return &Brewery{}
	case "Bridge":
		return &Bridge{}
	case "BroadcastChannel":
		return &BroadcastChannel{}
	case "BroadcastEvent":
		return &BroadcastEvent{}
	case "BroadcastFrequencySpecification":
		return &BroadcastFrequencySpecification{}
	case "BroadcastService":
		return &BroadcastService{}
	case "BrokerageAccount":
		return &BrokerageAccount{}
	case "BuddhistTemple":
		return &BuddhistTemple{}
	case "BusOrCoach":
		return &BusOrCoach{}
	case "BusReservation":
		return &BusReservation{}
	case "BusStation":
		return &BusStation{}
	case "BusStop":
		return &BusStop{}
	case "BusTrip":
		return &BusTrip{}
	case "BusinessAudience":
		return &BusinessAudience{}
	case "BusinessEntityType":
		return &BusinessEntityType{}
	case "BusinessEvent":
		return &BusinessEvent{}
	case "BusinessFunction":
		return &BusinessFunction{}
	case "BuyAction":
		return &BuyAction{}
	case "CDCPMDRecord":
		return &CDCPMDRecord{}
	case "CableOrSatelliteService":
		return &CableOrSatelliteService{}
	case "CafeOrCoffeeShop":
		return &CafeOrCoffeeShop{}
	case "Campground":
		return &Campground{}
	case "CampingPitch":
		return &CampingPitch{}
	case "Canal":
		return &Canal{}
	case "CancelAction":
		return &CancelAction{}
	case "Car":
		return &Car{}
	case "CarUsageType":
		return &CarUsageType{}
	case "Casino":
		return &Casino{}
	case "CategoryCode":
		return &CategoryCode{}
	case "CategoryCodeSet":
		return &CategoryCodeSet{}
	case "CatholicChurch":
		return &CatholicChurch{}
	case "Cemetery":
		return &Cemetery{}
	case "Chapter":
		return &Chapter{}
	case "CheckAction":
		return &CheckAction{}
	case "CheckInAction":
		return &CheckInAction{}
	case "CheckOutAction":
		return &CheckOutAction{}
	case "CheckoutPage":
		return &CheckoutPage{}
	case "ChemicalSubstance":
		return &ChemicalSubstance{}
	case "ChildCare":
		return &ChildCare{}
	case "ChildrensEvent":
		return &ChildrensEvent{}
	case "ChooseAction":
		return &ChooseAction{}
	case "Church":
		return &Church{}
	case "City":
		return &City{}
	case "CityHall":
		return &CityHall{}
	case "CivicStructure":
		return &CivicStructure{}
	case "Claim":
		return &Claim{}
	case "ClaimReview":
		return &ClaimReview{}
	case "Class":
		return &Class{}
	case "Clip":
		return &Clip{}
	case "ClothingStore":
		return &ClothingStore{}
	case "Code":
		return &Code{}
	case "Collection":
		return &Collection{}
	case "CollectionPage":
		return &CollectionPage{}
	case "CollegeOrUniversity":
		return &CollegeOrUniversity{}
	case "ComedyClub":
		return &ComedyClub{}
	case "ComedyEvent":
		return &ComedyEvent{}
	case "ComicCoverArt":
		return &ComicCoverArt{}
	case "ComicIssue":
		return &ComicIssue{}
	case "ComicSeries":
		return &ComicSeries{}
	case "ComicStory":
		return &ComicStory{}
	case "Comment":
		return &Comment{}
	case "CommentAction":
		return &CommentAction{}
	case "CommunicateAction":
		return &CommunicateAction{}
	case "CompleteDataFeed":
		return &CompleteDataFeed{}
	case "CompoundPriceSpecification":
		return &CompoundPriceSpecification{}
	case "ComputerLanguage":
		return &ComputerLanguage{}
	case "ComputerStore":
		return &ComputerStore{}
	case "ConfirmAction":
		return &ConfirmAction{}
	case "Consortium":
		return &Consortium{}
	case "ConsumeAction":
		return &ConsumeAction{}
	case "ContactPage":
		return &ContactPage{}
	case "ContactPoint":
		return &ContactPoint{}
	case "ContactPointOption":
		return &ContactPointOption{}
	case "Continent":
		return &Continent{}
	case "ControlAction":
		return &ControlAction{}
	case "ConvenienceStore":
		return &ConvenienceStore{}
	case "Conversation":
		return &Conversation{}
	case "CookAction":
		return &CookAction{}
	case "Corporation":
		return &Corporation{}
	case "CorrectionComment":
		return &CorrectionComment{}
	case "Country":
		return &Country{}
	case "Course":
		return &Course{}
	case "CourseInstance":
		return &CourseInstance{}
	case "Courthouse":
		return &Courthouse{}
	case "CoverArt":
		return &CoverArt{}
	case "CovidTestingFacility":
		return &CovidTestingFacility{}
	case "CreateAction":
		return &CreateAction{}
	case "CreativeWork":
		return &CreativeWork{}
	case "CreativeWorkSeason":
		return &CreativeWorkSeason{}
	case "CreativeWorkSeries":
		return &CreativeWorkSeries{}
	case "CreditCard":
		return &CreditCard{}
	case "Crematorium":
		return &Crematorium{}
	case "CriticReview":
		return &CriticReview{}
	case "CurrencyConversionService":
		return &CurrencyConversionService{}
	case "DDxElement":
		return &DDxElement{}
	case "DanceEvent":
		return &DanceEvent{}
	case "DanceGroup":
		return &DanceGroup{}
	case "DataCatalog":
		return &DataCatalog{}
	case "DataDownload":
		return &DataDownload{}
	case "DataFeed":
		return &DataFeed{}
	case "DataFeedItem":
		return &DataFeedItem{}
	case "Dataset":
		return &Dataset{}
	case "DatedMoneySpecification":
		return &DatedMoneySpecification{}
	case "DayOfWeek":
		return &DayOfWeek{}
	case "DaySpa":
		return &DaySpa{}
	case "DeactivateAction":
		return &DeactivateAction{}
	case "DefenceEstablishment":
		return &DefenceEstablishment{}
	case "DefinedRegion":
		return &DefinedRegion{}
	case "DefinedTerm":
		return &DefinedTerm{}
	case "DefinedTermSet":
		return &DefinedTermSet{}
	case "DeleteAction":
		return &DeleteAction{}
	case "DeliveryChargeSpecification":
		return &DeliveryChargeSpecification{}
	case "DeliveryEvent":
		return &DeliveryEvent{}
	case "DeliveryMethod":
		return &DeliveryMethod{}
	case "DeliveryTimeSettings":
		return &DeliveryTimeSettings{}
	case "Demand":
		return &Demand{}
	case "Dentist":
		return &Dentist{}
	case "DepartAction":
		return &DepartAction{}
	case "DepartmentStore":
		return &DepartmentStore{}
	case "DepositAccount":
		return &DepositAccount{}
	case "DiagnosticLab":
		return &DiagnosticLab{}
	case "DiagnosticProcedure":
		return &DiagnosticProcedure{}
	case "Diet":
		return &Diet{}
	case "DietarySupplement":
		return &DietarySupplement{}
	case "DigitalDocument":
		return &DigitalDocument{}
	case "DigitalDocumentPermission":
		return &DigitalDocumentPermission{}
	case "DigitalDocumentPermissionType":
		return &DigitalDocumentPermissionType{}
	case "DigitalPlatformEnumeration":
		return &DigitalPlatformEnumeration{}
	case "DisagreeAction":
		return &DisagreeAction{}
	case "DiscoverAction":
		return &DiscoverAction{}
	case "DiscussionForumPosting":
		return &DiscussionForumPosting{}
	case "DislikeAction":
		return &DislikeAction{}
	case "Distance":
		return &Distance{}
	case "Distillery":
		return &Distillery{}
	case "DonateAction":
		return &DonateAction{}
	case "DoseSchedule":
		return &DoseSchedule{}
	case "DownloadAction":
		return &DownloadAction{}
	case "DrawAction":
		return &DrawAction{}
	case "Drawing":
		return &Drawing{}
	case "DrinkAction":
		return &DrinkAction{}
	case "DriveWheelConfigurationValue":
		return &DriveWheelConfigurationValue{}
	case "Drug":
		return &Drug{}
	case "DrugClass":
		return &DrugClass{}
	case "DrugCost":
		return &DrugCost{}
	case "DrugCostCategory":
		return &DrugCostCategory{}
	case "DrugLegalStatus":
		return &DrugLegalStatus{}
	case "DrugPregnancyCategory":
		return &DrugPregnancyCategory{}
	case "DrugPrescriptionStatus":
		return &DrugPrescriptionStatus{}
	case "DrugStrength":
		return &DrugStrength{}
	case "DryCleaningOrLaundry":
		return &DryCleaningOrLaundry{}
	case "Duration":
		return &Duration{}
	case "EUEnergyEfficiencyEnumeration":
		return &EUEnergyEfficiencyEnumeration{}
	case "EatAction":
		return &EatAction{}
	case "EducationEvent":
		return &EducationEvent{}
	case "EducationalAudience":
		return &EducationalAudience{}
	case "EducationalOccupationalCredential":
		return &EducationalOccupationalCredential{}
	case "EducationalOccupationalProgram":
		return &EducationalOccupationalProgram{}
	case "EducationalOrganization":
		return &EducationalOrganization{}
	case "Electrician":
		return &Electrician{}
	case "ElectronicsStore":
		return &ElectronicsStore{}
	case "ElementarySchool":
		return &ElementarySchool{}
	case "EmailMessage":
		return &EmailMessage{}
	case "Embassy":
		return &Embassy{}
	case "EmergencyService":
		return &EmergencyService{}
	case "EmployeeRole":
		return &EmployeeRole{}
	case "EmployerAggregateRating":
		return &EmployerAggregateRating{}
	case "EmployerReview":
		return &EmployerReview{}
	case "EmploymentAgency":
		return &EmploymentAgency{}
	case "EndorseAction":
		return &EndorseAction{}
	case "EndorsementRating":
		return &EndorsementRating{}
	case "Energy":
		return &Energy{}
	case "EnergyConsumptionDetails":
		return &EnergyConsumptionDetails{}
	case "EnergyEfficiencyEnumeration":
		return &EnergyEfficiencyEnumeration{}
	case "EnergyStarEnergyEfficiencyEnumeration":
		return &EnergyStarEnergyEfficiencyEnumeration{}
	case "EngineSpecification":
		return &EngineSpecification{}
	case "EntertainmentBusiness":
		return &EntertainmentBusiness{}
	case "EntryPoint":
		return &EntryPoint{}
	case "Enumeration":
		return &Enumeration{}
	case "Episode":
		return &Episode{}
	case "Event":
		return &Event{}
	case "EventAttendanceModeEnumeration":
		return &EventAttendanceModeEnumeration{}
	case "EventReservation":
		return &EventReservation{}
	case "EventSeries":
		return &EventSeries{}
	case "EventStatusType":
		return &EventStatusType{}
	case "EventVenue":
		return &EventVenue{}
	case "ExchangeRateSpecification":
		return &ExchangeRateSpecification{}
	case "ExerciseAction":
		return &ExerciseAction{}
	case "ExerciseGym":
		return &ExerciseGym{}
	case "ExercisePlan":
		return &ExercisePlan{}
	case "ExhibitionEvent":
		return &ExhibitionEvent{}
	case "FAQPage":
		return &FAQPage{}
	case "FMRadioChannel":
		return &FMRadioChannel{}
	case "FastFoodRestaurant":
		return &FastFoodRestaurant{}
	case "Festival":
		return &Festival{}
	case "FilmAction":
		return &FilmAction{}
	case "FinancialProduct":
		return &FinancialProduct{}
	case "FinancialService":
		return &FinancialService{}
	case "FindAction":
		return &FindAction{}
	case "FireStation":
		return &FireStation{}
	case "Flight":
		return &Flight{}
	case "FlightReservation":
		return &FlightReservation{}
	case "FloorPlan":
		return &FloorPlan{}
	case "Florist":
		return &Florist{}
	case "FollowAction":
		return &FollowAction{}
	case "FoodEstablishment":
		return &FoodEstablishment{}
	case "FoodEstablishmentReservation":
		return &FoodEstablishmentReservation{}
	case "FoodEvent":
		return &FoodEvent{}
	case "FoodService":
		return &FoodService{}
	case "FundingAgency":
		return &FundingAgency{}
	case "FundingScheme":
		return &FundingScheme{}
	case "FurnitureStore":
		return &FurnitureStore{}
	case "Game":
		return &Game{}
	case "GameAvailabilityEnumeration":
		return &GameAvailabilityEnumeration{}
	case "GamePlayMode":
		return &GamePlayMode{}
	case "GameServer":
		return &GameServer{}
	case "GameServerStatus":
		return &GameServerStatus{}
	case "GardenStore":
		return &GardenStore{}
	case "GasStation":
		return &GasStation{}
	case "GatedResidenceCommunity":
		return &GatedResidenceCommunity{}
	case "GenderType":
		return &GenderType{}
	case "Gene":
		return &Gene{}
	case "GeneralContractor":
		return &GeneralContractor{}
	case "GeoCircle":
		return &GeoCircle{}
	case "GeoCoordinates":
		return &GeoCoordinates{}
	case "GeoShape":
		return &GeoShape{}
	case "GeospatialGeometry":
		return &GeospatialGeometry{}
	case "GiveAction":
		return &GiveAction{}
	case "GolfCourse":
		return &GolfCourse{}
	case "GovernmentBenefitsType":
		return &GovernmentBenefitsType{}
	case "GovernmentBuilding":
		return &GovernmentBuilding{}
	case "GovernmentOffice":
		return &GovernmentOffice{}
	case "GovernmentOrganization":
		return &GovernmentOrganization{}
	case "GovernmentPermit":
		return &GovernmentPermit{}
	case "GovernmentService":
		return &GovernmentService{}
	case "Grant":
		return &Grant{}
	case "GroceryStore":
		return &GroceryStore{}
	case "Guide":
		return &Guide{}
	case "HVACBusiness":
		return &HVACBusiness{}
	case "Hackathon":
		return &Hackathon{}
	case "HairSalon":
		return &HairSalon{}
	case "HardwareStore":
		return &HardwareStore{}
	case "HealthAndBeautyBusiness":
		return &HealthAndBeautyBusiness{}
	case "HealthAspectEnumeration":
		return &HealthAspectEnumeration{}
	case "HealthClub":
		return &HealthClub{}
	case "HealthInsurancePlan":
		return &HealthInsurancePlan{}
	case "HealthPlanCostSharingSpecification":
		return &HealthPlanCostSharingSpecification{}
	case "HealthPlanFormulary":
		return &HealthPlanFormulary{}
	case "HealthPlanNetwork":
		return &HealthPlanNetwork{}
	case "HealthTopicContent":
		return &HealthTopicContent{}
	case "HighSchool":
		return &HighSchool{}
	case "HinduTemple":
		return &HinduTemple{}
	case "HobbyShop":
		return &HobbyShop{}
	case "HomeAndConstructionBusiness":
		return &HomeAndConstructionBusiness{}
	case "HomeGoodsStore":
		return &HomeGoodsStore{}
	case "Hospital":
		return &Hospital{}
	case "Hostel":
		return &Hostel{}
	case "Hotel":
		return &Hotel{}
	case "HotelRoom":
		return &HotelRoom{}
	case "House":
		return &House{}
	case "HousePainter":
		return &HousePainter{}
	case "HowTo":
		return &HowTo{}
	case "HowToDirection":
		return &HowToDirection{}
	case "HowToItem":
		return &HowToItem{}
	case "HowToSection":
		return &HowToSection{}
	case "HowToStep":
		return &HowToStep{}
	case "HowToSupply":
		return &HowToSupply{}
	case "HowToTip":
		return &HowToTip{}
	case "HowToTool":
		return &HowToTool{}
	case "HyperToc":
		return &HyperToc{}
	case "HyperTocEntry":
		return &HyperTocEntry{}
	case "IceCreamShop":
		return &IceCreamShop{}
	case "IgnoreAction":
		return &IgnoreAction{}
	case "ImageGallery":
		return &ImageGallery{}
	case "ImageObject":
		return &ImageObject{}
	case "ImageObjectSnapshot":
		return &ImageObjectSnapshot{}
	case "ImagingTest":
		return &ImagingTest{}
	case "IndividualProduct":
		return &IndividualProduct{}
	case "InfectiousAgentClass":
		return &InfectiousAgentClass{}
	case "InfectiousDisease":
		return &InfectiousDisease{}
	case "InformAction":
		return &InformAction{}
	case "InsertAction":
		return &InsertAction{}
	case "InstallAction":
		return &InstallAction{}
	case "InsuranceAgency":
		return &InsuranceAgency{}
	case "Intangible":
		return &Intangible{}
	case "InteractAction":
		return &InteractAction{}
	case "InteractionCounter":
		return &InteractionCounter{}
	case "InternetCafe":
		return &InternetCafe{}
	case "InvestmentFund":
		return &InvestmentFund{}
	case "InvestmentOrDeposit":
		return &InvestmentOrDeposit{}
	case "InviteAction":
		return &InviteAction{}
	case "Invoice":
		return &Invoice{}
	case "ItemAvailability":
		return &ItemAvailability{}
	case "ItemList":
		return &ItemList{}
	case "ItemListOrderType":
		return &ItemListOrderType{}
	case "ItemPage":
		return &ItemPage{}
	case "JewelryStore":
		return &JewelryStore{}
	case "JobPosting":
		return &JobPosting{}
	case "JoinAction":
		return &JoinAction{}
	case "Joint":
		return &Joint{}
	case "LakeBodyOfWater":
		return &LakeBodyOfWater{}
	case "Landform":
		return &Landform{}
	case "LandmarksOrHistoricalBuildings":
		return &LandmarksOrHistoricalBuildings{}
	case "Language":
		return &Language{}
	case "LearningResource":
		return &LearningResource{}
	case "LeaveAction":
		return &LeaveAction{}
	case "LegalForceStatus":
		return &LegalForceStatus{}
	case "LegalService":
		return &LegalService{}
	case "LegalValueLevel":
		return &LegalValueLevel{}
	case "Legislation":
		return &Legislation{}
	case "LegislationObject":
		return &LegislationObject{}
	case "LegislativeBuilding":
		return &LegislativeBuilding{}
	case "LendAction":
		return &LendAction{}
	case "Library":
		return &Library{}
	case "LibrarySystem":
		return &LibrarySystem{}
	case "LifestyleModification":
		return &LifestyleModification{}
	case "Ligament":
		return &Ligament{}
	case "LikeAction":
		return &LikeAction{}
	case "LinkRole":
		return &LinkRole{}
	case "LiquorStore":
		return &LiquorStore{}
	case "ListItem":
		return &ListItem{}
	case "ListenAction":
		return &ListenAction{}
	case "LiteraryEvent":
		return &LiteraryEvent{}
	case "LiveBlogPosting":
		return &LiveBlogPosting{}
	case "LoanOrCredit":
		return &LoanOrCredit{}
	case "LocalBusiness":
		return &LocalBusiness{}
	case "LocationFeatureSpecification":
		return &LocationFeatureSpecification{}
	case "Locksmith":
		return &Locksmith{}
	case "LodgingBusiness":
		return &LodgingBusiness{}
	case "LodgingReservation":
		return &LodgingReservation{}
	case "LoseAction":
		return &LoseAction{}
	case "LymphaticVessel":
		return &LymphaticVessel{}
	case "Manuscript":
		return &Manuscript{}
	case "Map":
		return &Map{}
	case "MapCategoryType":
		return &MapCategoryType{}
	case "MarryAction":
		return &MarryAction{}
	case "Mass":
		return &Mass{}
	case "MathSolver":
		return &MathSolver{}
	case "MaximumDoseSchedule":
		return &MaximumDoseSchedule{}
	case "MeasurementTypeEnumeration":
		return &MeasurementTypeEnumeration{}
	case "MediaGallery":
		return &MediaGallery{}
	case "MediaManipulationRatingEnumeration":
		return &MediaManipulationRatingEnumeration{}
	case "MediaObject":
		return &MediaObject{}
	case "MediaReview":
		return &MediaReview{}
	case "MediaReviewItem":
		return &MediaReviewItem{}
	case "MediaSubscription":
		return &MediaSubscription{}
	case "MedicalAudience":
		return &MedicalAudience{}
	case "MedicalAudienceType":
		return &MedicalAudienceType{}
	case "MedicalBusiness":
		return &MedicalBusiness{}
	case "MedicalCause":
		return &MedicalCause{}
	case "MedicalClinic":
		return &MedicalClinic{}
	case "MedicalCode":
		return &MedicalCode{}
	case "MedicalCondition":
		return &MedicalCondition{}
	case "MedicalConditionStage":
		return &MedicalConditionStage{}
	case "MedicalContraindication":
		return &MedicalContraindication{}
	case "MedicalDevice":
		return &MedicalDevice{}
	case "MedicalDevicePurpose":
		return &MedicalDevicePurpose{}
	case "MedicalEntity":
		return &MedicalEntity{}
	case "MedicalEnumeration":
		return &MedicalEnumeration{}
	case "MedicalEvidenceLevel":
		return &MedicalEvidenceLevel{}
	case "MedicalGuideline":
		return &MedicalGuideline{}
	case "MedicalGuidelineContraindication":
		return &MedicalGuidelineContraindication{}
	case "MedicalGuidelineRecommendation":
		return &MedicalGuidelineRecommendation{}
	case "MedicalImagingTechnique":
		return &MedicalImagingTechnique{}
	case "MedicalIndication":
		return &MedicalIndication{}
	case "MedicalIntangible":
		return &MedicalIntangible{}
	case "MedicalObservationalStudy":
		return &MedicalObservationalStudy{}
	case "MedicalObservationalStudyDesign":
		return &MedicalObservationalStudyDesign{}
	case "MedicalOrganization":
		return &MedicalOrganization{}
	case "MedicalProcedure":
		return &MedicalProcedure{}
	case "MedicalProcedureType":
		return &MedicalProcedureType{}
	case "MedicalRiskCalculator":
		return &MedicalRiskCalculator{}
	case "MedicalRiskEstimator":
		return &MedicalRiskEstimator{}
	case "MedicalRiskFactor":
		return &MedicalRiskFactor{}
	case "MedicalRiskScore":
		return &MedicalRiskScore{}
	case "MedicalScholarlyArticle":
		return &MedicalScholarlyArticle{}
	case "MedicalSign":
		return &MedicalSign{}
	case "MedicalSignOrSymptom":
		return &MedicalSignOrSymptom{}
	case "MedicalSpecialty":
		return &MedicalSpecialty{}
	case "MedicalStudy":
		return &MedicalStudy{}
	case "MedicalStudyStatus":
		return &MedicalStudyStatus{}
	case "MedicalSymptom":
		return &MedicalSymptom{}
	case "MedicalTest":
		return &MedicalTest{}
	case "MedicalTestPanel":
		return &MedicalTestPanel{}
	case "MedicalTherapy":
		return &MedicalTherapy{}
	case "MedicalTrial":
		return &MedicalTrial{}
	case "MedicalTrialDesign":
		return &MedicalTrialDesign{}
	case "MedicalWebPage":
		return &MedicalWebPage{}
	case "MedicineSystem":
		return &MedicineSystem{}
	case "MeetingRoom":
		return &MeetingRoom{}
	case "MensClothingStore":
		return &MensClothingStore{}
	case "Menu":
		return &Menu{}
	case "MenuItem":
		return &MenuItem{}
	case "MenuSection":
		return &MenuSection{}
	case "MerchantReturnEnumeration":
		return &MerchantReturnEnumeration{}
	case "MerchantReturnPolicy":
		return &MerchantReturnPolicy{}
	case "MerchantReturnPolicySeasonalOverride":
		return &MerchantReturnPolicySeasonalOverride{}
	case "Message":
		return &Message{}
	case "MiddleSchool":
		return &MiddleSchool{}
	case "MobileApplication":
		return &MobileApplication{}
	case "MobilePhoneStore":
		return &MobilePhoneStore{}
	case "MolecularEntity":
		return &MolecularEntity{}
	case "MonetaryAmount":
		return &MonetaryAmount{}
	case "MonetaryAmountDistribution":
		return &MonetaryAmountDistribution{}
	case "MonetaryGrant":
		return &MonetaryGrant{}
	case "MoneyTransfer":
		return &MoneyTransfer{}
	case "MortgageLoan":
		return &MortgageLoan{}
	case "Mosque":
		return &Mosque{}
	case "Motel":
		return &Motel{}
	case "Motorcycle":
		return &Motorcycle{}
	case "MotorcycleDealer":
		return &MotorcycleDealer{}
	case "MotorcycleRepair":
		return &MotorcycleRepair{}
	case "MotorizedBicycle":
		return &MotorizedBicycle{}
	case "Mountain":
		return &Mountain{}
	case "MoveAction":
		return &MoveAction{}
	case "Movie":
		return &Movie{}
	case "MovieClip":
		return &MovieClip{}
	case "MovieRentalStore":
		return &MovieRentalStore{}
	case "MovieSeries":
		return &MovieSeries{}
	case "MovieTheater":
		return &MovieTheater{}
	case "MovingCompany":
		return &MovingCompany{}
	case "Muscle":
		return &Muscle{}
	case "Museum":
		return &Museum{}
	case "MusicAlbum":
		return &MusicAlbum{}
	case "MusicAlbumProductionType":
		return &MusicAlbumProductionType{}
	case "MusicAlbumReleaseType":
		return &MusicAlbumReleaseType{}
	case "MusicComposition":
		return &MusicComposition{}
	case "MusicEvent":
		return &MusicEvent{}
	case "MusicGroup":
		return &MusicGroup{}
	case "MusicPlaylist":
		return &MusicPlaylist{}
	case "MusicRecording":
		return &MusicRecording{}
	case "MusicRelease":
		return &MusicRelease{}
	case "MusicReleaseFormatType":
		return &MusicReleaseFormatType{}
	case "MusicStore":
		return &MusicStore{}
	case "MusicVenue":
		return &MusicVenue{}
	case "MusicVideoObject":
		return &MusicVideoObject{}
	case "NGO":
		return &NGO{}
	case "NLNonprofitType":
		return &NLNonprofitType{}
	case "NailSalon":
		return &NailSalon{}
	case "Nerve":
		return &Nerve{}
	case "NewsArticle":
		return &NewsArticle{}
	case "NewsMediaOrganization":
		return &NewsMediaOrganization{}
	case "Newspaper":
		return &Newspaper{}
	case "NightClub":
		return &NightClub{}
	case "NonprofitType":
		return &NonprofitType{}
	case "Notary":
		return &Notary{}
	case "NoteDigitalDocument":
		return &NoteDigitalDocument{}
	case "NutritionInformation":
		return &NutritionInformation{}
	case "Observation":
		return &Observation{}
	case "Occupation":
		return &Occupation{}
	case "OccupationalExperienceRequirements":
		return &OccupationalExperienceRequirements{}
	case "OccupationalTherapy":
		return &OccupationalTherapy{}
	case "OceanBodyOfWater":
		return &OceanBodyOfWater{}
	case "Offer":
		return &Offer{}
	case "OfferCatalog":
		return &OfferCatalog{}
	case "OfferForLease":
		return &OfferForLease{}
	case "OfferForPurchase":
		return &OfferForPurchase{}
	case "OfferItemCondition":
		return &OfferItemCondition{}
	case "OfferShippingDetails":
		return &OfferShippingDetails{}
	case "OfficeEquipmentStore":
		return &OfficeEquipmentStore{}
	case "OnDemandEvent":
		return &OnDemandEvent{}
	case "OnlineBusiness":
		return &OnlineBusiness{}
	case "OnlineStore":
		return &OnlineStore{}
	case "OpeningHoursSpecification":
		return &OpeningHoursSpecification{}
	case "OpinionNewsArticle":
		return &OpinionNewsArticle{}
	case "Optician":
		return &Optician{}
	case "Order":
		return &Order{}
	case "OrderAction":
		return &OrderAction{}
	case "OrderItem":
		return &OrderItem{}
	case "OrderStatus":
		return &OrderStatus{}
	case "Organization":
		return &Organization{}
	case "OrganizationRole":
		return &OrganizationRole{}
	case "OrganizeAction":
		return &OrganizeAction{}
	case "OutletStore":
		return &OutletStore{}
	case "OwnershipInfo":
		return &OwnershipInfo{}
	case "PaintAction":
		return &PaintAction{}
	case "Painting":
		return &Painting{}
	case "PalliativeProcedure":
		return &PalliativeProcedure{}
	case "ParcelDelivery":
		return &ParcelDelivery{}
	case "ParentAudience":
		return &ParentAudience{}
	case "Park":
		return &Park{}
	case "ParkingFacility":
		return &ParkingFacility{}
	case "PathologyTest":
		return &PathologyTest{}
	case "Patient":
		return &Patient{}
	case "PawnShop":
		return &PawnShop{}
	case "PayAction":
		return &PayAction{}
	case "PaymentCard":
		return &PaymentCard{}
	case "PaymentChargeSpecification":
		return &PaymentChargeSpecification{}
	case "PaymentMethod":
		return &PaymentMethod{}
	case "PaymentService":
		return &PaymentService{}
	case "PaymentStatusType":
		return &PaymentStatusType{}
	case "PeopleAudience":
		return &PeopleAudience{}
	case "PerformAction":
		return &PerformAction{}
	case "PerformanceRole":
		return &PerformanceRole{}
	case "PerformingArtsTheater":
		return &PerformingArtsTheater{}
	case "PerformingGroup":
		return &PerformingGroup{}
	case "Periodical":
		return &Periodical{}
	case "Permit":
		return &Permit{}
	case "Person":
		return &Person{}
	case "PetStore":
		return &PetStore{}
	case "Pharmacy":
		return &Pharmacy{}
	case "Photograph":
		return &Photograph{}
	case "PhotographAction":
		return &PhotographAction{}
	case "PhysicalActivity":
		return &PhysicalActivity{}
	case "PhysicalActivityCategory":
		return &PhysicalActivityCategory{}
	case "PhysicalExam":
		return &PhysicalExam{}
	case "PhysicalTherapy":
		return &PhysicalTherapy{}
	case "Physician":
		return &Physician{}
	case "Place":
		return &Place{}
	case "PlaceOfWorship":
		return &PlaceOfWorship{}
	case "PlanAction":
		return &PlanAction{}
	case "Play":
		return &Play{}
	case "PlayAction":
		return &PlayAction{}
	case "PlayGameAction":
		return &PlayGameAction{}
	case "Playground":
		return &Playground{}
	case "Plumber":
		return &Plumber{}
	case "PodcastEpisode":
		return &PodcastEpisode{}
	case "PodcastSeason":
		return &PodcastSeason{}
	case "PodcastSeries":
		return &PodcastSeries{}
	case "PoliceStation":
		return &PoliceStation{}
	case "Pond":
		return &Pond{}
	case "PostOffice":
		return &PostOffice{}
	case "PostalAddress":
		return &PostalAddress{}
	case "PostalCodeRangeSpecification":
		return &PostalCodeRangeSpecification{}
	case "Poster":
		return &Poster{}
	case "PreOrderAction":
		return &PreOrderAction{}
	case "PrependAction":
		return &PrependAction{}
	case "Preschool":
		return &Preschool{}
	case "PresentationDigitalDocument":
		return &PresentationDigitalDocument{}
	case "PreventionIndication":
		return &PreventionIndication{}
	case "PriceComponentTypeEnumeration":
		return &PriceComponentTypeEnumeration{}
	case "PriceSpecification":
		return &PriceSpecification{}
	case "PriceTypeEnumeration":
		return &PriceTypeEnumeration{}
	case "Product":
		return &Product{}
	case "ProductCollection":
		return &ProductCollection{}
	case "ProductGroup":
		return &ProductGroup{}
	case "ProductModel":
		return &ProductModel{}
	case "ProfessionalService":
		return &ProfessionalService{}
	case "ProfilePage":
		return &ProfilePage{}
	case "ProgramMembership":
		return &ProgramMembership{}
	case "Project":
		return &Project{}
	case "Property":
		return &Property{}
	case "PropertyValue":
		return &PropertyValue{}
	case "PropertyValueSpecification":
		return &PropertyValueSpecification{}
	case "Protein":
		return &Protein{}
	case "PsychologicalTreatment":
		return &PsychologicalTreatment{}
	case "PublicSwimmingPool":
		return &PublicSwimmingPool{}
	case "PublicToilet":
		return &PublicToilet{}
	case "PublicationEvent":
		return &PublicationEvent{}
	case "PublicationIssue":
		return &PublicationIssue{}
	case "PublicationVolume":
		return &PublicationVolume{}
	case "QAPage":
		return &QAPage{}
	case "QualitativeValue":
		return &QualitativeValue{}
	case "QuantitativeValue":
		return &QuantitativeValue{}
	case "QuantitativeValueDistribution":
		return &QuantitativeValueDistribution{}
	case "Quantity":
		return &Quantity{}
	case "Question":
		return &Question{}
	case "Quiz":
		return &Quiz{}
	case "Quotation":
		return &Quotation{}
	case "QuoteAction":
		return &QuoteAction{}
	case "RVPark":
		return &RVPark{}
	case "RadiationTherapy":
		return &RadiationTherapy{}
	case "RadioBroadcastService":
		return &RadioBroadcastService{}
	case "RadioChannel":
		return &RadioChannel{}
	case "RadioClip":
		return &RadioClip{}
	case "RadioEpisode":
		return &RadioEpisode{}
	case "RadioSeason":
		return &RadioSeason{}
	case "RadioSeries":
		return &RadioSeries{}
	case "RadioStation":
		return &RadioStation{}
	case "Rating":
		return &Rating{}
	case "ReactAction":
		return &ReactAction{}
	case "ReadAction":
		return &ReadAction{}
	case "RealEstateAgent":
		return &RealEstateAgent{}
	case "RealEstateListing":
		return &RealEstateListing{}
	case "ReceiveAction":
		return &ReceiveAction{}
	case "Recipe":
		return &Recipe{}
	case "Recommendation":
		return &Recommendation{}
	case "RecommendedDoseSchedule":
		return &RecommendedDoseSchedule{}
	case "RecyclingCenter":
		return &RecyclingCenter{}
	case "RefundTypeEnumeration":
		return &RefundTypeEnumeration{}
	case "RegisterAction":
		return &RegisterAction{}
	case "RejectAction":
		return &RejectAction{}
	case "RentAction":
		return &RentAction{}
	case "RentalCarReservation":
		return &RentalCarReservation{}
	case "RepaymentSpecification":
		return &RepaymentSpecification{}
	case "ReplaceAction":
		return &ReplaceAction{}
	case "ReplyAction":
		return &ReplyAction{}
	case "Report":
		return &Report{}
	case "ReportageNewsArticle":
		return &ReportageNewsArticle{}
	case "ReportedDoseSchedule":
		return &ReportedDoseSchedule{}
	case "ResearchOrganization":
		return &ResearchOrganization{}
	case "ResearchProject":
		return &ResearchProject{}
	case "Researcher":
		return &Researcher{}
	case "Reservation":
		return &Reservation{}
	case "ReservationPackage":
		return &ReservationPackage{}
	case "ReservationStatusType":
		return &ReservationStatusType{}
	case "ReserveAction":
		return &ReserveAction{}
	case "Reservoir":
		return &Reservoir{}
	case "Residence":
		return &Residence{}
	case "Resort":
		return &Resort{}
	case "Restaurant":
		return &Restaurant{}
	case "RestrictedDiet":
		return &RestrictedDiet{}
	case "ResumeAction":
		return &ResumeAction{}
	case "ReturnAction":
		return &ReturnAction{}
	case "ReturnFeesEnumeration":
		return &ReturnFeesEnumeration{}
	case "ReturnLabelSourceEnumeration":
		return &ReturnLabelSourceEnumeration{}
	case "ReturnMethodEnumeration":
		return &ReturnMethodEnumeration{}
	case "Review":
		return &Review{}
	case "ReviewAction":
		return &ReviewAction{}
	case "ReviewNewsArticle":
		return &ReviewNewsArticle{}
	case "RiverBodyOfWater":
		return &RiverBodyOfWater{}
	case "Role":
		return &Role{}
	case "RoofingContractor":
		return &RoofingContractor{}
	case "Room":
		return &Room{}
	case "RsvpAction":
		return &RsvpAction{}
	case "RsvpResponseType":
		return &RsvpResponseType{}
	case "SaleEvent":
		return &SaleEvent{}
	case "SatiricalArticle":
		return &SatiricalArticle{}
	case "Schedule":
		return &Schedule{}
	case "ScheduleAction":
		return &ScheduleAction{}
	case "ScholarlyArticle":
		return &ScholarlyArticle{}
	case "School":
		return &School{}
	case "SchoolDistrict":
		return &SchoolDistrict{}
	case "ScreeningEvent":
		return &ScreeningEvent{}
	case "Sculpture":
		return &Sculpture{}
	case "SeaBodyOfWater":
		return &SeaBodyOfWater{}
	case "SearchAction":
		return &SearchAction{}
	case "SearchRescueOrganization":
		return &SearchRescueOrganization{}
	case "SearchResultsPage":
		return &SearchResultsPage{}
	case "Season":
		return &Season{}
	case "Seat":
		return &Seat{}
	case "SeekToAction":
		return &SeekToAction{}
	case "SelfStorage":
		return &SelfStorage{}
	case "SellAction":
		return &SellAction{}
	case "SendAction":
		return &SendAction{}
	case "Series":
		return &Series{}
	case "Service":
		return &Service{}
	case "ServiceChannel":
		return &ServiceChannel{}
	case "ShareAction":
		return &ShareAction{}
	case "SheetMusic":
		return &SheetMusic{}
	case "ShippingDeliveryTime":
		return &ShippingDeliveryTime{}
	case "ShippingRateSettings":
		return &ShippingRateSettings{}
	case "ShoeStore":
		return &ShoeStore{}
	case "ShoppingCenter":
		return &ShoppingCenter{}
	case "ShortStory":
		return &ShortStory{}
	case "SingleFamilyResidence":
		return &SingleFamilyResidence{}
	case "SiteNavigationElement":
		return &SiteNavigationElement{}
	case "SizeGroupEnumeration":
		return &SizeGroupEnumeration{}
	case "SizeSpecification":
		return &SizeSpecification{}
	case "SizeSystemEnumeration":
		return &SizeSystemEnumeration{}
	case "SkiResort":
		return &SkiResort{}
	case "SocialEvent":
		return &SocialEvent{}
	case "SocialMediaPosting":
		return &SocialMediaPosting{}
	case "SoftwareApplication":
		return &SoftwareApplication{}
	case "SoftwareSourceCode":
		return &SoftwareSourceCode{}
	case "SolveMathAction":
		return &SolveMathAction{}
	case "SomeProducts":
		return &SomeProducts{}
	case "SpeakableSpecification":
		return &SpeakableSpecification{}
	case "SpecialAnnouncement":
		return &SpecialAnnouncement{}
	case "Specialty":
		return &Specialty{}
	case "SportingGoodsStore":
		return &SportingGoodsStore{}
	case "SportsActivityLocation":
		return &SportsActivityLocation{}
	case "SportsClub":
		return &SportsClub{}
	case "SportsEvent":
		return &SportsEvent{}
	case "SportsOrganization":
		return &SportsOrganization{}
	case "SportsTeam":
		return &SportsTeam{}
	case "SpreadsheetDigitalDocument":
		return &SpreadsheetDigitalDocument{}
	case "StadiumOrArena":
		return &StadiumOrArena{}
	case "State":
		return &State{}
	case "Statement":
		return &Statement{}
	case "StatisticalPopulation":
		return &StatisticalPopulation{}
	case "StatusEnumeration":
		return &StatusEnumeration{}
	case "SteeringPositionValue":
		return &SteeringPositionValue{}
	case "Store":
		return &Store{}
	case "StructuredValue":
		return &StructuredValue{}
	case "SubscribeAction":
		return &SubscribeAction{}
	case "Substance":
		return &Substance{}
	case "SubwayStation":
		return &SubwayStation{}
	case "Suite":
		return &Suite{}
	case "SuperficialAnatomy":
		return &SuperficialAnatomy{}
	case "SurgicalProcedure":
		return &SurgicalProcedure{}
	case "SuspendAction":
		return &SuspendAction{}
	case "Synagogue":
		return &Synagogue{}
	case "TVClip":
		return &TVClip{}
	case "TVEpisode":
		return &TVEpisode{}
	case "TVSeason":
		return &TVSeason{}
	case "TVSeries":
		return &TVSeries{}
	case "Table":
		return &Table{}
	case "TakeAction":
		return &TakeAction{}
	case "TattooParlor":
		return &TattooParlor{}
	case "Taxi":
		return &Taxi{}
	case "TaxiReservation":
		return &TaxiReservation{}
	case "TaxiService":
		return &TaxiService{}
	case "TaxiStand":
		return &TaxiStand{}
	case "Taxon":
		return &Taxon{}
	case "TechArticle":
		return &TechArticle{}
	case "TelevisionChannel":
		return &TelevisionChannel{}
	case "TelevisionStation":
		return &TelevisionStation{}
	case "TennisComplex":
		return &TennisComplex{}
	case "TextDigitalDocument":
		return &TextDigitalDocument{}
	case "TheaterEvent":
		return &TheaterEvent{}
	case "TheaterGroup":
		return &TheaterGroup{}
	case "TherapeuticProcedure":
		return &TherapeuticProcedure{}
	case "Thesis":
		return &Thesis{}
	case "Thing":
		return &Thing{}
	case "Ticket":
		return &Ticket{}
	case "TieAction":
		return &TieAction{}
	case "TipAction":
		return &TipAction{}
	case "TireShop":
		return &TireShop{}
	case "TouristAttraction":
		return &TouristAttraction{}
	case "TouristDestination":
		return &TouristDestination{}
	case "TouristInformationCenter":
		return &TouristInformationCenter{}
	case "TouristTrip":
		return &TouristTrip{}
	case "ToyStore":
		return &ToyStore{}
	case "TrackAction":
		return &TrackAction{}
	case "TradeAction":
		return &TradeAction{}
	case "TrainReservation":
		return &TrainReservation{}
	case "TrainStation":
		return &TrainStation{}
	case "TrainTrip":
		return &TrainTrip{}
	case "TransferAction":
		return &TransferAction{}
	case "TravelAction":
		return &TravelAction{}
	case "TravelAgency":
		return &TravelAgency{}
	case "TreatmentIndication":
		return &TreatmentIndication{}
	case "Trip":
		return &Trip{}
	case "TypeAndQuantityNode":
		return &TypeAndQuantityNode{}
	case "UKNonprofitType":
		return &UKNonprofitType{}
	case "USNonprofitType":
		return &USNonprofitType{}
	case "UnRegisterAction":
		return &UnRegisterAction{}
	case "UnitPriceSpecification":
		return &UnitPriceSpecification{}
	case "UpdateAction":
		return &UpdateAction{}
	case "UseAction":
		return &UseAction{}
	case "UserBlocks":
		return &UserBlocks{}
	case "UserCheckins":
		return &UserCheckins{}
	case "UserComments":
		return &UserComments{}
	case "UserDownloads":
		return &UserDownloads{}
	case "UserInteraction":
		return &UserInteraction{}
	case "UserLikes":
		return &UserLikes{}
	case "UserPageVisits":
		return &UserPageVisits{}
	case "UserPlays":
		return &UserPlays{}
	case "UserPlusOnes":
		return &UserPlusOnes{}
	case "UserReview":
		return &UserReview{}
	case "UserTweets":
		return &UserTweets{}
	case "Vehicle":
		return &Vehicle{}
	case "Vein":
		return &Vein{}
	case "Vessel":
		return &Vessel{}
	case "VeterinaryCare":
		return &VeterinaryCare{}
	case "VideoGallery":
		return &VideoGallery{}
	case "VideoGame":
		return &VideoGame{}
	case "VideoGameClip":
		return &VideoGameClip{}
	case "VideoGameSeries":
		return &VideoGameSeries{}
	case "VideoObject":
		return &VideoObject{}
	case "VideoObjectSnapshot":
		return &VideoObjectSnapshot{}
	case "ViewAction":
		return &ViewAction{}
	case "VirtualLocation":
		return &VirtualLocation{}
	case "VisualArtsEvent":
		return &VisualArtsEvent{}
	case "VisualArtwork":
		return &VisualArtwork{}
	case "VitalSign":
		return &VitalSign{}
	case "Volcano":
		return &Volcano{}
	case "VoteAction":
		return &VoteAction{}
	case "WPAdBlock":
		return &WPAdBlock{}
	case "WPFooter":
		return &WPFooter{}
	case "WPHeader":
		return &WPHeader{}
	case "WPSideBar":
		return &WPSideBar{}
	case "WantAction":
		return &WantAction{}
	case "WarrantyPromise":
		return &WarrantyPromise{}
	case "WarrantyScope":
		return &WarrantyScope{}
	case "WatchAction":
		return &WatchAction{}
	case "Waterfall":
		return &Waterfall{}
	case "WearAction":
		return &WearAction{}
	case "WearableMeasurementTypeEnumeration":
		return &WearableMeasurementTypeEnumeration{}
	case "WearableSizeGroupEnumeration":
		return &WearableSizeGroupEnumeration{}
	case "WearableSizeSystemEnumeration":
		return &WearableSizeSystemEnumeration{}
	case "WebAPI":
		return &WebAPI{}
	case "WebApplication":
		return &WebApplication{}
	case "WebContent":
		return &WebContent{}
	case "WebPage":
		return &WebPage{}
	case "WebPageElement":
		return &WebPageElement{}
	case "WebSite":
		return &WebSite{}
	case "WholesaleStore":
		return &WholesaleStore{}
	case "WinAction":
		return &WinAction{}
	case "Winery":
		return &Winery{}
	case "WorkBasedProgram":
		return &WorkBasedProgram{}
	case "WorkersUnion":
		return &WorkersUnion{}
	case "WriteAction":
		return &WriteAction{}
	case "Zoo":
		return &Zoo{}
	}
	panic(name)
}

/*
A 3D model represents some kind of 3D content, which may have [[encoding]]s in one or more [[MediaObject]]s. Many 3D formats are available (e.g. see [Wikipedia](https://en.wikipedia.org/wiki/Category:3D_graphics_file_formats)); specific encoding formats can be represented using the [[encodingFormat]] property applied to the relevant [[MediaObject]]. For the
case of a single file published after Zip compression, the convention of appending '+zip' to the [[encodingFormat]] can be used. Geospatial, AR/VR, artistic/animation, gaming, engineering and scientific content can all be represented using [[3DModel]].
*/
type ThreeDModel struct {
	MediaObject

	IsResizable interface{} `json:"isResizable,omitempty"` // Whether the 3DModel allows resizing. For example, room layout applications often do not allow 3DModel elements to be resized to reflect reality.
}

// A radio channel that uses AM.
type AMRadioChannel struct {
	RadioChannel
}

// Reference documentation for application programming interfaces (APIs).
type APIReference struct {
	TechArticle

	Assembly              interface{} `json:"assembly,omitempty"`              // Library file name e.g., mscorlib.dll, system.web.dll.
	AssemblyVersion       interface{} `json:"assemblyVersion,omitempty"`       // Associated product/technology version. e.g., .NET Framework 4.5.
	ExecutableLibraryName interface{} `json:"executableLibraryName,omitempty"` // Library file name e.g., mscorlib.dll, system.web.dll.
	ProgrammingModel      interface{} `json:"programmingModel,omitempty"`      // Indicates whether API is managed or unmanaged.
	TargetPlatform        interface{} `json:"targetPlatform,omitempty"`        // Type of app development: phone, Metro style, desktop, XBox, etc.
}

// Web page type: About page.
type AboutPage struct {
	WebPage
}

// The act of committing to/adopting an object.\n\nRelated actions:\n\n* [[RejectAction]]: The antonym of AcceptAction.
type AcceptAction struct {
	AllocateAction
}

/*
An accommodation is a place that can accommodate human beings, e.g. a hotel room, a camping pitch, or a meeting room. Many accommodations are for overnight stays, but this is not a mandatory requirement.
For more specific types of accommodations not defined in schema.org, one can use additionalType with external vocabularies.
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type Accommodation struct {
	Place

	AccommodationCategory  interface{} `json:"accommodationCategory,omitempty"`  // Category of an [[Accommodation]], following real estate conventions e.g. RESO (see [PropertySubType](https://ddwiki.reso.org/display/DDW17/PropertySubType+Field), and [PropertyType](https://ddwiki.reso.org/display/DDW17/PropertyType+Field) fields  for suggested values).
	AccommodationFloorPlan interface{} `json:"accommodationFloorPlan,omitempty"` // A floorplan of some [[Accommodation]].
	AmenityFeature         interface{} `json:"amenityFeature,omitempty"`         // An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs.
	FloorLevel             interface{} `json:"floorLevel,omitempty"`             /*
	The floor level for an [[Accommodation]] in a multi-storey building. Since counting
	  systems [vary internationally](https://en.wikipedia.org/wiki/Storey#Consecutive_number_floor_designations), the local system should be used where possible.
	*/
	FloorSize interface{} `json:"floorSize,omitempty"` /*
	The size of the accommodation, e.g. in square meter or squarefoot.
	Typical unit code(s): MTK for square meter, FTK for square foot, or YDK for square yard
	*/
	LeaseLength              interface{} `json:"leaseLength,omitempty"`              // Length of the lease for some [[Accommodation]], either particular to some [[Offer]] or in some cases intrinsic to the property.
	NumberOfBathroomsTotal   interface{} `json:"numberOfBathroomsTotal,omitempty"`   // The total integer number of bathrooms in a some [[Accommodation]], following real estate conventions as [documented in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsTotalInteger+Field): "The simple sum of the number of bathrooms. For example for a property with two Full Bathrooms and one Half Bathroom, the Bathrooms Total Integer will be 3.". See also [[numberOfRooms]].
	NumberOfBedrooms         interface{} `json:"numberOfBedrooms,omitempty"`         // The total integer number of bedrooms in a some [[Accommodation]], [[ApartmentComplex]] or [[FloorPlan]].
	NumberOfFullBathrooms    interface{} `json:"numberOfFullBathrooms,omitempty"`    // Number of full bathrooms - The total number of full and ¾ bathrooms in an [[Accommodation]]. This corresponds to the [BathroomsFull field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsFull+Field).
	NumberOfPartialBathrooms interface{} `json:"numberOfPartialBathrooms,omitempty"` // Number of partial bathrooms - The total number of half and ¼ bathrooms in an [[Accommodation]]. This corresponds to the [BathroomsPartial field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsPartial+Field).
	NumberOfRooms            interface{} `json:"numberOfRooms,omitempty"`            /*
	The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.
	Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.
	*/
	PermittedUsage  interface{} `json:"permittedUsage,omitempty"`  // Indications regarding the permitted usage of the accommodation.
	PetsAllowed     interface{} `json:"petsAllowed,omitempty"`     // Indicates whether pets are allowed to enter the accommodation or lodging business. More detailed information can be put in a text value.
	TourBookingPage interface{} `json:"tourBookingPage,omitempty"` // A page providing information on how to book a tour of some [[Place]], such as an [[Accommodation]] or [[ApartmentComplex]] in a real estate setting, as well as other kinds of tours as appropriate.
	YearBuilt       interface{} `json:"yearBuilt,omitempty"`       // The year an [[Accommodation]] was constructed. This corresponds to the [YearBuilt field in RESO](https://ddwiki.reso.org/display/DDW17/YearBuilt+Field).
}

/*
Accountancy business.\n\nAs a [[LocalBusiness]] it can be described as a [[provider]] of one or more [[Service]]\(s).

*/
type AccountingService struct {
	FinancialService
}

// The act of accomplishing something via previous efforts. It is an instantaneous action rather than an ongoing process.
type AchieveAction struct {
	Action
}

// An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
type Action struct {
	Thing

	ActionStatus interface{} `json:"actionStatus,omitempty"` // Indicates the current disposition of the Action.
	Agent        interface{} `json:"agent,omitempty"`        // The direct performer or driver of the action (animate or inanimate). e.g. *John* wrote a book.
	EndTime      interface{} `json:"endTime,omitempty"`      // The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
	Error_       interface{} `json:"error_,omitempty"`       // For failed actions, more information on the cause of the failure.
	Instrument   interface{} `json:"instrument,omitempty"`   // The object that helped the agent perform the action. e.g. John wrote a book with *a pen*.
	Location     interface{} `json:"location,omitempty"`     // The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
	Object       interface{} `json:"object,omitempty"`       // The object upon which the action is carried out, whose state is kept intact or changed. Also known as the semantic roles patient, affected or undergoer (which change their state) or theme (which doesn't). e.g. John read *a book*.
	Participant  interface{} `json:"participant,omitempty"`  // Other co-agents that participated in the action indirectly. e.g. John wrote a book with *Steve*.
	Provider     interface{} `json:"provider,omitempty"`     // The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
	Result       interface{} `json:"result,omitempty"`       // The result produced in the action. e.g. John wrote *a book*.
	StartTime    interface{} `json:"startTime,omitempty"`    // The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
	Target       interface{} `json:"target,omitempty"`       // Indicates a target EntryPoint for an Action.
}

// A set of requirements that a must be fulfilled in order to perform an Action.
type ActionAccessSpecification struct {
	Intangible

	AvailabilityEnds   interface{} `json:"availabilityEnds,omitempty"`   // The end of the availability of the product or service included in the offer.
	AvailabilityStarts interface{} `json:"availabilityStarts,omitempty"` // The beginning of the availability of the product or service included in the offer.
	Category           interface{} `json:"category,omitempty"`           // A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
	EligibleRegion     interface{} `json:"eligibleRegion,omitempty"`     /*
	The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.\n\nSee also [[ineligibleRegion]].

	*/
	ExpectsAcceptanceOf interface{} `json:"expectsAcceptanceOf,omitempty"` // An Offer which must be accepted before the user can perform the Action. For example, the user may need to buy a movie before being able to watch it.
	IneligibleRegion    interface{} `json:"ineligibleRegion,omitempty"`    /*
	The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.\n\nSee also [[eligibleRegion]].

	*/
	RequiresSubscription interface{} `json:"requiresSubscription,omitempty"` // Indicates if use of the media require a subscription  (either paid or free). Allowed values are ```true``` or ```false``` (note that an earlier version had 'yes', 'no').
}

// The status of an Action.
type ActionStatusType struct {
	StatusEnumeration
}

// The act of starting or activating a device or application (e.g. starting a timer or turning on a flashlight).
type ActivateAction struct {
	ControlAction
}

// The act of editing by adding an object to a collection.
type AddAction struct {
	UpdateAction
}

// A geographical region, typically under the jurisdiction of a particular government.
type AdministrativeArea struct {
	Place
}

// An adult entertainment establishment.
type AdultEntertainment struct {
	EntertainmentBusiness
}

// Enumeration of considerations that make a product relevant or potentially restricted for adults only.
type AdultOrientedEnumeration struct {
	Enumeration
}

// An [[Article]] that an external entity has paid to place or to produce to its specifications. Includes [advertorials](https://en.wikipedia.org/wiki/Advertorial), sponsored content, native advertising and other paid content.
type AdvertiserContentArticle struct {
	Article
}

// When a single product is associated with multiple offers (for example, the same pair of shoes is offered by different merchants), then AggregateOffer can be used.\n\nNote: AggregateOffers are normally expected to associate multiple offers that all share the same defined [[businessFunction]] value, or default to http://purl.org/goodrelations/v1#Sell if businessFunction is not explicitly defined.
type AggregateOffer struct {
	Offer

	HighPrice  interface{} `json:"highPrice,omitempty"`  // The highest price of all offers available.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
	LowPrice   interface{} `json:"lowPrice,omitempty"`   // The lowest price of all offers available.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
	OfferCount interface{} `json:"offerCount,omitempty"` // The number of offers for the product.
	Offers     interface{} `json:"offers,omitempty"`     /*
	An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.

	*/
}

// The average rating based on multiple ratings or reviews.
type AggregateRating struct {
	Rating

	ItemReviewed interface{} `json:"itemReviewed,omitempty"` // The item that is being reviewed/rated.
	RatingCount  interface{} `json:"ratingCount,omitempty"`  // The count of total number of ratings.
	ReviewCount  interface{} `json:"reviewCount,omitempty"`  // The count of total number of reviews.
}

// The act of expressing a consistency of opinion with the object. An agent agrees to/about an object (a proposition, topic or theme) with participants.
type AgreeAction struct {
	ReactAction
}

// An organization that provides flights for passengers.
type Airline struct {
	Organization

	BoardingPolicy interface{} `json:"boardingPolicy,omitempty"` // The type of boarding policy used by the airline (e.g. zone-based or group-based).
	IataCode       interface{} `json:"iataCode,omitempty"`       // IATA identifier for an airline or airport.
}

// An airport.
type Airport struct {
	CivicStructure

	IataCode interface{} `json:"iataCode,omitempty"` // IATA identifier for an airline or airport.
	IcaoCode interface{} `json:"icaoCode,omitempty"` // ICAO identifier for an airport.
}

/*
An intangible item that describes an alignment between a learning resource and a node in an educational framework.

Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
*/
type AlignmentObject struct {
	Intangible

	AlignmentType        interface{} `json:"alignmentType,omitempty"`        // A category of alignment between the learning resource and the framework node. Recommended values include: 'requires', 'textComplexity', 'readingLevel', and 'educationalSubject'.
	EducationalFramework interface{} `json:"educationalFramework,omitempty"` // The framework to which the resource being described is aligned.
	TargetDescription    interface{} `json:"targetDescription,omitempty"`    // The description of a node in an established educational framework.
	TargetName           interface{} `json:"targetName,omitempty"`           // The name of a node in an established educational framework.
	TargetUrl            interface{} `json:"targetUrl,omitempty"`            // The URL of a node in an established educational framework.
}

// The act of organizing tasks/objects/events by associating resources to it.
type AllocateAction struct {
	OrganizeAction
}

// A creative work with a visual storytelling format intended to be viewed online, particularly on mobile devices.
type AmpStory struct {
	CreativeWork
	// TODO: MediaObject
}

// An amusement park.
type AmusementPark struct {
	EntertainmentBusiness
}

// An AnalysisNewsArticle is a [[NewsArticle]] that, while based on factual reporting, incorporates the expertise of the author/producer, offering interpretations and conclusions.
type AnalysisNewsArticle struct {
	NewsArticle
}

// Any part of the human body, typically a component of an anatomical system. Organs, tissues, and cells are all anatomical structures.
type AnatomicalStructure struct {
	MedicalEntity

	AssociatedPathophysiology interface{} `json:"associatedPathophysiology,omitempty"` // If applicable, a description of the pathophysiology associated with the anatomical system, including potential abnormal changes in the mechanical, physical, and biochemical functions of the system.
	BodyLocation              interface{} `json:"bodyLocation,omitempty"`              // Location in the body of the anatomical structure.
	ConnectedTo               interface{} `json:"connectedTo,omitempty"`               // Other anatomical structures to which this structure is connected.
	Diagram                   interface{} `json:"diagram,omitempty"`                   // An image containing a diagram that illustrates the structure and/or its component substructures and/or connections with other structures.
	PartOfSystem              interface{} `json:"partOfSystem,omitempty"`              // The anatomical or organ system that this structure is part of.
	RelatedCondition          interface{} `json:"relatedCondition,omitempty"`          // A medical condition associated with this anatomy.
	RelatedTherapy            interface{} `json:"relatedTherapy,omitempty"`            // A medical therapy related to this anatomy.
	SubStructure              interface{} `json:"subStructure,omitempty"`              // Component (sub-)structure(s) that comprise this anatomical structure.
}

// An anatomical system is a group of anatomical structures that work together to perform a certain task. Anatomical systems, such as organ systems, are one organizing principle of anatomy, and can includes circulatory, digestive, endocrine, integumentary, immune, lymphatic, muscular, nervous, reproductive, respiratory, skeletal, urinary, vestibular, and other systems.
type AnatomicalSystem struct {
	MedicalEntity

	AssociatedPathophysiology interface{} `json:"associatedPathophysiology,omitempty"` // If applicable, a description of the pathophysiology associated with the anatomical system, including potential abnormal changes in the mechanical, physical, and biochemical functions of the system.
	ComprisedOf               interface{} `json:"comprisedOf,omitempty"`               // Specifying something physically contained by something else. Typically used here for the underlying anatomical structures, such as organs, that comprise the anatomical system.
	RelatedCondition          interface{} `json:"relatedCondition,omitempty"`          // A medical condition associated with this anatomy.
	RelatedStructure          interface{} `json:"relatedStructure,omitempty"`          // Related anatomical structure(s) that are not part of the system but relate or connect to it, such as vascular bundles associated with an organ system.
	RelatedTherapy            interface{} `json:"relatedTherapy,omitempty"`            // A medical therapy related to this anatomy.
}

// Animal shelter.
type AnimalShelter struct {
	LocalBusiness
}

// An answer offered to a question; perhaps correct, perhaps opinionated or wrong.
type Answer struct {
	Comment

	AnswerExplanation interface{} `json:"answerExplanation,omitempty"` // A step-by-step or full explanation about Answer. Can outline how this Answer was achieved or contain more broad clarification or statement about it.
}

// An apartment (in American English) or flat (in British English) is a self-contained housing unit (a type of residential real estate) that occupies only part of a building (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Apartment">http://en.wikipedia.org/wiki/Apartment</a>).
type Apartment struct {
	Accommodation

	NumberOfRooms interface{} `json:"numberOfRooms,omitempty"` /*
	The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.
	Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.
	*/
	Occupancy interface{} `json:"occupancy,omitempty"` /*
	The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).
	Typical unit code(s): C62 for person
	*/
}

// Residence type: Apartment complex.
type ApartmentComplex struct {
	Residence

	NumberOfAccommodationUnits          interface{} `json:"numberOfAccommodationUnits,omitempty"`          // Indicates the total (available plus unavailable) number of accommodation units in an [[ApartmentComplex]], or the number of accommodation units for a specific [[FloorPlan]] (within its specific [[ApartmentComplex]]). See also [[numberOfAvailableAccommodationUnits]].
	NumberOfAvailableAccommodationUnits interface{} `json:"numberOfAvailableAccommodationUnits,omitempty"` // Indicates the number of available accommodation units in an [[ApartmentComplex]], or the number of accommodation units for a specific [[FloorPlan]] (within its specific [[ApartmentComplex]]). See also [[numberOfAccommodationUnits]].
	NumberOfBedrooms                    interface{} `json:"numberOfBedrooms,omitempty"`                    // The total integer number of bedrooms in a some [[Accommodation]], [[ApartmentComplex]] or [[FloorPlan]].
	PetsAllowed                         interface{} `json:"petsAllowed,omitempty"`                         // Indicates whether pets are allowed to enter the accommodation or lodging business. More detailed information can be put in a text value.
	TourBookingPage                     interface{} `json:"tourBookingPage,omitempty"`                     // A page providing information on how to book a tour of some [[Place]], such as an [[Accommodation]] or [[ApartmentComplex]] in a real estate setting, as well as other kinds of tours as appropriate.
}

// The act of inserting at the end if an ordered collection.
type AppendAction struct {
	InsertAction
}

// The act of registering to an organization/service without the guarantee to receive it.\n\nRelated actions:\n\n* [[RegisterAction]]: Unlike RegisterAction, ApplyAction has no guarantees that the application will be accepted.
type ApplyAction struct {
	OrganizeAction
}

// An indication for a medical therapy that has been formally specified or approved by a regulatory body that regulates use of the therapy; for example, the US FDA approves indications for most drugs in the US.
type ApprovedIndication struct {
	MedicalIndication
}

// Aquarium.
type Aquarium struct {
	CivicStructure
}

//
type ArchiveComponent struct {
	CreativeWork

	HoldingArchive interface{} `json:"holdingArchive,omitempty"` //
	ItemLocation   interface{} `json:"itemLocation,omitempty"`   //
}

//
type ArchiveOrganization struct {
	LocalBusiness

	ArchiveHeld interface{} `json:"archiveHeld,omitempty"` //
}

// The act of arriving at a place. An agent arrives at a destination from a fromLocation, optionally with participants.
type ArriveAction struct {
	MoveAction
}

// An art gallery.
type ArtGallery struct {
	EntertainmentBusiness
}

// A type of blood vessel that specifically carries blood away from the heart.
type Artery struct {
	Vessel

	ArterialBranch interface{} `json:"arterialBranch,omitempty"` // The branches that comprise the arterial structure.
	SupplyTo       interface{} `json:"supplyTo,omitempty"`       // The area to which the artery supplies blood.
}

// An article, such as a news article or piece of investigative report. Newspapers and magazines have articles of many different types and this is intended to cover them all.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
type Article struct {
	CreativeWork

	ArticleBody    interface{} `json:"articleBody,omitempty"`    // The actual body of the article.
	ArticleSection interface{} `json:"articleSection,omitempty"` // Articles may belong to one or more 'sections' in a magazine or newspaper, such as Sports, Lifestyle, etc.
	Backstory      interface{} `json:"backstory,omitempty"`      // For an [[Article]], typically a [[NewsArticle]], the backstory property provides a textual summary giving a brief explanation of why and how an article was created. In a journalistic setting this could include information about reporting process, methods, interviews, data sources, etc.
	PageEnd        interface{} `json:"pageEnd,omitempty"`        // The page on which the work ends; for example "138" or "xvi".
	PageStart      interface{} `json:"pageStart,omitempty"`      // The page on which the work starts; for example "135" or "xiii".
	Pagination     interface{} `json:"pagination,omitempty"`     // Any description of pages that is not separated into pageStart and pageEnd; for example, "1-6, 9, 55" or "10-12, 46-49".
	Speakable      interface{} `json:"speakable,omitempty"`      /*
	Indicates sections of a Web page that are particularly 'speakable' in the sense of being highlighted as being especially appropriate for text-to-speech conversion. Other sections of a page may also be usefully spoken in particular circumstances; the 'speakable' property serves to indicate the parts most likely to be generally useful for speech.

	The *speakable* property can be repeated an arbitrary number of times, with three kinds of possible 'content-locator' values:

	1.) *id-value* URL references - uses *id-value* of an element in the page being annotated. The simplest use of *speakable* has (potentially relative) URL values, referencing identified sections of the document concerned.

	2.) CSS Selectors - addresses content in the annotated page, eg. via class attribute. Use the [[cssSelector]] property.

	3.)  XPaths - addresses content via XPaths (assuming an XML view of the content). Use the [[xpath]] property.


	For more sophisticated markup of speakable sections beyond simple ID references, either CSS selectors or XPath expressions to pick out document section(s) as speakable. For this
	we define a supporting type, [[SpeakableSpecification]]  which is defined to be a possible value of the *speakable* property.

	*/
	WordCount interface{} `json:"wordCount,omitempty"` // The number of words in the text of the Article.
}

// The act of posing a question / favor to someone.\n\nRelated actions:\n\n* [[ReplyAction]]: Appears generally as a response to AskAction.
type AskAction struct {
	CommunicateAction

	Question interface{} `json:"question,omitempty"` // A sub property of object. A question.
}

// A [[NewsArticle]] expressing an open call by a [[NewsMediaOrganization]] asking the public for input, insights, clarifications, anecdotes, documentation, etc., on an issue, for reporting purposes.
type AskPublicNewsArticle struct {
	NewsArticle
}

// The act of forming one's opinion, reaction or sentiment.
type AssessAction struct {
	Action
}

// The act of allocating an action/event/task to some destination (someone or something).
type AssignAction struct {
	AllocateAction
}

// A collection or bound volume of maps, charts, plates or tables, physical or in media form illustrating any subject.
type Atlas struct {
	CreativeWork
}

// Professional service: Attorney. \n\nThis type is deprecated - [[LegalService]] is more inclusive and less ambiguous.
type Attorney struct {
	LegalService
}

// Intended audience for an item, i.e. the group for whom the item was created.
type Audience struct {
	Intangible

	AudienceType   interface{} `json:"audienceType,omitempty"`   // The target group associated with a given audience (e.g. veterans, car owners, musicians, etc.).
	GeographicArea interface{} `json:"geographicArea,omitempty"` // The geographic area associated with the audience.
}

// An audio file.
type AudioObject struct {
	MediaObject

	Caption             interface{} `json:"caption,omitempty"`             // The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the [[encodingFormat]].
	EmbeddedTextCaption interface{} `json:"embeddedTextCaption,omitempty"` // Represents textual captioning from a [[MediaObject]], e.g. text of a 'meme'.
	Transcript          interface{} `json:"transcript,omitempty"`          // If this MediaObject is an AudioObject or VideoObject, the transcript of that object.
}

// A specific and exact (byte-for-byte) version of an [[AudioObject]]. Two byte-for-byte identical files, for the purposes of this type, considered identical. If they have different embedded metadata the files will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual content, do not affect this notion of identity.
type AudioObjectSnapshot struct {
	AudioObject
}

// An audiobook.
type Audiobook struct {
	AudioObject
	// TODO: Book

	Duration interface{} `json:"duration,omitempty"` // The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	ReadBy   interface{} `json:"readBy,omitempty"`   // A person who reads (performs) the audiobook.
}

// The act of granting permission to an object.
type AuthorizeAction struct {
	AllocateAction

	Recipient interface{} `json:"recipient,omitempty"` // A sub property of participant. The participant who is at the receiving end of the action.
}

// Auto body shop.
type AutoBodyShop struct {
	AutomotiveBusiness
}

// An car dealership.
type AutoDealer struct {
	AutomotiveBusiness
}

// An auto parts store.
type AutoPartsStore struct {
	AutomotiveBusiness
	// TODO: Store
}

// A car rental business.
type AutoRental struct {
	AutomotiveBusiness
}

// Car repair business.
type AutoRepair struct {
	AutomotiveBusiness
}

// A car wash business.
type AutoWash struct {
	AutomotiveBusiness
}

// ATM/cash machine.
type AutomatedTeller struct {
	FinancialService
}

// Car repair, sales, or parts.
type AutomotiveBusiness struct {
	LocalBusiness
}

// A [[NewsArticle]] providing historical context, definition and detail on a specific topic (aka "explainer" or "backgrounder"). For example, an in-depth article or frequently-asked-questions ([FAQ](https://en.wikipedia.org/wiki/FAQ)) document on topics such as Climate Change or the European Union. Other kinds of background material from a non-news setting are often described using [[Book]] or [[Article]], in particular [[ScholarlyArticle]]. See also [[NewsArticle]] for related vocabulary from a learning/education perspective.
type BackgroundNewsArticle struct {
	NewsArticle
}

// A bakery.
type Bakery struct {
	FoodEstablishment
}

// A product or service offered by a bank whereby one may deposit, withdraw or transfer money and in some cases be paid interest.
type BankAccount struct {
	FinancialProduct

	AccountMinimumInflow  interface{} `json:"accountMinimumInflow,omitempty"`  // A minimum amount that has to be paid in every month.
	AccountOverdraftLimit interface{} `json:"accountOverdraftLimit,omitempty"` // An overdraft is an extension of credit from a lending institution when an account reaches zero. An overdraft allows the individual to continue withdrawing money even if the account has no funds in it. Basically the bank allows people to borrow a set amount of money.
	BankAccountType       interface{} `json:"bankAccountType,omitempty"`       // The type of a bank account.
}

// Bank or credit union.
type BankOrCreditUnion struct {
	FinancialService
}

// A bar or pub.
type BarOrPub struct {
	FoodEstablishment
}

// An image of a visual machine-readable code such as a barcode or QR code.
type Barcode struct {
	ImageObject
}

// Beach.
type Beach struct {
	CivicStructure
}

// Beauty salon.
type BeautySalon struct {
	HealthAndBeautyBusiness
}

/*
Bed and breakfast.
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type BedAndBreakfast struct {
	LodgingBusiness
}

// An entity holding detailed information about the available bed types, e.g. the quantity of twin beds for a hotel room. For the single case of just one bed of a certain type, you can use bed directly with a text. See also [[BedType]] (under development).
type BedDetails struct {
	Intangible

	NumberOfBeds interface{} `json:"numberOfBeds,omitempty"` // The quantity of the given bed type available in the HotelRoom, Suite, House, or Apartment.
	TypeOfBed    interface{} `json:"typeOfBed,omitempty"`    // The type of bed to which the BedDetail refers, i.e. the type of bed available in the quantity indicated by quantity.
}

// A type of bed. This is used for indicating the bed or beds available in an accommodation.
type BedType struct {
	QualitativeValue
}

// The act of forming a personal connection with someone (object) mutually/bidirectionally/symmetrically.\n\nRelated actions:\n\n* [[FollowAction]]: Unlike FollowAction, BefriendAction implies that the connection is reciprocal.
type BefriendAction struct {
	InteractAction
}

// A bike store.
type BikeStore struct {
	Store
}

// Any biological, chemical, or biochemical thing. For example: a protein; a gene; a chemical; a synthetic chemical.
type BioChemEntity struct {
	Thing

	AssociatedDisease              interface{} `json:"associatedDisease,omitempty"`              // Disease associated to this BioChemEntity. Such disease can be a MedicalCondition or a URL. If you want to add an evidence supporting the association, please use PropertyValue.
	BioChemInteraction             interface{} `json:"bioChemInteraction,omitempty"`             // A BioChemEntity that is known to interact with this item.
	BioChemSimilarity              interface{} `json:"bioChemSimilarity,omitempty"`              // A similar BioChemEntity, e.g., obtained by fingerprint similarity algorithms.
	BiologicalRole                 interface{} `json:"biologicalRole,omitempty"`                 // A role played by the BioChemEntity within a biological context.
	Funding                        interface{} `json:"funding,omitempty"`                        // A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
	HasBioChemEntityPart           interface{} `json:"hasBioChemEntityPart,omitempty"`           // Indicates a BioChemEntity that (in some sense) has this BioChemEntity as a part.
	HasMolecularFunction           interface{} `json:"hasMolecularFunction,omitempty"`           // Molecular function performed by this BioChemEntity; please use PropertyValue if you want to include any evidence.
	HasRepresentation              interface{} `json:"hasRepresentation,omitempty"`              // A common representation such as a protein sequence or chemical structure for this entity. For images use schema.org/image.
	IsEncodedByBioChemEntity       interface{} `json:"isEncodedByBioChemEntity,omitempty"`       // Another BioChemEntity encoding by this one.
	IsInvolvedInBiologicalProcess  interface{} `json:"isInvolvedInBiologicalProcess,omitempty"`  // Biological process this BioChemEntity is involved in; please use PropertyValue if you want to include any evidence.
	IsLocatedInSubcellularLocation interface{} `json:"isLocatedInSubcellularLocation,omitempty"` // Subcellular location where this BioChemEntity is located; please use PropertyValue if you want to include any evidence.
	IsPartOfBioChemEntity          interface{} `json:"isPartOfBioChemEntity,omitempty"`          // Indicates a BioChemEntity that is (in some sense) a part of this BioChemEntity.
	TaxonomicRange                 interface{} `json:"taxonomicRange,omitempty"`                 // The taxonomic grouping of the organism that expresses, encodes, or in someway related to the BioChemEntity.
}

// A [blog](https://en.wikipedia.org/wiki/Blog), sometimes known as a "weblog". Note that the individual posts ([[BlogPosting]]s) in a [[Blog]] are often colloqually referred to by the same term.
type Blog struct {
	CreativeWork

	BlogPost  interface{} `json:"blogPost,omitempty"`  // A posting that is part of this blog.
	BlogPosts interface{} `json:"blogPosts,omitempty"` // Indicates a post that is part of a [[Blog]]. Note that historically, what we term a "Blog" was once known as a "weblog", and that what we term a "BlogPosting" is now often colloquially referred to as a "blog".
	Issn      interface{} `json:"issn,omitempty"`      // The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication.
}

// A blog post.
type BlogPosting struct {
	SocialMediaPosting
}

// A medical test performed on a sample of a patient's blood.
type BloodTest struct {
	MedicalTest
}

// A type of boarding policy used by an airline.
type BoardingPolicyType struct {
	Enumeration
}

/*
A reservation for boat travel.

Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
*/
type BoatReservation struct {
	Reservation
}

// A terminal for boats, ships, and other water vessels.
type BoatTerminal struct {
	CivicStructure
}

// A trip on a commercial ferry line.
type BoatTrip struct {
	Trip

	ArrivalBoatTerminal   interface{} `json:"arrivalBoatTerminal,omitempty"`   // The terminal or port from which the boat arrives.
	DepartureBoatTerminal interface{} `json:"departureBoatTerminal,omitempty"` // The terminal or port from which the boat departs.
}

// Enumerates types (or dimensions) of a person's body measurements, for example for fitting of clothes.
type BodyMeasurementTypeEnumeration struct {
	MeasurementTypeEnumeration
}

// A body of water, such as a sea, ocean, or lake.
type BodyOfWater struct {
	Landform
}

// Rigid connective tissue that comprises up the skeletal structure of the human body.
type Bone struct {
	AnatomicalStructure
}

// A book.
type Book struct {
	CreativeWork

	Abridged      interface{} `json:"abridged,omitempty"`      // Indicates whether the book is an abridged edition.
	BookEdition   interface{} `json:"bookEdition,omitempty"`   // The edition of the book.
	BookFormat    interface{} `json:"bookFormat,omitempty"`    // The format of the book.
	Illustrator   interface{} `json:"illustrator,omitempty"`   // The illustrator of the book.
	Isbn          interface{} `json:"isbn,omitempty"`          // The ISBN of the book.
	NumberOfPages interface{} `json:"numberOfPages,omitempty"` // The number of pages in the book.
}

// The publication format of the book.
type BookFormatType struct {
	Enumeration
}

// A series of books. Included books can be indicated with the hasPart property.
type BookSeries struct {
	CreativeWorkSeries
}

// A bookstore.
type BookStore struct {
	Store
}

// An agent bookmarks/flags/labels/tags/marks an object.
type BookmarkAction struct {
	OrganizeAction
}

// Boolean: True or False.
type Boolean struct{}

// The act of obtaining an object under an agreement to return it at a later date. Reciprocal of LendAction.\n\nRelated actions:\n\n* [[LendAction]]: Reciprocal of BorrowAction.
type BorrowAction struct {
	TransferAction

	Lender interface{} `json:"lender,omitempty"` // A sub property of participant. The person that lends the object being borrowed.
}

// A bowling alley.
type BowlingAlley struct {
	SportsActivityLocation
}

// Any anatomical structure which pertains to the soft nervous tissue functioning as the coordinating center of sensation and intellectual and nervous activity.
type BrainStructure struct {
	AnatomicalStructure
}

// A brand is a name used by an organization or business person for labeling a product, product group, or similar.
type Brand struct {
	Intangible

	AggregateRating interface{} `json:"aggregateRating,omitempty"` // The overall rating, based on a collection of reviews or ratings, of the item.
	Logo            interface{} `json:"logo,omitempty"`            // An associated logo.
	Review          interface{} `json:"review,omitempty"`          // A review of the item.
	Slogan          interface{} `json:"slogan,omitempty"`          // A slogan or motto associated with the item.
}

/*
A BreadcrumbList is an ItemList consisting of a chain of linked Web pages, typically described using at least their URL and their name, and typically ending with the current page.\n\nThe [[position]] property is used to reconstruct the order of the items in a BreadcrumbList The convention is that a breadcrumb list has an [[itemListOrder]] of [[ItemListOrderAscending]] (lower values listed first), and that the first items in this list correspond to the "top" or beginning of the breadcrumb trail, e.g. with a site or section homepage. The specific values of 'position' are not assigned meaning for a BreadcrumbList, but they should be integers, e.g. beginning with '1' for the first item in the list.

*/
type BreadcrumbList struct {
	ItemList
}

// Brewery.
type Brewery struct {
	FoodEstablishment
}

// A bridge.
type Bridge struct {
	CivicStructure
}

// A unique instance of a BroadcastService on a CableOrSatelliteService lineup.
type BroadcastChannel struct {
	Intangible

	BroadcastChannelId       interface{} `json:"broadcastChannelId,omitempty"`       // The unique address by which the BroadcastService can be identified in a provider lineup. In US, this is typically a number.
	BroadcastFrequency       interface{} `json:"broadcastFrequency,omitempty"`       // The frequency used for over-the-air broadcasts. Numeric values or simple ranges e.g. 87-99. In addition a shortcut idiom is supported for frequences of AM and FM radio channels, e.g. "87 FM".
	BroadcastServiceTier     interface{} `json:"broadcastServiceTier,omitempty"`     // The type of service required to have access to the channel (e.g. Standard or Premium).
	Genre                    interface{} `json:"genre,omitempty"`                    // Genre of the creative work, broadcast channel or group.
	InBroadcastLineup        interface{} `json:"inBroadcastLineup,omitempty"`        // The CableOrSatelliteService offering the channel.
	ProvidesBroadcastService interface{} `json:"providesBroadcastService,omitempty"` // The BroadcastService offered on this channel.
}

// An over the air or online broadcast event.
type BroadcastEvent struct {
	PublicationEvent

	BroadcastOfEvent interface{} `json:"broadcastOfEvent,omitempty"` // The event being broadcast such as a sporting event or awards ceremony.
	IsLiveBroadcast  interface{} `json:"isLiveBroadcast,omitempty"`  // True if the broadcast is of a live event.
	SubtitleLanguage interface{} `json:"subtitleLanguage,omitempty"` // Languages in which subtitles/captions are available, in [IETF BCP 47 standard format](http://tools.ietf.org/html/bcp47).
	VideoFormat      interface{} `json:"videoFormat,omitempty"`      // The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.).
}

// The frequency in MHz and the modulation used for a particular BroadcastService.
type BroadcastFrequencySpecification struct {
	Intangible

	BroadcastFrequencyValue   interface{} `json:"broadcastFrequencyValue,omitempty"`   // The frequency in MHz for a particular broadcast.
	BroadcastSignalModulation interface{} `json:"broadcastSignalModulation,omitempty"` // The modulation (e.g. FM, AM, etc) used by a particular broadcast service.
	BroadcastSubChannel       interface{} `json:"broadcastSubChannel,omitempty"`       // The subchannel used for the broadcast.
}

// A delivery service through which content is provided via broadcast over the air or online.
type BroadcastService struct {
	Service

	Area                 interface{} `json:"area,omitempty"`                 // The area within which users can expect to reach the broadcast service.
	BroadcastAffiliateOf interface{} `json:"broadcastAffiliateOf,omitempty"` // The media network(s) whose content is broadcast on this station.
	BroadcastDisplayName interface{} `json:"broadcastDisplayName,omitempty"` // The name displayed in the channel guide. For many US affiliates, it is the network name.
	BroadcastFrequency   interface{} `json:"broadcastFrequency,omitempty"`   // The frequency used for over-the-air broadcasts. Numeric values or simple ranges e.g. 87-99. In addition a shortcut idiom is supported for frequences of AM and FM radio channels, e.g. "87 FM".
	BroadcastTimezone    interface{} `json:"broadcastTimezone,omitempty"`    // The timezone in [ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601) for which the service bases its broadcasts
	Broadcaster          interface{} `json:"broadcaster,omitempty"`          // The organization owning or operating the broadcast service.
	CallSign             interface{} `json:"callSign,omitempty"`             // A [callsign](https://en.wikipedia.org/wiki/Call_sign), as used in broadcasting and radio communications to identify people, radio and TV stations, or vehicles.
	HasBroadcastChannel  interface{} `json:"hasBroadcastChannel,omitempty"`  // A broadcast channel of a broadcast service.
	InLanguage           interface{} `json:"inLanguage,omitempty"`           // The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
	ParentService        interface{} `json:"parentService,omitempty"`        // A broadcast service to which the broadcast service may belong to such as regional variations of a national channel.
	VideoFormat          interface{} `json:"videoFormat,omitempty"`          // The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.).
}

// An account that allows an investor to deposit funds and place investment orders with a licensed broker or brokerage firm.
type BrokerageAccount struct {
	InvestmentOrDeposit
}

// A Buddhist temple.
type BuddhistTemple struct {
	PlaceOfWorship
}

// A bus (also omnibus or autobus) is a road vehicle designed to carry passengers. Coaches are luxury busses, usually in service for long distance travel.
type BusOrCoach struct {
	Vehicle

	AcrissCode interface{} `json:"acrissCode,omitempty"` // The ACRISS Car Classification Code is a code used by many car rental companies, for classifying vehicles. ACRISS stands for Association of Car Rental Industry Systems and Standards.
	RoofLoad   interface{} `json:"roofLoad,omitempty"`   // The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 2: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]]\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.
}

// A reservation for bus travel. \n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
type BusReservation struct {
	Reservation
}

// A bus station.
type BusStation struct {
	CivicStructure
}

// A bus stop.
type BusStop struct {
	CivicStructure
}

// A trip on a commercial bus line.
type BusTrip struct {
	Trip

	ArrivalBusStop   interface{} `json:"arrivalBusStop,omitempty"`   // The stop or station from which the bus arrives.
	BusName          interface{} `json:"busName,omitempty"`          // The name of the bus (e.g. Bolt Express).
	BusNumber        interface{} `json:"busNumber,omitempty"`        // The unique identifier for the bus.
	DepartureBusStop interface{} `json:"departureBusStop,omitempty"` // The stop or station from which the bus departs.
}

// A set of characteristics belonging to businesses, e.g. who compose an item's target audience.
type BusinessAudience struct {
	Audience

	NumberOfEmployees interface{} `json:"numberOfEmployees,omitempty"` // The number of employees in an organization e.g. business.
	YearlyRevenue     interface{} `json:"yearlyRevenue,omitempty"`     // The size of the business in annual revenue.
	YearsInOperation  interface{} `json:"yearsInOperation,omitempty"`  // The age of the business.
}

/*
A business entity type is a conceptual entity representing the legal form, the size, the main line of business, the position in the value chain, or any combination thereof, of an organization or business person.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#Business\n* http://purl.org/goodrelations/v1#Enduser\n* http://purl.org/goodrelations/v1#PublicInstitution\n* http://purl.org/goodrelations/v1#Reseller

*/
type BusinessEntityType struct {
	Enumeration
}

// Event type: Business event.
type BusinessEvent struct {
	Event
}

/*
The business function specifies the type of activity or access (i.e., the bundle of rights) offered by the organization or business person through the offer. Typical are sell, rental or lease, maintenance or repair, manufacture / produce, recycle / dispose, engineering / construction, or installation. Proprietary specifications of access rights are also instances of this class.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#ConstructionInstallation\n* http://purl.org/goodrelations/v1#Dispose\n* http://purl.org/goodrelations/v1#LeaseOut\n* http://purl.org/goodrelations/v1#Maintain\n* http://purl.org/goodrelations/v1#ProvideService\n* http://purl.org/goodrelations/v1#Repair\n* http://purl.org/goodrelations/v1#Sell\n* http://purl.org/goodrelations/v1#Buy

*/
type BusinessFunction struct {
	Enumeration
}

// The act of giving money to a seller in exchange for goods or services rendered. An agent buys an object, product, or service from a seller for a price. Reciprocal of SellAction.
type BuyAction struct {
	TradeAction

	Seller          interface{} `json:"seller,omitempty"`          // An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
	Vendor          interface{} `json:"vendor,omitempty"`          // 'vendor' is an earlier term for 'seller'.
	WarrantyPromise interface{} `json:"warrantyPromise,omitempty"` // The warranty promise(s) included in the offer.
}

/*
A CDCPMDRecord is a data structure representing a record in a CDC tabular data format
      used for hospital data reporting. See [documentation](/docs/cdc-covid.html) for details, and the linked CDC materials for authoritative
      definitions used as the source here.

*/
type CDCPMDRecord struct {
	StructuredValue

	CvdCollectionDate       interface{} `json:"cvdCollectionDate,omitempty"`       // collectiondate - Date for which patient counts are reported.
	CvdFacilityCounty       interface{} `json:"cvdFacilityCounty,omitempty"`       // Name of the County of the NHSN facility that this data record applies to. Use [[cvdFacilityId]] to identify the facility. To provide other details, [[healthcareReportingData]] can be used on a [[Hospital]] entry.
	CvdFacilityId           interface{} `json:"cvdFacilityId,omitempty"`           // Identifier of the NHSN facility that this data record applies to. Use [[cvdFacilityCounty]] to indicate the county. To provide other details, [[healthcareReportingData]] can be used on a [[Hospital]] entry.
	CvdNumBeds              interface{} `json:"cvdNumBeds,omitempty"`              // numbeds - HOSPITAL INPATIENT BEDS: Inpatient beds, including all staffed, licensed, and overflow (surge) beds used for inpatients.
	CvdNumBedsOcc           interface{} `json:"cvdNumBedsOcc,omitempty"`           // numbedsocc - HOSPITAL INPATIENT BED OCCUPANCY: Total number of staffed inpatient beds that are occupied.
	CvdNumC19Died           interface{} `json:"cvdNumC19Died,omitempty"`           // numc19died - DEATHS: Patients with suspected or confirmed COVID-19 who died in the hospital, ED, or any overflow location.
	CvdNumC19HOPats         interface{} `json:"cvdNumC19HOPats,omitempty"`         // numc19hopats - HOSPITAL ONSET: Patients hospitalized in an NHSN inpatient care location with onset of suspected or confirmed COVID-19 14 or more days after hospitalization.
	CvdNumC19HospPats       interface{} `json:"cvdNumC19HospPats,omitempty"`       // numc19hosppats - HOSPITALIZED: Patients currently hospitalized in an inpatient care location who have suspected or confirmed COVID-19.
	CvdNumC19MechVentPats   interface{} `json:"cvdNumC19MechVentPats,omitempty"`   // numc19mechventpats - HOSPITALIZED and VENTILATED: Patients hospitalized in an NHSN inpatient care location who have suspected or confirmed COVID-19 and are on a mechanical ventilator.
	CvdNumC19OFMechVentPats interface{} `json:"cvdNumC19OFMechVentPats,omitempty"` // numc19ofmechventpats - ED/OVERFLOW and VENTILATED: Patients with suspected or confirmed COVID-19 who are in the ED or any overflow location awaiting an inpatient bed and on a mechanical ventilator.
	CvdNumC19OverflowPats   interface{} `json:"cvdNumC19OverflowPats,omitempty"`   // numc19overflowpats - ED/OVERFLOW: Patients with suspected or confirmed COVID-19 who are in the ED or any overflow location awaiting an inpatient bed.
	CvdNumICUBeds           interface{} `json:"cvdNumICUBeds,omitempty"`           // numicubeds - ICU BEDS: Total number of staffed inpatient intensive care unit (ICU) beds.
	CvdNumICUBedsOcc        interface{} `json:"cvdNumICUBedsOcc,omitempty"`        // numicubedsocc - ICU BED OCCUPANCY: Total number of staffed inpatient ICU beds that are occupied.
	CvdNumTotBeds           interface{} `json:"cvdNumTotBeds,omitempty"`           // numtotbeds - ALL HOSPITAL BEDS: Total number of all Inpatient and outpatient beds, including all staffed,ICU, licensed, and overflow (surge) beds used for inpatients or outpatients.
	CvdNumVent              interface{} `json:"cvdNumVent,omitempty"`              // numvent - MECHANICAL VENTILATORS: Total number of ventilators available.
	CvdNumVentUse           interface{} `json:"cvdNumVentUse,omitempty"`           // numventuse - MECHANICAL VENTILATORS IN USE: Total number of ventilators in use.
	DatePosted              interface{} `json:"datePosted,omitempty"`              // Publication date of an online listing.
}

// A service which provides access to media programming like TV or radio. Access may be via cable or satellite.
type CableOrSatelliteService struct {
	Service
}

// A cafe or coffee shop.
type CafeOrCoffeeShop struct {
	FoodEstablishment
}

/*
A camping site, campsite, or [[Campground]] is a place used for overnight stay in the outdoors, typically containing individual [[CampingPitch]] locations. \n\n
In British English a campsite is an area, usually divided into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English use of the word is synonymous with the American English expression campground. In American English the term campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a camper; a campground may contain many campsites (Source: Wikipedia see [https://en.wikipedia.org/wiki/Campsite](https://en.wikipedia.org/wiki/Campsite)).\n\n

See also the dedicated [document on the use of schema.org for marking up hotels and other forms of accommodations](/docs/hotels.html).
*/
type Campground struct {
	CivicStructure
	// TODO: LodgingBusiness
}

/*
A [[CampingPitch]] is an individual place for overnight stay in the outdoors, typically being part of a larger camping site, or [[Campground]].\n\n
In British English a campsite, or campground, is an area, usually divided into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English use of the word is synonymous with the American English expression campground. In American English the term campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a camper; a campground may contain many campsites.
(Source: Wikipedia see [https://en.wikipedia.org/wiki/Campsite](https://en.wikipedia.org/wiki/Campsite)).\n\n
See also the dedicated [document on the use of schema.org for marking up hotels and other forms of accommodations](/docs/hotels.html).
*/
type CampingPitch struct {
	Accommodation
}

// A canal, like the Panama Canal.
type Canal struct {
	BodyOfWater
}

// The act of asserting that a future event/action is no longer going to happen.\n\nRelated actions:\n\n* [[ConfirmAction]]: The antonym of CancelAction.
type CancelAction struct {
	PlanAction
}

// A car is a wheeled, self-powered motor vehicle used for transportation.
type Car struct {
	Vehicle

	AcrissCode interface{} `json:"acrissCode,omitempty"` // The ACRISS Car Classification Code is a code used by many car rental companies, for classifying vehicles. ACRISS stands for Association of Car Rental Industry Systems and Standards.
	RoofLoad   interface{} `json:"roofLoad,omitempty"`   // The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 2: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]]\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.
}

// A value indicating a special usage of a car, e.g. commercial rental, driving school, or as a taxi.
type CarUsageType struct {
	Enumeration
}

// A casino.
type Casino struct {
	EntertainmentBusiness
}

// A Category Code.
type CategoryCode struct {
	DefinedTerm

	CodeValue interface{} `json:"codeValue,omitempty"` // A short textual code that uniquely identifies the value.
	InCodeSet interface{} `json:"inCodeSet,omitempty"` // A [[CategoryCodeSet]] that contains this category code.
}

// A set of Category Code values.
type CategoryCodeSet struct {
	DefinedTermSet

	HasCategoryCode interface{} `json:"hasCategoryCode,omitempty"` // A Category code contained in this code set.
}

// A Catholic church.
type CatholicChurch struct {
	Church
}

// A graveyard.
type Cemetery struct {
	CivicStructure
}

// One of the sections into which a book is divided. A chapter usually has a section number or a name.
type Chapter struct {
	CreativeWork

	PageEnd    interface{} `json:"pageEnd,omitempty"`    // The page on which the work ends; for example "138" or "xvi".
	PageStart  interface{} `json:"pageStart,omitempty"`  // The page on which the work starts; for example "135" or "xiii".
	Pagination interface{} `json:"pagination,omitempty"` // Any description of pages that is not separated into pageStart and pageEnd; for example, "1-6, 9, 55" or "10-12, 46-49".
}

// An agent inspects, determines, investigates, inquires, or examines an object's accuracy, quality, condition, or state.
type CheckAction struct {
	FindAction
}

// The act of an agent communicating (service provider, social media, etc) their arrival by registering/confirming for a previously reserved service (e.g. flight check in) or at a place (e.g. hotel), possibly resulting in a result (boarding pass, etc).\n\nRelated actions:\n\n* [[CheckOutAction]]: The antonym of CheckInAction.\n* [[ArriveAction]]: Unlike ArriveAction, CheckInAction implies that the agent is informing/confirming the start of a previously reserved service.\n* [[ConfirmAction]]: Unlike ConfirmAction, CheckInAction implies that the agent is informing/confirming the *start* of a previously reserved service rather than its validity/existence.
type CheckInAction struct {
	CommunicateAction
}

// The act of an agent communicating (service provider, social media, etc) their departure of a previously reserved service (e.g. flight check in) or place (e.g. hotel).\n\nRelated actions:\n\n* [[CheckInAction]]: The antonym of CheckOutAction.\n* [[DepartAction]]: Unlike DepartAction, CheckOutAction implies that the agent is informing/confirming the end of a previously reserved service.\n* [[CancelAction]]: Unlike CancelAction, CheckOutAction implies that the agent is informing/confirming the end of a previously reserved service.
type CheckOutAction struct {
	CommunicateAction
}

// Web page type: Checkout page.
type CheckoutPage struct {
	WebPage
}

// A chemical substance is 'a portion of matter of constant composition, composed of molecular entities of the same type or of different types' (source: [ChEBI:59999](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=59999)).
type ChemicalSubstance struct {
	BioChemEntity

	ChemicalComposition interface{} `json:"chemicalComposition,omitempty"` // The chemical composition describes the identity and relative ratio of the chemical elements that make up the substance.
	ChemicalRole        interface{} `json:"chemicalRole,omitempty"`        // A role played by the BioChemEntity within a chemical context.
	PotentialUse        interface{} `json:"potentialUse,omitempty"`        // Intended use of the BioChemEntity by humans.
}

// A Childcare center.
type ChildCare struct {
	LocalBusiness
}

// Event type: Children's event.
type ChildrensEvent struct {
	Event
}

// The act of expressing a preference from a set of options or a large or unbounded set of choices/options.
type ChooseAction struct {
	AssessAction

	ActionOption interface{} `json:"actionOption,omitempty"` // A sub property of object. The options subject to this action.
	Option       interface{} `json:"option,omitempty"`       // A sub property of object. The options subject to this action.
}

// A church.
type Church struct {
	PlaceOfWorship
}

// A city or town.
type City struct {
	AdministrativeArea
}

// A city hall.
type CityHall struct {
	GovernmentBuilding
}

// A public structure, such as a town hall or concert hall.
type CivicStructure struct {
	Place

	OpeningHours interface{} `json:"openingHours,omitempty"` // The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with days, then times per day. Multiple days can be listed with commas ',' separating each day. Day or time ranges are specified using a hyphen '-'.\n\n* Days are specified using the following two-letter combinations: ```Mo```, ```Tu```, ```We```, ```Th```, ```Fr```, ```Sa```, ```Su```.\n* Times are specified using 24:00 format. For example, 3pm is specified as ```15:00```, 10am as ```10:00```. \n* Here is an example: <code>&lt;time itemprop="openingHours" datetime=&quot;Tu,Th 16:00-20:00&quot;&gt;Tuesdays and Thursdays 4-8pm&lt;/time&gt;</code>.\n* If a business is open 7 days a week, then it can be specified as <code>&lt;time itemprop=&quot;openingHours&quot; datetime=&quot;Mo-Su&quot;&gt;Monday through Sunday, all day&lt;/time&gt;</code>.
}

/*
A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.

  Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].

  At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.

*/
type Claim struct {
	CreativeWork

	Appearance       interface{} `json:"appearance,omitempty"`       // Indicates an occurence of a [[Claim]] in some [[CreativeWork]].
	ClaimInterpreter interface{} `json:"claimInterpreter,omitempty"` /*
	For a [[Claim]] interpreted from [[MediaObject]] content
	    sed to indicate a claim contained, implied or refined from the content of a [[MediaObject]].
	*/
	FirstAppearance interface{} `json:"firstAppearance,omitempty"` // Indicates the first known occurence of a [[Claim]] in some [[CreativeWork]].
}

// A fact-checking review of claims made (or reported) in some creative work (referenced via itemReviewed).
type ClaimReview struct {
	Review

	ClaimReviewed interface{} `json:"claimReviewed,omitempty"` // A short summary of the specific claims reviewed in a ClaimReview.
}

// A class, also often called a 'Type'; equivalent to rdfs:Class.
type Class struct {
	Intangible

	SupersededBy interface{} `json:"supersededBy,omitempty"` // Relates a term (i.e. a property, class or enumeration) to one that supersedes it.
}

// A short TV or radio program or a segment/part of a program.
type Clip struct {
	CreativeWork

	Actor         interface{} `json:"actor,omitempty"`         // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Actors        interface{} `json:"actors,omitempty"`        // An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
	ClipNumber    interface{} `json:"clipNumber,omitempty"`    // Position of the clip within an ordered group of clips.
	Director      interface{} `json:"director,omitempty"`      // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	Directors     interface{} `json:"directors,omitempty"`     // A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
	EndOffset     interface{} `json:"endOffset,omitempty"`     // The end time of the clip expressed as the number of seconds from the beginning of the work.
	MusicBy       interface{} `json:"musicBy,omitempty"`       // The composer of the soundtrack.
	PartOfEpisode interface{} `json:"partOfEpisode,omitempty"` // The episode to which this clip belongs.
	PartOfSeason  interface{} `json:"partOfSeason,omitempty"`  // The season to which this episode belongs.
	PartOfSeries  interface{} `json:"partOfSeries,omitempty"`  // The series to which this episode or season belongs.
	StartOffset   interface{} `json:"startOffset,omitempty"`   // The start time of the clip expressed as the number of seconds from the beginning of the work.
}

// A clothing store.
type ClothingStore struct {
	Store
}

// Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts, templates.
type Code struct {
	CreativeWork
}

// A collection of items e.g. creative works or products.
type Collection struct {
	CreativeWork

	CollectionSize interface{} `json:"collectionSize,omitempty"` //
}

// Web page type: Collection page.
type CollectionPage struct {
	WebPage
}

// A college, university, or other third-level educational institution.
type CollegeOrUniversity struct {
	EducationalOrganization
}

// A comedy club.
type ComedyClub struct {
	EntertainmentBusiness
}

// Event type: Comedy event.
type ComedyEvent struct {
	Event
}

// The artwork on the cover of a comic.
type ComicCoverArt struct {
	ComicStory
	// TODO: CoverArt
}

/*
Individual comic issues are serially published as
    	part of a larger series. For the sake of consistency, even one-shot issues
    	belong to a series comprised of a single issue. All comic issues can be
    	uniquely identified by: the combination of the name and volume number of the
    	series to which the issue belongs; the issue number; and the variant
    	description of the issue (if any).
*/
type ComicIssue struct {
	PublicationIssue

	Artist interface{} `json:"artist,omitempty"` /*
	The primary artist for a work
	    	in a medium other than pencils or digital line art--for example, if the
	    	primary artwork is done in watercolors or digital paints.
	*/
	Colorist     interface{} `json:"colorist,omitempty"`     // The individual who adds color to inked drawings.
	Inker        interface{} `json:"inker,omitempty"`        // The individual who traces over the pencil drawings in ink after pencils are complete.
	Letterer     interface{} `json:"letterer,omitempty"`     // The individual who adds lettering, including speech balloons and sound effects, to artwork.
	Penciler     interface{} `json:"penciler,omitempty"`     // The individual who draws the primary narrative artwork.
	VariantCover interface{} `json:"variantCover,omitempty"` /*
	A description of the variant cover
	    	for the issue, if the issue is a variant printing. For example, "Bryan Hitch
	    	Variant Cover" or "2nd Printing Variant".
	*/
}

/*
A sequential publication of comic stories under a
    	unifying title, for example "The Amazing Spider-Man" or "Groo the
    	Wanderer".
*/
type ComicSeries struct {
	Periodical
}

/*
The term "story" is any indivisible, re-printable
    	unit of a comic, including the interior stories, covers, and backmatter. Most
    	comics have at least two stories: a cover (ComicCoverArt) and an interior story.
*/
type ComicStory struct {
	CreativeWork

	Artist interface{} `json:"artist,omitempty"` /*
	The primary artist for a work
	    	in a medium other than pencils or digital line art--for example, if the
	    	primary artwork is done in watercolors or digital paints.
	*/
	Colorist interface{} `json:"colorist,omitempty"` // The individual who adds color to inked drawings.
	Inker    interface{} `json:"inker,omitempty"`    // The individual who traces over the pencil drawings in ink after pencils are complete.
	Letterer interface{} `json:"letterer,omitempty"` // The individual who adds lettering, including speech balloons and sound effects, to artwork.
	Penciler interface{} `json:"penciler,omitempty"` // The individual who draws the primary narrative artwork.
}

// A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
type Comment struct {
	CreativeWork

	DownvoteCount interface{} `json:"downvoteCount,omitempty"` // The number of downvotes this question, answer or comment has received from the community.
	ParentItem    interface{} `json:"parentItem,omitempty"`    // The parent of a question, answer or item in general.
	UpvoteCount   interface{} `json:"upvoteCount,omitempty"`   // The number of upvotes this question, answer or comment has received from the community.
}

// The act of generating a comment about a subject.
type CommentAction struct {
	CommunicateAction

	ResultComment interface{} `json:"resultComment,omitempty"` // A sub property of result. The Comment created or sent as a result of this action.
}

// The act of conveying information to another person via a communication medium (instrument) such as speech, email, or telephone conversation.
type CommunicateAction struct {
	InteractAction

	About      interface{} `json:"about,omitempty"`      // The subject matter of the content.
	InLanguage interface{} `json:"inLanguage,omitempty"` // The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
	Language   interface{} `json:"language,omitempty"`   // A sub property of instrument. The language used on this action.
	Recipient  interface{} `json:"recipient,omitempty"`  // A sub property of participant. The participant who is at the receiving end of the action.
}

/*
A [[CompleteDataFeed]] is a [[DataFeed]] whose standard representation includes content for every item currently in the feed.

This is the equivalent of Atom's element as defined in Feed Paging and Archiving [RFC 5005](https://tools.ietf.org/html/rfc5005), For example (and as defined for Atom), when using data from a feed that represents a collection of items that varies over time (e.g. "Top Twenty Records") there is no need to have newer entries mixed in alongside older, obsolete entries. By marking this feed as a CompleteDataFeed, old entries can be safely discarded when the feed is refreshed, since we can assume the feed has provided descriptions for all current items.
*/
type CompleteDataFeed struct {
	DataFeed
}

// A compound price specification is one that bundles multiple prices that all apply in combination for different dimensions of consumption. Use the name property of the attached unit price specification for indicating the dimension of a price component (e.g. "electricity" or "final cleaning").
type CompoundPriceSpecification struct {
	PriceSpecification

	PriceComponent interface{} `json:"priceComponent,omitempty"` // This property links to all [[UnitPriceSpecification]] nodes that apply in parallel for the [[CompoundPriceSpecification]] node.
	PriceType      interface{} `json:"priceType,omitempty"`      // Defines the type of a price specified for an offered product, for example a list price, a (temporary) sale price or a manufacturer suggested retail price. If multiple prices are specified for an offer the [[priceType]] property can be used to identify the type of each such specified price. The value of priceType can be specified as a value from enumeration PriceTypeEnumeration or as a free form text string for price types that are not already predefined in PriceTypeEnumeration.
}

// This type covers computer programming languages such as Scheme and Lisp, as well as other language-like computer representations. Natural languages are best represented with the [[Language]] type.
type ComputerLanguage struct {
	Intangible
}

// A computer store.
type ComputerStore struct {
	Store
}

// The act of notifying someone that a future event/action is going to happen as expected.\n\nRelated actions:\n\n* [[CancelAction]]: The antonym of ConfirmAction.
type ConfirmAction struct {
	InformAction
}

// A Consortium is a membership [[Organization]] whose members are typically Organizations.
type Consortium struct {
	Organization
}

// The act of ingesting information/resources/food.
type ConsumeAction struct {
	Action

	ActionAccessibilityRequirement interface{} `json:"actionAccessibilityRequirement,omitempty"` // A set of requirements that a must be fulfilled in order to perform an Action. If more than one value is specied, fulfilling one set of requirements will allow the Action to be performed.
	ExpectsAcceptanceOf            interface{} `json:"expectsAcceptanceOf,omitempty"`            // An Offer which must be accepted before the user can perform the Action. For example, the user may need to buy a movie before being able to watch it.
}

// Web page type: Contact page.
type ContactPage struct {
	WebPage
}

// A contact point&#x2014;for example, a Customer Complaints department.
type ContactPoint struct {
	StructuredValue

	AreaServed        interface{} `json:"areaServed,omitempty"`        // The geographic area where a service or offered item is provided.
	AvailableLanguage interface{} `json:"availableLanguage,omitempty"` // A language someone may use with or at the item, service or place. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[inLanguage]]
	ContactOption     interface{} `json:"contactOption,omitempty"`     // An option available on this contact point (e.g. a toll-free number or support for hearing-impaired callers).
	ContactType       interface{} `json:"contactType,omitempty"`       // A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.
	Email             interface{} `json:"email,omitempty"`             // Email address.
	FaxNumber         interface{} `json:"faxNumber,omitempty"`         // The fax number.
	HoursAvailable    interface{} `json:"hoursAvailable,omitempty"`    // The hours during which this service or contact is available.
	ProductSupported  interface{} `json:"productSupported,omitempty"`  // The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").
	ServiceArea       interface{} `json:"serviceArea,omitempty"`       // The geographic area where the service is provided.
	Telephone         interface{} `json:"telephone,omitempty"`         // The telephone number.
}

// Enumerated options related to a ContactPoint.
type ContactPointOption struct {
	Enumeration
}

// One of the continents (for example, Europe or Africa).
type Continent struct {
	Landform
}

// An agent controls a device or application.
type ControlAction struct {
	Action
}

// A convenience store.
type ConvenienceStore struct {
	Store
}

// One or more messages between organizations or people on a particular topic. Individual messages can be linked to the conversation with isPartOf or hasPart properties.
type Conversation struct {
	CreativeWork
}

// The act of producing/preparing food.
type CookAction struct {
	CreateAction

	FoodEstablishment interface{} `json:"foodEstablishment,omitempty"` // A sub property of location. The specific food establishment where the action occurred.
	FoodEvent         interface{} `json:"foodEvent,omitempty"`         // A sub property of location. The specific food event where the action occurred.
	Recipe            interface{} `json:"recipe,omitempty"`            // A sub property of instrument. The recipe/instructions used to perform the action.
}

// Organization: A business corporation.
type Corporation struct {
	Organization

	TickerSymbol interface{} `json:"tickerSymbol,omitempty"` // The exchange traded instrument associated with a Corporation object. The tickerSymbol is expressed as an exchange and an instrument name separated by a space character. For the exchange component of the tickerSymbol attribute, we recommend using the controlled vocabulary of Market Identifier Codes (MIC) specified in ISO15022.
}

// A [[comment]] that corrects [[CreativeWork]].
type CorrectionComment struct {
	Comment
}

// A country.
type Country struct {
	AdministrativeArea
}

// A description of an educational course which may be offered as distinct instances at which take place at different times or take place at different locations, or be offered through different media or modes of study. An educational course is a sequence of one or more educational events and/or creative works which aims to build knowledge, competence or ability of learners.
type Course struct {
	CreativeWork
	// TODO: LearningResource

	CourseCode                    interface{} `json:"courseCode,omitempty"`                    // The identifier for the [[Course]] used by the course [[provider]] (e.g. CS101 or 6.001).
	CoursePrerequisites           interface{} `json:"coursePrerequisites,omitempty"`           // Requirements for taking the Course. May be completion of another [[Course]] or a textual description like "permission of instructor". Requirements may be a pre-requisite competency, referenced using [[AlignmentObject]].
	EducationalCredentialAwarded  interface{} `json:"educationalCredentialAwarded,omitempty"`  // A description of the qualification, award, certificate, diploma or other educational credential awarded as a consequence of successful completion of this course or program.
	HasCourseInstance             interface{} `json:"hasCourseInstance,omitempty"`             // An offering of the course at a specific time and place or through specific media or mode of study or to a specific section of students.
	NumberOfCredits               interface{} `json:"numberOfCredits,omitempty"`               // The number of credits or units awarded by a Course or required to complete an EducationalOccupationalProgram.
	OccupationalCredentialAwarded interface{} `json:"occupationalCredentialAwarded,omitempty"` // A description of the qualification, award, certificate, diploma or other occupational credential awarded as a consequence of successful completion of this course or program.
}

// An instance of a [[Course]] which is distinct from other instances because it is offered at a different time or location or through different media or modes of study or to a specific section of students.
type CourseInstance struct {
	Event

	CourseMode     interface{} `json:"courseMode,omitempty"`     // The medium or means of delivery of the course instance or the mode of study, either as a text label (e.g. "online", "onsite" or "blended"; "synchronous" or "asynchronous"; "full-time" or "part-time") or as a URL reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous ).
	CourseWorkload interface{} `json:"courseWorkload,omitempty"` // The amount of work expected of students taking the course, often provided as a figure per week or per month, and may be broken down by type. For example, "2 hours of lectures, 1 hour of lab work and 3 hours of independent study per week".
	Instructor     interface{} `json:"instructor,omitempty"`     // A person assigned to instruct or provide instructional assistance for the [[CourseInstance]].
}

// A courthouse.
type Courthouse struct {
	GovernmentBuilding
}

// The artwork on the outer surface of a CreativeWork.
type CoverArt struct {
	VisualArtwork
}

/*
A CovidTestingFacility is a [[MedicalClinic]] where testing for the COVID-19 Coronavirus
      disease is available. If the facility is being made available from an established [[Pharmacy]], [[Hotel]], or other
      non-medical organization, multiple types can be listed. This makes it easier to re-use existing schema.org information
      about that place e.g. contact info, address, opening hours. Note that in an emergency, such information may not always be reliable.

*/
type CovidTestingFacility struct {
	MedicalClinic
}

// The act of deliberately creating/producing/generating/building a result out of the agent.
type CreateAction struct {
	Action
}

// The most generic kind of creative work, including books, movies, photographs, software programs, etc.
type CreativeWork struct {
	Thing

	About                interface{} `json:"about,omitempty"`                // The subject matter of the content.
	Abstract             interface{} `json:"abstract,omitempty"`             // An abstract is a short description that summarizes a [[CreativeWork]].
	AccessMode           interface{} `json:"accessMode,omitempty"`           // The human sensory perceptual system or cognitive faculty through which a person may process or perceive information. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessMode-vocabulary).
	AccessModeSufficient interface{} `json:"accessModeSufficient,omitempty"` // A list of single or combined accessModes that are sufficient to understand all the intellectual content of a resource. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessModeSufficient-vocabulary).
	AccessibilityAPI     interface{} `json:"accessibilityAPI,omitempty"`     // Indicates that the resource is compatible with the referenced accessibility API. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityAPI-vocabulary).
	AccessibilityControl interface{} `json:"accessibilityControl,omitempty"` // Identifies input methods that are sufficient to fully control the described resource. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityControl-vocabulary).
	AccessibilityFeature interface{} `json:"accessibilityFeature,omitempty"` // Content features of the resource, such as accessible media, alternatives and supported enhancements for accessibility. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityFeature-vocabulary).
	AccessibilityHazard  interface{} `json:"accessibilityHazard,omitempty"`  // A characteristic of the described resource that is physiologically dangerous to some users. Related to WCAG 2.0 guideline 2.3. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityHazard-vocabulary).
	AccessibilitySummary interface{} `json:"accessibilitySummary,omitempty"` // A human-readable summary of specific accessibility features or deficiencies, consistent with the other accessibility metadata but expressing subtleties such as "short descriptions are present but long descriptions will be needed for non-visual users" or "short descriptions are present and no long descriptions are needed."
	AccountablePerson    interface{} `json:"accountablePerson,omitempty"`    // Specifies the Person that is legally accountable for the CreativeWork.
	AcquireLicensePage   interface{} `json:"acquireLicensePage,omitempty"`   // Indicates a page documenting how licenses can be purchased or otherwise acquired, for the current item.
	AggregateRating      interface{} `json:"aggregateRating,omitempty"`      // The overall rating, based on a collection of reviews or ratings, of the item.
	AlternativeHeadline  interface{} `json:"alternativeHeadline,omitempty"`  // A secondary title of the CreativeWork.
	ArchivedAt           interface{} `json:"archivedAt,omitempty"`           // Indicates a page or other link involved in archival of a [[CreativeWork]]. In the case of [[MediaReview]], the items in a [[MediaReviewItem]] may often become inaccessible, but be archived by archival, journalistic, activist, or law enforcement organizations. In such cases, the referenced page may not directly publish the content.
	Assesses             interface{} `json:"assesses,omitempty"`             // The item being described is intended to assess the competency or learning outcome defined by the referenced term.
	AssociatedMedia      interface{} `json:"associatedMedia,omitempty"`      // A media object that encodes this CreativeWork. This property is a synonym for encoding.
	Audience             interface{} `json:"audience,omitempty"`             // An intended audience, i.e. a group for whom something was created.
	Audio                interface{} `json:"audio,omitempty"`                // An embedded audio object.
	Author               interface{} `json:"author,omitempty"`               // The author of this content or rating. Please note that author is special in that HTML 5 provides a special mechanism for indicating authorship via the rel tag. That is equivalent to this and may be used interchangeably.
	Award                interface{} `json:"award,omitempty"`                // An award won by or for this item.
	Awards               interface{} `json:"awards,omitempty"`               // Awards won by or for this item.
	Character            interface{} `json:"character,omitempty"`            // Fictional person connected with a creative work.
	Citation             interface{} `json:"citation,omitempty"`             // A citation or reference to another creative work, such as another publication, web page, scholarly article, etc.
	Comment              interface{} `json:"comment,omitempty"`              // Comments, typically from users.
	CommentCount         interface{} `json:"commentCount,omitempty"`         // The number of comments this CreativeWork (e.g. Article, Question or Answer) has received. This is most applicable to works published in Web sites with commenting system; additional comments may exist elsewhere.
	ConditionsOfAccess   interface{} `json:"conditionsOfAccess,omitempty"`   // Conditions that affect the availability of, or method(s) of access to, an item. Typically used for real world items such as an [[ArchiveComponent]] held by an [[ArchiveOrganization]]. This property is not suitable for use as a general Web access control mechanism. It is expressed only in natural language.\n\nFor example "Available by appointment from the Reading Room" or "Accessible only from logged-in accounts ".
	ContentLocation      interface{} `json:"contentLocation,omitempty"`      // The location depicted or described in the content. For example, the location in a photograph or painting.
	ContentRating        interface{} `json:"contentRating,omitempty"`        // Official rating of a piece of content&#x2014;for example,'MPAA PG-13'.
	ContentReferenceTime interface{} `json:"contentReferenceTime,omitempty"` // The specific time described by a creative work, for works (e.g. articles, video objects etc.) that emphasise a particular moment within an Event.
	Contributor          interface{} `json:"contributor,omitempty"`          // A secondary contributor to the CreativeWork or Event.
	CopyrightHolder      interface{} `json:"copyrightHolder,omitempty"`      // The party holding the legal copyright to the CreativeWork.
	CopyrightNotice      interface{} `json:"copyrightNotice,omitempty"`      // Text of a notice appropriate for describing the copyright aspects of this Creative Work, ideally indicating the owner of the copyright for the Work.
	CopyrightYear        interface{} `json:"copyrightYear,omitempty"`        // The year during which the claimed copyright for the CreativeWork was first asserted.
	Correction           interface{} `json:"correction,omitempty"`           // Indicates a correction to a [[CreativeWork]], either via a [[CorrectionComment]], textually or in another document.
	CountryOfOrigin      interface{} `json:"countryOfOrigin,omitempty"`      /*
	The country of origin of something, including products as well as creative  works such as movie and TV content.

	In the case of TV and movie, this would be the country of the principle offices of the production company or individual responsible for the movie. For other kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties such as [[contentLocation]] and [[locationCreated]] may be more applicable.

	In the case of products, the country of origin of the product. The exact interpretation of this may vary by context and product type, and cannot be fully enumerated here.
	*/
	CreativeWorkStatus interface{} `json:"creativeWorkStatus,omitempty"` // The status of a creative work in terms of its stage in a lifecycle. Example terms include Incomplete, Draft, Published, Obsolete. Some organizations define a set of terms for the stages of their publication lifecycle.
	Creator            interface{} `json:"creator,omitempty"`            // The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.
	CreditText         interface{} `json:"creditText,omitempty"`         // Text that can be used to credit person(s) and/or organization(s) associated with a published Creative Work.
	DateCreated        interface{} `json:"dateCreated,omitempty"`        // The date on which the CreativeWork was created or the item was added to a DataFeed.
	DateModified       interface{} `json:"dateModified,omitempty"`       // The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed.
	DatePublished      interface{} `json:"datePublished,omitempty"`      // Date of first broadcast/publication.
	DiscussionUrl      interface{} `json:"discussionUrl,omitempty"`      // A link to the page containing the comments of the CreativeWork.
	EditEIDR           interface{} `json:"editEIDR,omitempty"`           /*
	An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]] representing a specific edit / edition for a work of film or television.

	For example, the motion picture known as "Ghostbusters" whose [[titleEIDR]] is "10.5240/7EC7-228A-510A-053E-CBB8-J", has several edits e.g. "10.5240/1F2A-E1C5-680A-14C6-E76B-I" and "10.5240/8A35-3BEE-6497-5D12-9E4F-3".

	Since schema.org types like [[Movie]] and [[TVEpisode]] can be used for both works and their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general description), or alongside [[editEIDR]] for a more edit-specific description.
	*/
	Editor               interface{} `json:"editor,omitempty"`               // Specifies the Person who edited the CreativeWork.
	EducationalAlignment interface{} `json:"educationalAlignment,omitempty"` /*
	An alignment to an established educational framework.

	This property should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
	*/
	EducationalLevel interface{} `json:"educationalLevel,omitempty"` // The level in terms of progression through an educational or training context. Examples of educational levels include 'beginner', 'intermediate' or 'advanced', and formal sets of level indicators.
	EducationalUse   interface{} `json:"educationalUse,omitempty"`   // The purpose of a work in the context of education; for example, 'assignment', 'group work'.
	Encoding         interface{} `json:"encoding,omitempty"`         // A media object that encodes this CreativeWork. This property is a synonym for associatedMedia.
	EncodingFormat   interface{} `json:"encodingFormat,omitempty"`   /*
	Media type typically expressed using a MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml) and [MDN reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).

	In cases where a [[CreativeWork]] has several media type representations, [[encoding]] can be used to indicate each [[MediaObject]] alongside particular [[encodingFormat]] information.

	Unregistered or niche encoding and file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.
	*/
	Encodings            interface{} `json:"encodings,omitempty"`            // A media object that encodes this CreativeWork.
	ExampleOfWork        interface{} `json:"exampleOfWork,omitempty"`        // A creative work that this work is an example/instance/realization/derivation of.
	Expires              interface{} `json:"expires,omitempty"`              // Date the content expires and is no longer useful or available. For example a [[VideoObject]] or [[NewsArticle]] whose availability or relevance is time-limited, or a [[ClaimReview]] fact check whose publisher wants to indicate that it may no longer be relevant (or helpful to highlight) after some date.
	FileFormat           interface{} `json:"fileFormat,omitempty"`           // Media type, typically MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml)) of the content e.g. application/zip of a SoftwareApplication binary. In cases where a CreativeWork has several media type representations, 'encoding' can be used to indicate each MediaObject alongside particular fileFormat information. Unregistered or niche file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia entry.
	Funder               interface{} `json:"funder,omitempty"`               // A person or organization that supports (sponsors) something through some kind of financial contribution.
	Funding              interface{} `json:"funding,omitempty"`              // A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
	Genre                interface{} `json:"genre,omitempty"`                // Genre of the creative work, broadcast channel or group.
	HasPart              interface{} `json:"hasPart,omitempty"`              // Indicates an item or CreativeWork that is part of this item, or CreativeWork (in some sense).
	Headline             interface{} `json:"headline,omitempty"`             // Headline of the article.
	InLanguage           interface{} `json:"inLanguage,omitempty"`           // The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
	InteractionStatistic interface{} `json:"interactionStatistic,omitempty"` // The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used.
	InteractivityType    interface{} `json:"interactivityType,omitempty"`    // The predominant mode of learning supported by the learning resource. Acceptable values are 'active', 'expositive', or 'mixed'.
	InterpretedAsClaim   interface{} `json:"interpretedAsClaim,omitempty"`   // Used to indicate a specific claim contained, implied, translated or refined from the content of a [[MediaObject]] or other [[CreativeWork]]. The interpreting party can be indicated using [[claimInterpreter]].
	IsAccessibleForFree  interface{} `json:"isAccessibleForFree,omitempty"`  // A flag to signal that the item, event, or place is accessible for free.
	IsBasedOn            interface{} `json:"isBasedOn,omitempty"`            // A resource from which this work is derived or from which it is a modification or adaption.
	IsBasedOnUrl         interface{} `json:"isBasedOnUrl,omitempty"`         // A resource that was used in the creation of this resource. This term can be repeated for multiple sources. For example, http://example.com/great-multiplication-intro.html.
	IsFamilyFriendly     interface{} `json:"isFamilyFriendly,omitempty"`     // Indicates whether this content is family friendly.
	IsPartOf             interface{} `json:"isPartOf,omitempty"`             // Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is part of.
	Keywords             interface{} `json:"keywords,omitempty"`             // Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
	LearningResourceType interface{} `json:"learningResourceType,omitempty"` // The predominant type or kind characterizing the learning resource. For example, 'presentation', 'handout'.
	License              interface{} `json:"license,omitempty"`              // A license document that applies to this content, typically indicated by URL.
	LocationCreated      interface{} `json:"locationCreated,omitempty"`      // The location where the CreativeWork was created, which may not be the same as the location depicted in the CreativeWork.
	MainEntity           interface{} `json:"mainEntity,omitempty"`           // Indicates the primary entity described in some page or other CreativeWork.
	Maintainer           interface{} `json:"maintainer,omitempty"`           /*
	A maintainer of a [[Dataset]], software package ([[SoftwareApplication]]), or other [[Project]]. A maintainer is a [[Person]] or [[Organization]] that manages contributions to, and/or publication of, some (typically complex) artifact. It is common for distributions of software and data to be based on "upstream" sources. When [[maintainer]] is applied to a specific version of something e.g. a particular version or packaging of a [[Dataset]], it is always  possible that the upstream source has a different maintainer. The [[isBasedOn]] property can be used to indicate such relationships between datasets to make the different maintenance roles clear. Similarly in the case of software, a package may have dedicated maintainers working on integration into software distributions such as Ubuntu, as well as upstream maintainers of the underlying work.

	*/
	Material       interface{} `json:"material,omitempty"`       // A material that something is made from, e.g. leather, wool, cotton, paper.
	MaterialExtent interface{} `json:"materialExtent,omitempty"` //
	Mentions       interface{} `json:"mentions,omitempty"`       // Indicates that the CreativeWork contains a reference to, but is not necessarily about a concept.
	Offers         interface{} `json:"offers,omitempty"`         /*
	An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.

	*/
	Pattern              interface{} `json:"pattern,omitempty"`              // A pattern that something has, for example 'polka dot', 'striped', 'Canadian flag'. Values are typically expressed as text, although links to controlled value schemes are also supported.
	Position             interface{} `json:"position,omitempty"`             // The position of an item in a series or sequence of items.
	Producer             interface{} `json:"producer,omitempty"`             // The person or organization who produced the work (e.g. music album, movie, tv/radio series etc.).
	Provider             interface{} `json:"provider,omitempty"`             // The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
	Publication          interface{} `json:"publication,omitempty"`          // A publication event associated with the item.
	Publisher            interface{} `json:"publisher,omitempty"`            // The publisher of the creative work.
	PublisherImprint     interface{} `json:"publisherImprint,omitempty"`     // The publishing division which published the comic.
	PublishingPrinciples interface{} `json:"publishingPrinciples,omitempty"` /*
	The publishingPrinciples property indicates (typically via [[URL]]) a document describing the editorial principles of an [[Organization]] (or individual e.g. a [[Person]] writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a [[CreativeWork]] (e.g. [[NewsArticle]]) the principles are those of the party primarily responsible for the creation of the [[CreativeWork]].

	While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a [[funder]]) can be expressed using schema.org terminology.
	*/
	RecordedAt    interface{} `json:"recordedAt,omitempty"`    // The Event where the CreativeWork was recorded. The CreativeWork may capture all or part of the event.
	ReleasedEvent interface{} `json:"releasedEvent,omitempty"` // The place and time the release was issued, expressed as a PublicationEvent.
	Review        interface{} `json:"review,omitempty"`        // A review of the item.
	Reviews       interface{} `json:"reviews,omitempty"`       // Review of the item.
	SchemaVersion interface{} `json:"schemaVersion,omitempty"` /*
	Indicates (by URL or string) a particular version of a schema used in some CreativeWork. This property was created primarily to
	    indicate the use of a specific schema.org release, e.g. ```10.0``` as a simple string, or more explicitly via URL, ```https://schema.org/docs/releases.html#v10.0```. There may be situations in which other schemas might usefully be referenced this way, e.g. ```http://dublincore.org/specifications/dublin-core/dces/1999-07-02/``` but this has not been carefully explored in the community.
	*/
	SdDatePublished interface{} `json:"sdDatePublished,omitempty"` // Indicates the date on which the current structured data was generated / published. Typically used alongside [[sdPublisher]]
	SdLicense       interface{} `json:"sdLicense,omitempty"`       // A license document that applies to this structured data, typically indicated by URL.
	SdPublisher     interface{} `json:"sdPublisher,omitempty"`     /*
	Indicates the party responsible for generating and publishing the current structured data markup, typically in cases where the structured data is derived automatically from existing published content but published on a different site. For example, student projects and open data initiatives often re-publish existing content with more explicitly structured metadata. The
	[[sdPublisher]] property helps make such practices more explicit.
	*/
	Size               interface{} `json:"size,omitempty"`               // A standardized size of a product or creative work, specified either through a simple textual string (for example 'XL', '32Wx34L'), a  QuantitativeValue with a unitCode, or a comprehensive and structured [[SizeSpecification]]; in other cases, the [[width]], [[height]], [[depth]] and [[weight]] properties may be more applicable.
	SourceOrganization interface{} `json:"sourceOrganization,omitempty"` // The Organization on whose behalf the creator was working.
	Spatial            interface{} `json:"spatial,omitempty"`            /*
	The "spatial" property can be used in cases when more specific properties
	(e.g. [[locationCreated]], [[spatialCoverage]], [[contentLocation]]) are not known to be appropriate.
	*/
	SpatialCoverage interface{} `json:"spatialCoverage,omitempty"` /*
	The spatialCoverage of a CreativeWork indicates the place(s) which are the focus of the content. It is a subproperty of
	      contentLocation intended primarily for more technical and detailed materials. For example with a Dataset, it indicates
	      areas that the dataset describes: a dataset of New York weather would have spatialCoverage which was the place: the state of New York.
	*/
	Sponsor  interface{} `json:"sponsor,omitempty"`  // A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
	Teaches  interface{} `json:"teaches,omitempty"`  // The item being described is intended to help a person learn the competency or learning outcome defined by the referenced term.
	Temporal interface{} `json:"temporal,omitempty"` /*
	The "temporal" property can be used in cases where more specific properties
	(e.g. [[temporalCoverage]], [[dateCreated]], [[dateModified]], [[datePublished]]) are not known to be appropriate.
	*/
	TemporalCoverage interface{} `json:"temporalCoverage,omitempty"` /*
	The temporalCoverage of a CreativeWork indicates the period that the content applies to, i.e. that it describes, either as a DateTime or as a textual string indicating a time period in [ISO 8601 time interval format](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals). In
	      the case of a Dataset it will typically indicate the relevant time period in a precise notation (e.g. for a 2011 census dataset, the year 2011 would be written "2011/2012"). Other forms of content e.g. ScholarlyArticle, Book, TVSeries or TVEpisode may indicate their temporalCoverage in broader terms - textually or via well-known URL.
	      Written works such as books may sometimes have precise temporal coverage too, e.g. a work set in 1939 - 1945 can be indicated in ISO 8601 interval format format via "1939/1945".

	Open-ended date ranges can be written with ".." in place of the end date. For example, "2015-11/.." indicates a range beginning in November 2015 and with no specified final date. This is tentative and might be updated in future when ISO 8601 is officially updated.
	*/
	Text              interface{} `json:"text,omitempty"`              // The textual content of this CreativeWork.
	ThumbnailUrl      interface{} `json:"thumbnailUrl,omitempty"`      // A thumbnail image relevant to the Thing.
	TimeRequired      interface{} `json:"timeRequired,omitempty"`      // Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience, e.g. 'PT30M', 'PT1H25M'.
	TranslationOfWork interface{} `json:"translationOfWork,omitempty"` // The work that this work has been translated from. e.g. 物种起源 is a translationOf “On the Origin of Species”
	Translator        interface{} `json:"translator,omitempty"`        // Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event.
	TypicalAgeRange   interface{} `json:"typicalAgeRange,omitempty"`   // The typical expected age range, e.g. '7-9', '11-'.
	UsageInfo         interface{} `json:"usageInfo,omitempty"`         /*
	The schema.org [[usageInfo]] property indicates further information about a [[CreativeWork]]. This property is applicable both to works that are freely available and to those that require payment or other transactions. It can reference additional information e.g. community expectations on preferred linking and citation conventions, as well as purchasing details. For something that can be commercially licensed, usageInfo can provide detailed, resource-specific information about licensing options.

	This property can be used alongside the license property which indicates license(s) applicable to some piece of content. The usageInfo property can provide information about other licensing options, e.g. acquiring commercial usage rights for an image that is also available under non-commercial creative commons licenses.
	*/
	Version         interface{} `json:"version,omitempty"`         // The version of the CreativeWork embodied by a specified resource.
	Video           interface{} `json:"video,omitempty"`           // An embedded video object.
	WorkExample     interface{} `json:"workExample,omitempty"`     // Example/instance/realization/derivation of the concept of this creative work. eg. The paperback edition, first edition, or eBook.
	WorkTranslation interface{} `json:"workTranslation,omitempty"` // A work that is a translation of the content of this work. e.g. 西遊記 has an English workTranslation “Journey to the West”,a German workTranslation “Monkeys Pilgerfahrt” and a Vietnamese  translation Tây du ký bình khảo.
}

// A media season e.g. tv, radio, video game etc.
type CreativeWorkSeason struct {
	CreativeWork

	Actor             interface{} `json:"actor,omitempty"`             // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Director          interface{} `json:"director,omitempty"`          // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	EndDate           interface{} `json:"endDate,omitempty"`           // The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	Episode           interface{} `json:"episode,omitempty"`           // An episode of a tv, radio or game media within a series or season.
	Episodes          interface{} `json:"episodes,omitempty"`          // An episode of a TV/radio series or season.
	NumberOfEpisodes  interface{} `json:"numberOfEpisodes,omitempty"`  // The number of episodes in this season or series.
	PartOfSeries      interface{} `json:"partOfSeries,omitempty"`      // The series to which this episode or season belongs.
	ProductionCompany interface{} `json:"productionCompany,omitempty"` // The production company or studio responsible for the item e.g. series, video game, episode etc.
	SeasonNumber      interface{} `json:"seasonNumber,omitempty"`      // Position of the season within an ordered group of seasons.
	StartDate         interface{} `json:"startDate,omitempty"`         // The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	Trailer           interface{} `json:"trailer,omitempty"`           // The trailer of a movie or tv/radio series, season, episode, etc.
}

/*
A CreativeWorkSeries in schema.org is a group of related items, typically but not necessarily of the same kind. CreativeWorkSeries are usually organized into some order, often chronological. Unlike [[ItemList]] which is a general purpose data structure for lists of things, the emphasis with CreativeWorkSeries is on published materials (written e.g. books and periodicals, or media such as tv, radio and games).\n\nSpecific subtypes are available for describing [[TVSeries]], [[RadioSeries]], [[MovieSeries]], [[BookSeries]], [[Periodical]] and [[VideoGameSeries]]. In each case, the [[hasPart]] / [[isPartOf]] properties can be used to relate the CreativeWorkSeries to its parts. The general CreativeWorkSeries type serves largely just to organize these more specific and practical subtypes.\n\nIt is common for properties applicable to an item from the series to be usefully applied to the containing group. Schema.org attempts to anticipate some of these cases, but publishers should be free to apply properties of the series parts to the series as a whole wherever they seem appropriate.

*/
type CreativeWorkSeries struct {
	CreativeWork
	// TODO: Series

	EndDate   interface{} `json:"endDate,omitempty"`   // The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	Issn      interface{} `json:"issn,omitempty"`      // The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication.
	StartDate interface{} `json:"startDate,omitempty"` // The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
}

/*
A card payment method of a particular brand or name.  Used to mark up a particular payment method and/or the financial product/service that supplies the card account.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#AmericanExpress\n* http://purl.org/goodrelations/v1#DinersClub\n* http://purl.org/goodrelations/v1#Discover\n* http://purl.org/goodrelations/v1#JCB\n* http://purl.org/goodrelations/v1#MasterCard\n* http://purl.org/goodrelations/v1#VISA

*/
type CreditCard struct {
	LoanOrCredit
	// TODO: PaymentCard
}

// A crematorium.
type Crematorium struct {
	CivicStructure
}

// A [[CriticReview]] is a more specialized form of Review written or published by a source that is recognized for its reviewing activities. These can include online columns, travel and food guides, TV and radio shows, blogs and other independent Web sites. [[CriticReview]]s are typically more in-depth and professionally written. For simpler, casually written user/visitor/viewer/customer reviews, it is more appropriate to use the [[UserReview]] type. Review aggregator sites such as Metacritic already separate out the site's user reviews from selected critic reviews that originate from third-party sources.
type CriticReview struct {
	Review
}

// Text representing a CSS selector.
type CssSelectorType struct {
	Text
}

// A service to convert funds from one currency to another currency.
type CurrencyConversionService struct {
	FinancialProduct
}

// An alternative, closely-related condition typically considered later in the differential diagnosis process along with the signs that are used to distinguish it.
type DDxElement struct {
	MedicalIntangible

	Diagnosis          interface{} `json:"diagnosis,omitempty"`          // One or more alternative conditions considered in the differential diagnosis process as output of a diagnosis process.
	DistinguishingSign interface{} `json:"distinguishingSign,omitempty"` // One of a set of signs and symptoms that can be used to distinguish this diagnosis from others in the differential diagnosis.
}

// Event type: A social dance.
type DanceEvent struct {
	Event
}

// A dance group&#x2014;for example, the Alvin Ailey Dance Theater or Riverdance.
type DanceGroup struct {
	PerformingGroup
}

// A collection of datasets.
type DataCatalog struct {
	CreativeWork

	Dataset              interface{} `json:"dataset,omitempty"`              // A dataset contained in this catalog.
	MeasurementTechnique interface{} `json:"measurementTechnique,omitempty"` /*
	A technique or technology used in a [[Dataset]] (or [[DataDownload]], [[DataCatalog]]),
	corresponding to the method used for measuring the corresponding variable(s) (described using [[variableMeasured]]). This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but rather as a high level summary for dataset discovery.

	For example, if [[variableMeasured]] is: molecule concentration, [[measurementTechnique]] could be: "mass spectrometry" or "nmr spectroscopy" or "colorimetry" or "immunofluorescence".

	If the [[variableMeasured]] is "depression rating", the [[measurementTechnique]] could be "Zung Scale" or "HAM-D" or "Beck Depression Inventory".

	If there are several [[variableMeasured]] properties recorded for some given data object, use a [[PropertyValue]] for each [[variableMeasured]] and attach the corresponding [[measurementTechnique]].

	*/
}

// A dataset in downloadable form.
type DataDownload struct {
	MediaObject

	MeasurementTechnique interface{} `json:"measurementTechnique,omitempty"` /*
	A technique or technology used in a [[Dataset]] (or [[DataDownload]], [[DataCatalog]]),
	corresponding to the method used for measuring the corresponding variable(s) (described using [[variableMeasured]]). This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but rather as a high level summary for dataset discovery.

	For example, if [[variableMeasured]] is: molecule concentration, [[measurementTechnique]] could be: "mass spectrometry" or "nmr spectroscopy" or "colorimetry" or "immunofluorescence".

	If the [[variableMeasured]] is "depression rating", the [[measurementTechnique]] could be "Zung Scale" or "HAM-D" or "Beck Depression Inventory".

	If there are several [[variableMeasured]] properties recorded for some given data object, use a [[PropertyValue]] for each [[variableMeasured]] and attach the corresponding [[measurementTechnique]].

	*/
}

// A single feed providing structured information about one or more entities or topics.
type DataFeed struct {
	Dataset

	DataFeedElement interface{} `json:"dataFeedElement,omitempty"` // An item within in a data feed. Data feeds may have many elements.
}

// A single item within a larger data feed.
type DataFeedItem struct {
	Intangible

	DateCreated  interface{} `json:"dateCreated,omitempty"`  // The date on which the CreativeWork was created or the item was added to a DataFeed.
	DateDeleted  interface{} `json:"dateDeleted,omitempty"`  // The datetime the item was removed from the DataFeed.
	DateModified interface{} `json:"dateModified,omitempty"` // The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed.
	Item         interface{} `json:"item,omitempty"`         // An entity represented by an entry in a list or data feed (e.g. an 'artist' in a list of 'artists')’.
}

// The basic data types such as Integers, Strings, etc.
type DataType struct{}

// A body of structured information describing some topic(s) of interest.
type Dataset struct {
	CreativeWork

	Catalog               interface{} `json:"catalog,omitempty"`               // A data catalog which contains this dataset.
	DatasetTimeInterval   interface{} `json:"datasetTimeInterval,omitempty"`   // The range of temporal applicability of a dataset, e.g. for a 2011 census dataset, the year 2011 (in ISO 8601 time interval format).
	Distribution          interface{} `json:"distribution,omitempty"`          // A downloadable form of this dataset, at a specific location, in a specific format.
	IncludedDataCatalog   interface{} `json:"includedDataCatalog,omitempty"`   // A data catalog which contains this dataset (this property was previously 'catalog', preferred name is now 'includedInDataCatalog').
	IncludedInDataCatalog interface{} `json:"includedInDataCatalog,omitempty"` // A data catalog which contains this dataset.
	Issn                  interface{} `json:"issn,omitempty"`                  // The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication.
	MeasurementTechnique  interface{} `json:"measurementTechnique,omitempty"`  /*
	A technique or technology used in a [[Dataset]] (or [[DataDownload]], [[DataCatalog]]),
	corresponding to the method used for measuring the corresponding variable(s) (described using [[variableMeasured]]). This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but rather as a high level summary for dataset discovery.

	For example, if [[variableMeasured]] is: molecule concentration, [[measurementTechnique]] could be: "mass spectrometry" or "nmr spectroscopy" or "colorimetry" or "immunofluorescence".

	If the [[variableMeasured]] is "depression rating", the [[measurementTechnique]] could be "Zung Scale" or "HAM-D" or "Beck Depression Inventory".

	If there are several [[variableMeasured]] properties recorded for some given data object, use a [[PropertyValue]] for each [[variableMeasured]] and attach the corresponding [[measurementTechnique]].

	*/
	VariableMeasured interface{} `json:"variableMeasured,omitempty"` // The variableMeasured property can indicate (repeated as necessary) the  variables that are measured in some dataset, either described as text or as pairs of identifier and description using PropertyValue.
}

// A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
type Date struct{}

// A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
type DateTime struct{}

// A DatedMoneySpecification represents monetary values with optional start and end dates. For example, this could represent an employee's salary over a specific period of time. __Note:__ This type has been superseded by [[MonetaryAmount]] use of that type is recommended
type DatedMoneySpecification struct {
	StructuredValue

	Amount    interface{} `json:"amount,omitempty"`    // The amount of money.
	Currency  interface{} `json:"currency,omitempty"`  // The currency in which the monetary amount is expressed.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	EndDate   interface{} `json:"endDate,omitempty"`   // The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	StartDate interface{} `json:"startDate,omitempty"` // The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
}

/*
The day of the week, e.g. used to specify to which day the opening hours of an OpeningHoursSpecification refer.

Originally, URLs from [GoodRelations](http://purl.org/goodrelations/v1) were used (for [[Monday]], [[Tuesday]], [[Wednesday]], [[Thursday]], [[Friday]], [[Saturday]], [[Sunday]] plus a special entry for [[PublicHolidays]]); these have now been integrated directly into schema.org.

*/
type DayOfWeek struct {
	Enumeration
}

// A day spa.
type DaySpa struct {
	HealthAndBeautyBusiness
}

// The act of stopping or deactivating a device or application (e.g. stopping a timer or turning off a flashlight).
type DeactivateAction struct {
	ControlAction
}

// A defence establishment, such as an army or navy base.
type DefenceEstablishment struct {
	GovernmentBuilding
}

/*
A DefinedRegion is a geographic area defined by potentially arbitrary (rather than political, administrative or natural geographical) criteria. Properties are provided for defining a region by reference to sets of postal codes.

Examples: a delivery destination when shopping. Region where regional pricing is configured.

Requirement 1:
Country: US
States: "NY", "CA"

Requirement 2:
Country: US
PostalCode Set: { [94000-94585], [97000, 97999], [13000, 13599]}
{ [12345, 12345], [78945, 78945], }
Region = state, canton, prefecture, autonomous community...
*/
type DefinedRegion struct {
	StructuredValue

	AddressCountry   interface{} `json:"addressCountry,omitempty"`   // The country. For example, USA. You can also provide the two-letter [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1).
	AddressRegion    interface{} `json:"addressRegion,omitempty"`    // The region in which the locality is, and which is in the country. For example, California or another appropriate first-level [Administrative division](https://en.wikipedia.org/wiki/List_of_administrative_divisions_by_country)
	PostalCode       interface{} `json:"postalCode,omitempty"`       // The postal code. For example, 94043.
	PostalCodePrefix interface{} `json:"postalCodePrefix,omitempty"` // A defined range of postal codes indicated by a common textual prefix. Used for non-numeric systems such as UK.
	PostalCodeRange  interface{} `json:"postalCodeRange,omitempty"`  // A defined range of postal codes.
}

// A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
type DefinedTerm struct {
	Intangible

	InDefinedTermSet interface{} `json:"inDefinedTermSet,omitempty"` // A [[DefinedTermSet]] that contains this term.
	TermCode         interface{} `json:"termCode,omitempty"`         // A code that identifies this [[DefinedTerm]] within a [[DefinedTermSet]]
}

// A set of defined terms for example a set of categories or a classification scheme, a glossary, dictionary or enumeration.
type DefinedTermSet struct {
	CreativeWork

	HasDefinedTerm interface{} `json:"hasDefinedTerm,omitempty"` // A Defined Term contained in this term set.
}

// The act of editing a recipient by removing one of its objects.
type DeleteAction struct {
	UpdateAction
}

// The price for the delivery of an offer using a particular delivery method.
type DeliveryChargeSpecification struct {
	PriceSpecification

	AppliesToDeliveryMethod interface{} `json:"appliesToDeliveryMethod,omitempty"` // The delivery method(s) to which the delivery charge or payment charge specification applies.
	AreaServed              interface{} `json:"areaServed,omitempty"`              // The geographic area where a service or offered item is provided.
	EligibleRegion          interface{} `json:"eligibleRegion,omitempty"`          /*
	The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.\n\nSee also [[ineligibleRegion]].

	*/
	IneligibleRegion interface{} `json:"ineligibleRegion,omitempty"` /*
	The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.\n\nSee also [[eligibleRegion]].

	*/
}

// An event involving the delivery of an item.
type DeliveryEvent struct {
	Event

	AccessCode        interface{} `json:"accessCode,omitempty"`        // Password, PIN, or access code needed for delivery (e.g. from a locker).
	AvailableFrom     interface{} `json:"availableFrom,omitempty"`     // When the item is available for pickup from the store, locker, etc.
	AvailableThrough  interface{} `json:"availableThrough,omitempty"`  // After this date, the item will no longer be available for pickup.
	HasDeliveryMethod interface{} `json:"hasDeliveryMethod,omitempty"` // Method used for delivery or shipping.
}

/*
A delivery method is a standardized procedure for transferring the product or service to the destination of fulfillment chosen by the customer. Delivery methods are characterized by the means of transportation used, and by the organization or group that is the contracting party for the sending organization or person.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#DeliveryModeDirectDownload\n* http://purl.org/goodrelations/v1#DeliveryModeFreight\n* http://purl.org/goodrelations/v1#DeliveryModeMail\n* http://purl.org/goodrelations/v1#DeliveryModeOwnFleet\n* http://purl.org/goodrelations/v1#DeliveryModePickUp\n* http://purl.org/goodrelations/v1#DHL\n* http://purl.org/goodrelations/v1#FederalExpress\n* http://purl.org/goodrelations/v1#UPS

*/
type DeliveryMethod struct {
	Enumeration
}

// A DeliveryTimeSettings represents re-usable pieces of shipping information, relating to timing. It is designed for publication on an URL that may be referenced via the [[shippingSettingsLink]] property of a [[OfferShippingDetails]]. Several occurrences can be published, distinguished (and identified/referenced) by their different values for [[transitTimeLabel]].
type DeliveryTimeSettings struct {
	StructuredValue

	DeliveryTime         interface{} `json:"deliveryTime,omitempty"`         // The total delay between the receipt of the order and the goods reaching the final customer.
	IsUnlabelledFallback interface{} `json:"isUnlabelledFallback,omitempty"` // This can be marked 'true' to indicate that some published [[DeliveryTimeSettings]] or [[ShippingRateSettings]] are intended to apply to all [[OfferShippingDetails]] published by the same merchant, when referenced by a [[shippingSettingsLink]] in those settings. It is not meaningful to use a 'true' value for this property alongside a transitTimeLabel (for [[DeliveryTimeSettings]]) or shippingLabel (for [[ShippingRateSettings]]), since this property is for use with unlabelled settings.
	ShippingDestination  interface{} `json:"shippingDestination,omitempty"`  // indicates (possibly multiple) shipping destinations. These can be defined in several ways e.g. postalCode ranges.
	TransitTimeLabel     interface{} `json:"transitTimeLabel,omitempty"`     // Label to match an [[OfferShippingDetails]] with a [[DeliveryTimeSettings]] (within the context of a [[shippingSettingsLink]] cross-reference).
}

// A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
type Demand struct {
	Intangible

	AcceptedPaymentMethod     interface{} `json:"acceptedPaymentMethod,omitempty"`     // The payment method(s) accepted by seller for this offer.
	AdvanceBookingRequirement interface{} `json:"advanceBookingRequirement,omitempty"` // The amount of time that is required between accepting the offer and the actual usage of the resource or service.
	AreaServed                interface{} `json:"areaServed,omitempty"`                // The geographic area where a service or offered item is provided.
	Availability              interface{} `json:"availability,omitempty"`              // The availability of this item&#x2014;for example In stock, Out of stock, Pre-order, etc.
	AvailabilityEnds          interface{} `json:"availabilityEnds,omitempty"`          // The end of the availability of the product or service included in the offer.
	AvailabilityStarts        interface{} `json:"availabilityStarts,omitempty"`        // The beginning of the availability of the product or service included in the offer.
	AvailableAtOrFrom         interface{} `json:"availableAtOrFrom,omitempty"`         // The place(s) from which the offer can be obtained (e.g. store locations).
	AvailableDeliveryMethod   interface{} `json:"availableDeliveryMethod,omitempty"`   // The delivery method(s) available for this offer.
	BusinessFunction          interface{} `json:"businessFunction,omitempty"`          // The business function (e.g. sell, lease, repair, dispose) of the offer or component of a bundle (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell.
	DeliveryLeadTime          interface{} `json:"deliveryLeadTime,omitempty"`          // The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup.
	EligibleCustomerType      interface{} `json:"eligibleCustomerType,omitempty"`      // The type(s) of customers for which the given offer is valid.
	EligibleDuration          interface{} `json:"eligibleDuration,omitempty"`          // The duration for which the given offer is valid.
	EligibleQuantity          interface{} `json:"eligibleQuantity,omitempty"`          // The interval and unit of measurement of ordering quantities for which the offer or price specification is valid. This allows e.g. specifying that a certain freight charge is valid only for a certain quantity.
	EligibleRegion            interface{} `json:"eligibleRegion,omitempty"`            /*
	The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.\n\nSee also [[ineligibleRegion]].

	*/
	EligibleTransactionVolume interface{} `json:"eligibleTransactionVolume,omitempty"` // The transaction volume, in a monetary unit, for which the offer or price specification is valid, e.g. for indicating a minimal purchasing volume, to express free shipping above a certain order volume, or to limit the acceptance of credit cards to purchases to a certain minimal amount.
	Gtin                      interface{} `json:"gtin,omitempty"`                      /*
	A Global Trade Item Number ([GTIN](https://www.gs1.org/standards/id-keys/gtin)). GTINs identify trade items, including products and services, using numeric identification codes. The [[gtin]] property generalizes the earlier [[gtin8]], [[gtin12]], [[gtin13]], and [[gtin14]] properties. The GS1 [digital link specifications](https://www.gs1.org/standards/Digital-Link/) express GTINs as URLs. A correct [[gtin]] value should be a valid GTIN, which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or a "GS1 Digital Link" URL based on such a string. The numeric component should also have a [valid GS1 check digit](https://www.gs1.org/services/check-digit-calculator) and meet the other rules for valid GTINs. See also [GS1's GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) and [Wikipedia](https://en.wikipedia.org/wiki/Global_Trade_Item_Number) for more details. Left-padding of the gtin values is not required or encouraged.

	*/
	Gtin12           interface{} `json:"gtin12,omitempty"`           // The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin13           interface{} `json:"gtin13,omitempty"`           // The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceding zero. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin14           interface{} `json:"gtin14,omitempty"`           // The GTIN-14 code of the product, or the product to which the offer refers. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin8            interface{} `json:"gtin8,omitempty"`            // The GTIN-8 code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	IncludesObject   interface{} `json:"includesObject,omitempty"`   // This links to a node or nodes indicating the exact quantity of the products included in  an [[Offer]] or [[ProductCollection]].
	IneligibleRegion interface{} `json:"ineligibleRegion,omitempty"` /*
	The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.\n\nSee also [[eligibleRegion]].

	*/
	InventoryLevel     interface{} `json:"inventoryLevel,omitempty"`     // The current approximate inventory level for the item or items.
	ItemCondition      interface{} `json:"itemCondition,omitempty"`      // A predefined value from OfferItemCondition specifying the condition of the product or service, or the products or services included in the offer. Also used for product return policies to specify the condition of products accepted for returns.
	ItemOffered        interface{} `json:"itemOffered,omitempty"`        // An item being offered (or demanded). The transactional nature of the offer or demand is documented using [[businessFunction]], e.g. sell, lease etc. While several common expected types are listed explicitly in this definition, others can be used. Using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
	Mpn                interface{} `json:"mpn,omitempty"`                // The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers.
	PriceSpecification interface{} `json:"priceSpecification,omitempty"` // One or more detailed price specifications, indicating the unit price and delivery or payment charges.
	Seller             interface{} `json:"seller,omitempty"`             // An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
	SerialNumber       interface{} `json:"serialNumber,omitempty"`       // The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a shortcut for the serial number of the product included in the offer.
	Sku                interface{} `json:"sku,omitempty"`                // The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers.
	ValidFrom          interface{} `json:"validFrom,omitempty"`          // The date when the item becomes valid.
	ValidThrough       interface{} `json:"validThrough,omitempty"`       // The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
	Warranty           interface{} `json:"warranty,omitempty"`           // The warranty promise(s) included in the offer.
}

// A dentist.
type Dentist struct {
	LocalBusiness
	// TODO: MedicalBusiness
	// TODO: MedicalOrganization
}

// The act of  departing from a place. An agent departs from an fromLocation for a destination, optionally with participants.
type DepartAction struct {
	MoveAction
}

// A department store.
type DepartmentStore struct {
	Store
}

// A type of Bank Account with a main purpose of depositing funds to gain interest or other benefits.
type DepositAccount struct {
	BankAccount
	// TODO: InvestmentOrDeposit
}

// A medical laboratory that offers on-site or off-site diagnostic services.
type DiagnosticLab struct {
	MedicalOrganization

	AvailableTest interface{} `json:"availableTest,omitempty"` // A diagnostic test or procedure offered by this lab.
}

// A medical procedure intended primarily for diagnostic, as opposed to therapeutic, purposes.
type DiagnosticProcedure struct {
	MedicalProcedure
}

// A strategy of regulating the intake of food to achieve or maintain a specific health-related goal.
type Diet struct {
	CreativeWork
	// TODO: LifestyleModification

	DietFeatures          interface{} `json:"dietFeatures,omitempty"`          // Nutritional information specific to the dietary plan. May include dietary recommendations on what foods to avoid, what foods to consume, and specific alterations/deviations from the USDA or other regulatory body's approved dietary guidelines.
	Endorsers             interface{} `json:"endorsers,omitempty"`             // People or organizations that endorse the plan.
	ExpertConsiderations  interface{} `json:"expertConsiderations,omitempty"`  // Medical expert advice related to the plan.
	PhysiologicalBenefits interface{} `json:"physiologicalBenefits,omitempty"` // Specific physiologic benefits associated to the plan.
	Risks                 interface{} `json:"risks,omitempty"`                 // Specific physiologic risks associated to the diet plan.
}

// A product taken by mouth that contains a dietary ingredient intended to supplement the diet. Dietary ingredients may include vitamins, minerals, herbs or other botanicals, amino acids, and substances such as enzymes, organ tissues, glandulars and metabolites.
type DietarySupplement struct {
	Substance

	ActiveIngredient    interface{} `json:"activeIngredient,omitempty"`    // An active ingredient, typically chemical compounds and/or biologic substances.
	IsProprietary       interface{} `json:"isProprietary,omitempty"`       // True if this item's name is a proprietary/brand name (vs. generic name).
	LegalStatus         interface{} `json:"legalStatus,omitempty"`         // The drug or supplement's legal status, including any controlled substance schedules that apply.
	Manufacturer        interface{} `json:"manufacturer,omitempty"`        // The manufacturer of the product.
	MaximumIntake       interface{} `json:"maximumIntake,omitempty"`       // Recommended intake of this supplement for a given population as defined by a specific recommending authority.
	MechanismOfAction   interface{} `json:"mechanismOfAction,omitempty"`   // The specific biochemical interaction through which this drug or supplement produces its pharmacological effect.
	NonProprietaryName  interface{} `json:"nonProprietaryName,omitempty"`  // The generic name of this drug or supplement.
	ProprietaryName     interface{} `json:"proprietaryName,omitempty"`     // Proprietary name given to the diet plan, typically by its originator or creator.
	RecommendedIntake   interface{} `json:"recommendedIntake,omitempty"`   // Recommended intake of this supplement for a given population as defined by a specific recommending authority.
	SafetyConsideration interface{} `json:"safetyConsideration,omitempty"` // Any potential safety concern associated with the supplement. May include interactions with other drugs and foods, pregnancy, breastfeeding, known adverse reactions, and documented efficacy of the supplement.
	TargetPopulation    interface{} `json:"targetPopulation,omitempty"`    // Characteristics of the population for which this is intended, or which typically uses it, e.g. 'adults'.
}

// An electronic file or document.
type DigitalDocument struct {
	CreativeWork

	HasDigitalDocumentPermission interface{} `json:"hasDigitalDocumentPermission,omitempty"` // A permission related to the access to this document (e.g. permission to read or write an electronic document). For a public document, specify a grantee with an Audience with audienceType equal to "public".
}

// A permission for a particular person or group to access a particular file.
type DigitalDocumentPermission struct {
	Intangible

	Grantee        interface{} `json:"grantee,omitempty"`        // The person, organization, contact point, or audience that has been granted this permission.
	PermissionType interface{} `json:"permissionType,omitempty"` // The type of permission granted the person, organization, or audience.
}

// A type of permission which can be granted for accessing a digital document.
type DigitalDocumentPermissionType struct {
	Enumeration
}

// Enumerates some common technology platforms, for use with properties such as [[actionPlatform]]. It is not supposed to be comprehensive - when a suitable code is not enumerated here, textual or URL values can be used instead. These codes are at a fairly high level and do not deal with versioning and other nuance. Additional codes can be suggested [in github](https://github.com/schemaorg/schemaorg/issues/3057).
type DigitalPlatformEnumeration struct {
	Enumeration
}

// The act of expressing a difference of opinion with the object. An agent disagrees to/about an object (a proposition, topic or theme) with participants.
type DisagreeAction struct {
	ReactAction
}

// The act of discovering/finding an object.
type DiscoverAction struct {
	FindAction
}

// A posting to a discussion forum.
type DiscussionForumPosting struct {
	SocialMediaPosting
}

// The act of expressing a negative sentiment about the object. An agent dislikes an object (a proposition, topic or theme) with participants.
type DislikeAction struct {
	ReactAction
}

// Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
type Distance struct {
	Quantity
}

// A distillery.
type Distillery struct {
	FoodEstablishment
}

// The act of providing goods, services, or money without compensation, often for philanthropic reasons.
type DonateAction struct {
	TradeAction

	Recipient interface{} `json:"recipient,omitempty"` // A sub property of participant. The participant who is at the receiving end of the action.
}

// A specific dosing schedule for a drug or supplement.
type DoseSchedule struct {
	MedicalIntangible

	DoseUnit         interface{} `json:"doseUnit,omitempty"`         // The unit of the dose, e.g. 'mg'.
	DoseValue        interface{} `json:"doseValue,omitempty"`        // The value of the dose, e.g. 500.
	Frequency        interface{} `json:"frequency,omitempty"`        // How often the dose is taken, e.g. 'daily'.
	TargetPopulation interface{} `json:"targetPopulation,omitempty"` // Characteristics of the population for which this is intended, or which typically uses it, e.g. 'adults'.
}

// The act of downloading an object.
type DownloadAction struct {
	TransferAction
}

// The act of producing a visual/graphical representation of an object, typically with a pen/pencil and paper as instruments.
type DrawAction struct {
	CreateAction
}

// A picture or diagram made with a pencil, pen, or crayon rather than paint.
type Drawing struct {
	CreativeWork
}

// The act of swallowing liquids.
type DrinkAction struct {
	ConsumeAction
}

// A value indicating which roadwheels will receive torque.
type DriveWheelConfigurationValue struct {
	QualitativeValue
}

// A chemical or biologic substance, used as a medical therapy, that has a physiological effect on an organism. Here the term drug is used interchangeably with the term medicine although clinical knowledge make a clear difference between them.
type Drug struct {
	Substance

	ActiveIngredient              interface{} `json:"activeIngredient,omitempty"`              // An active ingredient, typically chemical compounds and/or biologic substances.
	AdministrationRoute           interface{} `json:"administrationRoute,omitempty"`           // A route by which this drug may be administered, e.g. 'oral'.
	AlcoholWarning                interface{} `json:"alcoholWarning,omitempty"`                // Any precaution, guidance, contraindication, etc. related to consumption of alcohol while taking this drug.
	AvailableStrength             interface{} `json:"availableStrength,omitempty"`             // An available dosage strength for the drug.
	BreastfeedingWarning          interface{} `json:"breastfeedingWarning,omitempty"`          // Any precaution, guidance, contraindication, etc. related to this drug's use by breastfeeding mothers.
	ClincalPharmacology           interface{} `json:"clincalPharmacology,omitempty"`           // Description of the absorption and elimination of drugs, including their concentration (pharmacokinetics, pK) and biological effects (pharmacodynamics, pD).
	ClinicalPharmacology          interface{} `json:"clinicalPharmacology,omitempty"`          // Description of the absorption and elimination of drugs, including their concentration (pharmacokinetics, pK) and biological effects (pharmacodynamics, pD).
	DosageForm                    interface{} `json:"dosageForm,omitempty"`                    // A dosage form in which this drug/supplement is available, e.g. 'tablet', 'suspension', 'injection'.
	DoseSchedule                  interface{} `json:"doseSchedule,omitempty"`                  // A dosing schedule for the drug for a given population, either observed, recommended, or maximum dose based on the type used.
	DrugClass                     interface{} `json:"drugClass,omitempty"`                     // The class of drug this belongs to (e.g., statins).
	DrugUnit                      interface{} `json:"drugUnit,omitempty"`                      // The unit in which the drug is measured, e.g. '5 mg tablet'.
	FoodWarning                   interface{} `json:"foodWarning,omitempty"`                   // Any precaution, guidance, contraindication, etc. related to consumption of specific foods while taking this drug.
	IncludedInHealthInsurancePlan interface{} `json:"includedInHealthInsurancePlan,omitempty"` // The insurance plans that cover this drug.
	InteractingDrug               interface{} `json:"interactingDrug,omitempty"`               // Another drug that is known to interact with this drug in a way that impacts the effect of this drug or causes a risk to the patient. Note: disease interactions are typically captured as contraindications.
	IsAvailableGenerically        interface{} `json:"isAvailableGenerically,omitempty"`        // True if the drug is available in a generic form (regardless of name).
	IsProprietary                 interface{} `json:"isProprietary,omitempty"`                 // True if this item's name is a proprietary/brand name (vs. generic name).
	LabelDetails                  interface{} `json:"labelDetails,omitempty"`                  // Link to the drug's label details.
	LegalStatus                   interface{} `json:"legalStatus,omitempty"`                   // The drug or supplement's legal status, including any controlled substance schedules that apply.
	Manufacturer                  interface{} `json:"manufacturer,omitempty"`                  // The manufacturer of the product.
	MaximumIntake                 interface{} `json:"maximumIntake,omitempty"`                 // Recommended intake of this supplement for a given population as defined by a specific recommending authority.
	MechanismOfAction             interface{} `json:"mechanismOfAction,omitempty"`             // The specific biochemical interaction through which this drug or supplement produces its pharmacological effect.
	NonProprietaryName            interface{} `json:"nonProprietaryName,omitempty"`            // The generic name of this drug or supplement.
	Overdosage                    interface{} `json:"overdosage,omitempty"`                    // Any information related to overdose on a drug, including signs or symptoms, treatments, contact information for emergency response.
	PregnancyCategory             interface{} `json:"pregnancyCategory,omitempty"`             // Pregnancy category of this drug.
	PregnancyWarning              interface{} `json:"pregnancyWarning,omitempty"`              // Any precaution, guidance, contraindication, etc. related to this drug's use during pregnancy.
	PrescribingInfo               interface{} `json:"prescribingInfo,omitempty"`               // Link to prescribing information for the drug.
	PrescriptionStatus            interface{} `json:"prescriptionStatus,omitempty"`            // Indicates the status of drug prescription eg. local catalogs classifications or whether the drug is available by prescription or over-the-counter, etc.
	ProprietaryName               interface{} `json:"proprietaryName,omitempty"`               // Proprietary name given to the diet plan, typically by its originator or creator.
	RelatedDrug                   interface{} `json:"relatedDrug,omitempty"`                   // Any other drug related to this one, for example commonly-prescribed alternatives.
	Rxcui                         interface{} `json:"rxcui,omitempty"`                         // The RxCUI drug identifier from RXNORM.
	Warning                       interface{} `json:"warning,omitempty"`                       // Any FDA or other warnings about the drug (text or URL).
}

// A class of medical drugs, e.g., statins. Classes can represent general pharmacological class, common mechanisms of action, common physiological effects, etc.
type DrugClass struct {
	MedicalEntity

	Drug interface{} `json:"drug,omitempty"` // Specifying a drug or medicine used in a medication procedure.
}

// The cost per unit of a medical drug. Note that this type is not meant to represent the price in an offer of a drug for sale; see the Offer type for that. This type will typically be used to tag wholesale or average retail cost of a drug, or maximum reimbursable cost. Costs of medical drugs vary widely depending on how and where they are paid for, so while this type captures some of the variables, costs should be used with caution by consumers of this schema's markup.
type DrugCost struct {
	MedicalEntity

	ApplicableLocation interface{} `json:"applicableLocation,omitempty"` // The location in which the status applies.
	CostCategory       interface{} `json:"costCategory,omitempty"`       // The category of cost, such as wholesale, retail, reimbursement cap, etc.
	CostCurrency       interface{} `json:"costCurrency,omitempty"`       // The currency (in 3-letter of the drug cost. See: http://en.wikipedia.org/wiki/ISO_4217.
	CostOrigin         interface{} `json:"costOrigin,omitempty"`         // Additional details to capture the origin of the cost data. For example, 'Medicare Part B'.
	CostPerUnit        interface{} `json:"costPerUnit,omitempty"`        // The cost per unit of the drug.
	DrugUnit           interface{} `json:"drugUnit,omitempty"`           // The unit in which the drug is measured, e.g. '5 mg tablet'.
}

// Enumerated categories of medical drug costs.
type DrugCostCategory struct {
	MedicalEnumeration
}

// The legal availability status of a medical drug.
type DrugLegalStatus struct {
	MedicalIntangible

	ApplicableLocation interface{} `json:"applicableLocation,omitempty"` // The location in which the status applies.
}

// Categories that represent an assessment of the risk of fetal injury due to a drug or pharmaceutical used as directed by the mother during pregnancy.
type DrugPregnancyCategory struct {
	MedicalEnumeration
}

// Indicates whether this drug is available by prescription or over-the-counter.
type DrugPrescriptionStatus struct {
	MedicalEnumeration
}

// A specific strength in which a medical drug is available in a specific country.
type DrugStrength struct {
	MedicalIntangible

	ActiveIngredient interface{} `json:"activeIngredient,omitempty"` // An active ingredient, typically chemical compounds and/or biologic substances.
	AvailableIn      interface{} `json:"availableIn,omitempty"`      // The location in which the strength is available.
	MaximumIntake    interface{} `json:"maximumIntake,omitempty"`    // Recommended intake of this supplement for a given population as defined by a specific recommending authority.
	StrengthUnit     interface{} `json:"strengthUnit,omitempty"`     // The units of an active ingredient's strength, e.g. mg.
	StrengthValue    interface{} `json:"strengthValue,omitempty"`    // The value of an active ingredient's strength, e.g. 325.
}

// A dry-cleaning business.
type DryCleaningOrLaundry struct {
	LocalBusiness
}

// Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
type Duration struct {
	Quantity
}

// Enumerates the EU energy efficiency classes A-G as well as A+, A++, and A+++ as defined in EU directive 2017/1369.
type EUEnergyEfficiencyEnumeration struct {
	EnergyEfficiencyEnumeration
}

// The act of swallowing solid objects.
type EatAction struct {
	ConsumeAction
}

// Event type: Education event.
type EducationEvent struct {
	Event

	Assesses         interface{} `json:"assesses,omitempty"`         // The item being described is intended to assess the competency or learning outcome defined by the referenced term.
	EducationalLevel interface{} `json:"educationalLevel,omitempty"` // The level in terms of progression through an educational or training context. Examples of educational levels include 'beginner', 'intermediate' or 'advanced', and formal sets of level indicators.
	Teaches          interface{} `json:"teaches,omitempty"`          // The item being described is intended to help a person learn the competency or learning outcome defined by the referenced term.
}

// An EducationalAudience.
type EducationalAudience struct {
	Audience

	EducationalRole interface{} `json:"educationalRole,omitempty"` // An educationalRole of an EducationalAudience.
}

// An educational or occupational credential. A diploma, academic degree, certification, qualification, badge, etc., that may be awarded to a person or other entity that meets the requirements defined by the credentialer.
type EducationalOccupationalCredential struct {
	CreativeWork

	CompetencyRequired interface{} `json:"competencyRequired,omitempty"` // Knowledge, skill, ability or personal attribute that must be demonstrated by a person or other entity in order to do something such as earn an Educational Occupational Credential or understand a LearningResource.
	CredentialCategory interface{} `json:"credentialCategory,omitempty"` // The category or type of credential being described, for example "degree”, “certificate”, “badge”, or more specific term.
	EducationalLevel   interface{} `json:"educationalLevel,omitempty"`   // The level in terms of progression through an educational or training context. Examples of educational levels include 'beginner', 'intermediate' or 'advanced', and formal sets of level indicators.
	RecognizedBy       interface{} `json:"recognizedBy,omitempty"`       // An organization that acknowledges the validity, value or utility of a credential. Note: recognition may include a process of quality assurance or accreditation.
	ValidFor           interface{} `json:"validFor,omitempty"`           // The duration of validity of a permit or similar thing.
	ValidIn            interface{} `json:"validIn,omitempty"`            // The geographic area where a permit or similar thing is valid.
}

// A program offered by an institution which determines the learning progress to achieve an outcome, usually a credential like a degree or certificate. This would define a discrete set of opportunities (e.g., job, courses) that together constitute a program with a clear start, end, set of requirements, and transition to a new occupational opportunity (e.g., a job), or sometimes a higher educational opportunity (e.g., an advanced degree).
type EducationalOccupationalProgram struct {
	Intangible

	ApplicationDeadline          interface{} `json:"applicationDeadline,omitempty"`          // The date at which the program stops collecting applications for the next enrollment cycle.
	ApplicationStartDate         interface{} `json:"applicationStartDate,omitempty"`         // The date at which the program begins collecting applications for the next enrollment cycle.
	DayOfWeek                    interface{} `json:"dayOfWeek,omitempty"`                    // The day of the week for which these opening hours are valid.
	EducationalCredentialAwarded interface{} `json:"educationalCredentialAwarded,omitempty"` // A description of the qualification, award, certificate, diploma or other educational credential awarded as a consequence of successful completion of this course or program.
	EducationalProgramMode       interface{} `json:"educationalProgramMode,omitempty"`       // Similar to courseMode, The medium or means of delivery of the program as a whole. The value may either be a text label (e.g. "online", "onsite" or "blended"; "synchronous" or "asynchronous"; "full-time" or "part-time") or a URL reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous ).
	EndDate                      interface{} `json:"endDate,omitempty"`                      // The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	FinancialAidEligible         interface{} `json:"financialAidEligible,omitempty"`         // A financial aid type or program which students may use to pay for tuition or fees associated with the program.
	HasCourse                    interface{} `json:"hasCourse,omitempty"`                    // A course or class that is one of the learning opportunities that constitute an educational / occupational program. No information is implied about whether the course is mandatory or optional; no guarantee is implied about whether the course will be available to everyone on the program.
	MaximumEnrollment            interface{} `json:"maximumEnrollment,omitempty"`            // The maximum number of students who may be enrolled in the program.
	NumberOfCredits              interface{} `json:"numberOfCredits,omitempty"`              // The number of credits or units awarded by a Course or required to complete an EducationalOccupationalProgram.
	OccupationalCategory         interface{} `json:"occupationalCategory,omitempty"`         /*
	A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.\n
	Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
	*/
	OccupationalCredentialAwarded interface{} `json:"occupationalCredentialAwarded,omitempty"` // A description of the qualification, award, certificate, diploma or other occupational credential awarded as a consequence of successful completion of this course or program.
	Offers                        interface{} `json:"offers,omitempty"`                        /*
	An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.

	*/
	ProgramPrerequisites  interface{} `json:"programPrerequisites,omitempty"`  // Prerequisites for enrolling in the program.
	ProgramType           interface{} `json:"programType,omitempty"`           // The type of educational or occupational program. For example, classroom, internship, alternance, etc..
	Provider              interface{} `json:"provider,omitempty"`              // The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
	SalaryUponCompletion  interface{} `json:"salaryUponCompletion,omitempty"`  // The expected salary upon completing the training.
	StartDate             interface{} `json:"startDate,omitempty"`             // The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	TermDuration          interface{} `json:"termDuration,omitempty"`          // The amount of time in a term as defined by the institution. A term is a length of time where students take one or more classes. Semesters and quarters are common units for term.
	TermsPerYear          interface{} `json:"termsPerYear,omitempty"`          // The number of times terms of study are offered per year. Semesters and quarters are common units for term. For example, if the student can only take 2 semesters for the program in one year, then termsPerYear should be 2.
	TimeOfDay             interface{} `json:"timeOfDay,omitempty"`             // The time of day the program normally runs. For example, "evenings".
	TimeToComplete        interface{} `json:"timeToComplete,omitempty"`        // The expected length of time to complete the program if attending full-time.
	TrainingSalary        interface{} `json:"trainingSalary,omitempty"`        // The estimated salary earned while in the program.
	TypicalCreditsPerTerm interface{} `json:"typicalCreditsPerTerm,omitempty"` // The number of credits or units a full-time student would be expected to take in 1 term however 'term' is defined by the institution.
}

// An educational organization.
type EducationalOrganization struct {
	CivicStructure
	// TODO: Organization

	Alumni interface{} `json:"alumni,omitempty"` // Alumni of an organization.
}

// An electrician.
type Electrician struct {
	HomeAndConstructionBusiness
}

// An electronics store.
type ElectronicsStore struct {
	Store
}

// An elementary school.
type ElementarySchool struct {
	EducationalOrganization
}

// An email message.
type EmailMessage struct {
	Message
}

// An embassy.
type Embassy struct {
	GovernmentBuilding
}

// An emergency service, such as a fire station or ER.
type EmergencyService struct {
	LocalBusiness
}

// A subclass of OrganizationRole used to describe employee relationships.
type EmployeeRole struct {
	OrganizationRole

	BaseSalary     interface{} `json:"baseSalary,omitempty"`     // The base salary of the job or of an employee in an EmployeeRole.
	SalaryCurrency interface{} `json:"salaryCurrency,omitempty"` // The currency (coded using [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) ) used for the main salary information in this job posting or for this employee.
}

// An aggregate rating of an Organization related to its role as an employer.
type EmployerAggregateRating struct {
	AggregateRating
}

// An [[EmployerReview]] is a review of an [[Organization]] regarding its role as an employer, written by a current or former employee of that organization.
type EmployerReview struct {
	Review
}

// An employment agency.
type EmploymentAgency struct {
	LocalBusiness
}

// An agent approves/certifies/likes/supports/sanction an object.
type EndorseAction struct {
	ReactAction

	Endorsee interface{} `json:"endorsee,omitempty"` // A sub property of participant. The person/organization being supported.
}

/*
An EndorsementRating is a rating that expresses some level of endorsement, for example inclusion in a "critic's pick" blog, a
"Like" or "+1" on a social network. It can be considered the [[result]] of an [[EndorseAction]] in which the [[object]] of the action is rated positively by
some [[agent]]. As is common elsewhere in schema.org, it is sometimes more useful to describe the results of such an action without explicitly describing the [[Action]].

An [[EndorsementRating]] may be part of a numeric scale or organized system, but this is not required: having an explicit type for indicating a positive,
endorsement rating is particularly useful in the absence of numeric scales as it helps consumers understand that the rating is broadly positive.
*/
type EndorsementRating struct {
	Rating
}

// Properties that take Energy as values are of the form '&lt;Number&gt; &lt;Energy unit of measure&gt;'.
type Energy struct {
	Quantity
}

// EnergyConsumptionDetails represents information related to the energy efficiency of a product that consumes energy. The information that can be provided is based on international regulations such as for example [EU directive 2017/1369](https://eur-lex.europa.eu/eli/reg/2017/1369/oj) for energy labeling and the [Energy labeling rule](https://www.ftc.gov/enforcement/rules/rulemaking-regulatory-reform-proceedings/energy-water-use-labeling-consumer) under the Energy Policy and Conservation Act (EPCA) in the US.
type EnergyConsumptionDetails struct {
	Intangible

	EnergyEfficiencyScaleMax    interface{} `json:"energyEfficiencyScaleMax,omitempty"`    // Specifies the most energy efficient class on the regulated EU energy consumption scale for the product category a product belongs to. For example, energy consumption for televisions placed on the market after January 1, 2020 is scaled from D to A+++.
	EnergyEfficiencyScaleMin    interface{} `json:"energyEfficiencyScaleMin,omitempty"`    // Specifies the least energy efficient class on the regulated EU energy consumption scale for the product category a product belongs to. For example, energy consumption for televisions placed on the market after January 1, 2020 is scaled from D to A+++.
	HasEnergyEfficiencyCategory interface{} `json:"hasEnergyEfficiencyCategory,omitempty"` // Defines the energy efficiency Category (which could be either a rating out of range of values or a yes/no certification) for a product according to an international energy efficiency standard.
}

// Enumerates energy efficiency levels (also known as "classes" or "ratings") and certifications that are part of several international energy efficiency standards.
type EnergyEfficiencyEnumeration struct {
	Enumeration
}

// Used to indicate whether a product is EnergyStar certified.
type EnergyStarEnergyEfficiencyEnumeration struct {
	EnergyEfficiencyEnumeration
}

// Information about the engine of the vehicle. A vehicle can have multiple engines represented by multiple engine specification entities.
type EngineSpecification struct {
	StructuredValue

	EngineDisplacement interface{} `json:"engineDisplacement,omitempty"` // The volume swept by all of the pistons inside the cylinders of an internal combustion engine in a single movement. \n\nTypical unit code(s): CMQ for cubic centimeter, LTR for liters, INQ for cubic inches\n* Note 1: You can link to information about how the given value has been determined using the [[valueReference]] property.\n* Note 2: You can use [[minValue]] and [[maxValue]] to indicate ranges.
	EnginePower        interface{} `json:"enginePower,omitempty"`        /*
	The power of the vehicle's engine.
	    Typical unit code(s): KWT for kilowatt, BHP for brake horsepower, N12 for metric horsepower (PS, with 1 PS = 735,49875 W)\n\n* Note 1: There are many different ways of measuring an engine's power. For an overview, see  [http://en.wikipedia.org/wiki/Horsepower#Engine_power_test_codes](http://en.wikipedia.org/wiki/Horsepower#Engine_power_test_codes).\n* Note 2: You can link to information about how the given value has been determined using the [[valueReference]] property.\n* Note 3: You can use [[minValue]] and [[maxValue]] to indicate ranges.
	*/
	EngineType interface{} `json:"engineType,omitempty"` // The type of engine or engines powering the vehicle.
	FuelType   interface{} `json:"fuelType,omitempty"`   // The type of fuel suitable for the engine or engines of the vehicle. If the vehicle has only one engine, this property can be attached directly to the vehicle.
	Torque     interface{} `json:"torque,omitempty"`     // The torque (turning force) of the vehicle's engine.\n\nTypical unit code(s): NU for newton metre (N m), F17 for pound-force per foot, or F48 for pound-force per inch\n\n* Note 1: You can link to information about how the given value has been determined (e.g. reference RPM) using the [[valueReference]] property.\n* Note 2: You can use [[minValue]] and [[maxValue]] to indicate ranges.
}

// A business providing entertainment.
type EntertainmentBusiness struct {
	LocalBusiness
}

// An entry point, within some Web-based protocol.
type EntryPoint struct {
	Intangible

	ActionApplication interface{} `json:"actionApplication,omitempty"` // An application that can complete the request.
	ActionPlatform    interface{} `json:"actionPlatform,omitempty"`    // The high level platform(s) where the Action can be performed for the given URL. To specify a specific application or operating system instance, use actionApplication.
	Application       interface{} `json:"application,omitempty"`       // An application that can complete the request.
	ContentType       interface{} `json:"contentType,omitempty"`       // The supported content type(s) for an EntryPoint response.
	EncodingType      interface{} `json:"encodingType,omitempty"`      // The supported encoding type(s) for an EntryPoint request.
	HttpMethod        interface{} `json:"httpMethod,omitempty"`        // An HTTP method that specifies the appropriate HTTP method for a request to an HTTP EntryPoint. Values are capitalized strings as used in HTTP.
	UrlTemplate       interface{} `json:"urlTemplate,omitempty"`       // An url template (RFC6570) that will be used to construct the target of the execution of the action.
}

// Lists or enumerations—for example, a list of cuisines or music genres, etc.
type Enumeration struct {
	Intangible

	SupersededBy interface{} `json:"supersededBy,omitempty"` // Relates a term (i.e. a property, class or enumeration) to one that supersedes it.
}

// A media episode (e.g. TV, radio, video game) which can be part of a series or season.
type Episode struct {
	CreativeWork

	Actor             interface{} `json:"actor,omitempty"`             // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Actors            interface{} `json:"actors,omitempty"`            // An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
	Director          interface{} `json:"director,omitempty"`          // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	Directors         interface{} `json:"directors,omitempty"`         // A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
	Duration          interface{} `json:"duration,omitempty"`          // The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	EpisodeNumber     interface{} `json:"episodeNumber,omitempty"`     // Position of the episode within an ordered group of episodes.
	MusicBy           interface{} `json:"musicBy,omitempty"`           // The composer of the soundtrack.
	PartOfSeason      interface{} `json:"partOfSeason,omitempty"`      // The season to which this episode belongs.
	PartOfSeries      interface{} `json:"partOfSeries,omitempty"`      // The series to which this episode or season belongs.
	ProductionCompany interface{} `json:"productionCompany,omitempty"` // The production company or studio responsible for the item e.g. series, video game, episode etc.
	Trailer           interface{} `json:"trailer,omitempty"`           // The trailer of a movie or tv/radio series, season, episode, etc.
}

// An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
type Event struct {
	Thing

	About               interface{} `json:"about,omitempty"`               // The subject matter of the content.
	Actor               interface{} `json:"actor,omitempty"`               // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	AggregateRating     interface{} `json:"aggregateRating,omitempty"`     // The overall rating, based on a collection of reviews or ratings, of the item.
	Attendee            interface{} `json:"attendee,omitempty"`            // A person or organization attending the event.
	Attendees           interface{} `json:"attendees,omitempty"`           // A person attending the event.
	Audience            interface{} `json:"audience,omitempty"`            // An intended audience, i.e. a group for whom something was created.
	Composer            interface{} `json:"composer,omitempty"`            // The person or organization who wrote a composition, or who is the composer of a work performed at some event.
	Contributor         interface{} `json:"contributor,omitempty"`         // A secondary contributor to the CreativeWork or Event.
	Director            interface{} `json:"director,omitempty"`            // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	DoorTime            interface{} `json:"doorTime,omitempty"`            // The time admission will commence.
	Duration            interface{} `json:"duration,omitempty"`            // The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	EndDate             interface{} `json:"endDate,omitempty"`             // The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	EventAttendanceMode interface{} `json:"eventAttendanceMode,omitempty"` // The eventAttendanceMode of an event indicates whether it occurs online, offline, or a mix.
	EventSchedule       interface{} `json:"eventSchedule,omitempty"`       /*
	Associates an [[Event]] with a [[Schedule]]. There are circumstances where it is preferable to share a schedule for a series of
	      repeating events rather than data on the individual events themselves. For example, a website or application might prefer to publish a schedule for a weekly
	      gym class rather than provide data on every event. A schedule could be processed by applications to add forthcoming events to a calendar. An [[Event]] that
	      is associated with a [[Schedule]] using this property should not have [[startDate]] or [[endDate]] properties. These are instead defined within the associated
	      [[Schedule]], this avoids any ambiguity for clients using the data. The property might have repeated values to specify different schedules, e.g. for different months
	      or seasons.
	*/
	EventStatus                     interface{} `json:"eventStatus,omitempty"`                     // An eventStatus of an event represents its status; particularly useful when an event is cancelled or rescheduled.
	Funder                          interface{} `json:"funder,omitempty"`                          // A person or organization that supports (sponsors) something through some kind of financial contribution.
	Funding                         interface{} `json:"funding,omitempty"`                         // A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
	InLanguage                      interface{} `json:"inLanguage,omitempty"`                      // The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
	IsAccessibleForFree             interface{} `json:"isAccessibleForFree,omitempty"`             // A flag to signal that the item, event, or place is accessible for free.
	Keywords                        interface{} `json:"keywords,omitempty"`                        // Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
	Location                        interface{} `json:"location,omitempty"`                        // The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
	MaximumAttendeeCapacity         interface{} `json:"maximumAttendeeCapacity,omitempty"`         // The total number of individuals that may attend an event or venue.
	MaximumPhysicalAttendeeCapacity interface{} `json:"maximumPhysicalAttendeeCapacity,omitempty"` // The maximum physical attendee capacity of an [[Event]] whose [[eventAttendanceMode]] is [[OfflineEventAttendanceMode]] (or the offline aspects, in the case of a [[MixedEventAttendanceMode]]).
	MaximumVirtualAttendeeCapacity  interface{} `json:"maximumVirtualAttendeeCapacity,omitempty"`  // The maximum physical attendee capacity of an [[Event]] whose [[eventAttendanceMode]] is [[OnlineEventAttendanceMode]] (or the online aspects, in the case of a [[MixedEventAttendanceMode]]).
	Offers                          interface{} `json:"offers,omitempty"`                          /*
	An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.

	*/
	Organizer                 interface{} `json:"organizer,omitempty"`                 // An organizer of an Event.
	Performer                 interface{} `json:"performer,omitempty"`                 // A performer at the event&#x2014;for example, a presenter, musician, musical group or actor.
	Performers                interface{} `json:"performers,omitempty"`                // The main performer or performers of the event&#x2014;for example, a presenter, musician, or actor.
	PreviousStartDate         interface{} `json:"previousStartDate,omitempty"`         // Used in conjunction with eventStatus for rescheduled or cancelled events. This property contains the previously scheduled start date. For rescheduled events, the startDate property should be used for the newly scheduled start date. In the (rare) case of an event that has been postponed and rescheduled multiple times, this field may be repeated.
	RecordedIn                interface{} `json:"recordedIn,omitempty"`                // The CreativeWork that captured all or part of this Event.
	RemainingAttendeeCapacity interface{} `json:"remainingAttendeeCapacity,omitempty"` // The number of attendee places for an event that remain unallocated.
	Review                    interface{} `json:"review,omitempty"`                    // A review of the item.
	Sponsor                   interface{} `json:"sponsor,omitempty"`                   // A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
	StartDate                 interface{} `json:"startDate,omitempty"`                 // The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	SubEvent                  interface{} `json:"subEvent,omitempty"`                  // An Event that is part of this event. For example, a conference event includes many presentations, each of which is a subEvent of the conference.
	SubEvents                 interface{} `json:"subEvents,omitempty"`                 // Events that are a part of this event. For example, a conference event includes many presentations, each subEvents of the conference.
	SuperEvent                interface{} `json:"superEvent,omitempty"`                // An event that this event is a part of. For example, a collection of individual music performances might each have a music festival as their superEvent.
	Translator                interface{} `json:"translator,omitempty"`                // Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event.
	TypicalAgeRange           interface{} `json:"typicalAgeRange,omitempty"`           // The typical expected age range, e.g. '7-9', '11-'.
	WorkFeatured              interface{} `json:"workFeatured,omitempty"`              /*
	A work featured in some event, e.g. exhibited in an ExhibitionEvent.
	       Specific subproperties are available for workPerformed (e.g. a play), or a workPresented (a Movie at a ScreeningEvent).
	*/
	WorkPerformed interface{} `json:"workPerformed,omitempty"` // A work performed in some event, for example a play performed in a TheaterEvent.
}

// An EventAttendanceModeEnumeration value is one of potentially several modes of organising an event, relating to whether it is online or offline.
type EventAttendanceModeEnumeration struct {
	Enumeration
}

// A reservation for an event like a concert, sporting event, or lecture.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
type EventReservation struct {
	Reservation
}

/*
A series of [[Event]]s. Included events can relate with the series using the [[superEvent]] property.

An EventSeries is a collection of events that share some unifying characteristic. For example, "The Olympic Games" is a series, which
is repeated regularly. The "2012 London Olympics" can be presented both as an [[Event]] in the series "Olympic Games", and as an
[[EventSeries]] that included a number of sporting competitions as Events.

The nature of the association between the events in an [[EventSeries]] can vary, but typical examples could
include a thematic event series (e.g. topical meetups or classes), or a series of regular events that share a location, attendee group and/or organizers.

EventSeries has been defined as a kind of Event to make it easy for publishers to use it in an Event context without
worrying about which kinds of series are really event-like enough to call an Event. In general an EventSeries
may seem more Event-like when the period of time is compact and when aspects such as location are fixed, but
it may also sometimes prove useful to describe a longer-term series as an Event.

*/
type EventSeries struct {
	Event
	// TODO: Series
}

// EventStatusType is an enumeration type whose instances represent several states that an Event may be in.
type EventStatusType struct {
	StatusEnumeration
}

// An event venue.
type EventVenue struct {
	CivicStructure
}

// A structured value representing exchange rate.
type ExchangeRateSpecification struct {
	StructuredValue

	Currency            interface{} `json:"currency,omitempty"`            // The currency in which the monetary amount is expressed.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	CurrentExchangeRate interface{} `json:"currentExchangeRate,omitempty"` // The current price of a currency.
	ExchangeRateSpread  interface{} `json:"exchangeRateSpread,omitempty"`  // The difference between the price at which a broker or other intermediary buys and sells foreign currency.
}

// The act of participating in exertive activity for the purposes of improving health and fitness.
type ExerciseAction struct {
	PlayAction

	Course                 interface{} `json:"course,omitempty"`                 // A sub property of location. The course where this action was taken.
	Diet                   interface{} `json:"diet,omitempty"`                   // A sub property of instrument. The diet used in this action.
	Distance               interface{} `json:"distance,omitempty"`               // The distance travelled, e.g. exercising or travelling.
	ExerciseCourse         interface{} `json:"exerciseCourse,omitempty"`         // A sub property of location. The course where this action was taken.
	ExercisePlan           interface{} `json:"exercisePlan,omitempty"`           // A sub property of instrument. The exercise plan used on this action.
	ExerciseRelatedDiet    interface{} `json:"exerciseRelatedDiet,omitempty"`    // A sub property of instrument. The diet used in this action.
	ExerciseType           interface{} `json:"exerciseType,omitempty"`           // Type(s) of exercise or activity, such as strength training, flexibility training, aerobics, cardiac rehabilitation, etc.
	FromLocation           interface{} `json:"fromLocation,omitempty"`           // A sub property of location. The original location of the object or the agent before the action.
	Opponent               interface{} `json:"opponent,omitempty"`               // A sub property of participant. The opponent on this action.
	SportsActivityLocation interface{} `json:"sportsActivityLocation,omitempty"` // A sub property of location. The sports activity location where this action occurred.
	SportsEvent            interface{} `json:"sportsEvent,omitempty"`            // A sub property of location. The sports event where this action occurred.
	SportsTeam             interface{} `json:"sportsTeam,omitempty"`             // A sub property of participant. The sports team that participated on this action.
	ToLocation             interface{} `json:"toLocation,omitempty"`             // A sub property of location. The final location of the object or the agent after the action.
}

// A gym.
type ExerciseGym struct {
	SportsActivityLocation
}

// Fitness-related activity designed for a specific health-related purpose, including defined exercise routines as well as activity prescribed by a clinician.
type ExercisePlan struct {
	CreativeWork
	// TODO: PhysicalActivity

	ActivityDuration   interface{} `json:"activityDuration,omitempty"`   // Length of time to engage in the activity.
	ActivityFrequency  interface{} `json:"activityFrequency,omitempty"`  // How often one should engage in the activity.
	AdditionalVariable interface{} `json:"additionalVariable,omitempty"` // Any additional component of the exercise prescription that may need to be articulated to the patient. This may include the order of exercises, the number of repetitions of movement, quantitative distance, progressions over time, etc.
	ExerciseType       interface{} `json:"exerciseType,omitempty"`       // Type(s) of exercise or activity, such as strength training, flexibility training, aerobics, cardiac rehabilitation, etc.
	Intensity          interface{} `json:"intensity,omitempty"`          // Quantitative measure gauging the degree of force involved in the exercise, for example, heartbeats per minute. May include the velocity of the movement.
	Repetitions        interface{} `json:"repetitions,omitempty"`        // Number of times one should repeat the activity.
	RestPeriods        interface{} `json:"restPeriods,omitempty"`        // How often one should break from the activity.
	Workload           interface{} `json:"workload,omitempty"`           // Quantitative measure of the physiologic output of the exercise; also referred to as energy expenditure.
}

// Event type: Exhibition event, e.g. at a museum, library, archive, tradeshow, ...
type ExhibitionEvent struct {
	Event
}

// A [[FAQPage]] is a [[WebPage]] presenting one or more "[Frequently asked questions](https://en.wikipedia.org/wiki/FAQ)" (see also [[QAPage]]).
type FAQPage struct {
	WebPage
}

// A radio channel that uses FM.
type FMRadioChannel struct {
	RadioChannel
}

// A fast-food restaurant.
type FastFoodRestaurant struct {
	FoodEstablishment
}

// Event type: Festival.
type Festival struct {
	Event
}

// The act of capturing sound and moving images on film, video, or digitally.
type FilmAction struct {
	CreateAction
}

// A product provided to consumers and businesses by financial institutions such as banks, insurance companies, brokerage firms, consumer finance companies, and investment companies which comprise the financial services industry.
type FinancialProduct struct {
	Service

	AnnualPercentageRate            interface{} `json:"annualPercentageRate,omitempty"`            // The annual rate that is charged for borrowing (or made by investing), expressed as a single percentage number that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction.
	FeesAndCommissionsSpecification interface{} `json:"feesAndCommissionsSpecification,omitempty"` // Description of fees, commissions, and other terms applied either to a class of financial product, or by a financial service organization.
	InterestRate                    interface{} `json:"interestRate,omitempty"`                    // The interest rate, charged or paid, applicable to the financial product. Note: This is different from the calculated annualPercentageRate.
}

// Financial services business.
type FinancialService struct {
	LocalBusiness

	FeesAndCommissionsSpecification interface{} `json:"feesAndCommissionsSpecification,omitempty"` // Description of fees, commissions, and other terms applied either to a class of financial product, or by a financial service organization.
}

// The act of finding an object.\n\nRelated actions:\n\n* [[SearchAction]]: FindAction is generally lead by a SearchAction, but not necessarily.
type FindAction struct {
	Action
}

// A fire station. With firemen.
type FireStation struct {
	CivicStructure
	// TODO: EmergencyService
}

// An airline flight.
type Flight struct {
	Trip

	Aircraft                interface{} `json:"aircraft,omitempty"`                // The kind of aircraft (e.g., "Boeing 747").
	ArrivalAirport          interface{} `json:"arrivalAirport,omitempty"`          // The airport where the flight terminates.
	ArrivalGate             interface{} `json:"arrivalGate,omitempty"`             // Identifier of the flight's arrival gate.
	ArrivalTerminal         interface{} `json:"arrivalTerminal,omitempty"`         // Identifier of the flight's arrival terminal.
	BoardingPolicy          interface{} `json:"boardingPolicy,omitempty"`          // The type of boarding policy used by the airline (e.g. zone-based or group-based).
	Carrier                 interface{} `json:"carrier,omitempty"`                 // 'carrier' is an out-dated term indicating the 'provider' for parcel delivery and flights.
	DepartureAirport        interface{} `json:"departureAirport,omitempty"`        // The airport where the flight originates.
	DepartureGate           interface{} `json:"departureGate,omitempty"`           // Identifier of the flight's departure gate.
	DepartureTerminal       interface{} `json:"departureTerminal,omitempty"`       // Identifier of the flight's departure terminal.
	EstimatedFlightDuration interface{} `json:"estimatedFlightDuration,omitempty"` // The estimated time the flight will take.
	FlightDistance          interface{} `json:"flightDistance,omitempty"`          // The distance of the flight.
	FlightNumber            interface{} `json:"flightNumber,omitempty"`            // The unique identifier for a flight including the airline IATA code. For example, if describing United flight 110, where the IATA code for United is 'UA', the flightNumber is 'UA110'.
	MealService             interface{} `json:"mealService,omitempty"`             // Description of the meals that will be provided or available for purchase.
	Seller                  interface{} `json:"seller,omitempty"`                  // An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
	WebCheckinTime          interface{} `json:"webCheckinTime,omitempty"`          // The time when a passenger can check into the flight online.
}

// A reservation for air travel.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
type FlightReservation struct {
	Reservation

	BoardingGroup           interface{} `json:"boardingGroup,omitempty"`           // The airline-specific indicator of boarding order / preference.
	PassengerPriorityStatus interface{} `json:"passengerPriorityStatus,omitempty"` // The priority status assigned to a passenger for security or boarding (e.g. FastTrack or Priority).
	PassengerSequenceNumber interface{} `json:"passengerSequenceNumber,omitempty"` // The passenger's sequence number as assigned by the airline.
	SecurityScreening       interface{} `json:"securityScreening,omitempty"`       // The type of security screening the passenger is subject to.
}

// Data type: Floating number.
type Float struct {
	Number
}

// A FloorPlan is an explicit representation of a collection of similar accommodations, allowing the provision of common information (room counts, sizes, layout diagrams) and offers for rental or sale. In typical use, some [[ApartmentComplex]] has an [[accommodationFloorPlan]] which is a [[FloorPlan]].  A FloorPlan is always in the context of a particular place, either a larger [[ApartmentComplex]] or a single [[Apartment]]. The visual/spatial aspects of a floor plan (i.e. room layout, [see wikipedia](https://en.wikipedia.org/wiki/Floor_plan)) can be indicated using [[image]].
type FloorPlan struct {
	Intangible

	AmenityFeature interface{} `json:"amenityFeature,omitempty"` // An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs.
	FloorSize      interface{} `json:"floorSize,omitempty"`      /*
	The size of the accommodation, e.g. in square meter or squarefoot.
	Typical unit code(s): MTK for square meter, FTK for square foot, or YDK for square yard
	*/
	IsPlanForApartment                  interface{} `json:"isPlanForApartment,omitempty"`                  // Indicates some accommodation that this floor plan describes.
	LayoutImage                         interface{} `json:"layoutImage,omitempty"`                         // A schematic image showing the floorplan layout.
	NumberOfAccommodationUnits          interface{} `json:"numberOfAccommodationUnits,omitempty"`          // Indicates the total (available plus unavailable) number of accommodation units in an [[ApartmentComplex]], or the number of accommodation units for a specific [[FloorPlan]] (within its specific [[ApartmentComplex]]). See also [[numberOfAvailableAccommodationUnits]].
	NumberOfAvailableAccommodationUnits interface{} `json:"numberOfAvailableAccommodationUnits,omitempty"` // Indicates the number of available accommodation units in an [[ApartmentComplex]], or the number of accommodation units for a specific [[FloorPlan]] (within its specific [[ApartmentComplex]]). See also [[numberOfAccommodationUnits]].
	NumberOfBathroomsTotal              interface{} `json:"numberOfBathroomsTotal,omitempty"`              // The total integer number of bathrooms in a some [[Accommodation]], following real estate conventions as [documented in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsTotalInteger+Field): "The simple sum of the number of bathrooms. For example for a property with two Full Bathrooms and one Half Bathroom, the Bathrooms Total Integer will be 3.". See also [[numberOfRooms]].
	NumberOfBedrooms                    interface{} `json:"numberOfBedrooms,omitempty"`                    // The total integer number of bedrooms in a some [[Accommodation]], [[ApartmentComplex]] or [[FloorPlan]].
	NumberOfFullBathrooms               interface{} `json:"numberOfFullBathrooms,omitempty"`               // Number of full bathrooms - The total number of full and ¾ bathrooms in an [[Accommodation]]. This corresponds to the [BathroomsFull field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsFull+Field).
	NumberOfPartialBathrooms            interface{} `json:"numberOfPartialBathrooms,omitempty"`            // Number of partial bathrooms - The total number of half and ¼ bathrooms in an [[Accommodation]]. This corresponds to the [BathroomsPartial field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsPartial+Field).
	NumberOfRooms                       interface{} `json:"numberOfRooms,omitempty"`                       /*
	The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.
	Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.
	*/
	PetsAllowed interface{} `json:"petsAllowed,omitempty"` // Indicates whether pets are allowed to enter the accommodation or lodging business. More detailed information can be put in a text value.
}

// A florist.
type Florist struct {
	Store
}

// The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically to get updates polled from.\n\nRelated actions:\n\n* [[BefriendAction]]: Unlike BefriendAction, FollowAction implies that the connection is *not* necessarily reciprocal.\n* [[SubscribeAction]]: Unlike SubscribeAction, FollowAction implies that the follower acts as an active agent constantly/actively polling for updates.\n* [[RegisterAction]]: Unlike RegisterAction, FollowAction implies that the agent is interested in continuing receiving updates from the object.\n* [[JoinAction]]: Unlike JoinAction, FollowAction implies that the agent is interested in getting updates from the object.\n* [[TrackAction]]: Unlike TrackAction, FollowAction refers to the polling of updates of all aspects of animate objects rather than the location of inanimate objects (e.g. you track a package, but you don't follow it).
type FollowAction struct {
	InteractAction

	Followee interface{} `json:"followee,omitempty"` // A sub property of object. The person or organization being followed.
}

// A food-related business.
type FoodEstablishment struct {
	LocalBusiness

	AcceptsReservations interface{} `json:"acceptsReservations,omitempty"` // Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
	HasMenu             interface{} `json:"hasMenu,omitempty"`             // Either the actual menu as a structured representation, as text, or a URL of the menu.
	Menu                interface{} `json:"menu,omitempty"`                // Either the actual menu as a structured representation, as text, or a URL of the menu.
	ServesCuisine       interface{} `json:"servesCuisine,omitempty"`       // The cuisine of the restaurant.
	StarRating          interface{} `json:"starRating,omitempty"`          // An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
}

// A reservation to dine at a food-related business.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
type FoodEstablishmentReservation struct {
	Reservation

	EndTime   interface{} `json:"endTime,omitempty"`   // The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
	PartySize interface{} `json:"partySize,omitempty"` // Number of people the reservation should accommodate.
	StartTime interface{} `json:"startTime,omitempty"` // The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
}

// Event type: Food event.
type FoodEvent struct {
	Event
}

// A food service, like breakfast, lunch, or dinner.
type FoodService struct {
	Service
}

/*
A FundingAgency is an organization that implements one or more [[FundingScheme]]s and manages
    the granting process (via [[Grant]]s, typically [[MonetaryGrant]]s).
    A funding agency is not always required for grant funding, e.g. philanthropic giving, corporate sponsorship etc.

Examples of funding agencies include ERC, REA, NIH, Bill and Melinda Gates Foundation...

*/
type FundingAgency struct {
	Project
}

/*
A FundingScheme combines organizational, project and policy aspects of grant-based funding
    that sets guidelines, principles and mechanisms to support other kinds of projects and activities.
    Funding is typically organized via [[Grant]] funding. Examples of funding schemes: Swiss Priority Programmes (SPPs); EU Framework 7 (FP7); Horizon 2020; the NIH-R01 Grant Program; Wellcome institutional strategic support fund. For large scale public sector funding, the management and administration of grant awards is often handled by other, dedicated, organizations - [[FundingAgency]]s such as ERC, REA, ...
*/
type FundingScheme struct {
	Organization
}

// A furniture store.
type FurnitureStore struct {
	Store
}

// The Game type represents things which are games. These are typically rule-governed recreational activities, e.g. role-playing games in which players assume the role of characters in a fictional setting.
type Game struct {
	CreativeWork

	CharacterAttribute interface{} `json:"characterAttribute,omitempty"` // A piece of data that represents a particular aspect of a fictional character (skill, power, character points, advantage, disadvantage).
	GameItem           interface{} `json:"gameItem,omitempty"`           // An item is an object within the game world that can be collected by a player or, occasionally, a non-player character.
	GameLocation       interface{} `json:"gameLocation,omitempty"`       // Real or fictional location of the game (or part of game).
	NumberOfPlayers    interface{} `json:"numberOfPlayers,omitempty"`    // Indicate how many people can play this game (minimum, maximum, or range).
	Quest              interface{} `json:"quest,omitempty"`              // The task that a player-controlled character, or group of characters may complete in order to gain a reward.
}

// For a [[VideoGame]], such as used with a [[PlayGameAction]], an enumeration of the kind of game availability offered.
type GameAvailabilityEnumeration struct {
	Enumeration
}

// Indicates whether this game is multi-player, co-op or single-player.
type GamePlayMode struct {
	Enumeration
}

// Server that provides game interaction in a multiplayer game.
type GameServer struct {
	Intangible

	Game          interface{} `json:"game,omitempty"`          // Video game which is played on this server.
	PlayersOnline interface{} `json:"playersOnline,omitempty"` // Number of players on the server.
	ServerStatus  interface{} `json:"serverStatus,omitempty"`  // Status of a game server.
}

// Status of a game server.
type GameServerStatus struct {
	StatusEnumeration
}

// A garden store.
type GardenStore struct {
	Store
}

// A gas station.
type GasStation struct {
	AutomotiveBusiness
}

// Residence type: Gated community.
type GatedResidenceCommunity struct {
	Residence
}

// An enumeration of genders.
type GenderType struct {
	Enumeration
}

// A discrete unit of inheritance which affects one or more biological traits (Source: [https://en.wikipedia.org/wiki/Gene](https://en.wikipedia.org/wiki/Gene)). Examples include FOXP2 (Forkhead box protein P2), SCARNA21 (small Cajal body-specific RNA 21), A- (agouti genotype).
type Gene struct {
	BioChemEntity

	AlternativeOf         interface{} `json:"alternativeOf,omitempty"`         // Another gene which is a variation of this one.
	EncodesBioChemEntity  interface{} `json:"encodesBioChemEntity,omitempty"`  // Another BioChemEntity encoded by this one.
	ExpressedIn           interface{} `json:"expressedIn,omitempty"`           // Tissue, organ, biological sample, etc in which activity of this gene has been observed experimentally. For example brain, digestive system.
	HasBioPolymerSequence interface{} `json:"hasBioPolymerSequence,omitempty"` // A symbolic representation of a BioChemEnity. For example, a nucleotide sequence of a Gene or an amino acid sequence of a Protein.
}

// A general contractor.
type GeneralContractor struct {
	HomeAndConstructionBusiness
}

/*
A GeoCircle is a GeoShape representing a circular geographic area. As it is a GeoShape
          it provides the simple textual property 'circle', but also allows the combination of postalCode alongside geoRadius.
          The center of the circle can be indicated via the 'geoMidpoint' property, or more approximately using 'address', 'postalCode'.

*/
type GeoCircle struct {
	GeoShape

	GeoMidpoint interface{} `json:"geoMidpoint,omitempty"` // Indicates the GeoCoordinates at the centre of a GeoShape e.g. GeoCircle.
	GeoRadius   interface{} `json:"geoRadius,omitempty"`   // Indicates the approximate radius of a GeoCircle (metres unless indicated otherwise via Distance notation).
}

// The geographic coordinates of a place or event.
type GeoCoordinates struct {
	StructuredValue

	Address        interface{} `json:"address,omitempty"`        // Physical address of the item.
	AddressCountry interface{} `json:"addressCountry,omitempty"` // The country. For example, USA. You can also provide the two-letter [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1).
	Elevation      interface{} `json:"elevation,omitempty"`      // The elevation of a location ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)). Values may be of the form 'NUMBER UNIT_OF_MEASUREMENT' (e.g., '1,000 m', '3,200 ft') while numbers alone should be assumed to be a value in meters.
	Latitude       interface{} `json:"latitude,omitempty"`       // The latitude of a location. For example ```37.42242``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
	Longitude      interface{} `json:"longitude,omitempty"`      // The longitude of a location. For example ```-122.08585``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
	PostalCode     interface{} `json:"postalCode,omitempty"`     // The postal code. For example, 94043.
}

// The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
type GeoShape struct {
	StructuredValue

	Address        interface{} `json:"address,omitempty"`        // Physical address of the item.
	AddressCountry interface{} `json:"addressCountry,omitempty"` // The country. For example, USA. You can also provide the two-letter [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1).
	Box            interface{} `json:"box,omitempty"`            // A box is the area enclosed by the rectangle formed by two points. The first point is the lower corner, the second point is the upper corner. A box is expressed as two points separated by a space character.
	Circle         interface{} `json:"circle,omitempty"`         // A circle is the circular region of a specified radius centered at a specified latitude and longitude. A circle is expressed as a pair followed by a radius in meters.
	Elevation      interface{} `json:"elevation,omitempty"`      // The elevation of a location ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)). Values may be of the form 'NUMBER UNIT_OF_MEASUREMENT' (e.g., '1,000 m', '3,200 ft') while numbers alone should be assumed to be a value in meters.
	Line           interface{} `json:"line,omitempty"`           // A line is a point-to-point path consisting of two or more points. A line is expressed as a series of two or more point objects separated by space.
	Polygon        interface{} `json:"polygon,omitempty"`        // A polygon is the area enclosed by a point-to-point path for which the starting and ending points are the same. A polygon is expressed as a series of four or more space delimited points where the first and final points are identical.
	PostalCode     interface{} `json:"postalCode,omitempty"`     // The postal code. For example, 94043.
}

// (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
type GeospatialGeometry struct {
	Intangible

	GeoContains   interface{} `json:"geoContains,omitempty"`   // Represents a relationship between two geometries (or the places they represent), relating a containing geometry to a contained geometry. "a contains b iff no points of b lie in the exterior of a, and at least one point of the interior of b lies in the interior of a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoCoveredBy  interface{} `json:"geoCoveredBy,omitempty"`  // Represents a relationship between two geometries (or the places they represent), relating a geometry to another that covers it. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoCovers     interface{} `json:"geoCovers,omitempty"`     // Represents a relationship between two geometries (or the places they represent), relating a covering geometry to a covered geometry. "Every point of b is a point of (the interior or boundary of) a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoCrosses    interface{} `json:"geoCrosses,omitempty"`    // Represents a relationship between two geometries (or the places they represent), relating a geometry to another that crosses it: "a crosses b: they have some but not all interior points in common, and the dimension of the intersection is less than that of at least one of them". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoDisjoint   interface{} `json:"geoDisjoint,omitempty"`   // Represents spatial relations in which two geometries (or the places they represent) are topologically disjoint: they have no point in common. They form a set of disconnected geometries." (a symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM))
	GeoEquals     interface{} `json:"geoEquals,omitempty"`     // Represents spatial relations in which two geometries (or the places they represent) are topologically equal, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM). "Two geometries are topologically equal if their interiors intersect and no part of the interior or boundary of one geometry intersects the exterior of the other" (a symmetric relationship)
	GeoIntersects interface{} `json:"geoIntersects,omitempty"` // Represents spatial relations in which two geometries (or the places they represent) have at least one point in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoOverlaps   interface{} `json:"geoOverlaps,omitempty"`   // Represents a relationship between two geometries (or the places they represent), relating a geometry to another that geospatially overlaps it, i.e. they have some but not all points in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoTouches    interface{} `json:"geoTouches,omitempty"`    // Represents spatial relations in which two geometries (or the places they represent) touch: they have at least one boundary point in common, but no interior points." (a symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM) )
	GeoWithin     interface{} `json:"geoWithin,omitempty"`     // Represents a relationship between two geometries (or the places they represent), relating a geometry to one that contains it, i.e. it is inside (i.e. within) its interior. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
}

// The act of transferring ownership of an object to a destination. Reciprocal of TakeAction.\n\nRelated actions:\n\n* [[TakeAction]]: Reciprocal of GiveAction.\n* [[SendAction]]: Unlike SendAction, GiveAction implies that ownership is being transferred (e.g. I may send my laptop to you, but that doesn't mean I'm giving it to you).
type GiveAction struct {
	TransferAction

	Recipient interface{} `json:"recipient,omitempty"` // A sub property of participant. The participant who is at the receiving end of the action.
}

// A golf course.
type GolfCourse struct {
	SportsActivityLocation
}

// GovernmentBenefitsType enumerates several kinds of government benefits to support the COVID-19 situation. Note that this structure may not capture all benefits offered.
type GovernmentBenefitsType struct {
	Enumeration
}

// A government building.
type GovernmentBuilding struct {
	CivicStructure
}

// A government office&#x2014;for example, an IRS or DMV office.
type GovernmentOffice struct {
	LocalBusiness
}

// A governmental organization or agency.
type GovernmentOrganization struct {
	Organization
}

// A permit issued by a government agency.
type GovernmentPermit struct {
	Permit
}

// A service provided by a government organization, e.g. food stamps, veterans benefits, etc.
type GovernmentService struct {
	Service

	Jurisdiction    interface{} `json:"jurisdiction,omitempty"`    // Indicates a legal jurisdiction, e.g. of some legislation, or where some government service is based.
	ServiceOperator interface{} `json:"serviceOperator,omitempty"` // The operating organization, if different from the provider.  This enables the representation of services that are provided by an organization, but operated by another organization like a subcontractor.
}

/*
A grant, typically financial or otherwise quantifiable, of resources. Typically a [[funder]] sponsors some [[MonetaryAmount]] to an [[Organization]] or [[Person]],
    sometimes not necessarily via a dedicated or long-lived [[Project]], resulting in one or more outputs, or [[fundedItem]]s. For financial sponsorship, indicate the [[funder]] of a [[MonetaryGrant]]. For non-financial support, indicate [[sponsor]] of [[Grant]]s of resources (e.g. office space).

Grants support  activities directed towards some agreed collective goals, often but not always organized as [[Project]]s. Long-lived projects are sometimes sponsored by a variety of grants over time, but it is also common for a project to be associated with a single grant.

The amount of a [[Grant]] is represented using [[amount]] as a [[MonetaryAmount]].

*/
type Grant struct {
	Intangible

	FundedItem interface{} `json:"fundedItem,omitempty"` // Indicates something directly or indirectly funded or sponsored through a [[Grant]]. See also [[ownershipFundingInfo]].
	Funder     interface{} `json:"funder,omitempty"`     // A person or organization that supports (sponsors) something through some kind of financial contribution.
	Sponsor    interface{} `json:"sponsor,omitempty"`    // A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
}

// A grocery store.
type GroceryStore struct {
	Store
}

// [[Guide]] is a page or article that recommend specific products or services, or aspects of a thing for a user to consider. A [[Guide]] may represent a Buying Guide and detail aspects of products or services for a user to consider. A [[Guide]] may represent a Product Guide and recommend specific products or services. A [[Guide]] may represent a Ranked List and recommend specific products or services with ranking.
type Guide struct {
	CreativeWork

	ReviewAspect interface{} `json:"reviewAspect,omitempty"` // This Review or Rating is relevant to this part or facet of the itemReviewed.
}

// A business that provide Heating, Ventilation and Air Conditioning services.
type HVACBusiness struct {
	HomeAndConstructionBusiness
}

// A [hackathon](https://en.wikipedia.org/wiki/Hackathon) event.
type Hackathon struct {
	Event
}

// A hair salon.
type HairSalon struct {
	HealthAndBeautyBusiness
}

// A hardware store.
type HardwareStore struct {
	Store
}

// Health and beauty.
type HealthAndBeautyBusiness struct {
	LocalBusiness
}

// HealthAspectEnumeration enumerates several aspects of health content online, each of which might be described using [[hasHealthAspect]] and [[HealthTopicContent]].
type HealthAspectEnumeration struct {
	Enumeration
}

// A health club.
type HealthClub struct {
	HealthAndBeautyBusiness
	// TODO: SportsActivityLocation
}

// A US-style health insurance plan, including PPOs, EPOs, and HMOs.
type HealthInsurancePlan struct {
	Intangible

	BenefitsSummaryUrl          interface{} `json:"benefitsSummaryUrl,omitempty"`          // The URL that goes directly to the summary of benefits and coverage for the specific standard plan or plan variation.
	ContactPoint                interface{} `json:"contactPoint,omitempty"`                // A contact point for a person or organization.
	HealthPlanDrugOption        interface{} `json:"healthPlanDrugOption,omitempty"`        // TODO.
	HealthPlanDrugTier          interface{} `json:"healthPlanDrugTier,omitempty"`          // The tier(s) of drugs offered by this formulary or insurance plan.
	HealthPlanId                interface{} `json:"healthPlanId,omitempty"`                // The 14-character, HIOS-generated Plan ID number. (Plan IDs must be unique, even across different markets.)
	HealthPlanMarketingUrl      interface{} `json:"healthPlanMarketingUrl,omitempty"`      // The URL that goes directly to the plan brochure for the specific standard plan or plan variation.
	IncludesHealthPlanFormulary interface{} `json:"includesHealthPlanFormulary,omitempty"` // Formularies covered by this plan.
	IncludesHealthPlanNetwork   interface{} `json:"includesHealthPlanNetwork,omitempty"`   // Networks covered by this plan.
	UsesHealthPlanIdStandard    interface{} `json:"usesHealthPlanIdStandard,omitempty"`    // The standard for interpreting thePlan ID. The preferred is "HIOS". See the Centers for Medicare & Medicaid Services for more details.
}

// A description of costs to the patient under a given network or formulary.
type HealthPlanCostSharingSpecification struct {
	Intangible

	HealthPlanCoinsuranceOption interface{} `json:"healthPlanCoinsuranceOption,omitempty"` // Whether the coinsurance applies before or after deductible, etc. TODO: Is this a closed set?
	HealthPlanCoinsuranceRate   interface{} `json:"healthPlanCoinsuranceRate,omitempty"`   // Whether The rate of coinsurance expressed as a number between 0.0 and 1.0.
	HealthPlanCopay             interface{} `json:"healthPlanCopay,omitempty"`             // Whether The copay amount.
	HealthPlanCopayOption       interface{} `json:"healthPlanCopayOption,omitempty"`       // Whether the copay is before or after deductible, etc. TODO: Is this a closed set?
	HealthPlanPharmacyCategory  interface{} `json:"healthPlanPharmacyCategory,omitempty"`  // The category or type of pharmacy associated with this cost sharing.
}

// For a given health insurance plan, the specification for costs and coverage of prescription drugs.
type HealthPlanFormulary struct {
	Intangible

	HealthPlanCostSharing    interface{} `json:"healthPlanCostSharing,omitempty"`    // Whether The costs to the patient for services under this network or formulary.
	HealthPlanDrugTier       interface{} `json:"healthPlanDrugTier,omitempty"`       // The tier(s) of drugs offered by this formulary or insurance plan.
	OffersPrescriptionByMail interface{} `json:"offersPrescriptionByMail,omitempty"` // Whether prescriptions can be delivered by mail.
}

// A US-style health insurance plan network.
type HealthPlanNetwork struct {
	Intangible

	HealthPlanCostSharing interface{} `json:"healthPlanCostSharing,omitempty"` // Whether The costs to the patient for services under this network or formulary.
	HealthPlanNetworkId   interface{} `json:"healthPlanNetworkId,omitempty"`   // Name or unique ID of network. (Networks are often reused across different insurance plans).
	HealthPlanNetworkTier interface{} `json:"healthPlanNetworkTier,omitempty"` // The tier(s) for this network.
}

/*
[[HealthTopicContent]] is [[WebContent]] that is about some aspect of a health topic, e.g. a condition, its symptoms or treatments. Such content may be comprised of several parts or sections and use different types of media. Multiple instances of [[WebContent]] (and hence [[HealthTopicContent]]) can be related using [[hasPart]] / [[isPartOf]] where there is some kind of content hierarchy, and their content described with [[about]] and [[mentions]] e.g. building upon the existing [[MedicalCondition]] vocabulary.

*/
type HealthTopicContent struct {
	WebContent

	HasHealthAspect interface{} `json:"hasHealthAspect,omitempty"` // Indicates the aspect or aspects specifically addressed in some [[HealthTopicContent]]. For example, that the content is an overview, or that it talks about treatment, self-care, treatments or their side-effects.
}

// A high school.
type HighSchool struct {
	EducationalOrganization
}

// A Hindu temple.
type HinduTemple struct {
	PlaceOfWorship
}

// A store that sells materials useful or necessary for various hobbies.
type HobbyShop struct {
	Store
}

// A construction business.\n\nA HomeAndConstructionBusiness is a [[LocalBusiness]] that provides services around homes and buildings.\n\nAs a [[LocalBusiness]] it can be described as a [[provider]] of one or more [[Service]]\(s).
type HomeAndConstructionBusiness struct {
	LocalBusiness
}

// A home goods store.
type HomeGoodsStore struct {
	Store
}

// A hospital.
type Hospital struct {
	CivicStructure
	// TODO: EmergencyService
	// TODO: MedicalOrganization

	AvailableService        interface{} `json:"availableService,omitempty"`        // A medical service available from this provider.
	HealthcareReportingData interface{} `json:"healthcareReportingData,omitempty"` // Indicates data describing a hospital, e.g. a CDC [[CDCPMDRecord]] or as some kind of [[Dataset]].
	MedicalSpecialty        interface{} `json:"medicalSpecialty,omitempty"`        // A medical specialty of the provider.
}

/*
A hostel - cheap accommodation, often in shared dormitories.
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type Hostel struct {
	LodgingBusiness
}

/*
A hotel is an establishment that provides lodging paid on a short-term basis (Source: Wikipedia, the free encyclopedia, see http://en.wikipedia.org/wiki/Hotel).
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type Hotel struct {
	LodgingBusiness
}

/*
A hotel room is a single room in a hotel.
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type HotelRoom struct {
	Room

	Bed interface{} `json:"bed,omitempty"` /*
	The type of bed or beds included in the accommodation. For the single case of just one bed of a certain type, you use bed directly with a text.
	      If you want to indicate the quantity of a certain kind of bed, use an instance of BedDetails. For more detailed information, use the amenityFeature property.
	*/
	Occupancy interface{} `json:"occupancy,omitempty"` /*
	The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).
	Typical unit code(s): C62 for person
	*/
}

// A house is a building or structure that has the ability to be occupied for habitation by humans or other creatures (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/House">http://en.wikipedia.org/wiki/House</a>).
type House struct {
	Accommodation

	NumberOfRooms interface{} `json:"numberOfRooms,omitempty"` /*
	The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.
	Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.
	*/
}

// A house painting service.
type HousePainter struct {
	HomeAndConstructionBusiness
}

// Instructions that explain how to achieve a result by performing a sequence of steps.
type HowTo struct {
	CreativeWork

	EstimatedCost interface{} `json:"estimatedCost,omitempty"` // The estimated cost of the supply or supplies consumed when performing instructions.
	PerformTime   interface{} `json:"performTime,omitempty"`   // The length of time it takes to perform instructions or a direction (not including time to prepare the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
	PrepTime      interface{} `json:"prepTime,omitempty"`      // The length of time it takes to prepare the items to be used in instructions or a direction, in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
	Step          interface{} `json:"step,omitempty"`          // A single step item (as HowToStep, text, document, video, etc.) or a HowToSection.
	Steps         interface{} `json:"steps,omitempty"`         // A single step item (as HowToStep, text, document, video, etc.) or a HowToSection (originally misnamed 'steps'; 'step' is preferred).
	Supply        interface{} `json:"supply,omitempty"`        // A sub-property of instrument. A supply consumed when performing instructions or a direction.
	Tool          interface{} `json:"tool,omitempty"`          // A sub property of instrument. An object used (but not consumed) when performing instructions or a direction.
	TotalTime     interface{} `json:"totalTime,omitempty"`     // The total time required to perform instructions or a direction (including time to prepare the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
	Yield         interface{} `json:"yield,omitempty"`         // The quantity that results by performing instructions. For example, a paper airplane, 10 personalized candles.
}

// A direction indicating a single action to do in the instructions for how to achieve a result.
type HowToDirection struct {
	CreativeWork
	// TODO: ListItem

	AfterMedia  interface{} `json:"afterMedia,omitempty"`  // A media object representing the circumstances after performing this direction.
	BeforeMedia interface{} `json:"beforeMedia,omitempty"` // A media object representing the circumstances before performing this direction.
	DuringMedia interface{} `json:"duringMedia,omitempty"` // A media object representing the circumstances while performing this direction.
	PerformTime interface{} `json:"performTime,omitempty"` // The length of time it takes to perform instructions or a direction (not including time to prepare the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
	PrepTime    interface{} `json:"prepTime,omitempty"`    // The length of time it takes to prepare the items to be used in instructions or a direction, in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
	Supply      interface{} `json:"supply,omitempty"`      // A sub-property of instrument. A supply consumed when performing instructions or a direction.
	Tool        interface{} `json:"tool,omitempty"`        // A sub property of instrument. An object used (but not consumed) when performing instructions or a direction.
	TotalTime   interface{} `json:"totalTime,omitempty"`   // The total time required to perform instructions or a direction (including time to prepare the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
}

// An item used as either a tool or supply when performing the instructions for how to to achieve a result.
type HowToItem struct {
	ListItem

	RequiredQuantity interface{} `json:"requiredQuantity,omitempty"` // The required quantity of the item(s).
}

// A sub-grouping of steps in the instructions for how to achieve a result (e.g. steps for making a pie crust within a pie recipe).
type HowToSection struct {
	CreativeWork
	// TODO: ItemList
	// TODO: ListItem

	Steps interface{} `json:"steps,omitempty"` // A single step item (as HowToStep, text, document, video, etc.) or a HowToSection (originally misnamed 'steps'; 'step' is preferred).
}

// A step in the instructions for how to achieve a result. It is an ordered list with HowToDirection and/or HowToTip items.
type HowToStep struct {
	CreativeWork
	// TODO: ItemList
	// TODO: ListItem
}

// A supply consumed when performing the instructions for how to achieve a result.
type HowToSupply struct {
	HowToItem

	EstimatedCost interface{} `json:"estimatedCost,omitempty"` // The estimated cost of the supply or supplies consumed when performing instructions.
}

// An explanation in the instructions for how to achieve a result. It provides supplementary information about a technique, supply, author's preference, etc. It can explain what could be done, or what should not be done, but doesn't specify what should be done (see HowToDirection).
type HowToTip struct {
	CreativeWork
	// TODO: ListItem
}

// A tool used (but not consumed) when performing instructions for how to achieve a result.
type HowToTool struct {
	HowToItem
}

// A HyperToc represents a hypertext table of contents for complex media objects, such as [[VideoObject]], [[AudioObject]]. Items in the table of contents are indicated using the [[tocEntry]] property, and typed [[HyperTocEntry]]. For cases where the same larger work is split into multiple files, [[associatedMedia]] can be used on individual [[HyperTocEntry]] items.
type HyperToc struct {
	CreativeWork

	AssociatedMedia interface{} `json:"associatedMedia,omitempty"` // A media object that encodes this CreativeWork. This property is a synonym for encoding.
	TocEntry        interface{} `json:"tocEntry,omitempty"`        // Indicates a [[HyperTocEntry]] in a [[HyperToc]].
}

// A HyperToEntry is an item within a [[HyperToc]], which represents a hypertext table of contents for complex media objects, such as [[VideoObject]], [[AudioObject]]. The media object itself is indicated using [[associatedMedia]]. Each section of interest within that content can be described with a [[HyperTocEntry]], with associated [[startOffset]] and [[endOffset]]. When several entries are all from the same file, [[associatedMedia]] is used on the overarching [[HyperTocEntry]]; if the content has been split into multiple files, they can be referenced using [[associatedMedia]] on each [[HyperTocEntry]].
type HyperTocEntry struct {
	CreativeWork

	AssociatedMedia interface{} `json:"associatedMedia,omitempty"` // A media object that encodes this CreativeWork. This property is a synonym for encoding.
	TocContinuation interface{} `json:"tocContinuation,omitempty"` // A [[HyperTocEntry]] can have a [[tocContinuation]] indicated, which is another [[HyperTocEntry]] that would be the default next item to play or render.
	Utterances      interface{} `json:"utterances,omitempty"`      // Text of an utterances (spoken words, lyrics etc.) that occurs at a certain section of a media object, represented as a [[HyperTocEntry]].
}

// An ice cream shop.
type IceCreamShop struct {
	FoodEstablishment
}

// The act of intentionally disregarding the object. An agent ignores an object.
type IgnoreAction struct {
	AssessAction
}

// Web page type: Image gallery page.
type ImageGallery struct {
	MediaGallery
}

// An image file.
type ImageObject struct {
	MediaObject

	Caption              interface{} `json:"caption,omitempty"`              // The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the [[encodingFormat]].
	EmbeddedTextCaption  interface{} `json:"embeddedTextCaption,omitempty"`  // Represents textual captioning from a [[MediaObject]], e.g. text of a 'meme'.
	ExifData             interface{} `json:"exifData,omitempty"`             // exif data for this object.
	RepresentativeOfPage interface{} `json:"representativeOfPage,omitempty"` // Indicates whether this image is representative of the content of the page.
	Thumbnail            interface{} `json:"thumbnail,omitempty"`            // Thumbnail image for an image or video.
}

// A specific and exact (byte-for-byte) version of an [[ImageObject]]. Two byte-for-byte identical files, for the purposes of this type, considered identical. If they have different embedded metadata (e.g. XMP, EXIF) the files will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual content, do not affect this notion of identity.
type ImageObjectSnapshot struct {
	ImageObject
}

// Any medical imaging modality typically used for diagnostic purposes.
type ImagingTest struct {
	MedicalTest

	ImagingTechnique interface{} `json:"imagingTechnique,omitempty"` // Imaging technique used.
}

// A single, identifiable product instance (e.g. a laptop with a particular serial number).
type IndividualProduct struct {
	Product

	SerialNumber interface{} `json:"serialNumber,omitempty"` // The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a shortcut for the serial number of the product included in the offer.
}

// Classes of agents or pathogens that transmit infectious diseases. Enumerated type.
type InfectiousAgentClass struct {
	MedicalEnumeration
}

// An infectious disease is a clinically evident human disease resulting from the presence of pathogenic microbial agents, like pathogenic viruses, pathogenic bacteria, fungi, protozoa, multicellular parasites, and prions. To be considered an infectious disease, such pathogens are known to be able to cause this disease.
type InfectiousDisease struct {
	MedicalCondition

	InfectiousAgent      interface{} `json:"infectiousAgent,omitempty"`      // The actual infectious agent, such as a specific bacterium.
	InfectiousAgentClass interface{} `json:"infectiousAgentClass,omitempty"` // The class of infectious agent (bacteria, prion, etc.) that causes the disease.
	TransmissionMethod   interface{} `json:"transmissionMethod,omitempty"`   // How the disease spreads, either as a route or vector, for example 'direct contact', 'Aedes aegypti', etc.
}

// The act of notifying someone of information pertinent to them, with no expectation of a response.
type InformAction struct {
	CommunicateAction

	Event interface{} `json:"event,omitempty"` // Upcoming or past event associated with this place, organization, or action.
}

// The act of adding at a specific location in an ordered collection.
type InsertAction struct {
	AddAction

	ToLocation interface{} `json:"toLocation,omitempty"` // A sub property of location. The final location of the object or the agent after the action.
}

// The act of installing an application.
type InstallAction struct {
	ConsumeAction
}

// An Insurance agency.
type InsuranceAgency struct {
	FinancialService
}

// A utility class that serves as the umbrella for a number of 'intangible' things such as quantities, structured values, etc.
type Intangible struct {
	Thing
}

// Data type: Integer.
type Integer struct {
	Number
}

// The act of interacting with another person or organization.
type InteractAction struct {
	Action
}

// A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
type InteractionCounter struct {
	StructuredValue

	EndTime              interface{} `json:"endTime,omitempty"`              // The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
	InteractionService   interface{} `json:"interactionService,omitempty"`   // The WebSite or SoftwareApplication where the interactions took place.
	InteractionType      interface{} `json:"interactionType,omitempty"`      // The Action representing the type of interaction. For up votes, +1s, etc. use [[LikeAction]]. For down votes use [[DislikeAction]]. Otherwise, use the most specific Action.
	Location             interface{} `json:"location,omitempty"`             // The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
	StartTime            interface{} `json:"startTime,omitempty"`            // The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
	UserInteractionCount interface{} `json:"userInteractionCount,omitempty"` // The number of interactions for the CreativeWork using the WebSite or SoftwareApplication.
}

// An internet cafe.
type InternetCafe struct {
	LocalBusiness
}

// A company or fund that gathers capital from a number of investors to create a pool of money that is then re-invested into stocks, bonds and other assets.
type InvestmentFund struct {
	InvestmentOrDeposit
}

// A type of financial product that typically requires the client to transfer funds to a financial service in return for potential beneficial financial return.
type InvestmentOrDeposit struct {
	FinancialProduct

	Amount interface{} `json:"amount,omitempty"` // The amount of money.
}

// The act of asking someone to attend an event. Reciprocal of RsvpAction.
type InviteAction struct {
	CommunicateAction

	Event interface{} `json:"event,omitempty"` // Upcoming or past event associated with this place, organization, or action.
}

// A statement of the money due for goods or services; a bill.
type Invoice struct {
	Intangible

	AccountId            interface{} `json:"accountId,omitempty"`            // The identifier for the account the payment will be applied to.
	BillingPeriod        interface{} `json:"billingPeriod,omitempty"`        // The time interval used to compute the invoice.
	Broker               interface{} `json:"broker,omitempty"`               // An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
	Category             interface{} `json:"category,omitempty"`             // A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
	ConfirmationNumber   interface{} `json:"confirmationNumber,omitempty"`   // A number that confirms the given order or payment has been received.
	Customer             interface{} `json:"customer,omitempty"`             // Party placing the order or paying the invoice.
	MinimumPaymentDue    interface{} `json:"minimumPaymentDue,omitempty"`    // The minimum payment required at this time.
	PaymentDue           interface{} `json:"paymentDue,omitempty"`           // The date that payment is due.
	PaymentDueDate       interface{} `json:"paymentDueDate,omitempty"`       // The date that payment is due.
	PaymentMethod        interface{} `json:"paymentMethod,omitempty"`        // The name of the credit card or other method of payment for the order.
	PaymentMethodId      interface{} `json:"paymentMethodId,omitempty"`      // An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
	PaymentStatus        interface{} `json:"paymentStatus,omitempty"`        // The status of payment; whether the invoice has been paid or not.
	Provider             interface{} `json:"provider,omitempty"`             // The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
	ReferencesOrder      interface{} `json:"referencesOrder,omitempty"`      // The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice.
	ScheduledPaymentDate interface{} `json:"scheduledPaymentDate,omitempty"` // The date the invoice is scheduled to be paid.
	TotalPaymentDue      interface{} `json:"totalPaymentDue,omitempty"`      // The total amount due.
}

// A list of possible product availability options.
type ItemAvailability struct {
	Enumeration
}

// A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
type ItemList struct {
	Intangible

	ItemListElement interface{} `json:"itemListElement,omitempty"` // For itemListElement values, you can use simple strings (e.g. "Peter", "Paul", "Mary"), existing entities, or use ListItem.\n\nText values are best if the elements in the list are plain strings. Existing entities are best for a simple, unordered list of existing things in your data. ListItem is used with ordered lists when you want to provide additional context about the element in that list or when the same item might be in different places in different lists.\n\nNote: The order of elements in your mark-up is not sufficient for indicating the order or elements.  Use ListItem with a 'position' property in such cases.
	ItemListOrder   interface{} `json:"itemListOrder,omitempty"`   // Type of ordering (e.g. Ascending, Descending, Unordered).
	NumberOfItems   interface{} `json:"numberOfItems,omitempty"`   // The number of items in an ItemList. Note that some descriptions might not fully describe all items in a list (e.g., multi-page pagination); in such cases, the numberOfItems would be for the entire list.
}

// Enumerated for values for itemListOrder for indicating how an ordered ItemList is organized.
type ItemListOrderType struct {
	Enumeration
}

// A page devoted to a single item, such as a particular product or hotel.
type ItemPage struct {
	WebPage
}

// A jewelry store.
type JewelryStore struct {
	Store
}

// A listing that describes a job opening in a certain organization.
type JobPosting struct {
	Intangible

	ApplicantLocationRequirements interface{} `json:"applicantLocationRequirements,omitempty"` // The location(s) applicants can apply from. This is usually used for telecommuting jobs where the applicant does not need to be in a physical office. Note: This should not be used for citizenship or work visa requirements.
	ApplicationContact            interface{} `json:"applicationContact,omitempty"`            // Contact details for further information relevant to this job posting.
	BaseSalary                    interface{} `json:"baseSalary,omitempty"`                    // The base salary of the job or of an employee in an EmployeeRole.
	Benefits                      interface{} `json:"benefits,omitempty"`                      // Description of benefits associated with the job.
	DatePosted                    interface{} `json:"datePosted,omitempty"`                    // Publication date of an online listing.
	DirectApply                   interface{} `json:"directApply,omitempty"`                   // Indicates whether an [[url]] that is associated with a [[JobPosting]] enables direct application for the job, via the posting website. A job posting is considered to have directApply of [[True]] if an application process for the specified job can be directly initiated via the url(s) given (noting that e.g. multiple internet domains might nevertheless be involved at an implementation level). A value of [[False]] is appropriate if there is no clear path to applying directly online for the specified job, navigating directly from the JobPosting url(s) supplied.
	EducationRequirements         interface{} `json:"educationRequirements,omitempty"`         // Educational background needed for the position or Occupation.
	EligibilityToWorkRequirement  interface{} `json:"eligibilityToWorkRequirement,omitempty"`  // The legal requirements such as citizenship, visa and other documentation required for an applicant to this job.
	EmployerOverview              interface{} `json:"employerOverview,omitempty"`              // A description of the employer, career opportunities and work environment for this position.
	EmploymentType                interface{} `json:"employmentType,omitempty"`                // Type of employment (e.g. full-time, part-time, contract, temporary, seasonal, internship).
	EmploymentUnit                interface{} `json:"employmentUnit,omitempty"`                // Indicates the department, unit and/or facility where the employee reports and/or in which the job is to be performed.
	EstimatedSalary               interface{} `json:"estimatedSalary,omitempty"`               // An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
	ExperienceInPlaceOfEducation  interface{} `json:"experienceInPlaceOfEducation,omitempty"`  // Indicates whether a [[JobPosting]] will accept experience (as indicated by [[OccupationalExperienceRequirements]]) in place of its formal educational qualifications (as indicated by [[educationRequirements]]). If true, indicates that satisfying one of these requirements is sufficient.
	ExperienceRequirements        interface{} `json:"experienceRequirements,omitempty"`        // Description of skills and experience needed for the position or Occupation.
	HiringOrganization            interface{} `json:"hiringOrganization,omitempty"`            // Organization offering the job position.
	IncentiveCompensation         interface{} `json:"incentiveCompensation,omitempty"`         // Description of bonus and commission compensation aspects of the job.
	Incentives                    interface{} `json:"incentives,omitempty"`                    // Description of bonus and commission compensation aspects of the job.
	Industry                      interface{} `json:"industry,omitempty"`                      // The industry associated with the job position.
	JobBenefits                   interface{} `json:"jobBenefits,omitempty"`                   // Description of benefits associated with the job.
	JobImmediateStart             interface{} `json:"jobImmediateStart,omitempty"`             // An indicator as to whether a position is available for an immediate start.
	JobLocation                   interface{} `json:"jobLocation,omitempty"`                   // A (typically single) geographic location associated with the job position.
	JobLocationType               interface{} `json:"jobLocationType,omitempty"`               // A description of the job location (e.g TELECOMMUTE for telecommute jobs).
	JobStartDate                  interface{} `json:"jobStartDate,omitempty"`                  // The date on which a successful applicant for this job would be expected to start work. Choose a specific date in the future or use the jobImmediateStart property to indicate the position is to be filled as soon as possible.
	OccupationalCategory          interface{} `json:"occupationalCategory,omitempty"`          /*
	A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.\n
	Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
	*/
	PhysicalRequirement          interface{} `json:"physicalRequirement,omitempty"`          // A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
	Qualifications               interface{} `json:"qualifications,omitempty"`               // Specific qualifications required for this role or Occupation.
	RelevantOccupation           interface{} `json:"relevantOccupation,omitempty"`           // The Occupation for the JobPosting.
	Responsibilities             interface{} `json:"responsibilities,omitempty"`             // Responsibilities associated with this role or Occupation.
	SalaryCurrency               interface{} `json:"salaryCurrency,omitempty"`               // The currency (coded using [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) ) used for the main salary information in this job posting or for this employee.
	SecurityClearanceRequirement interface{} `json:"securityClearanceRequirement,omitempty"` // A description of any security clearance requirements of the job.
	SensoryRequirement           interface{} `json:"sensoryRequirement,omitempty"`           // A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
	Skills                       interface{} `json:"skills,omitempty"`                       // A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is desired or required to fulfill this role or to work in this occupation.
	SpecialCommitments           interface{} `json:"specialCommitments,omitempty"`           // Any special commitments associated with this job posting. Valid entries include VeteranCommit, MilitarySpouseCommit, etc.
	Title                        interface{} `json:"title,omitempty"`                        // The title of the job.
	TotalJobOpenings             interface{} `json:"totalJobOpenings,omitempty"`             // The number of positions open for this job posting. Use a positive integer. Do not use if the number of positions is unclear or not known.
	ValidThrough                 interface{} `json:"validThrough,omitempty"`                 // The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
	WorkHours                    interface{} `json:"workHours,omitempty"`                    // The typical working hours for this job (e.g. 1st shift, night shift, 8am-5pm).
}

// An agent joins an event/group with participants/friends at a location.\n\nRelated actions:\n\n* [[RegisterAction]]: Unlike RegisterAction, JoinAction refers to joining a group/team of people.\n* [[SubscribeAction]]: Unlike SubscribeAction, JoinAction does not imply that you'll be receiving updates.\n* [[FollowAction]]: Unlike FollowAction, JoinAction does not imply that you'll be polling for updates.
type JoinAction struct {
	InteractAction

	Event interface{} `json:"event,omitempty"` // Upcoming or past event associated with this place, organization, or action.
}

// The anatomical location at which two or more bones make contact.
type Joint struct {
	AnatomicalStructure

	BiomechnicalClass interface{} `json:"biomechnicalClass,omitempty"` // The biomechanical properties of the bone.
	FunctionalClass   interface{} `json:"functionalClass,omitempty"`   // The degree of mobility the joint allows.
	StructuralClass   interface{} `json:"structuralClass,omitempty"`   // The name given to how bone physically connects to each other.
}

// A lake (for example, Lake Pontrachain).
type LakeBodyOfWater struct {
	BodyOfWater
}

// A landform or physical feature.  Landform elements include mountains, plains, lakes, rivers, seascape and oceanic waterbody interface features such as bays, peninsulas, seas and so forth, including sub-aqueous terrain features such as submersed mountain ranges, volcanoes, and the great ocean basins.
type Landform struct {
	Place
}

// An historical landmark or building.
type LandmarksOrHistoricalBuildings struct {
	Place
}

// Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
type Language struct {
	Intangible
}

/*
The LearningResource type can be used to indicate [[CreativeWork]]s (whether physical or digital) that have a particular and explicit orientation towards learning, education, skill acquisition, and other educational purposes.

[[LearningResource]] is expected to be used as an addition to a primary type such as [[Book]], [[VideoObject]], [[Product]] etc.

[[EducationEvent]] serves a similar purpose for event-like things (e.g. a [[Trip]]). A [[LearningResource]] may be created as a result of an [[EducationEvent]], for example by recording one.
*/
type LearningResource struct {
	CreativeWork

	Assesses             interface{} `json:"assesses,omitempty"`             // The item being described is intended to assess the competency or learning outcome defined by the referenced term.
	CompetencyRequired   interface{} `json:"competencyRequired,omitempty"`   // Knowledge, skill, ability or personal attribute that must be demonstrated by a person or other entity in order to do something such as earn an Educational Occupational Credential or understand a LearningResource.
	EducationalAlignment interface{} `json:"educationalAlignment,omitempty"` /*
	An alignment to an established educational framework.

	This property should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
	*/
	EducationalLevel     interface{} `json:"educationalLevel,omitempty"`     // The level in terms of progression through an educational or training context. Examples of educational levels include 'beginner', 'intermediate' or 'advanced', and formal sets of level indicators.
	EducationalUse       interface{} `json:"educationalUse,omitempty"`       // The purpose of a work in the context of education; for example, 'assignment', 'group work'.
	LearningResourceType interface{} `json:"learningResourceType,omitempty"` // The predominant type or kind characterizing the learning resource. For example, 'presentation', 'handout'.
	Teaches              interface{} `json:"teaches,omitempty"`              // The item being described is intended to help a person learn the competency or learning outcome defined by the referenced term.
}

// An agent leaves an event / group with participants/friends at a location.\n\nRelated actions:\n\n* [[JoinAction]]: The antonym of LeaveAction.\n* [[UnRegisterAction]]: Unlike UnRegisterAction, LeaveAction implies leaving a group/team of people rather than a service.
type LeaveAction struct {
	InteractAction

	Event interface{} `json:"event,omitempty"` // Upcoming or past event associated with this place, organization, or action.
}

// A list of possible statuses for the legal force of a legislation.
type LegalForceStatus struct {
	StatusEnumeration
}

// A LegalService is a business that provides legally-oriented services, advice and representation, e.g. law firms.\n\nAs a [[LocalBusiness]] it can be described as a [[provider]] of one or more [[Service]]\(s).
type LegalService struct {
	LocalBusiness
}

// A list of possible levels for the legal validity of a legislation.
type LegalValueLevel struct {
	Enumeration
}

// A legal document such as an act, decree, bill, etc. (enforceable or not) or a component of a legal act (like an article).
type Legislation struct {
	CreativeWork

	Jurisdiction            interface{} `json:"jurisdiction,omitempty"`            // Indicates a legal jurisdiction, e.g. of some legislation, or where some government service is based.
	LegislationApplies      interface{} `json:"legislationApplies,omitempty"`      // Indicates that this legislation (or part of a legislation) somehow transfers another legislation in a different legislative context. This is an informative link, and it has no legal value. For legally-binding links of transposition, use the <a href="/legislationTransposes">legislationTransposes</a> property. For example an informative consolidated law of a European Union's member state "applies" the consolidated version of the European Directive implemented in it.
	LegislationChanges      interface{} `json:"legislationChanges,omitempty"`      // Another legislation that this legislation changes. This encompasses the notions of amendment, replacement, correction, repeal, or other types of change. This may be a direct change (textual or non-textual amendment) or a consequential or indirect change. The property is to be used to express the existence of a change relationship between two acts rather than the existence of a consolidated version of the text that shows the result of the change. For consolidation relationships, use the <a href="/legislationConsolidates">legislationConsolidates</a> property.
	LegislationConsolidates interface{} `json:"legislationConsolidates,omitempty"` // Indicates another legislation taken into account in this consolidated legislation (which is usually the product of an editorial process that revises the legislation). This property should be used multiple times to refer to both the original version or the previous consolidated version, and to the legislations making the change.
	LegislationDate         interface{} `json:"legislationDate,omitempty"`         // The date of adoption or signature of the legislation. This is the date at which the text is officially aknowledged to be a legislation, even though it might not even be published or in force.
	LegislationDateVersion  interface{} `json:"legislationDateVersion,omitempty"`  // The point-in-time at which the provided description of the legislation is valid (e.g. : when looking at the law on the 2016-04-07 (= dateVersion), I get the consolidation of 2015-04-12 of the "National Insurance Contributions Act 2015")
	LegislationIdentifier   interface{} `json:"legislationIdentifier,omitempty"`   // An identifier for the legislation. This can be either a string-based identifier, like the CELEX at EU level or the NOR in France, or a web-based, URL/URI identifier, like an ELI (European Legislation Identifier) or an URN-Lex.
	LegislationJurisdiction interface{} `json:"legislationJurisdiction,omitempty"` // The jurisdiction from which the legislation originates.
	LegislationLegalForce   interface{} `json:"legislationLegalForce,omitempty"`   // Whether the legislation is currently in force, not in force, or partially in force.
	LegislationPassedBy     interface{} `json:"legislationPassedBy,omitempty"`     // The person or organization that originally passed or made the law : typically parliament (for primary legislation) or government (for secondary legislation). This indicates the "legal author" of the law, as opposed to its physical author.
	LegislationResponsible  interface{} `json:"legislationResponsible,omitempty"`  // An individual or organization that has some kind of responsibility for the legislation. Typically the ministry who is/was in charge of elaborating the legislation, or the adressee for potential questions about the legislation once it is published.
	LegislationTransposes   interface{} `json:"legislationTransposes,omitempty"`   // Indicates that this legislation (or part of legislation) fulfills the objectives set by another legislation, by passing appropriate implementation measures. Typically, some legislations of European Union's member states or regions transpose European Directives. This indicates a legally binding link between the 2 legislations.
	LegislationType         interface{} `json:"legislationType,omitempty"`         // The type of the legislation. Examples of values are "law", "act", "directive", "decree", "regulation", "statutory instrument", "loi organique", "règlement grand-ducal", etc., depending on the country.
}

// A specific object or file containing a Legislation. Note that the same Legislation can be published in multiple files. For example, a digitally signed PDF, a plain PDF and an HTML version.
type LegislationObject struct {
	Legislation
	// TODO: MediaObject

	LegislationLegalValue interface{} `json:"legislationLegalValue,omitempty"` // The legal value of this legislation file. The same legislation can be written in multiple files with different legal values. Typically a digitally signed PDF have a "stronger" legal value than the HTML file of the same act.
}

// A legislative building&#x2014;for example, the state capitol.
type LegislativeBuilding struct {
	GovernmentBuilding
}

// The act of providing an object under an agreement that it will be returned at a later date. Reciprocal of BorrowAction.\n\nRelated actions:\n\n* [[BorrowAction]]: Reciprocal of LendAction.
type LendAction struct {
	TransferAction

	Borrower interface{} `json:"borrower,omitempty"` // A sub property of participant. The person that borrows the object being lent.
}

// A library.
type Library struct {
	LocalBusiness
}

// A [[LibrarySystem]] is a collaborative system amongst several libraries.
type LibrarySystem struct {
	Organization
}

// A process of care involving exercise, changes to diet, fitness routines, and other lifestyle changes aimed at improving a health condition.
type LifestyleModification struct {
	MedicalEntity
}

// A short band of tough, flexible, fibrous connective tissue that functions to connect multiple bones, cartilages, and structurally support joints.
type Ligament struct {
	AnatomicalStructure
}

// The act of expressing a positive sentiment about the object. An agent likes an object (a proposition, topic or theme) with participants.
type LikeAction struct {
	ReactAction
}

// A Role that represents a Web link e.g. as expressed via the 'url' property. Its linkRelationship property can indicate URL-based and plain textual link types e.g. those in IANA link registry or others such as 'amphtml'. This structure provides a placeholder where details from HTML's link element can be represented outside of HTML, e.g. in JSON-LD feeds.
type LinkRole struct {
	Role

	InLanguage       interface{} `json:"inLanguage,omitempty"`       // The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
	LinkRelationship interface{} `json:"linkRelationship,omitempty"` // Indicates the relationship type of a Web link.
}

// A shop that sells alcoholic drinks such as wine, beer, whisky and other spirits.
type LiquorStore struct {
	Store
}

// An list item, e.g. a step in a checklist or how-to description.
type ListItem struct {
	Intangible

	Item         interface{} `json:"item,omitempty"`         // An entity represented by an entry in a list or data feed (e.g. an 'artist' in a list of 'artists')’.
	NextItem     interface{} `json:"nextItem,omitempty"`     // A link to the ListItem that follows the current one.
	Position     interface{} `json:"position,omitempty"`     // The position of an item in a series or sequence of items.
	PreviousItem interface{} `json:"previousItem,omitempty"` // A link to the ListItem that preceeds the current one.
}

// The act of consuming audio content.
type ListenAction struct {
	ConsumeAction
}

// Event type: Literary event.
type LiteraryEvent struct {
	Event
}

// A [[LiveBlogPosting]] is a [[BlogPosting]] intended to provide a rolling textual coverage of an ongoing event through continuous updates.
type LiveBlogPosting struct {
	BlogPosting

	CoverageEndTime   interface{} `json:"coverageEndTime,omitempty"`   // The time when the live blog will stop covering the Event. Note that coverage may continue after the Event concludes.
	CoverageStartTime interface{} `json:"coverageStartTime,omitempty"` // The time when the live blog will begin covering the Event. Note that coverage may begin before the Event's start time. The LiveBlogPosting may also be created before coverage begins.
	LiveBlogUpdate    interface{} `json:"liveBlogUpdate,omitempty"`    // An update to the LiveBlog.
}

// A financial product for the loaning of an amount of money, or line of credit, under agreed terms and charges.
type LoanOrCredit struct {
	FinancialProduct

	Amount             interface{} `json:"amount,omitempty"`             // The amount of money.
	Currency           interface{} `json:"currency,omitempty"`           // The currency in which the monetary amount is expressed.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	GracePeriod        interface{} `json:"gracePeriod,omitempty"`        // The period of time after any due date that the borrower has to fulfil its obligations before a default (failure to pay) is deemed to have occurred.
	LoanRepaymentForm  interface{} `json:"loanRepaymentForm,omitempty"`  // A form of paying back money previously borrowed from a lender. Repayment usually takes the form of periodic payments that normally include part principal plus interest in each payment.
	LoanTerm           interface{} `json:"loanTerm,omitempty"`           // The duration of the loan or credit agreement.
	LoanType           interface{} `json:"loanType,omitempty"`           // The type of a loan or credit.
	RecourseLoan       interface{} `json:"recourseLoan,omitempty"`       // The only way you get the money back in the event of default is the security. Recourse is where you still have the opportunity to go back to the borrower for the rest of the money.
	RenegotiableLoan   interface{} `json:"renegotiableLoan,omitempty"`   // Whether the terms for payment of interest can be renegotiated during the life of the loan.
	RequiredCollateral interface{} `json:"requiredCollateral,omitempty"` // Assets required to secure loan or credit repayments. It may take form of third party pledge, goods, financial instruments (cash, securities, etc.)
}

// A particular physical business or branch of an organization. Examples of LocalBusiness include a restaurant, a particular branch of a restaurant chain, a branch of a bank, a medical practice, a club, a bowling alley, etc.
type LocalBusiness struct {
	Organization
	// TODO: Place

	BranchOf           interface{} `json:"branchOf,omitempty"`           // The larger organization that this local business is a branch of, if any. Not to be confused with (anatomical)[[branch]].
	CurrenciesAccepted interface{} `json:"currenciesAccepted,omitempty"` // The currency accepted.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	OpeningHours       interface{} `json:"openingHours,omitempty"`       // The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with days, then times per day. Multiple days can be listed with commas ',' separating each day. Day or time ranges are specified using a hyphen '-'.\n\n* Days are specified using the following two-letter combinations: ```Mo```, ```Tu```, ```We```, ```Th```, ```Fr```, ```Sa```, ```Su```.\n* Times are specified using 24:00 format. For example, 3pm is specified as ```15:00```, 10am as ```10:00```. \n* Here is an example: <code>&lt;time itemprop="openingHours" datetime=&quot;Tu,Th 16:00-20:00&quot;&gt;Tuesdays and Thursdays 4-8pm&lt;/time&gt;</code>.\n* If a business is open 7 days a week, then it can be specified as <code>&lt;time itemprop=&quot;openingHours&quot; datetime=&quot;Mo-Su&quot;&gt;Monday through Sunday, all day&lt;/time&gt;</code>.
	PaymentAccepted    interface{} `json:"paymentAccepted,omitempty"`    // Cash, Credit Card, Cryptocurrency, Local Exchange Tradings System, etc.
	PriceRange         interface{} `json:"priceRange,omitempty"`         // The price range of the business, for example ```$$$```.
}

// Specifies a location feature by providing a structured value representing a feature of an accommodation as a property-value pair of varying degrees of formality.
type LocationFeatureSpecification struct {
	PropertyValue

	HoursAvailable interface{} `json:"hoursAvailable,omitempty"` // The hours during which this service or contact is available.
	ValidFrom      interface{} `json:"validFrom,omitempty"`      // The date when the item becomes valid.
	ValidThrough   interface{} `json:"validThrough,omitempty"`   // The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
}

// A locksmith.
type Locksmith struct {
	HomeAndConstructionBusiness
}

// A lodging business, such as a motel, hotel, or inn.
type LodgingBusiness struct {
	LocalBusiness

	AmenityFeature    interface{} `json:"amenityFeature,omitempty"`    // An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs.
	Audience          interface{} `json:"audience,omitempty"`          // An intended audience, i.e. a group for whom something was created.
	AvailableLanguage interface{} `json:"availableLanguage,omitempty"` // A language someone may use with or at the item, service or place. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[inLanguage]]
	CheckinTime       interface{} `json:"checkinTime,omitempty"`       // The earliest someone may check into a lodging establishment.
	CheckoutTime      interface{} `json:"checkoutTime,omitempty"`      // The latest someone may check out of a lodging establishment.
	NumberOfRooms     interface{} `json:"numberOfRooms,omitempty"`     /*
	The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.
	Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.
	*/
	PetsAllowed interface{} `json:"petsAllowed,omitempty"` // Indicates whether pets are allowed to enter the accommodation or lodging business. More detailed information can be put in a text value.
	StarRating  interface{} `json:"starRating,omitempty"`  // An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
}

// A reservation for lodging at a hotel, motel, inn, etc.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
type LodgingReservation struct {
	Reservation

	CheckinTime            interface{} `json:"checkinTime,omitempty"`            // The earliest someone may check into a lodging establishment.
	CheckoutTime           interface{} `json:"checkoutTime,omitempty"`           // The latest someone may check out of a lodging establishment.
	LodgingUnitDescription interface{} `json:"lodgingUnitDescription,omitempty"` // A full description of the lodging unit.
	LodgingUnitType        interface{} `json:"lodgingUnitType,omitempty"`        // Textual description of the unit type (including suite vs. room, size of bed, etc.).
	NumAdults              interface{} `json:"numAdults,omitempty"`              // The number of adults staying in the unit.
	NumChildren            interface{} `json:"numChildren,omitempty"`            // The number of children staying in the unit.
}

// The act of being defeated in a competitive activity.
type LoseAction struct {
	AchieveAction

	Winner interface{} `json:"winner,omitempty"` // A sub property of participant. The winner of the action.
}

// A type of blood vessel that specifically carries lymph fluid unidirectionally toward the heart.
type LymphaticVessel struct {
	Vessel

	OriginatesFrom interface{} `json:"originatesFrom,omitempty"` // The vasculature the lymphatic structure originates, or afferents, from.
	RegionDrained  interface{} `json:"regionDrained,omitempty"`  // The anatomical or organ system drained by this vessel; generally refers to a specific part of an organ.
	RunsTo         interface{} `json:"runsTo,omitempty"`         // The vasculature the lymphatic structure runs, or efferents, to.
}

// A book, document, or piece of music written by hand rather than typed or printed.
type Manuscript struct {
	CreativeWork
}

// A map.
type Map struct {
	CreativeWork

	MapType interface{} `json:"mapType,omitempty"` // Indicates the kind of Map, from the MapCategoryType Enumeration.
}

// An enumeration of several kinds of Map.
type MapCategoryType struct {
	Enumeration
}

// The act of marrying a person.
type MarryAction struct {
	InteractAction
}

// Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'.
type Mass struct {
	Quantity
}

// A math solver which is capable of solving a subset of mathematical problems.
type MathSolver struct {
	CreativeWork

	MathExpression interface{} `json:"mathExpression,omitempty"` // A mathematical expression (e.g. 'x^2-3x=0') that may be solved for a specific variable, simplified, or transformed. This can take many formats, e.g. LaTeX, Ascii-Math, or math as you would write with a keyboard.
}

// The maximum dosing schedule considered safe for a drug or supplement as recommended by an authority or by the drug/supplement's manufacturer. Capture the recommending authority in the recognizingAuthority property of MedicalEntity.
type MaximumDoseSchedule struct {
	DoseSchedule
}

// Enumeration of common measurement types (or dimensions), for example "chest" for a person, "inseam" for pants, "gauge" for screws, or "wheel" for bicycles.
type MeasurementTypeEnumeration struct {
	Enumeration
}

// Web page type: Media gallery page. A mixed-media page that can contains media such as images, videos, and other multimedia.
type MediaGallery struct {
	CollectionPage
}

//  Codes for use with the [[mediaAuthenticityCategory]] property, indicating the authenticity of a media object (in the context of how it was published or shared). In general these codes are not mutually exclusive, although some combinations (such as 'original' versus 'transformed', 'edited' and 'staged') would be contradictory if applied in the same [[MediaReview]]. Note that the application of these codes is with regard to a piece of media shared or published in a particular context.
type MediaManipulationRatingEnumeration struct {
	Enumeration
}

// A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
type MediaObject struct {
	CreativeWork

	AssociatedArticle   interface{} `json:"associatedArticle,omitempty"`   // A NewsArticle associated with the Media Object.
	Bitrate             interface{} `json:"bitrate,omitempty"`             // The bitrate of the media object.
	ContentSize         interface{} `json:"contentSize,omitempty"`         // File size in (mega/kilo) bytes.
	ContentUrl          interface{} `json:"contentUrl,omitempty"`          // Actual bytes of the media object, for example the image file or video file.
	Duration            interface{} `json:"duration,omitempty"`            // The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	EmbedUrl            interface{} `json:"embedUrl,omitempty"`            // A URL pointing to a player for a specific video. In general, this is the information in the ```src``` element of an ```embed``` tag and should not be the same as the content of the ```loc``` tag.
	EncodesCreativeWork interface{} `json:"encodesCreativeWork,omitempty"` // The CreativeWork encoded by this media object.
	EncodingFormat      interface{} `json:"encodingFormat,omitempty"`      /*
	Media type typically expressed using a MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml) and [MDN reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).

	In cases where a [[CreativeWork]] has several media type representations, [[encoding]] can be used to indicate each [[MediaObject]] alongside particular [[encodingFormat]] information.

	Unregistered or niche encoding and file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.
	*/
	EndTime          interface{} `json:"endTime,omitempty"`          // The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
	Height           interface{} `json:"height,omitempty"`           // The height of the item.
	IneligibleRegion interface{} `json:"ineligibleRegion,omitempty"` /*
	The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.\n\nSee also [[eligibleRegion]].

	*/
	InterpretedAsClaim   interface{} `json:"interpretedAsClaim,omitempty"`   // Used to indicate a specific claim contained, implied, translated or refined from the content of a [[MediaObject]] or other [[CreativeWork]]. The interpreting party can be indicated using [[claimInterpreter]].
	PlayerType           interface{} `json:"playerType,omitempty"`           // Player type required&#x2014;for example, Flash or Silverlight.
	ProductionCompany    interface{} `json:"productionCompany,omitempty"`    // The production company or studio responsible for the item e.g. series, video game, episode etc.
	RegionsAllowed       interface{} `json:"regionsAllowed,omitempty"`       // The regions where the media is allowed. If not specified, then it's assumed to be allowed everywhere. Specify the countries in [ISO 3166 format](http://en.wikipedia.org/wiki/ISO_3166).
	RequiresSubscription interface{} `json:"requiresSubscription,omitempty"` // Indicates if use of the media require a subscription  (either paid or free). Allowed values are ```true``` or ```false``` (note that an earlier version had 'yes', 'no').
	Sha256               interface{} `json:"sha256,omitempty"`               // The [SHA-2](https://en.wikipedia.org/wiki/SHA-2) SHA256 hash of the content of the item. For example, a zero-length input has value 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
	StartTime            interface{} `json:"startTime,omitempty"`            // The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
	UploadDate           interface{} `json:"uploadDate,omitempty"`           // Date when this media object was uploaded to this site.
	Width                interface{} `json:"width,omitempty"`                // The width of the item.
}

/*
A [[MediaReview]] is a more specialized form of Review dedicated to the evaluation of media content online, typically in the context of fact-checking and misinformation.
    For more general reviews of media in the broader sense, use [[UserReview]], [[CriticReview]] or other [[Review]] types. This definition is
    a work in progress. While the [[MediaManipulationRatingEnumeration]] list reflects significant community review amongst fact-checkers and others working
    to combat misinformation, the specific structures for representing media objects, their versions and publication context, is still evolving. Similarly, best practices for the relationship between [[MediaReview]] and [[ClaimReview]] markup has not yet been finalized.
*/
type MediaReview struct {
	Review

	MediaAuthenticityCategory       interface{} `json:"mediaAuthenticityCategory,omitempty"`       // Indicates a MediaManipulationRatingEnumeration classification of a media object (in the context of how it was published or shared).
	OriginalMediaContextDescription interface{} `json:"originalMediaContextDescription,omitempty"` // Describes, in a [[MediaReview]] when dealing with [[DecontextualizedContent]], background information that can contribute to better interpretation of the [[MediaObject]].
	OriginalMediaLink               interface{} `json:"originalMediaLink,omitempty"`               // Link to the page containing an original version of the content, or directly to an online copy of the original [[MediaObject]] content, e.g. video file.
}

// Represents an item or group of closely related items treated as a unit for the sake of evaluation in a [[MediaReview]]. Authorship etc. apply to the items rather than to the curation/grouping or reviewing party.
type MediaReviewItem struct {
	CreativeWork

	MediaItemAppearance interface{} `json:"mediaItemAppearance,omitempty"` // In the context of a [[MediaReview]], indicates specific media item(s) that are grouped using a [[MediaReviewItem]].
}

// A subscription which allows a user to access media including audio, video, books, etc.
type MediaSubscription struct {
	Intangible

	Authenticator       interface{} `json:"authenticator,omitempty"`       // The Organization responsible for authenticating the user's subscription. For example, many media apps require a cable/satellite provider to authenticate your subscription before playing media.
	ExpectsAcceptanceOf interface{} `json:"expectsAcceptanceOf,omitempty"` // An Offer which must be accepted before the user can perform the Action. For example, the user may need to buy a movie before being able to watch it.
}

// Target audiences for medical web pages.
type MedicalAudience struct {
	Audience
	// TODO: PeopleAudience
}

// Target audiences types for medical web pages. Enumerated type.
type MedicalAudienceType struct {
	MedicalEnumeration
}

// A particular physical or virtual business of an organization for medical purposes. Examples of MedicalBusiness include differents business run by health professionals.
type MedicalBusiness struct {
	LocalBusiness
}

// The causative agent(s) that are responsible for the pathophysiologic process that eventually results in a medical condition, symptom or sign. In this schema, unless otherwise specified this is meant to be the proximate cause of the medical condition, symptom or sign. The proximate cause is defined as the causative agent that most directly results in the medical condition, symptom or sign. For example, the HIV virus could be considered a cause of AIDS. Or in a diagnostic context, if a patient fell and sustained a hip fracture and two days later sustained a pulmonary embolism which eventuated in a cardiac arrest, the cause of the cardiac arrest (the proximate cause) would be the pulmonary embolism and not the fall. Medical causes can include cardiovascular, chemical, dermatologic, endocrine, environmental, gastroenterologic, genetic, hematologic, gynecologic, iatrogenic, infectious, musculoskeletal, neurologic, nutritional, obstetric, oncologic, otolaryngologic, pharmacologic, psychiatric, pulmonary, renal, rheumatologic, toxic, traumatic, or urologic causes; medical conditions can be causes as well.
type MedicalCause struct {
	MedicalEntity

	CauseOf interface{} `json:"causeOf,omitempty"` // The condition, complication, symptom, sign, etc. caused.
}

// A facility, often associated with a hospital or medical school, that is devoted to the specific diagnosis and/or healthcare. Previously limited to outpatients but with evolution it may be open to inpatients as well.
type MedicalClinic struct {
	MedicalBusiness
	// TODO: MedicalOrganization

	AvailableService interface{} `json:"availableService,omitempty"` // A medical service available from this provider.
	MedicalSpecialty interface{} `json:"medicalSpecialty,omitempty"` // A medical specialty of the provider.
}

// A code for a medical entity.
type MedicalCode struct {
	CategoryCode
	// TODO: MedicalIntangible

	CodeValue    interface{} `json:"codeValue,omitempty"`    // A short textual code that uniquely identifies the value.
	CodingSystem interface{} `json:"codingSystem,omitempty"` // The coding system, e.g. 'ICD-10'.
}

// Any condition of the human body that affects the normal functioning of a person, whether physically or mentally. Includes diseases, injuries, disabilities, disorders, syndromes, etc.
type MedicalCondition struct {
	MedicalEntity

	AssociatedAnatomy     interface{} `json:"associatedAnatomy,omitempty"`     // The anatomy of the underlying organ system or structures associated with this entity.
	DifferentialDiagnosis interface{} `json:"differentialDiagnosis,omitempty"` // One of a set of differential diagnoses for the condition. Specifically, a closely-related or competing diagnosis typically considered later in the cognitive process whereby this medical condition is distinguished from others most likely responsible for a similar collection of signs and symptoms to reach the most parsimonious diagnosis or diagnoses in a patient.
	Drug                  interface{} `json:"drug,omitempty"`                  // Specifying a drug or medicine used in a medication procedure.
	Epidemiology          interface{} `json:"epidemiology,omitempty"`          // The characteristics of associated patients, such as age, gender, race etc.
	ExpectedPrognosis     interface{} `json:"expectedPrognosis,omitempty"`     // The likely outcome in either the short term or long term of the medical condition.
	NaturalProgression    interface{} `json:"naturalProgression,omitempty"`    // The expected progression of the condition if it is not treated and allowed to progress naturally.
	Pathophysiology       interface{} `json:"pathophysiology,omitempty"`       // Changes in the normal mechanical, physical, and biochemical functions that are associated with this activity or condition.
	PossibleComplication  interface{} `json:"possibleComplication,omitempty"`  // A possible unexpected and unfavorable evolution of a medical condition. Complications may include worsening of the signs or symptoms of the disease, extension of the condition to other organ systems, etc.
	PossibleTreatment     interface{} `json:"possibleTreatment,omitempty"`     // A possible treatment to address this condition, sign or symptom.
	PrimaryPrevention     interface{} `json:"primaryPrevention,omitempty"`     // A preventative therapy used to prevent an initial occurrence of the medical condition, such as vaccination.
	RiskFactor            interface{} `json:"riskFactor,omitempty"`            // A modifiable or non-modifiable factor that increases the risk of a patient contracting this condition, e.g. age,  coexisting condition.
	SecondaryPrevention   interface{} `json:"secondaryPrevention,omitempty"`   // A preventative therapy used to prevent reoccurrence of the medical condition after an initial episode of the condition.
	SignOrSymptom         interface{} `json:"signOrSymptom,omitempty"`         // A sign or symptom of this condition. Signs are objective or physically observable manifestations of the medical condition while symptoms are the subjective experience of the medical condition.
	Stage                 interface{} `json:"stage,omitempty"`                 // The stage of the condition, if applicable.
	Status                interface{} `json:"status,omitempty"`                // The status of the study (enumerated).
	TypicalTest           interface{} `json:"typicalTest,omitempty"`           // A medical test typically performed given this condition.
}

// A stage of a medical condition, such as 'Stage IIIa'.
type MedicalConditionStage struct {
	MedicalIntangible

	StageAsNumber  interface{} `json:"stageAsNumber,omitempty"`  // The stage represented as a number, e.g. 3.
	SubStageSuffix interface{} `json:"subStageSuffix,omitempty"` // The substage, e.g. 'a' for Stage IIIa.
}

// A condition or factor that serves as a reason to withhold a certain medical therapy. Contraindications can be absolute (there are no reasonable circumstances for undertaking a course of action) or relative (the patient is at higher risk of complications, but that these risks may be outweighed by other considerations or mitigated by other measures).
type MedicalContraindication struct {
	MedicalEntity
}

// Any object used in a medical capacity, such as to diagnose or treat a patient.
type MedicalDevice struct {
	MedicalEntity

	AdverseOutcome        interface{} `json:"adverseOutcome,omitempty"`        // A possible complication and/or side effect of this therapy. If it is known that an adverse outcome is serious (resulting in death, disability, or permanent damage; requiring hospitalization; or is otherwise life-threatening or requires immediate medical attention), tag it as a seriouseAdverseOutcome instead.
	Contraindication      interface{} `json:"contraindication,omitempty"`      // A contraindication for this therapy.
	PostOp                interface{} `json:"postOp,omitempty"`                // A description of the postoperative procedures, care, and/or followups for this device.
	PreOp                 interface{} `json:"preOp,omitempty"`                 // A description of the workup, testing, and other preparations required before implanting this device.
	Procedure             interface{} `json:"procedure,omitempty"`             // A description of the procedure involved in setting up, using, and/or installing the device.
	SeriousAdverseOutcome interface{} `json:"seriousAdverseOutcome,omitempty"` // A possible serious complication and/or serious side effect of this therapy. Serious adverse outcomes include those that are life-threatening; result in death, disability, or permanent damage; require hospitalization or prolong existing hospitalization; cause congenital anomalies or birth defects; or jeopardize the patient and may require medical or surgical intervention to prevent one of the outcomes in this definition.
}

// Categories of medical devices, organized by the purpose or intended use of the device.
type MedicalDevicePurpose struct {
	MedicalEnumeration
}

// The most generic type of entity related to health and the practice of medicine.
type MedicalEntity struct {
	Thing

	Code                 interface{} `json:"code,omitempty"`                 // A medical code for the entity, taken from a controlled vocabulary or ontology such as ICD-9, DiseasesDB, MeSH, SNOMED-CT, RxNorm, etc.
	Funding              interface{} `json:"funding,omitempty"`              // A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
	Guideline            interface{} `json:"guideline,omitempty"`            // A medical guideline related to this entity.
	LegalStatus          interface{} `json:"legalStatus,omitempty"`          // The drug or supplement's legal status, including any controlled substance schedules that apply.
	MedicineSystem       interface{} `json:"medicineSystem,omitempty"`       // The system of medicine that includes this MedicalEntity, for example 'evidence-based', 'homeopathic', 'chiropractic', etc.
	RecognizingAuthority interface{} `json:"recognizingAuthority,omitempty"` // If applicable, the organization that officially recognizes this entity as part of its endorsed system of medicine.
	RelevantSpecialty    interface{} `json:"relevantSpecialty,omitempty"`    // If applicable, a medical specialty in which this entity is relevant.
	Study                interface{} `json:"study,omitempty"`                // A medical study or trial related to this entity.
}

// Enumerations related to health and the practice of medicine: A concept that is used to attribute a quality to another concept, as a qualifier, a collection of items or a listing of all of the elements of a set in medicine practice.
type MedicalEnumeration struct {
	Enumeration
}

// Level of evidence for a medical guideline. Enumerated type.
type MedicalEvidenceLevel struct {
	MedicalEnumeration
}

// Any recommendation made by a standard society (e.g. ACC/AHA) or consensus statement that denotes how to diagnose and treat a particular condition. Note: this type should be used to tag the actual guideline recommendation; if the guideline recommendation occurs in a larger scholarly article, use MedicalScholarlyArticle to tag the overall article, not this type. Note also: the organization making the recommendation should be captured in the recognizingAuthority base property of MedicalEntity.
type MedicalGuideline struct {
	MedicalEntity

	EvidenceLevel    interface{} `json:"evidenceLevel,omitempty"`    // Strength of evidence of the data used to formulate the guideline (enumerated).
	EvidenceOrigin   interface{} `json:"evidenceOrigin,omitempty"`   // Source of the data used to formulate the guidance, e.g. RCT, consensus opinion, etc.
	GuidelineDate    interface{} `json:"guidelineDate,omitempty"`    // Date on which this guideline's recommendation was made.
	GuidelineSubject interface{} `json:"guidelineSubject,omitempty"` // The medical conditions, treatments, etc. that are the subject of the guideline.
}

// A guideline contraindication that designates a process as harmful and where quality of the data supporting the contraindication is sound.
type MedicalGuidelineContraindication struct {
	MedicalGuideline
}

// A guideline recommendation that is regarded as efficacious and where quality of the data supporting the recommendation is sound.
type MedicalGuidelineRecommendation struct {
	MedicalGuideline

	RecommendationStrength interface{} `json:"recommendationStrength,omitempty"` // Strength of the guideline's recommendation (e.g. 'class I').
}

// Any medical imaging modality typically used for diagnostic purposes. Enumerated type.
type MedicalImagingTechnique struct {
	MedicalEnumeration
}

// A condition or factor that indicates use of a medical therapy, including signs, symptoms, risk factors, anatomical states, etc.
type MedicalIndication struct {
	MedicalEntity
}

// A utility class that serves as the umbrella for a number of 'intangible' things in the medical space.
type MedicalIntangible struct {
	MedicalEntity
}

// An observational study is a type of medical study that attempts to infer the possible effect of a treatment through observation of a cohort of subjects over a period of time. In an observational study, the assignment of subjects into treatment groups versus control groups is outside the control of the investigator. This is in contrast with controlled studies, such as the randomized controlled trials represented by MedicalTrial, where each subject is randomly assigned to a treatment group or a control group before the start of the treatment.
type MedicalObservationalStudy struct {
	MedicalStudy

	StudyDesign interface{} `json:"studyDesign,omitempty"` // Specifics about the observational study design (enumerated).
}

// Design models for observational medical studies. Enumerated type.
type MedicalObservationalStudyDesign struct {
	MedicalEnumeration
}

// A medical organization (physical or not), such as hospital, institution or clinic.
type MedicalOrganization struct {
	Organization

	HealthPlanNetworkId    interface{} `json:"healthPlanNetworkId,omitempty"`    // Name or unique ID of network. (Networks are often reused across different insurance plans).
	IsAcceptingNewPatients interface{} `json:"isAcceptingNewPatients,omitempty"` // Whether the provider is accepting new patients.
	MedicalSpecialty       interface{} `json:"medicalSpecialty,omitempty"`       // A medical specialty of the provider.
}

// A process of care used in either a diagnostic, therapeutic, preventive or palliative capacity that relies on invasive (surgical), non-invasive, or other techniques.
type MedicalProcedure struct {
	MedicalEntity

	BodyLocation  interface{} `json:"bodyLocation,omitempty"`  // Location in the body of the anatomical structure.
	Followup      interface{} `json:"followup,omitempty"`      // Typical or recommended followup care after the procedure is performed.
	HowPerformed  interface{} `json:"howPerformed,omitempty"`  // How the procedure is performed.
	Preparation   interface{} `json:"preparation,omitempty"`   // Typical preparation that a patient must undergo before having the procedure performed.
	ProcedureType interface{} `json:"procedureType,omitempty"` // The type of procedure, for example Surgical, Noninvasive, or Percutaneous.
	Status        interface{} `json:"status,omitempty"`        // The status of the study (enumerated).
}

// An enumeration that describes different types of medical procedures.
type MedicalProcedureType struct {
	MedicalEnumeration
}

// A complex mathematical calculation requiring an online calculator, used to assess prognosis. Note: use the url property of Thing to record any URLs for online calculators.
type MedicalRiskCalculator struct {
	MedicalRiskEstimator
}

// Any rule set or interactive tool for estimating the risk of developing a complication or condition.
type MedicalRiskEstimator struct {
	MedicalEntity

	EstimatesRiskOf    interface{} `json:"estimatesRiskOf,omitempty"`    // The condition, complication, or symptom whose risk is being estimated.
	IncludedRiskFactor interface{} `json:"includedRiskFactor,omitempty"` // A modifiable or non-modifiable risk factor included in the calculation, e.g. age, coexisting condition.
}

// A risk factor is anything that increases a person's likelihood of developing or contracting a disease, medical condition, or complication.
type MedicalRiskFactor struct {
	MedicalEntity

	IncreasesRiskOf interface{} `json:"increasesRiskOf,omitempty"` // The condition, complication, etc. influenced by this factor.
}

// A simple system that adds up the number of risk factors to yield a score that is associated with prognosis, e.g. CHAD score, TIMI risk score.
type MedicalRiskScore struct {
	MedicalRiskEstimator

	Algorithm interface{} `json:"algorithm,omitempty"` // The algorithm or rules to follow to compute the score.
}

// A scholarly article in the medical domain.
type MedicalScholarlyArticle struct {
	ScholarlyArticle

	PublicationType interface{} `json:"publicationType,omitempty"` // The type of the medical article, taken from the US NLM MeSH publication type catalog. See also [MeSH documentation](http://www.nlm.nih.gov/mesh/pubtypes.html).
}

// Any physical manifestation of a person's medical condition discoverable by objective diagnostic tests or physical examination.
type MedicalSign struct {
	MedicalSignOrSymptom

	IdentifyingExam interface{} `json:"identifyingExam,omitempty"` // A physical examination that can identify this sign.
	IdentifyingTest interface{} `json:"identifyingTest,omitempty"` // A diagnostic test that can identify this sign.
}

// Any feature associated or not with a medical condition. In medicine a symptom is generally subjective while a sign is objective.
type MedicalSignOrSymptom struct {
	MedicalCondition

	PossibleTreatment interface{} `json:"possibleTreatment,omitempty"` // A possible treatment to address this condition, sign or symptom.
}

// Any specific branch of medical science or practice. Medical specialities include clinical specialties that pertain to particular organ systems and their respective disease states, as well as allied health specialties. Enumerated type.
type MedicalSpecialty struct {
	MedicalEnumeration
	// TODO: Specialty
}

// A medical study is an umbrella type covering all kinds of research studies relating to human medicine or health, including observational studies and interventional trials and registries, randomized, controlled or not. When the specific type of study is known, use one of the extensions of this type, such as MedicalTrial or MedicalObservationalStudy. Also, note that this type should be used to mark up data that describes the study itself; to tag an article that publishes the results of a study, use MedicalScholarlyArticle. Note: use the code property of MedicalEntity to store study IDs, e.g. clinicaltrials.gov ID.
type MedicalStudy struct {
	MedicalEntity

	HealthCondition interface{} `json:"healthCondition,omitempty"` // Specifying the health condition(s) of a patient, medical study, or other target audience.
	Sponsor         interface{} `json:"sponsor,omitempty"`         // A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
	Status          interface{} `json:"status,omitempty"`          // The status of the study (enumerated).
	StudyLocation   interface{} `json:"studyLocation,omitempty"`   // The location in which the study is taking/took place.
	StudySubject    interface{} `json:"studySubject,omitempty"`    // A subject of the study, i.e. one of the medical conditions, therapies, devices, drugs, etc. investigated by the study.
}

// The status of a medical study. Enumerated type.
type MedicalStudyStatus struct {
	MedicalEnumeration
}

// Any complaint sensed and expressed by the patient (therefore defined as subjective)  like stomachache, lower-back pain, or fatigue.
type MedicalSymptom struct {
	MedicalSignOrSymptom
}

// Any medical test, typically performed for diagnostic purposes.
type MedicalTest struct {
	MedicalEntity

	AffectedBy     interface{} `json:"affectedBy,omitempty"`     // Drugs that affect the test's results.
	NormalRange    interface{} `json:"normalRange,omitempty"`    // Range of acceptable values for a typical patient, when applicable.
	SignDetected   interface{} `json:"signDetected,omitempty"`   // A sign detected by the test.
	UsedToDiagnose interface{} `json:"usedToDiagnose,omitempty"` // A condition the test is used to diagnose.
	UsesDevice     interface{} `json:"usesDevice,omitempty"`     // Device used to perform the test.
}

// Any collection of tests commonly ordered together.
type MedicalTestPanel struct {
	MedicalTest

	SubTest interface{} `json:"subTest,omitempty"` // A component test of the panel.
}

// Any medical intervention designed to prevent, treat, and cure human diseases and medical conditions, including both curative and palliative therapies. Medical therapies are typically processes of care relying upon pharmacotherapy, behavioral therapy, supportive therapy (with fluid or nutrition for example), or detoxification (e.g. hemodialysis) aimed at improving or preventing a health condition.
type MedicalTherapy struct {
	TherapeuticProcedure

	Contraindication      interface{} `json:"contraindication,omitempty"`      // A contraindication for this therapy.
	DuplicateTherapy      interface{} `json:"duplicateTherapy,omitempty"`      // A therapy that duplicates or overlaps this one.
	SeriousAdverseOutcome interface{} `json:"seriousAdverseOutcome,omitempty"` // A possible serious complication and/or serious side effect of this therapy. Serious adverse outcomes include those that are life-threatening; result in death, disability, or permanent damage; require hospitalization or prolong existing hospitalization; cause congenital anomalies or birth defects; or jeopardize the patient and may require medical or surgical intervention to prevent one of the outcomes in this definition.
}

// A medical trial is a type of medical study that uses scientific process used to compare the safety and efficacy of medical therapies or medical procedures. In general, medical trials are controlled and subjects are allocated at random to the different treatment and/or control groups.
type MedicalTrial struct {
	MedicalStudy

	TrialDesign interface{} `json:"trialDesign,omitempty"` // Specifics about the trial design (enumerated).
}

// Design models for medical trials. Enumerated type.
type MedicalTrialDesign struct {
	MedicalEnumeration
}

// A web page that provides medical information.
type MedicalWebPage struct {
	WebPage

	Aspect          interface{} `json:"aspect,omitempty"`          // An aspect of medical practice that is considered on the page, such as 'diagnosis', 'treatment', 'causes', 'prognosis', 'etiology', 'epidemiology', etc.
	MedicalAudience interface{} `json:"medicalAudience,omitempty"` // Medical audience for page.
}

// Systems of medical practice.
type MedicineSystem struct {
	MedicalEnumeration
}

/*
A meeting room, conference room, or conference hall is a room provided for singular events such as business conferences and meetings (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Conference_hall">http://en.wikipedia.org/wiki/Conference_hall</a>).
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type MeetingRoom struct {
	Room
}

// A men's clothing store.
type MensClothingStore struct {
	Store
}

// A structured representation of food or drink items available from a FoodEstablishment.
type Menu struct {
	CreativeWork

	HasMenuItem    interface{} `json:"hasMenuItem,omitempty"`    // A food or drink item contained in a menu or menu section.
	HasMenuSection interface{} `json:"hasMenuSection,omitempty"` // A subgrouping of the menu (by dishes, course, serving time period, etc.).
}

// A food or drink item listed in a menu or menu section.
type MenuItem struct {
	Intangible

	MenuAddOn interface{} `json:"menuAddOn,omitempty"` // Additional menu item(s) such as a side dish of salad or side order of fries that can be added to this menu item. Additionally it can be a menu section containing allowed add-on menu items for this menu item.
	Nutrition interface{} `json:"nutrition,omitempty"` // Nutrition information about the recipe or menu item.
	Offers    interface{} `json:"offers,omitempty"`    /*
	An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.

	*/
	SuitableForDiet interface{} `json:"suitableForDiet,omitempty"` // Indicates a dietary restriction or guideline for which this recipe or menu item is suitable, e.g. diabetic, halal etc.
}

// A sub-grouping of food or drink items in a menu. E.g. courses (such as 'Dinner', 'Breakfast', etc.), specific type of dishes (such as 'Meat', 'Vegan', 'Drinks', etc.), or some other classification made by the menu provider.
type MenuSection struct {
	CreativeWork

	HasMenuItem    interface{} `json:"hasMenuItem,omitempty"`    // A food or drink item contained in a menu or menu section.
	HasMenuSection interface{} `json:"hasMenuSection,omitempty"` // A subgrouping of the menu (by dishes, course, serving time period, etc.).
}

// Enumerates several kinds of product return policies.
type MerchantReturnEnumeration struct {
	Enumeration
}

// A MerchantReturnPolicy provides information about product return policies associated with an [[Organization]], [[Product]], or [[Offer]].
type MerchantReturnPolicy struct {
	Intangible

	AdditionalProperty interface{} `json:"additionalProperty,omitempty"` /*
	A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.\n\nNote: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
	*/
	ApplicableCountry                       interface{} `json:"applicableCountry,omitempty"`                       // A country where a particular merchant return policy applies to, for example the two-letter ISO 3166-1 alpha-2 country code.
	CustomerRemorseReturnFees               interface{} `json:"customerRemorseReturnFees,omitempty"`               // The type of return fees if the product is returned due to customer remorse.
	CustomerRemorseReturnLabelSource        interface{} `json:"customerRemorseReturnLabelSource,omitempty"`        // The method (from an enumeration) by which the customer obtains a return shipping label for a product returned due to customer remorse.
	CustomerRemorseReturnShippingFeesAmount interface{} `json:"customerRemorseReturnShippingFeesAmount,omitempty"` // The amount of shipping costs if a product is returned due to customer remorse. Applicable when property [[customerRemorseReturnFees]] equals [[ReturnShippingFees]].
	InStoreReturnsOffered                   interface{} `json:"inStoreReturnsOffered,omitempty"`                   // Are in-store returns offered? (for more advanced return methods use the [[returnMethod]] property)
	ItemCondition                           interface{} `json:"itemCondition,omitempty"`                           // A predefined value from OfferItemCondition specifying the condition of the product or service, or the products or services included in the offer. Also used for product return policies to specify the condition of products accepted for returns.
	ItemDefectReturnFees                    interface{} `json:"itemDefectReturnFees,omitempty"`                    // The type of return fees for returns of defect products.
	ItemDefectReturnLabelSource             interface{} `json:"itemDefectReturnLabelSource,omitempty"`             // The method (from an enumeration) by which the customer obtains a return shipping label for a defect product.
	ItemDefectReturnShippingFeesAmount      interface{} `json:"itemDefectReturnShippingFeesAmount,omitempty"`      // Amount of shipping costs for defect product returns. Applicable when property [[itemDefectReturnFees]] equals [[ReturnShippingFees]].
	MerchantReturnDays                      interface{} `json:"merchantReturnDays,omitempty"`                      // Specifies either a fixed return date or the number of days (from the delivery date) that a product can be returned. Used when the [[returnPolicyCategory]] property is specified as [[MerchantReturnFiniteReturnWindow]].
	MerchantReturnLink                      interface{} `json:"merchantReturnLink,omitempty"`                      // Specifies a Web page or service by URL, for product returns.
	RefundType                              interface{} `json:"refundType,omitempty"`                              // A refund type, from an enumerated list.
	RestockingFee                           interface{} `json:"restockingFee,omitempty"`                           // Use [[MonetaryAmount]] to specify a fixed restocking fee for product returns, or use [[Number]] to specify a percentage of the product price paid by the customer.
	ReturnFees                              interface{} `json:"returnFees,omitempty"`                              // The type of return fees for purchased products (for any return reason)
	ReturnLabelSource                       interface{} `json:"returnLabelSource,omitempty"`                       // The method (from an enumeration) by which the customer obtains a return shipping label for a product returned for any reason.
	ReturnMethod                            interface{} `json:"returnMethod,omitempty"`                            // The type of return method offered, specified from an enumeration.
	ReturnPolicyCategory                    interface{} `json:"returnPolicyCategory,omitempty"`                    // Specifies an applicable return policy (from an enumeration).
	ReturnPolicyCountry                     interface{} `json:"returnPolicyCountry,omitempty"`                     // The country where the product has to be sent to for returns, for example "Ireland" using the [[name]] property of [[Country]]. You can also provide the two-letter [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1). Note that this can be different from the country where the product was originally shipped from or sent too.
	ReturnPolicySeasonalOverride            interface{} `json:"returnPolicySeasonalOverride,omitempty"`            // Seasonal override of a return policy.
	ReturnShippingFeesAmount                interface{} `json:"returnShippingFeesAmount,omitempty"`                // Amount of shipping costs for product returns (for any reason). Applicable when property [[returnFees]] equals [[ReturnShippingFees]].
}

// A seasonal override of a return policy, for example used for holidays.
type MerchantReturnPolicySeasonalOverride struct {
	Intangible

	EndDate              interface{} `json:"endDate,omitempty"`              // The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	MerchantReturnDays   interface{} `json:"merchantReturnDays,omitempty"`   // Specifies either a fixed return date or the number of days (from the delivery date) that a product can be returned. Used when the [[returnPolicyCategory]] property is specified as [[MerchantReturnFiniteReturnWindow]].
	ReturnPolicyCategory interface{} `json:"returnPolicyCategory,omitempty"` // Specifies an applicable return policy (from an enumeration).
	StartDate            interface{} `json:"startDate,omitempty"`            // The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
}

// A single message from a sender to one or more organizations or people.
type Message struct {
	CreativeWork

	BccRecipient      interface{} `json:"bccRecipient,omitempty"`      // A sub property of recipient. The recipient blind copied on a message.
	CcRecipient       interface{} `json:"ccRecipient,omitempty"`       // A sub property of recipient. The recipient copied on a message.
	DateRead          interface{} `json:"dateRead,omitempty"`          // The date/time at which the message has been read by the recipient if a single recipient exists.
	DateReceived      interface{} `json:"dateReceived,omitempty"`      // The date/time the message was received if a single recipient exists.
	DateSent          interface{} `json:"dateSent,omitempty"`          // The date/time at which the message was sent.
	MessageAttachment interface{} `json:"messageAttachment,omitempty"` // A CreativeWork attached to the message.
	Recipient         interface{} `json:"recipient,omitempty"`         // A sub property of participant. The participant who is at the receiving end of the action.
	Sender            interface{} `json:"sender,omitempty"`            // A sub property of participant. The participant who is at the sending end of the action.
	ToRecipient       interface{} `json:"toRecipient,omitempty"`       // A sub property of recipient. The recipient who was directly sent the message.
}

// A middle school (typically for children aged around 11-14, although this varies somewhat).
type MiddleSchool struct {
	EducationalOrganization
}

// A software application designed specifically to work well on a mobile device such as a telephone.
type MobileApplication struct {
	SoftwareApplication

	CarrierRequirements interface{} `json:"carrierRequirements,omitempty"` // Specifies specific carrier(s) requirements for the application (e.g. an application may only work on a specific carrier network).
}

// A store that sells mobile phones and related accessories.
type MobilePhoneStore struct {
	Store
}

// Any constitutionally or isotopically distinct atom, molecule, ion, ion pair, radical, radical ion, complex, conformer etc., identifiable as a separately distinguishable entity.
type MolecularEntity struct {
	BioChemEntity

	ChemicalRole                interface{} `json:"chemicalRole,omitempty"`                // A role played by the BioChemEntity within a chemical context.
	InChI                       interface{} `json:"inChI,omitempty"`                       // Non-proprietary identifier for molecular entity that can be used in printed and electronic data sources thus enabling easier linking of diverse data compilations.
	InChIKey                    interface{} `json:"inChIKey,omitempty"`                    // InChIKey is a hashed version of the full InChI (using the SHA-256 algorithm).
	IupacName                   interface{} `json:"iupacName,omitempty"`                   // Systematic method of naming chemical compounds as recommended by the International Union of Pure and Applied Chemistry (IUPAC).
	MolecularFormula            interface{} `json:"molecularFormula,omitempty"`            // The empirical formula is the simplest whole number ratio of all the atoms in a molecule.
	MolecularWeight             interface{} `json:"molecularWeight,omitempty"`             // This is the molecular weight of the entity being described, not of the parent. Units should be included in the form '&lt;Number&gt; &lt;unit&gt;', for example '12 amu' or as '&lt;QuantitativeValue&gt;.
	MonoisotopicMolecularWeight interface{} `json:"monoisotopicMolecularWeight,omitempty"` // The monoisotopic mass is the sum of the masses of the atoms in a molecule using the unbound, ground-state, rest mass of the principal (most abundant) isotope for each element instead of the isotopic average mass. Please include the units the form '&lt;Number&gt; &lt;unit&gt;', for example '770.230488 g/mol' or as '&lt;QuantitativeValue&gt;.
	PotentialUse                interface{} `json:"potentialUse,omitempty"`                // Intended use of the BioChemEntity by humans.
	Smiles                      interface{} `json:"smiles,omitempty"`                      // A specification in form of a line notation for describing the structure of chemical species using short ASCII strings.  Double bond stereochemistry \ indicators may need to be escaped in the string in formats where the backslash is an escape character.
}

// A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]] Types to describe the price of an Offer, Invoice, etc.
type MonetaryAmount struct {
	StructuredValue

	Currency     interface{} `json:"currency,omitempty"`     // The currency in which the monetary amount is expressed.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	MaxValue     interface{} `json:"maxValue,omitempty"`     // The upper value of some characteristic or property.
	MinValue     interface{} `json:"minValue,omitempty"`     // The lower value of some characteristic or property.
	ValidFrom    interface{} `json:"validFrom,omitempty"`    // The date when the item becomes valid.
	ValidThrough interface{} `json:"validThrough,omitempty"` // The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
	Value        interface{} `json:"value,omitempty"`        // The value of the quantitative value or property value node.\n\n* For [[QuantitativeValue]] and [[MonetaryAmount]], the recommended type for values is 'Number'.\n* For [[PropertyValue]], it can be 'Text;', 'Number', 'Boolean', or 'StructuredValue'.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
}

// A statistical distribution of monetary amounts.
type MonetaryAmountDistribution struct {
	QuantitativeValueDistribution

	Currency interface{} `json:"currency,omitempty"` // The currency in which the monetary amount is expressed.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
}

// A monetary grant.
type MonetaryGrant struct {
	Grant

	Amount interface{} `json:"amount,omitempty"` // The amount of money.
	Funder interface{} `json:"funder,omitempty"` // A person or organization that supports (sponsors) something through some kind of financial contribution.
}

// The act of transferring money from one place to another place. This may occur electronically or physically.
type MoneyTransfer struct {
	TransferAction

	Amount          interface{} `json:"amount,omitempty"`          // The amount of money.
	BeneficiaryBank interface{} `json:"beneficiaryBank,omitempty"` // A bank or bank’s branch, financial institution or international financial institution operating the beneficiary’s bank account or releasing funds for the beneficiary.
}

// A loan in which property or real estate is used as collateral. (A loan securitized against some real estate).
type MortgageLoan struct {
	LoanOrCredit

	DomiciledMortgage         interface{} `json:"domiciledMortgage,omitempty"`         // Whether borrower is a resident of the jurisdiction where the property is located.
	LoanMortgageMandateAmount interface{} `json:"loanMortgageMandateAmount,omitempty"` // Amount of mortgage mandate that can be converted into a proper mortgage at a later stage.
}

// A mosque.
type Mosque struct {
	PlaceOfWorship
}

/*
A motel.
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type Motel struct {
	LodgingBusiness
}

// A motorcycle or motorbike is a single-track, two-wheeled motor vehicle.
type Motorcycle struct {
	Vehicle
}

// A motorcycle dealer.
type MotorcycleDealer struct {
	AutomotiveBusiness
}

// A motorcycle repair shop.
type MotorcycleRepair struct {
	AutomotiveBusiness
}

// A motorized bicycle is a bicycle with an attached motor used to power the vehicle, or to assist with pedaling.
type MotorizedBicycle struct {
	Vehicle
}

// A mountain, like Mount Whitney or Mount Everest.
type Mountain struct {
	Landform
}

// The act of an agent relocating to a place.\n\nRelated actions:\n\n* [[TransferAction]]: Unlike TransferAction, the subject of the move is a living Person or Organization rather than an inanimate object.
type MoveAction struct {
	Action

	FromLocation interface{} `json:"fromLocation,omitempty"` // A sub property of location. The original location of the object or the agent before the action.
	ToLocation   interface{} `json:"toLocation,omitempty"`   // A sub property of location. The final location of the object or the agent after the action.
}

// A movie.
type Movie struct {
	CreativeWork

	Actor           interface{} `json:"actor,omitempty"`           // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Actors          interface{} `json:"actors,omitempty"`          // An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
	CountryOfOrigin interface{} `json:"countryOfOrigin,omitempty"` /*
	The country of origin of something, including products as well as creative  works such as movie and TV content.

	In the case of TV and movie, this would be the country of the principle offices of the production company or individual responsible for the movie. For other kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties such as [[contentLocation]] and [[locationCreated]] may be more applicable.

	In the case of products, the country of origin of the product. The exact interpretation of this may vary by context and product type, and cannot be fully enumerated here.
	*/
	Director          interface{} `json:"director,omitempty"`          // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	Directors         interface{} `json:"directors,omitempty"`         // A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
	Duration          interface{} `json:"duration,omitempty"`          // The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	MusicBy           interface{} `json:"musicBy,omitempty"`           // The composer of the soundtrack.
	ProductionCompany interface{} `json:"productionCompany,omitempty"` // The production company or studio responsible for the item e.g. series, video game, episode etc.
	SubtitleLanguage  interface{} `json:"subtitleLanguage,omitempty"`  // Languages in which subtitles/captions are available, in [IETF BCP 47 standard format](http://tools.ietf.org/html/bcp47).
	TitleEIDR         interface{} `json:"titleEIDR,omitempty"`         /*
	An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]] representing at the most general/abstract level, a work of film or television.

	For example, the motion picture known as "Ghostbusters" has a titleEIDR of  "10.5240/7EC7-228A-510A-053E-CBB8-J". This title (or work) may have several variants, which EIDR calls "edits". See [[editEIDR]].

	Since schema.org types like [[Movie]] and [[TVEpisode]] can be used for both works and their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general description), or alongside [[editEIDR]] for a more edit-specific description.
	*/
	Trailer interface{} `json:"trailer,omitempty"` // The trailer of a movie or tv/radio series, season, episode, etc.
}

// A short segment/part of a movie.
type MovieClip struct {
	Clip
}

// A movie rental store.
type MovieRentalStore struct {
	Store
}

// A series of movies. Included movies can be indicated with the hasPart property.
type MovieSeries struct {
	CreativeWorkSeries

	Actor             interface{} `json:"actor,omitempty"`             // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Actors            interface{} `json:"actors,omitempty"`            // An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
	Director          interface{} `json:"director,omitempty"`          // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	Directors         interface{} `json:"directors,omitempty"`         // A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
	MusicBy           interface{} `json:"musicBy,omitempty"`           // The composer of the soundtrack.
	ProductionCompany interface{} `json:"productionCompany,omitempty"` // The production company or studio responsible for the item e.g. series, video game, episode etc.
	Trailer           interface{} `json:"trailer,omitempty"`           // The trailer of a movie or tv/radio series, season, episode, etc.
}

// A movie theater.
type MovieTheater struct {
	CivicStructure
	// TODO: EntertainmentBusiness

	ScreenCount interface{} `json:"screenCount,omitempty"` // The number of screens in the movie theater.
}

// A moving company.
type MovingCompany struct {
	HomeAndConstructionBusiness
}

// A muscle is an anatomical structure consisting of a contractile form of tissue that animals use to effect movement.
type Muscle struct {
	AnatomicalStructure

	Antagonist   interface{} `json:"antagonist,omitempty"`   // The muscle whose action counteracts the specified muscle.
	BloodSupply  interface{} `json:"bloodSupply,omitempty"`  // The blood vessel that carries blood from the heart to the muscle.
	Insertion    interface{} `json:"insertion,omitempty"`    // The place of attachment of a muscle, or what the muscle moves.
	MuscleAction interface{} `json:"muscleAction,omitempty"` // The movement the muscle generates.
	Nerve        interface{} `json:"nerve,omitempty"`        // The underlying innervation associated with the muscle.
}

// A museum.
type Museum struct {
	CivicStructure
}

// A collection of music tracks.
type MusicAlbum struct {
	MusicPlaylist

	AlbumProductionType interface{} `json:"albumProductionType,omitempty"` // Classification of the album by it's type of content: soundtrack, live album, studio album, etc.
	AlbumRelease        interface{} `json:"albumRelease,omitempty"`        // A release of this album.
	AlbumReleaseType    interface{} `json:"albumReleaseType,omitempty"`    // The kind of release which this album is: single, EP or album.
	ByArtist            interface{} `json:"byArtist,omitempty"`            // The artist that performed this album or recording.
}

// Classification of the album by it's type of content: soundtrack, live album, studio album, etc.
type MusicAlbumProductionType struct {
	Enumeration
}

// The kind of release which this album is: single, EP or album.
type MusicAlbumReleaseType struct {
	Enumeration
}

// A musical composition.
type MusicComposition struct {
	CreativeWork

	Composer             interface{} `json:"composer,omitempty"`             // The person or organization who wrote a composition, or who is the composer of a work performed at some event.
	FirstPerformance     interface{} `json:"firstPerformance,omitempty"`     // The date and place the work was first performed.
	IncludedComposition  interface{} `json:"includedComposition,omitempty"`  // Smaller compositions included in this work (e.g. a movement in a symphony).
	IswcCode             interface{} `json:"iswcCode,omitempty"`             // The International Standard Musical Work Code for the composition.
	Lyricist             interface{} `json:"lyricist,omitempty"`             // The person who wrote the words.
	Lyrics               interface{} `json:"lyrics,omitempty"`               // The words in the song.
	MusicArrangement     interface{} `json:"musicArrangement,omitempty"`     // An arrangement derived from the composition.
	MusicCompositionForm interface{} `json:"musicCompositionForm,omitempty"` // The type of composition (e.g. overture, sonata, symphony, etc.).
	MusicalKey           interface{} `json:"musicalKey,omitempty"`           // The key, mode, or scale this composition uses.
	RecordedAs           interface{} `json:"recordedAs,omitempty"`           // An audio recording of the work.
}

// Event type: Music event.
type MusicEvent struct {
	Event
}

// A musical group, such as a band, an orchestra, or a choir. Can also be a solo musician.
type MusicGroup struct {
	PerformingGroup

	Album            interface{} `json:"album,omitempty"`            // A music album.
	Albums           interface{} `json:"albums,omitempty"`           // A collection of music albums.
	Genre            interface{} `json:"genre,omitempty"`            // Genre of the creative work, broadcast channel or group.
	MusicGroupMember interface{} `json:"musicGroupMember,omitempty"` // A member of a music group&#x2014;for example, John, Paul, George, or Ringo.
	Track            interface{} `json:"track,omitempty"`            // A music recording (track)&#x2014;usually a single song. If an ItemList is given, the list should contain items of type MusicRecording.
	Tracks           interface{} `json:"tracks,omitempty"`           // A music recording (track)&#x2014;usually a single song.
}

// A collection of music tracks in playlist form.
type MusicPlaylist struct {
	CreativeWork

	NumTracks interface{} `json:"numTracks,omitempty"` // The number of tracks in this album or playlist.
	Track     interface{} `json:"track,omitempty"`     // A music recording (track)&#x2014;usually a single song. If an ItemList is given, the list should contain items of type MusicRecording.
	Tracks    interface{} `json:"tracks,omitempty"`    // A music recording (track)&#x2014;usually a single song.
}

// A music recording (track), usually a single song.
type MusicRecording struct {
	CreativeWork

	ByArtist    interface{} `json:"byArtist,omitempty"`    // The artist that performed this album or recording.
	Duration    interface{} `json:"duration,omitempty"`    // The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	InAlbum     interface{} `json:"inAlbum,omitempty"`     // The album to which this recording belongs.
	InPlaylist  interface{} `json:"inPlaylist,omitempty"`  // The playlist to which this recording belongs.
	IsrcCode    interface{} `json:"isrcCode,omitempty"`    // The International Standard Recording Code for the recording.
	RecordingOf interface{} `json:"recordingOf,omitempty"` // The composition this track is a recording of.
}

// A MusicRelease is a specific release of a music album.
type MusicRelease struct {
	MusicPlaylist

	CatalogNumber      interface{} `json:"catalogNumber,omitempty"`      // The catalog number for the release.
	CreditedTo         interface{} `json:"creditedTo,omitempty"`         // The group the release is credited to if different than the byArtist. For example, Red and Blue is credited to "Stefani Germanotta Band", but by Lady Gaga.
	Duration           interface{} `json:"duration,omitempty"`           // The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	MusicReleaseFormat interface{} `json:"musicReleaseFormat,omitempty"` // Format of this release (the type of recording media used, ie. compact disc, digital media, LP, etc.).
	RecordLabel        interface{} `json:"recordLabel,omitempty"`        // The label that issued the release.
	ReleaseOf          interface{} `json:"releaseOf,omitempty"`          // The album this is a release of.
}

// Format of this release (the type of recording media used, ie. compact disc, digital media, LP, etc.).
type MusicReleaseFormatType struct {
	Enumeration
}

// A music store.
type MusicStore struct {
	Store
}

// A music venue.
type MusicVenue struct {
	CivicStructure
}

// A music video file.
type MusicVideoObject struct {
	MediaObject
}

// Organization: Non-governmental Organization.
type NGO struct {
	Organization
}

// NLNonprofitType: Non-profit organization type originating from the Netherlands.
type NLNonprofitType struct {
	NonprofitType
}

// A nail salon.
type NailSalon struct {
	HealthAndBeautyBusiness
}

// A common pathway for the electrochemical nerve impulses that are transmitted along each of the axons.
type Nerve struct {
	AnatomicalStructure

	Branch      interface{} `json:"branch,omitempty"`      // The branches that delineate from the nerve bundle. Not to be confused with [[branchOf]].
	NerveMotor  interface{} `json:"nerveMotor,omitempty"`  // The neurological pathway extension that involves muscle control.
	SensoryUnit interface{} `json:"sensoryUnit,omitempty"` // The neurological pathway extension that inputs and sends information to the brain or spinal cord.
	SourcedFrom interface{} `json:"sourcedFrom,omitempty"` // The neurological pathway that originates the neurons.
}

/*
A NewsArticle is an article whose content reports news, or provides background context and supporting materials for understanding the news.

A more detailed overview of [schema.org News markup](/docs/news.html) is also available.
*/
type NewsArticle struct {
	Article

	Dateline interface{} `json:"dateline,omitempty"` /*
	A [dateline](https://en.wikipedia.org/wiki/Dateline) is a brief piece of text included in news articles that describes where and when the story was written or filed though the date is often omitted. Sometimes only a placename is provided.

	Structured representations of dateline-related information can also be expressed more explicitly using [[locationCreated]] (which represents where a work was created e.g. where a news report was written).  For location depicted or described in the content, use [[contentLocation]].

	Dateline summaries are oriented more towards human readers than towards automated processing, and can vary substantially. Some examples: "BEIRUT, Lebanon, June 2.", "Paris, France", "December 19, 2017 11:43AM Reporting from Washington", "Beijing/Moscow", "QUEZON CITY, Philippines".

	*/
	PrintColumn  interface{} `json:"printColumn,omitempty"`  // The number of the column in which the NewsArticle appears in the print edition.
	PrintEdition interface{} `json:"printEdition,omitempty"` // The edition of the print product in which the NewsArticle appears.
	PrintPage    interface{} `json:"printPage,omitempty"`    // If this NewsArticle appears in print, this field indicates the name of the page on which the article is found. Please note that this field is intended for the exact page name (e.g. A5, B18).
	PrintSection interface{} `json:"printSection,omitempty"` // If this NewsArticle appears in print, this field indicates the print section in which the article appeared.
}

// A News/Media organization such as a newspaper or TV station.
type NewsMediaOrganization struct {
	Organization

	ActionableFeedbackPolicy        interface{} `json:"actionableFeedbackPolicy,omitempty"`        // For a [[NewsMediaOrganization]] or other news-related [[Organization]], a statement about public engagement activities (for news media, the newsroom’s), including involving the public - digitally or otherwise -- in coverage decisions, reporting and activities after publication.
	CorrectionsPolicy               interface{} `json:"correctionsPolicy,omitempty"`               // For an [[Organization]] (e.g. [[NewsMediaOrganization]]), a statement describing (in news media, the newsroom’s) disclosure and correction policy for errors.
	DiversityPolicy                 interface{} `json:"diversityPolicy,omitempty"`                 // Statement on diversity policy by an [[Organization]] e.g. a [[NewsMediaOrganization]]. For a [[NewsMediaOrganization]], a statement describing the newsroom’s diversity policy on both staffing and sources, typically providing staffing data.
	DiversityStaffingReport         interface{} `json:"diversityStaffingReport,omitempty"`         // For an [[Organization]] (often but not necessarily a [[NewsMediaOrganization]]), a report on staffing diversity issues. In a news context this might be for example ASNE or RTDNA (US) reports, or self-reported.
	EthicsPolicy                    interface{} `json:"ethicsPolicy,omitempty"`                    // Statement about ethics policy, e.g. of a [[NewsMediaOrganization]] regarding journalistic and publishing practices, or of a [[Restaurant]], a page describing food source policies. In the case of a [[NewsMediaOrganization]], an ethicsPolicy is typically a statement describing the personal, organizational, and corporate standards of behavior expected by the organization.
	Masthead                        interface{} `json:"masthead,omitempty"`                        // For a [[NewsMediaOrganization]], a link to the masthead page or a page listing top editorial management.
	MissionCoveragePrioritiesPolicy interface{} `json:"missionCoveragePrioritiesPolicy,omitempty"` // For a [[NewsMediaOrganization]], a statement on coverage priorities, including any public agenda or stance on issues.
	NoBylinesPolicy                 interface{} `json:"noBylinesPolicy,omitempty"`                 // For a [[NewsMediaOrganization]] or other news-related [[Organization]], a statement explaining when authors of articles are not named in bylines.
	OwnershipFundingInfo            interface{} `json:"ownershipFundingInfo,omitempty"`            // For an [[Organization]] (often but not necessarily a [[NewsMediaOrganization]]), a description of organizational ownership structure; funding and grants. In a news/media setting, this is with particular reference to editorial independence.   Note that the [[funder]] is also available and can be used to make basic funder information machine-readable.
	UnnamedSourcesPolicy            interface{} `json:"unnamedSourcesPolicy,omitempty"`            // For an [[Organization]] (typically a [[NewsMediaOrganization]]), a statement about policy on use of unnamed sources and the decision process required.
	VerificationFactCheckingPolicy  interface{} `json:"verificationFactCheckingPolicy,omitempty"`  // Disclosure about verification and fact-checking processes for a [[NewsMediaOrganization]] or other fact-checking [[Organization]].
}

// A publication containing information about varied topics that are pertinent to general information, a geographic area, or a specific subject matter (i.e. business, culture, education). Often published daily.
type Newspaper struct {
	Periodical
}

// A nightclub or discotheque.
type NightClub struct {
	EntertainmentBusiness
}

// NonprofitType enumerates several kinds of official non-profit types of which a non-profit organization can be.
type NonprofitType struct {
	Enumeration
}

// A notary.
type Notary struct {
	LegalService
}

// A file containing a note, primarily for the author.
type NoteDigitalDocument struct {
	DigitalDocument
}

// Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
type Number struct{}

// Nutritional information about the recipe.
type NutritionInformation struct {
	StructuredValue

	Calories              interface{} `json:"calories,omitempty"`              // The number of calories.
	CarbohydrateContent   interface{} `json:"carbohydrateContent,omitempty"`   // The number of grams of carbohydrates.
	CholesterolContent    interface{} `json:"cholesterolContent,omitempty"`    // The number of milligrams of cholesterol.
	FatContent            interface{} `json:"fatContent,omitempty"`            // The number of grams of fat.
	FiberContent          interface{} `json:"fiberContent,omitempty"`          // The number of grams of fiber.
	ProteinContent        interface{} `json:"proteinContent,omitempty"`        // The number of grams of protein.
	SaturatedFatContent   interface{} `json:"saturatedFatContent,omitempty"`   // The number of grams of saturated fat.
	ServingSize           interface{} `json:"servingSize,omitempty"`           // The serving size, in terms of the number of volume or mass.
	SodiumContent         interface{} `json:"sodiumContent,omitempty"`         // The number of milligrams of sodium.
	SugarContent          interface{} `json:"sugarContent,omitempty"`          // The number of grams of sugar.
	TransFatContent       interface{} `json:"transFatContent,omitempty"`       // The number of grams of trans fat.
	UnsaturatedFatContent interface{} `json:"unsaturatedFatContent,omitempty"` // The number of grams of unsaturated fat.
}

/*
Instances of the class [[Observation]] are used to specify observations about an entity (which may or may not be an instance of a [[StatisticalPopulation]]), at a particular time. The principal properties of an [[Observation]] are [[observedNode]], [[measuredProperty]], [[measuredValue]] (or [[median]], etc.) and [[observationDate]] ([[measuredProperty]] properties can, but need not always, be W3C RDF Data Cube "measure properties", as in the [lifeExpectancy example](https://www.w3.org/TR/vocab-data-cube/#dsd-example)).
See also [[StatisticalPopulation]], and the [data and datasets](/docs/data-and-datasets.html) overview for more details.

*/
type Observation struct {
	Intangible

	MarginOfError    interface{} `json:"marginOfError,omitempty"`    // A marginOfError for an [[Observation]].
	MeasuredProperty interface{} `json:"measuredProperty,omitempty"` // The measuredProperty of an [[Observation]], either a schema.org property, a property from other RDF-compatible systems e.g. W3C RDF Data Cube, or schema.org extensions such as [GS1's](https://www.gs1.org/voc/?show=properties).
	MeasuredValue    interface{} `json:"measuredValue,omitempty"`    // The measuredValue of an [[Observation]].
	ObservationDate  interface{} `json:"observationDate,omitempty"`  // The observationDate of an [[Observation]].
	ObservedNode     interface{} `json:"observedNode,omitempty"`     // The observedNode of an [[Observation]], often a [[StatisticalPopulation]].
}

// A profession, may involve prolonged training and/or a formal qualification.
type Occupation struct {
	Intangible

	EducationRequirements  interface{} `json:"educationRequirements,omitempty"`  // Educational background needed for the position or Occupation.
	EstimatedSalary        interface{} `json:"estimatedSalary,omitempty"`        // An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
	ExperienceRequirements interface{} `json:"experienceRequirements,omitempty"` // Description of skills and experience needed for the position or Occupation.
	OccupationLocation     interface{} `json:"occupationLocation,omitempty"`     //  The region/country for which this occupational description is appropriate. Note that educational requirements and qualifications can vary between jurisdictions.
	OccupationalCategory   interface{} `json:"occupationalCategory,omitempty"`   /*
	A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.\n
	Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
	*/
	Qualifications   interface{} `json:"qualifications,omitempty"`   // Specific qualifications required for this role or Occupation.
	Responsibilities interface{} `json:"responsibilities,omitempty"` // Responsibilities associated with this role or Occupation.
	Skills           interface{} `json:"skills,omitempty"`           // A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is desired or required to fulfill this role or to work in this occupation.
}

// Indicates employment-related experience requirements, e.g. [[monthsOfExperience]].
type OccupationalExperienceRequirements struct {
	Intangible

	MonthsOfExperience interface{} `json:"monthsOfExperience,omitempty"` // Indicates the minimal number of months of experience required for a position.
}

// A treatment of people with physical, emotional, or social problems, using purposeful activity to help them overcome or learn to deal with their problems.
type OccupationalTherapy struct {
	MedicalTherapy
}

// An ocean (for example, the Pacific).
type OceanBodyOfWater struct {
	BodyOfWater
}

// An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
type Offer struct {
	Intangible

	AcceptedPaymentMethod     interface{} `json:"acceptedPaymentMethod,omitempty"`     // The payment method(s) accepted by seller for this offer.
	AddOn                     interface{} `json:"addOn,omitempty"`                     // An additional offer that can only be obtained in combination with the first base offer (e.g. supplements and extensions that are available for a surcharge).
	AdvanceBookingRequirement interface{} `json:"advanceBookingRequirement,omitempty"` // The amount of time that is required between accepting the offer and the actual usage of the resource or service.
	AggregateRating           interface{} `json:"aggregateRating,omitempty"`           // The overall rating, based on a collection of reviews or ratings, of the item.
	AreaServed                interface{} `json:"areaServed,omitempty"`                // The geographic area where a service or offered item is provided.
	Availability              interface{} `json:"availability,omitempty"`              // The availability of this item&#x2014;for example In stock, Out of stock, Pre-order, etc.
	AvailabilityEnds          interface{} `json:"availabilityEnds,omitempty"`          // The end of the availability of the product or service included in the offer.
	AvailabilityStarts        interface{} `json:"availabilityStarts,omitempty"`        // The beginning of the availability of the product or service included in the offer.
	AvailableAtOrFrom         interface{} `json:"availableAtOrFrom,omitempty"`         // The place(s) from which the offer can be obtained (e.g. store locations).
	AvailableDeliveryMethod   interface{} `json:"availableDeliveryMethod,omitempty"`   // The delivery method(s) available for this offer.
	BusinessFunction          interface{} `json:"businessFunction,omitempty"`          // The business function (e.g. sell, lease, repair, dispose) of the offer or component of a bundle (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell.
	Category                  interface{} `json:"category,omitempty"`                  // A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
	DeliveryLeadTime          interface{} `json:"deliveryLeadTime,omitempty"`          // The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup.
	EligibleCustomerType      interface{} `json:"eligibleCustomerType,omitempty"`      // The type(s) of customers for which the given offer is valid.
	EligibleDuration          interface{} `json:"eligibleDuration,omitempty"`          // The duration for which the given offer is valid.
	EligibleQuantity          interface{} `json:"eligibleQuantity,omitempty"`          // The interval and unit of measurement of ordering quantities for which the offer or price specification is valid. This allows e.g. specifying that a certain freight charge is valid only for a certain quantity.
	EligibleRegion            interface{} `json:"eligibleRegion,omitempty"`            /*
	The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.\n\nSee also [[ineligibleRegion]].

	*/
	EligibleTransactionVolume interface{} `json:"eligibleTransactionVolume,omitempty"` // The transaction volume, in a monetary unit, for which the offer or price specification is valid, e.g. for indicating a minimal purchasing volume, to express free shipping above a certain order volume, or to limit the acceptance of credit cards to purchases to a certain minimal amount.
	Gtin                      interface{} `json:"gtin,omitempty"`                      /*
	A Global Trade Item Number ([GTIN](https://www.gs1.org/standards/id-keys/gtin)). GTINs identify trade items, including products and services, using numeric identification codes. The [[gtin]] property generalizes the earlier [[gtin8]], [[gtin12]], [[gtin13]], and [[gtin14]] properties. The GS1 [digital link specifications](https://www.gs1.org/standards/Digital-Link/) express GTINs as URLs. A correct [[gtin]] value should be a valid GTIN, which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or a "GS1 Digital Link" URL based on such a string. The numeric component should also have a [valid GS1 check digit](https://www.gs1.org/services/check-digit-calculator) and meet the other rules for valid GTINs. See also [GS1's GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) and [Wikipedia](https://en.wikipedia.org/wiki/Global_Trade_Item_Number) for more details. Left-padding of the gtin values is not required or encouraged.

	*/
	Gtin12                  interface{} `json:"gtin12,omitempty"`                  // The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin13                  interface{} `json:"gtin13,omitempty"`                  // The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceding zero. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin14                  interface{} `json:"gtin14,omitempty"`                  // The GTIN-14 code of the product, or the product to which the offer refers. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin8                   interface{} `json:"gtin8,omitempty"`                   // The GTIN-8 code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	HasAdultConsideration   interface{} `json:"hasAdultConsideration,omitempty"`   // Used to tag an item to be intended or suitable for consumption or use by adults only.
	HasMeasurement          interface{} `json:"hasMeasurement,omitempty"`          // A product measurement, for example the inseam of pants, the wheel size of a bicycle, or the gauge of a screw. Usually an exact measurement, but can also be a range of measurements for adjustable products, for example belts and ski bindings.
	HasMerchantReturnPolicy interface{} `json:"hasMerchantReturnPolicy,omitempty"` // Specifies a MerchantReturnPolicy that may be applicable.
	IncludesObject          interface{} `json:"includesObject,omitempty"`          // This links to a node or nodes indicating the exact quantity of the products included in  an [[Offer]] or [[ProductCollection]].
	IneligibleRegion        interface{} `json:"ineligibleRegion,omitempty"`        /*
	The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.\n\nSee also [[eligibleRegion]].

	*/
	InventoryLevel   interface{} `json:"inventoryLevel,omitempty"`   // The current approximate inventory level for the item or items.
	IsFamilyFriendly interface{} `json:"isFamilyFriendly,omitempty"` // Indicates whether this content is family friendly.
	ItemCondition    interface{} `json:"itemCondition,omitempty"`    // A predefined value from OfferItemCondition specifying the condition of the product or service, or the products or services included in the offer. Also used for product return policies to specify the condition of products accepted for returns.
	ItemOffered      interface{} `json:"itemOffered,omitempty"`      // An item being offered (or demanded). The transactional nature of the offer or demand is documented using [[businessFunction]], e.g. sell, lease etc. While several common expected types are listed explicitly in this definition, others can be used. Using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
	LeaseLength      interface{} `json:"leaseLength,omitempty"`      // Length of the lease for some [[Accommodation]], either particular to some [[Offer]] or in some cases intrinsic to the property.
	Mpn              interface{} `json:"mpn,omitempty"`              // The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers.
	OfferedBy        interface{} `json:"offeredBy,omitempty"`        // A pointer to the organization or person making the offer.
	Price            interface{} `json:"price,omitempty"`            /*
	The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.\n\nUsage guidelines:\n\n* Use the [[priceCurrency]] property (with standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR") instead of including [ambiguous symbols](http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign) such as '$' in the value.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.\n* Note that both [RDFa](http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute) and Microdata syntax allow the use of a "content=" attribute for publishing simple machine-readable values alongside more human-friendly formatting.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.

	*/
	PriceCurrency      interface{} `json:"priceCurrency,omitempty"`      // The currency of the price, or a price component when attached to [[PriceSpecification]] and its subtypes.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	PriceSpecification interface{} `json:"priceSpecification,omitempty"` // One or more detailed price specifications, indicating the unit price and delivery or payment charges.
	PriceValidUntil    interface{} `json:"priceValidUntil,omitempty"`    // The date after which the price is no longer available.
	Review             interface{} `json:"review,omitempty"`             // A review of the item.
	Reviews            interface{} `json:"reviews,omitempty"`            // Review of the item.
	Seller             interface{} `json:"seller,omitempty"`             // An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
	SerialNumber       interface{} `json:"serialNumber,omitempty"`       // The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a shortcut for the serial number of the product included in the offer.
	ShippingDetails    interface{} `json:"shippingDetails,omitempty"`    // Indicates information about the shipping policies and options associated with an [[Offer]].
	Sku                interface{} `json:"sku,omitempty"`                // The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers.
	ValidFrom          interface{} `json:"validFrom,omitempty"`          // The date when the item becomes valid.
	ValidThrough       interface{} `json:"validThrough,omitempty"`       // The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
	Warranty           interface{} `json:"warranty,omitempty"`           // The warranty promise(s) included in the offer.
}

// An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs that are offeredBy the same provider.
type OfferCatalog struct {
	ItemList
}

/*
An [[OfferForLease]] in Schema.org represents an [[Offer]] to lease out something, i.e. an [[Offer]] whose
  [[businessFunction]] is [lease out](http://purl.org/goodrelations/v1#LeaseOut.). See [Good Relations](https://en.wikipedia.org/wiki/GoodRelations) for
  background on the underlying concepts.

*/
type OfferForLease struct {
	Offer
}

/*
An [[OfferForPurchase]] in Schema.org represents an [[Offer]] to sell something, i.e. an [[Offer]] whose
  [[businessFunction]] is [sell](http://purl.org/goodrelations/v1#Sell.). See [Good Relations](https://en.wikipedia.org/wiki/GoodRelations) for
  background on the underlying concepts.

*/
type OfferForPurchase struct {
	Offer
}

// A list of possible conditions for the item.
type OfferItemCondition struct {
	Enumeration
}

/*
OfferShippingDetails represents information about shipping destinations.

Multiple of these entities can be used to represent different shipping rates for different destinations:

One entity for Alaska/Hawaii. A different one for continental US.A different one for all France.

Multiple of these entities can be used to represent different shipping costs and delivery times.

Two entities that are identical but differ in rate and time:

e.g. Cheaper and slower: $5 in 5-7days
or Fast and expensive: $15 in 1-2 days.
*/
type OfferShippingDetails struct {
	StructuredValue

	DeliveryTime         interface{} `json:"deliveryTime,omitempty"`         // The total delay between the receipt of the order and the goods reaching the final customer.
	DoesNotShip          interface{} `json:"doesNotShip,omitempty"`          // Indicates when shipping to a particular [[shippingDestination]] is not available.
	ShippingDestination  interface{} `json:"shippingDestination,omitempty"`  // indicates (possibly multiple) shipping destinations. These can be defined in several ways e.g. postalCode ranges.
	ShippingLabel        interface{} `json:"shippingLabel,omitempty"`        // Label to match an [[OfferShippingDetails]] with a [[ShippingRateSettings]] (within the context of a [[shippingSettingsLink]] cross-reference).
	ShippingRate         interface{} `json:"shippingRate,omitempty"`         // The shipping rate is the cost of shipping to the specified destination. Typically, the maxValue and currency values (of the [[MonetaryAmount]]) are most appropriate.
	ShippingSettingsLink interface{} `json:"shippingSettingsLink,omitempty"` // Link to a page containing [[ShippingRateSettings]] and [[DeliveryTimeSettings]] details.
	TransitTimeLabel     interface{} `json:"transitTimeLabel,omitempty"`     // Label to match an [[OfferShippingDetails]] with a [[DeliveryTimeSettings]] (within the context of a [[shippingSettingsLink]] cross-reference).
}

// An office equipment store.
type OfficeEquipmentStore struct {
	Store
}

// A publication event e.g. catch-up TV or radio podcast, during which a program is available on-demand.
type OnDemandEvent struct {
	PublicationEvent
}

// A particular online business, either standalone or the online part of a broader organization. Examples include an eCommerce site, an online travel booking site, an online learning site, an online logistics and shipping provider, an online (virtual) doctor, etc.
type OnlineBusiness struct {
	Organization
}

// An eCommerce site.
type OnlineStore struct {
	OnlineBusiness
}

/*
A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n
The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.

*/
type OpeningHoursSpecification struct {
	StructuredValue

	Closes       interface{} `json:"closes,omitempty"`       // The closing hour of the place or service on the given day(s) of the week.
	DayOfWeek    interface{} `json:"dayOfWeek,omitempty"`    // The day of the week for which these opening hours are valid.
	Opens        interface{} `json:"opens,omitempty"`        // The opening hour of the place or service on the given day(s) of the week.
	ValidFrom    interface{} `json:"validFrom,omitempty"`    // The date when the item becomes valid.
	ValidThrough interface{} `json:"validThrough,omitempty"` // The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
}

// An [[OpinionNewsArticle]] is a [[NewsArticle]] that primarily expresses opinions rather than journalistic reporting of news and events. For example, a [[NewsArticle]] consisting of a column or [[Blog]]/[[BlogPosting]] entry in the Opinions section of a news publication.
type OpinionNewsArticle struct {
	NewsArticle
}

// A store that sells reading glasses and similar devices for improving vision.
type Optician struct {
	MedicalBusiness
}

// An order is a confirmation of a transaction (a receipt), which can contain multiple line items, each represented by an Offer that has been accepted by the customer.
type Order struct {
	Intangible

	AcceptedOffer      interface{} `json:"acceptedOffer,omitempty"`      // The offer(s) -- e.g., product, quantity and price combinations -- included in the order.
	BillingAddress     interface{} `json:"billingAddress,omitempty"`     // The billing address for the order.
	Broker             interface{} `json:"broker,omitempty"`             // An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
	ConfirmationNumber interface{} `json:"confirmationNumber,omitempty"` // A number that confirms the given order or payment has been received.
	Customer           interface{} `json:"customer,omitempty"`           // Party placing the order or paying the invoice.
	Discount           interface{} `json:"discount,omitempty"`           // Any discount applied (to an Order).
	DiscountCode       interface{} `json:"discountCode,omitempty"`       // Code used to redeem a discount.
	DiscountCurrency   interface{} `json:"discountCurrency,omitempty"`   // The currency of the discount.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	IsGift             interface{} `json:"isGift,omitempty"`             // Was the offer accepted as a gift for someone other than the buyer.
	Merchant           interface{} `json:"merchant,omitempty"`           // 'merchant' is an out-dated term for 'seller'.
	OrderDate          interface{} `json:"orderDate,omitempty"`          // Date order was placed.
	OrderDelivery      interface{} `json:"orderDelivery,omitempty"`      // The delivery of the parcel related to this order or order item.
	OrderNumber        interface{} `json:"orderNumber,omitempty"`        // The identifier of the transaction.
	OrderStatus        interface{} `json:"orderStatus,omitempty"`        // The current status of the order.
	OrderedItem        interface{} `json:"orderedItem,omitempty"`        // The item ordered.
	PartOfInvoice      interface{} `json:"partOfInvoice,omitempty"`      // The order is being paid as part of the referenced Invoice.
	PaymentDue         interface{} `json:"paymentDue,omitempty"`         // The date that payment is due.
	PaymentDueDate     interface{} `json:"paymentDueDate,omitempty"`     // The date that payment is due.
	PaymentMethod      interface{} `json:"paymentMethod,omitempty"`      // The name of the credit card or other method of payment for the order.
	PaymentMethodId    interface{} `json:"paymentMethodId,omitempty"`    // An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
	PaymentUrl         interface{} `json:"paymentUrl,omitempty"`         // The URL for sending a payment.
	Seller             interface{} `json:"seller,omitempty"`             // An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
}

// An agent orders an object/product/service to be delivered/sent.
type OrderAction struct {
	TradeAction

	DeliveryMethod interface{} `json:"deliveryMethod,omitempty"` // A sub property of instrument. The method of delivery.
}

// An order item is a line of an order. It includes the quantity and shipping details of a bought offer.
type OrderItem struct {
	Intangible

	OrderDelivery   interface{} `json:"orderDelivery,omitempty"`   // The delivery of the parcel related to this order or order item.
	OrderItemNumber interface{} `json:"orderItemNumber,omitempty"` // The identifier of the order item.
	OrderItemStatus interface{} `json:"orderItemStatus,omitempty"` // The current status of the order item.
	OrderQuantity   interface{} `json:"orderQuantity,omitempty"`   // The number of the item ordered. If the property is not set, assume the quantity is one.
	OrderedItem     interface{} `json:"orderedItem,omitempty"`     // The item ordered.
}

// Enumerated status values for Order.
type OrderStatus struct {
	StatusEnumeration
}

// An organization such as a school, NGO, corporation, club, etc.
type Organization struct {
	Thing

	ActionableFeedbackPolicy interface{} `json:"actionableFeedbackPolicy,omitempty"` // For a [[NewsMediaOrganization]] or other news-related [[Organization]], a statement about public engagement activities (for news media, the newsroom’s), including involving the public - digitally or otherwise -- in coverage decisions, reporting and activities after publication.
	Address                  interface{} `json:"address,omitempty"`                  // Physical address of the item.
	AggregateRating          interface{} `json:"aggregateRating,omitempty"`          // The overall rating, based on a collection of reviews or ratings, of the item.
	Alumni                   interface{} `json:"alumni,omitempty"`                   // Alumni of an organization.
	AreaServed               interface{} `json:"areaServed,omitempty"`               // The geographic area where a service or offered item is provided.
	Award                    interface{} `json:"award,omitempty"`                    // An award won by or for this item.
	Awards                   interface{} `json:"awards,omitempty"`                   // Awards won by or for this item.
	Brand                    interface{} `json:"brand,omitempty"`                    // The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
	ContactPoint             interface{} `json:"contactPoint,omitempty"`             // A contact point for a person or organization.
	ContactPoints            interface{} `json:"contactPoints,omitempty"`            // A contact point for a person or organization.
	CorrectionsPolicy        interface{} `json:"correctionsPolicy,omitempty"`        // For an [[Organization]] (e.g. [[NewsMediaOrganization]]), a statement describing (in news media, the newsroom’s) disclosure and correction policy for errors.
	Department               interface{} `json:"department,omitempty"`               // A relationship between an organization and a department of that organization, also described as an organization (allowing different urls, logos, opening hours). For example: a store with a pharmacy, or a bakery with a cafe.
	DissolutionDate          interface{} `json:"dissolutionDate,omitempty"`          // The date that this organization was dissolved.
	DiversityPolicy          interface{} `json:"diversityPolicy,omitempty"`          // Statement on diversity policy by an [[Organization]] e.g. a [[NewsMediaOrganization]]. For a [[NewsMediaOrganization]], a statement describing the newsroom’s diversity policy on both staffing and sources, typically providing staffing data.
	DiversityStaffingReport  interface{} `json:"diversityStaffingReport,omitempty"`  // For an [[Organization]] (often but not necessarily a [[NewsMediaOrganization]]), a report on staffing diversity issues. In a news context this might be for example ASNE or RTDNA (US) reports, or self-reported.
	Duns                     interface{} `json:"duns,omitempty"`                     // The Dun & Bradstreet DUNS number for identifying an organization or business person.
	Email                    interface{} `json:"email,omitempty"`                    // Email address.
	Employee                 interface{} `json:"employee,omitempty"`                 // Someone working for this organization.
	Employees                interface{} `json:"employees,omitempty"`                // People working for this organization.
	EthicsPolicy             interface{} `json:"ethicsPolicy,omitempty"`             // Statement about ethics policy, e.g. of a [[NewsMediaOrganization]] regarding journalistic and publishing practices, or of a [[Restaurant]], a page describing food source policies. In the case of a [[NewsMediaOrganization]], an ethicsPolicy is typically a statement describing the personal, organizational, and corporate standards of behavior expected by the organization.
	Event                    interface{} `json:"event,omitempty"`                    // Upcoming or past event associated with this place, organization, or action.
	Events                   interface{} `json:"events,omitempty"`                   // Upcoming or past events associated with this place or organization.
	FaxNumber                interface{} `json:"faxNumber,omitempty"`                // The fax number.
	Founder                  interface{} `json:"founder,omitempty"`                  // A person who founded this organization.
	Founders                 interface{} `json:"founders,omitempty"`                 // A person who founded this organization.
	FoundingDate             interface{} `json:"foundingDate,omitempty"`             // The date that this organization was founded.
	FoundingLocation         interface{} `json:"foundingLocation,omitempty"`         // The place where the Organization was founded.
	Funder                   interface{} `json:"funder,omitempty"`                   // A person or organization that supports (sponsors) something through some kind of financial contribution.
	Funding                  interface{} `json:"funding,omitempty"`                  // A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
	GlobalLocationNumber     interface{} `json:"globalLocationNumber,omitempty"`     // The [Global Location Number](http://www.gs1.org/gln) (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.
	HasCredential            interface{} `json:"hasCredential,omitempty"`            // A credential awarded to the Person or Organization.
	HasMerchantReturnPolicy  interface{} `json:"hasMerchantReturnPolicy,omitempty"`  // Specifies a MerchantReturnPolicy that may be applicable.
	HasOfferCatalog          interface{} `json:"hasOfferCatalog,omitempty"`          // Indicates an OfferCatalog listing for this Organization, Person, or Service.
	HasPOS                   interface{} `json:"hasPOS,omitempty"`                   // Points-of-Sales operated by the organization or person.
	InteractionStatistic     interface{} `json:"interactionStatistic,omitempty"`     // The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used.
	IsicV4                   interface{} `json:"isicV4,omitempty"`                   // The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.
	Iso6523Code              interface{} `json:"iso6523Code,omitempty"`              // An organization identifier as defined in ISO 6523(-1). Note that many existing organization identifiers such as [leiCode](https://schema.org/leiCode), [duns](https://schema.org/duns) and [vatID](https://schema.org/vatID) can be expressed as an ISO 6523 identifier by setting the ICD part of the ISO 6523 identifier accordingly.
	Keywords                 interface{} `json:"keywords,omitempty"`                 // Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
	KnowsAbout               interface{} `json:"knowsAbout,omitempty"`               // Of a [[Person]], and less typically of an [[Organization]], to indicate a topic that is known about - suggesting possible expertise but not implying it. We do not distinguish skill levels here, or relate this to educational content, events, objectives or [[JobPosting]] descriptions.
	KnowsLanguage            interface{} `json:"knowsLanguage,omitempty"`            // Of a [[Person]], and less typically of an [[Organization]], to indicate a known language. We do not distinguish skill levels or reading/writing/speaking/signing here. Use language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47).
	LegalName                interface{} `json:"legalName,omitempty"`                // The official name of the organization, e.g. the registered company name.
	LeiCode                  interface{} `json:"leiCode,omitempty"`                  // An organization identifier that uniquely identifies a legal entity as defined in ISO 17442.
	Location                 interface{} `json:"location,omitempty"`                 // The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
	Logo                     interface{} `json:"logo,omitempty"`                     // An associated logo.
	MakesOffer               interface{} `json:"makesOffer,omitempty"`               // A pointer to products or services offered by the organization or person.
	Member                   interface{} `json:"member,omitempty"`                   // A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals.
	MemberOf                 interface{} `json:"memberOf,omitempty"`                 // An Organization (or ProgramMembership) to which this Person or Organization belongs.
	Members                  interface{} `json:"members,omitempty"`                  // A member of this organization.
	Naics                    interface{} `json:"naics,omitempty"`                    // The North American Industry Classification System (NAICS) code for a particular organization or business person.
	NonprofitStatus          interface{} `json:"nonprofitStatus,omitempty"`          // nonprofit Status indicates the legal status of a non-profit organization in its primary place of business.
	NumberOfEmployees        interface{} `json:"numberOfEmployees,omitempty"`        // The number of employees in an organization e.g. business.
	OwnershipFundingInfo     interface{} `json:"ownershipFundingInfo,omitempty"`     // For an [[Organization]] (often but not necessarily a [[NewsMediaOrganization]]), a description of organizational ownership structure; funding and grants. In a news/media setting, this is with particular reference to editorial independence.   Note that the [[funder]] is also available and can be used to make basic funder information machine-readable.
	Owns                     interface{} `json:"owns,omitempty"`                     // Products owned by the organization or person.
	ParentOrganization       interface{} `json:"parentOrganization,omitempty"`       // The larger organization that this organization is a [[subOrganization]] of, if any.
	PublishingPrinciples     interface{} `json:"publishingPrinciples,omitempty"`     /*
	The publishingPrinciples property indicates (typically via [[URL]]) a document describing the editorial principles of an [[Organization]] (or individual e.g. a [[Person]] writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a [[CreativeWork]] (e.g. [[NewsArticle]]) the principles are those of the party primarily responsible for the creation of the [[CreativeWork]].

	While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a [[funder]]) can be expressed using schema.org terminology.
	*/
	Review               interface{} `json:"review,omitempty"`               // A review of the item.
	Reviews              interface{} `json:"reviews,omitempty"`              // Review of the item.
	Seeks                interface{} `json:"seeks,omitempty"`                // A pointer to products or services sought by the organization or person (demand).
	ServiceArea          interface{} `json:"serviceArea,omitempty"`          // The geographic area where the service is provided.
	Slogan               interface{} `json:"slogan,omitempty"`               // A slogan or motto associated with the item.
	Sponsor              interface{} `json:"sponsor,omitempty"`              // A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
	SubOrganization      interface{} `json:"subOrganization,omitempty"`      // A relationship between two organizations where the first includes the second, e.g., as a subsidiary. See also: the more specific 'department' property.
	TaxID                interface{} `json:"taxID,omitempty"`                // The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.
	Telephone            interface{} `json:"telephone,omitempty"`            // The telephone number.
	UnnamedSourcesPolicy interface{} `json:"unnamedSourcesPolicy,omitempty"` // For an [[Organization]] (typically a [[NewsMediaOrganization]]), a statement about policy on use of unnamed sources and the decision process required.
	VatID                interface{} `json:"vatID,omitempty"`                // The Value-added Tax ID of the organization or person.
}

// A subclass of Role used to describe roles within organizations.
type OrganizationRole struct {
	Role

	NumberedPosition interface{} `json:"numberedPosition,omitempty"` // A number associated with a role in an organization, for example, the number on an athlete's jersey.
}

// The act of manipulating/administering/supervising/controlling one or more objects.
type OrganizeAction struct {
	Action
}

// An outlet store.
type OutletStore struct {
	Store
}

// A structured value providing information about when a certain organization or person owned a certain product.
type OwnershipInfo struct {
	StructuredValue

	AcquiredFrom interface{} `json:"acquiredFrom,omitempty"` // The organization or person from which the product was acquired.
	OwnedFrom    interface{} `json:"ownedFrom,omitempty"`    // The date and time of obtaining the product.
	OwnedThrough interface{} `json:"ownedThrough,omitempty"` // The date and time of giving up ownership on the product.
	TypeOfGood   interface{} `json:"typeOfGood,omitempty"`   // The product that this structured value is referring to.
}

// The act of producing a painting, typically with paint and canvas as instruments.
type PaintAction struct {
	CreateAction
}

// A painting.
type Painting struct {
	CreativeWork
}

// A medical procedure intended primarily for palliative purposes, aimed at relieving the symptoms of an underlying health condition.
type PalliativeProcedure struct {
	MedicalProcedure
	// TODO: MedicalTherapy
}

// The delivery of a parcel either via the postal service or a commercial service.
type ParcelDelivery struct {
	Intangible

	Carrier              interface{} `json:"carrier,omitempty"`              // 'carrier' is an out-dated term indicating the 'provider' for parcel delivery and flights.
	DeliveryAddress      interface{} `json:"deliveryAddress,omitempty"`      // Destination address.
	DeliveryStatus       interface{} `json:"deliveryStatus,omitempty"`       // New entry added as the package passes through each leg of its journey (from shipment to final delivery).
	ExpectedArrivalFrom  interface{} `json:"expectedArrivalFrom,omitempty"`  // The earliest date the package may arrive.
	ExpectedArrivalUntil interface{} `json:"expectedArrivalUntil,omitempty"` // The latest date the package may arrive.
	HasDeliveryMethod    interface{} `json:"hasDeliveryMethod,omitempty"`    // Method used for delivery or shipping.
	ItemShipped          interface{} `json:"itemShipped,omitempty"`          // Item(s) being shipped.
	OriginAddress        interface{} `json:"originAddress,omitempty"`        // Shipper's address.
	PartOfOrder          interface{} `json:"partOfOrder,omitempty"`          // The overall order the items in this delivery were included in.
	Provider             interface{} `json:"provider,omitempty"`             // The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
	TrackingNumber       interface{} `json:"trackingNumber,omitempty"`       // Shipper tracking number.
	TrackingUrl          interface{} `json:"trackingUrl,omitempty"`          // Tracking url for the parcel delivery.
}

// A set of characteristics describing parents, who can be interested in viewing some content.
type ParentAudience struct {
	PeopleAudience

	ChildMaxAge interface{} `json:"childMaxAge,omitempty"` // Maximal age of the child.
	ChildMinAge interface{} `json:"childMinAge,omitempty"` // Minimal age of the child.
}

// A park.
type Park struct {
	CivicStructure
}

// A parking lot or other parking facility.
type ParkingFacility struct {
	CivicStructure
}

// A medical test performed by a laboratory that typically involves examination of a tissue sample by a pathologist.
type PathologyTest struct {
	MedicalTest

	TissueSample interface{} `json:"tissueSample,omitempty"` // The type of tissue sample required for the test.
}

// A patient is any person recipient of health care services.
type Patient struct {
	MedicalAudience
	// TODO: Person

	Diagnosis       interface{} `json:"diagnosis,omitempty"`       // One or more alternative conditions considered in the differential diagnosis process as output of a diagnosis process.
	Drug            interface{} `json:"drug,omitempty"`            // Specifying a drug or medicine used in a medication procedure.
	HealthCondition interface{} `json:"healthCondition,omitempty"` // Specifying the health condition(s) of a patient, medical study, or other target audience.
}

// A shop that will buy, or lend money against the security of, personal possessions.
type PawnShop struct {
	Store
}

// An agent pays a price to a participant.
type PayAction struct {
	TradeAction

	Recipient interface{} `json:"recipient,omitempty"` // A sub property of participant. The participant who is at the receiving end of the action.
}

// A payment method using a credit, debit, store or other card to associate the payment with an account.
type PaymentCard struct {
	FinancialProduct
	// TODO: PaymentMethod

	CashBack                      interface{} `json:"cashBack,omitempty"`                      // A cardholder benefit that pays the cardholder a small percentage of their net expenditures.
	ContactlessPayment            interface{} `json:"contactlessPayment,omitempty"`            // A secure method for consumers to purchase products or services via debit, credit or smartcards by using RFID or NFC technology.
	FloorLimit                    interface{} `json:"floorLimit,omitempty"`                    // A floor limit is the amount of money above which credit card transactions must be authorized.
	MonthlyMinimumRepaymentAmount interface{} `json:"monthlyMinimumRepaymentAmount,omitempty"` // The minimum payment is the lowest amount of money that one is required to pay on a credit card statement each month.
}

// The costs of settling the payment using a particular payment method.
type PaymentChargeSpecification struct {
	PriceSpecification

	AppliesToDeliveryMethod interface{} `json:"appliesToDeliveryMethod,omitempty"` // The delivery method(s) to which the delivery charge or payment charge specification applies.
	AppliesToPaymentMethod  interface{} `json:"appliesToPaymentMethod,omitempty"`  // The payment method(s) to which the payment charge specification applies.
}

/*
A payment method is a standardized procedure for transferring the monetary amount for a purchase. Payment methods are characterized by the legal and technical structures used, and by the organization or group carrying out the transaction.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#ByBankTransferInAdvance\n* http://purl.org/goodrelations/v1#ByInvoice\n* http://purl.org/goodrelations/v1#Cash\n* http://purl.org/goodrelations/v1#CheckInAdvance\n* http://purl.org/goodrelations/v1#COD\n* http://purl.org/goodrelations/v1#DirectDebit\n* http://purl.org/goodrelations/v1#GoogleCheckout\n* http://purl.org/goodrelations/v1#PayPal\n* http://purl.org/goodrelations/v1#PaySwarm

*/
type PaymentMethod struct {
	Enumeration
}

// A Service to transfer funds from a person or organization to a beneficiary person or organization.
type PaymentService struct {
	FinancialProduct
}

// A specific payment status. For example, PaymentDue, PaymentComplete, etc.
type PaymentStatusType struct {
	StatusEnumeration
}

// A set of characteristics belonging to people, e.g. who compose an item's target audience.
type PeopleAudience struct {
	Audience

	HealthCondition      interface{} `json:"healthCondition,omitempty"`      // Specifying the health condition(s) of a patient, medical study, or other target audience.
	RequiredGender       interface{} `json:"requiredGender,omitempty"`       // Audiences defined by a person's gender.
	RequiredMaxAge       interface{} `json:"requiredMaxAge,omitempty"`       // Audiences defined by a person's maximum age.
	RequiredMinAge       interface{} `json:"requiredMinAge,omitempty"`       // Audiences defined by a person's minimum age.
	SuggestedAge         interface{} `json:"suggestedAge,omitempty"`         // The age or age range for the intended audience or person, for example 3-12 months for infants, 1-5 years for toddlers.
	SuggestedGender      interface{} `json:"suggestedGender,omitempty"`      // The suggested gender of the intended person or audience, for example "male", "female", or "unisex".
	SuggestedMaxAge      interface{} `json:"suggestedMaxAge,omitempty"`      // Maximum recommended age in years for the audience or user.
	SuggestedMeasurement interface{} `json:"suggestedMeasurement,omitempty"` // A suggested range of body measurements for the intended audience or person, for example inseam between 32 and 34 inches or height between 170 and 190 cm. Typically found on a size chart for wearable products.
	SuggestedMinAge      interface{} `json:"suggestedMinAge,omitempty"`      // Minimum recommended age in years for the audience or user.
}

// The act of participating in performance arts.
type PerformAction struct {
	PlayAction

	EntertainmentBusiness interface{} `json:"entertainmentBusiness,omitempty"` // A sub property of location. The entertainment business where the action occurred.
}

// A PerformanceRole is a Role that some entity places with regard to a theatrical performance, e.g. in a Movie, TVSeries etc.
type PerformanceRole struct {
	Role

	CharacterName interface{} `json:"characterName,omitempty"` // The name of a character played in some acting or performing role, i.e. in a PerformanceRole.
}

// A theater or other performing art center.
type PerformingArtsTheater struct {
	CivicStructure
}

// A performance group, such as a band, an orchestra, or a circus.
type PerformingGroup struct {
	Organization
}

// A publication in any medium issued in successive parts bearing numerical or chronological designations and intended, such as a magazine, scholarly journal, or newspaper to continue indefinitely.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
type Periodical struct {
	CreativeWorkSeries
}

// A permit issued by an organization, e.g. a parking pass.
type Permit struct {
	Intangible

	IssuedBy       interface{} `json:"issuedBy,omitempty"`       // The organization issuing the ticket or permit.
	IssuedThrough  interface{} `json:"issuedThrough,omitempty"`  // The service through with the permit was granted.
	PermitAudience interface{} `json:"permitAudience,omitempty"` // The target audience for this permit.
	ValidFor       interface{} `json:"validFor,omitempty"`       // The duration of validity of a permit or similar thing.
	ValidFrom      interface{} `json:"validFrom,omitempty"`      // The date when the item becomes valid.
	ValidIn        interface{} `json:"validIn,omitempty"`        // The geographic area where a permit or similar thing is valid.
	ValidUntil     interface{} `json:"validUntil,omitempty"`     // The date when the item is no longer valid.
}

// A person (alive, dead, undead, or fictional).
type Person struct {
	Thing

	AdditionalName       interface{} `json:"additionalName,omitempty"`       // An additional name for a Person, can be used for a middle name.
	Address              interface{} `json:"address,omitempty"`              // Physical address of the item.
	Affiliation          interface{} `json:"affiliation,omitempty"`          // An organization that this person is affiliated with. For example, a school/university, a club, or a team.
	AlumniOf             interface{} `json:"alumniOf,omitempty"`             // An organization that the person is an alumni of.
	Award                interface{} `json:"award,omitempty"`                // An award won by or for this item.
	Awards               interface{} `json:"awards,omitempty"`               // Awards won by or for this item.
	BirthDate            interface{} `json:"birthDate,omitempty"`            // Date of birth.
	BirthPlace           interface{} `json:"birthPlace,omitempty"`           // The place where the person was born.
	Brand                interface{} `json:"brand,omitempty"`                // The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
	CallSign             interface{} `json:"callSign,omitempty"`             // A [callsign](https://en.wikipedia.org/wiki/Call_sign), as used in broadcasting and radio communications to identify people, radio and TV stations, or vehicles.
	Children             interface{} `json:"children,omitempty"`             // A child of the person.
	Colleague            interface{} `json:"colleague,omitempty"`            // A colleague of the person.
	Colleagues           interface{} `json:"colleagues,omitempty"`           // A colleague of the person.
	ContactPoint         interface{} `json:"contactPoint,omitempty"`         // A contact point for a person or organization.
	ContactPoints        interface{} `json:"contactPoints,omitempty"`        // A contact point for a person or organization.
	DeathDate            interface{} `json:"deathDate,omitempty"`            // Date of death.
	DeathPlace           interface{} `json:"deathPlace,omitempty"`           // The place where the person died.
	Duns                 interface{} `json:"duns,omitempty"`                 // The Dun & Bradstreet DUNS number for identifying an organization or business person.
	Email                interface{} `json:"email,omitempty"`                // Email address.
	FamilyName           interface{} `json:"familyName,omitempty"`           // Family name. In the U.S., the last name of a Person.
	FaxNumber            interface{} `json:"faxNumber,omitempty"`            // The fax number.
	Follows              interface{} `json:"follows,omitempty"`              // The most generic uni-directional social relation.
	Funder               interface{} `json:"funder,omitempty"`               // A person or organization that supports (sponsors) something through some kind of financial contribution.
	Funding              interface{} `json:"funding,omitempty"`              // A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
	Gender               interface{} `json:"gender,omitempty"`               // Gender of something, typically a [[Person]], but possibly also fictional characters, animals, etc. While https://schema.org/Male and https://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender. The [[gender]] property can also be used in an extended sense to cover e.g. the gender of sports teams. As with the gender of individuals, we do not try to enumerate all possibilities. A mixed-gender [[SportsTeam]] can be indicated with a text value of "Mixed".
	GivenName            interface{} `json:"givenName,omitempty"`            // Given name. In the U.S., the first name of a Person.
	GlobalLocationNumber interface{} `json:"globalLocationNumber,omitempty"` // The [Global Location Number](http://www.gs1.org/gln) (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.
	HasCredential        interface{} `json:"hasCredential,omitempty"`        // A credential awarded to the Person or Organization.
	HasOccupation        interface{} `json:"hasOccupation,omitempty"`        // The Person's occupation. For past professions, use Role for expressing dates.
	HasOfferCatalog      interface{} `json:"hasOfferCatalog,omitempty"`      // Indicates an OfferCatalog listing for this Organization, Person, or Service.
	HasPOS               interface{} `json:"hasPOS,omitempty"`               // Points-of-Sales operated by the organization or person.
	Height               interface{} `json:"height,omitempty"`               // The height of the item.
	HomeLocation         interface{} `json:"homeLocation,omitempty"`         // A contact location for a person's residence.
	HonorificPrefix      interface{} `json:"honorificPrefix,omitempty"`      // An honorific prefix preceding a Person's name such as Dr/Mrs/Mr.
	HonorificSuffix      interface{} `json:"honorificSuffix,omitempty"`      // An honorific suffix following a Person's name such as M.D. /PhD/MSCSW.
	InteractionStatistic interface{} `json:"interactionStatistic,omitempty"` // The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used.
	IsicV4               interface{} `json:"isicV4,omitempty"`               // The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.
	JobTitle             interface{} `json:"jobTitle,omitempty"`             // The job title of the person (for example, Financial Manager).
	Knows                interface{} `json:"knows,omitempty"`                // The most generic bi-directional social/work relation.
	KnowsAbout           interface{} `json:"knowsAbout,omitempty"`           // Of a [[Person]], and less typically of an [[Organization]], to indicate a topic that is known about - suggesting possible expertise but not implying it. We do not distinguish skill levels here, or relate this to educational content, events, objectives or [[JobPosting]] descriptions.
	KnowsLanguage        interface{} `json:"knowsLanguage,omitempty"`        // Of a [[Person]], and less typically of an [[Organization]], to indicate a known language. We do not distinguish skill levels or reading/writing/speaking/signing here. Use language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47).
	MakesOffer           interface{} `json:"makesOffer,omitempty"`           // A pointer to products or services offered by the organization or person.
	MemberOf             interface{} `json:"memberOf,omitempty"`             // An Organization (or ProgramMembership) to which this Person or Organization belongs.
	Naics                interface{} `json:"naics,omitempty"`                // The North American Industry Classification System (NAICS) code for a particular organization or business person.
	Nationality          interface{} `json:"nationality,omitempty"`          // Nationality of the person.
	NetWorth             interface{} `json:"netWorth,omitempty"`             // The total financial value of the person as calculated by subtracting assets from liabilities.
	Owns                 interface{} `json:"owns,omitempty"`                 // Products owned by the organization or person.
	Parent               interface{} `json:"parent,omitempty"`               // A parent of this person.
	Parents              interface{} `json:"parents,omitempty"`              // A parents of the person.
	PerformerIn          interface{} `json:"performerIn,omitempty"`          // Event that this person is a performer or participant in.
	PublishingPrinciples interface{} `json:"publishingPrinciples,omitempty"` /*
	The publishingPrinciples property indicates (typically via [[URL]]) a document describing the editorial principles of an [[Organization]] (or individual e.g. a [[Person]] writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a [[CreativeWork]] (e.g. [[NewsArticle]]) the principles are those of the party primarily responsible for the creation of the [[CreativeWork]].

	While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a [[funder]]) can be expressed using schema.org terminology.
	*/
	RelatedTo    interface{} `json:"relatedTo,omitempty"`    // The most generic familial relation.
	Seeks        interface{} `json:"seeks,omitempty"`        // A pointer to products or services sought by the organization or person (demand).
	Sibling      interface{} `json:"sibling,omitempty"`      // A sibling of the person.
	Siblings     interface{} `json:"siblings,omitempty"`     // A sibling of the person.
	Sponsor      interface{} `json:"sponsor,omitempty"`      // A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
	Spouse       interface{} `json:"spouse,omitempty"`       // The person's spouse.
	TaxID        interface{} `json:"taxID,omitempty"`        // The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.
	Telephone    interface{} `json:"telephone,omitempty"`    // The telephone number.
	VatID        interface{} `json:"vatID,omitempty"`        // The Value-added Tax ID of the organization or person.
	Weight       interface{} `json:"weight,omitempty"`       // The weight of the product or person.
	WorkLocation interface{} `json:"workLocation,omitempty"` // A contact location for a person's place of work.
	WorksFor     interface{} `json:"worksFor,omitempty"`     // Organizations that the person works for.
}

// A pet store.
type PetStore struct {
	Store
}

// A pharmacy or drugstore.
type Pharmacy struct {
	MedicalBusiness
	// TODO: MedicalOrganization
}

// A photograph.
type Photograph struct {
	CreativeWork
}

// The act of capturing still images of objects using a camera.
type PhotographAction struct {
	CreateAction
}

// Any bodily activity that enhances or maintains physical fitness and overall health and wellness. Includes activity that is part of daily living and routine, structured exercise, and exercise prescribed as part of a medical treatment or recovery plan.
type PhysicalActivity struct {
	LifestyleModification

	AssociatedAnatomy interface{} `json:"associatedAnatomy,omitempty"` // The anatomy of the underlying organ system or structures associated with this entity.
	Category          interface{} `json:"category,omitempty"`          // A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
	Epidemiology      interface{} `json:"epidemiology,omitempty"`      // The characteristics of associated patients, such as age, gender, race etc.
	Pathophysiology   interface{} `json:"pathophysiology,omitempty"`   // Changes in the normal mechanical, physical, and biochemical functions that are associated with this activity or condition.
}

// Categories of physical activity, organized by physiologic classification.
type PhysicalActivityCategory struct {
	Enumeration
}

// A type of physical examination of a patient performed by a physician.
type PhysicalExam struct {
	MedicalEnumeration
	// TODO: MedicalProcedure
}

// A process of progressive physical care and rehabilitation aimed at improving a health condition.
type PhysicalTherapy struct {
	MedicalTherapy
}

// A doctor's office.
type Physician struct {
	MedicalBusiness
	// TODO: MedicalOrganization

	AvailableService    interface{} `json:"availableService,omitempty"`    // A medical service available from this provider.
	HospitalAffiliation interface{} `json:"hospitalAffiliation,omitempty"` // A hospital with which the physician or office is affiliated.
	MedicalSpecialty    interface{} `json:"medicalSpecialty,omitempty"`    // A medical specialty of the provider.
}

// Entities that have a somewhat fixed, physical extension.
type Place struct {
	Thing

	AdditionalProperty interface{} `json:"additionalProperty,omitempty"` /*
	A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.\n\nNote: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
	*/
	Address         interface{} `json:"address,omitempty"`         // Physical address of the item.
	AggregateRating interface{} `json:"aggregateRating,omitempty"` // The overall rating, based on a collection of reviews or ratings, of the item.
	AmenityFeature  interface{} `json:"amenityFeature,omitempty"`  // An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs.
	BranchCode      interface{} `json:"branchCode,omitempty"`      /*
	A short textual code (also called "store code") that uniquely identifies a place of business. The code is typically assigned by the parentOrganization and used in structured URLs.\n\nFor example, in the URL http://www.starbucks.co.uk/store-locator/etc/detail/3047 the code "3047" is a branchCode for a particular branch.

	*/
	ContainedIn                      interface{} `json:"containedIn,omitempty"`                      // The basic containment relation between a place and one that contains it.
	ContainedInPlace                 interface{} `json:"containedInPlace,omitempty"`                 // The basic containment relation between a place and one that contains it.
	ContainsPlace                    interface{} `json:"containsPlace,omitempty"`                    // The basic containment relation between a place and another that it contains.
	Event                            interface{} `json:"event,omitempty"`                            // Upcoming or past event associated with this place, organization, or action.
	Events                           interface{} `json:"events,omitempty"`                           // Upcoming or past events associated with this place or organization.
	FaxNumber                        interface{} `json:"faxNumber,omitempty"`                        // The fax number.
	Geo                              interface{} `json:"geo,omitempty"`                              // The geo coordinates of the place.
	GeoContains                      interface{} `json:"geoContains,omitempty"`                      // Represents a relationship between two geometries (or the places they represent), relating a containing geometry to a contained geometry. "a contains b iff no points of b lie in the exterior of a, and at least one point of the interior of b lies in the interior of a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoCoveredBy                     interface{} `json:"geoCoveredBy,omitempty"`                     // Represents a relationship between two geometries (or the places they represent), relating a geometry to another that covers it. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoCovers                        interface{} `json:"geoCovers,omitempty"`                        // Represents a relationship between two geometries (or the places they represent), relating a covering geometry to a covered geometry. "Every point of b is a point of (the interior or boundary of) a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoCrosses                       interface{} `json:"geoCrosses,omitempty"`                       // Represents a relationship between two geometries (or the places they represent), relating a geometry to another that crosses it: "a crosses b: they have some but not all interior points in common, and the dimension of the intersection is less than that of at least one of them". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoDisjoint                      interface{} `json:"geoDisjoint,omitempty"`                      // Represents spatial relations in which two geometries (or the places they represent) are topologically disjoint: they have no point in common. They form a set of disconnected geometries." (a symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM))
	GeoEquals                        interface{} `json:"geoEquals,omitempty"`                        // Represents spatial relations in which two geometries (or the places they represent) are topologically equal, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM). "Two geometries are topologically equal if their interiors intersect and no part of the interior or boundary of one geometry intersects the exterior of the other" (a symmetric relationship)
	GeoIntersects                    interface{} `json:"geoIntersects,omitempty"`                    // Represents spatial relations in which two geometries (or the places they represent) have at least one point in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoOverlaps                      interface{} `json:"geoOverlaps,omitempty"`                      // Represents a relationship between two geometries (or the places they represent), relating a geometry to another that geospatially overlaps it, i.e. they have some but not all points in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoTouches                       interface{} `json:"geoTouches,omitempty"`                       // Represents spatial relations in which two geometries (or the places they represent) touch: they have at least one boundary point in common, but no interior points." (a symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM) )
	GeoWithin                        interface{} `json:"geoWithin,omitempty"`                        // Represents a relationship between two geometries (or the places they represent), relating a geometry to one that contains it, i.e. it is inside (i.e. within) its interior. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GlobalLocationNumber             interface{} `json:"globalLocationNumber,omitempty"`             // The [Global Location Number](http://www.gs1.org/gln) (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.
	HasDriveThroughService           interface{} `json:"hasDriveThroughService,omitempty"`           // Indicates whether some facility (e.g. [[FoodEstablishment]], [[CovidTestingFacility]]) offers a service that can be used by driving through in a car. In the case of [[CovidTestingFacility]] such facilities could potentially help with social distancing from other potentially-infected users.
	HasMap                           interface{} `json:"hasMap,omitempty"`                           // A URL to a map of the place.
	IsAccessibleForFree              interface{} `json:"isAccessibleForFree,omitempty"`              // A flag to signal that the item, event, or place is accessible for free.
	IsicV4                           interface{} `json:"isicV4,omitempty"`                           // The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.
	Keywords                         interface{} `json:"keywords,omitempty"`                         // Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
	Latitude                         interface{} `json:"latitude,omitempty"`                         // The latitude of a location. For example ```37.42242``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
	Logo                             interface{} `json:"logo,omitempty"`                             // An associated logo.
	Longitude                        interface{} `json:"longitude,omitempty"`                        // The longitude of a location. For example ```-122.08585``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
	Map_                             interface{} `json:"map_,omitempty"`                             // A URL to a map of the place.
	Maps                             interface{} `json:"maps,omitempty"`                             // A URL to a map of the place.
	MaximumAttendeeCapacity          interface{} `json:"maximumAttendeeCapacity,omitempty"`          // The total number of individuals that may attend an event or venue.
	OpeningHoursSpecification        interface{} `json:"openingHoursSpecification,omitempty"`        // The opening hours of a certain place.
	Photo                            interface{} `json:"photo,omitempty"`                            // A photograph of this place.
	Photos                           interface{} `json:"photos,omitempty"`                           // Photographs of this place.
	PublicAccess                     interface{} `json:"publicAccess,omitempty"`                     // A flag to signal that the [[Place]] is open to public visitors.  If this property is omitted there is no assumed default boolean value
	Review                           interface{} `json:"review,omitempty"`                           // A review of the item.
	Reviews                          interface{} `json:"reviews,omitempty"`                          // Review of the item.
	Slogan                           interface{} `json:"slogan,omitempty"`                           // A slogan or motto associated with the item.
	SmokingAllowed                   interface{} `json:"smokingAllowed,omitempty"`                   // Indicates whether it is allowed to smoke in the place, e.g. in the restaurant, hotel or hotel room.
	SpecialOpeningHoursSpecification interface{} `json:"specialOpeningHoursSpecification,omitempty"` /*
	The special opening hours of a certain place.\n\nUse this to explicitly override general opening hours brought in scope by [[openingHoursSpecification]] or [[openingHours]].

	*/
	Telephone       interface{} `json:"telephone,omitempty"`       // The telephone number.
	TourBookingPage interface{} `json:"tourBookingPage,omitempty"` // A page providing information on how to book a tour of some [[Place]], such as an [[Accommodation]] or [[ApartmentComplex]] in a real estate setting, as well as other kinds of tours as appropriate.
}

// Place of worship, such as a church, synagogue, or mosque.
type PlaceOfWorship struct {
	CivicStructure
}

// The act of planning the execution of an event/task/action/reservation/plan to a future date.
type PlanAction struct {
	OrganizeAction

	ScheduledTime interface{} `json:"scheduledTime,omitempty"` // The time the object is scheduled to.
}

// A play is a form of literature, usually consisting of dialogue between characters, intended for theatrical performance rather than just reading. Note: A performance of a Play would be a [[TheaterEvent]] or [[BroadcastEvent]] - the *Play* being the [[workPerformed]].
type Play struct {
	CreativeWork
}

// The act of playing/exercising/training/performing for enjoyment, leisure, recreation, Competition or exercise.\n\nRelated actions:\n\n* [[ListenAction]]: Unlike ListenAction (which is under ConsumeAction), PlayAction refers to performing for an audience or at an event, rather than consuming music.\n* [[WatchAction]]: Unlike WatchAction (which is under ConsumeAction), PlayAction refers to showing/displaying for an audience or at an event, rather than consuming visual content.
type PlayAction struct {
	Action

	Audience interface{} `json:"audience,omitempty"` // An intended audience, i.e. a group for whom something was created.
	Event    interface{} `json:"event,omitempty"`    // Upcoming or past event associated with this place, organization, or action.
}

// The act of playing a video game.
type PlayGameAction struct {
	ConsumeAction

	GameAvailabilityType interface{} `json:"gameAvailabilityType,omitempty"` // Indicates the availability type of the game content associated with this action, such as whether it is a full version or a demo.
}

// A playground.
type Playground struct {
	CivicStructure
}

// A plumbing service.
type Plumber struct {
	HomeAndConstructionBusiness
}

// A single episode of a podcast series.
type PodcastEpisode struct {
	Episode
}

// A single season of a podcast. Many podcasts do not break down into separate seasons. In that case, PodcastSeries should be used.
type PodcastSeason struct {
	CreativeWorkSeason
}

// A podcast is an episodic series of digital audio or video files which a user can download and listen to.
type PodcastSeries struct {
	CreativeWorkSeries

	Actor   interface{} `json:"actor,omitempty"`   // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	WebFeed interface{} `json:"webFeed,omitempty"` // The URL for a feed, e.g. associated with a podcast series, blog, or series of date-stamped updates. This is usually RSS or Atom.
}

// A police station.
type PoliceStation struct {
	CivicStructure
	// TODO: EmergencyService
}

// A pond.
type Pond struct {
	BodyOfWater
}

// A post office.
type PostOffice struct {
	GovernmentOffice
}

// The mailing address.
type PostalAddress struct {
	ContactPoint

	AddressCountry      interface{} `json:"addressCountry,omitempty"`      // The country. For example, USA. You can also provide the two-letter [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1).
	AddressLocality     interface{} `json:"addressLocality,omitempty"`     // The locality in which the street address is, and which is in the region. For example, Mountain View.
	AddressRegion       interface{} `json:"addressRegion,omitempty"`       // The region in which the locality is, and which is in the country. For example, California or another appropriate first-level [Administrative division](https://en.wikipedia.org/wiki/List_of_administrative_divisions_by_country)
	PostOfficeBoxNumber interface{} `json:"postOfficeBoxNumber,omitempty"` // The post office box number for PO box addresses.
	PostalCode          interface{} `json:"postalCode,omitempty"`          // The postal code. For example, 94043.
	StreetAddress       interface{} `json:"streetAddress,omitempty"`       // The street address. For example, 1600 Amphitheatre Pkwy.
}

// Indicates a range of postalcodes, usually defined as the set of valid codes between [[postalCodeBegin]] and [[postalCodeEnd]], inclusively.
type PostalCodeRangeSpecification struct {
	StructuredValue

	PostalCodeBegin interface{} `json:"postalCodeBegin,omitempty"` // First postal code in a range (included).
	PostalCodeEnd   interface{} `json:"postalCodeEnd,omitempty"`   // Last postal code in the range (included). Needs to be after [[postalCodeBegin]].
}

// A large, usually printed placard, bill, or announcement, often illustrated, that is posted to advertise or publicize something.
type Poster struct {
	CreativeWork
}

// An agent orders a (not yet released) object/product/service to be delivered/sent.
type PreOrderAction struct {
	TradeAction
}

// The act of inserting at the beginning if an ordered collection.
type PrependAction struct {
	InsertAction
}

// A preschool.
type Preschool struct {
	EducationalOrganization
}

// A file containing slides or used for a presentation.
type PresentationDigitalDocument struct {
	DigitalDocument
}

// An indication for preventing an underlying condition, symptom, etc.
type PreventionIndication struct {
	MedicalIndication
}

// Enumerates different price components that together make up the total price for an offered product.
type PriceComponentTypeEnumeration struct {
	Enumeration
}

// A structured value representing a price or price range. Typically, only the subclasses of this type are used for markup. It is recommended to use [[MonetaryAmount]] to describe independent amounts of money such as a salary, credit card limits, etc.
type PriceSpecification struct {
	StructuredValue

	EligibleQuantity          interface{} `json:"eligibleQuantity,omitempty"`          // The interval and unit of measurement of ordering quantities for which the offer or price specification is valid. This allows e.g. specifying that a certain freight charge is valid only for a certain quantity.
	EligibleTransactionVolume interface{} `json:"eligibleTransactionVolume,omitempty"` // The transaction volume, in a monetary unit, for which the offer or price specification is valid, e.g. for indicating a minimal purchasing volume, to express free shipping above a certain order volume, or to limit the acceptance of credit cards to purchases to a certain minimal amount.
	MaxPrice                  interface{} `json:"maxPrice,omitempty"`                  // The highest price if the price is a range.
	MinPrice                  interface{} `json:"minPrice,omitempty"`                  // The lowest price if the price is a range.
	Price                     interface{} `json:"price,omitempty"`                     /*
	The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.\n\nUsage guidelines:\n\n* Use the [[priceCurrency]] property (with standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR") instead of including [ambiguous symbols](http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign) such as '$' in the value.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.\n* Note that both [RDFa](http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute) and Microdata syntax allow the use of a "content=" attribute for publishing simple machine-readable values alongside more human-friendly formatting.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.

	*/
	PriceCurrency         interface{} `json:"priceCurrency,omitempty"`         // The currency of the price, or a price component when attached to [[PriceSpecification]] and its subtypes.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	ValidFrom             interface{} `json:"validFrom,omitempty"`             // The date when the item becomes valid.
	ValidThrough          interface{} `json:"validThrough,omitempty"`          // The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
	ValueAddedTaxIncluded interface{} `json:"valueAddedTaxIncluded,omitempty"` // Specifies whether the applicable value-added tax (VAT) is included in the price specification or not.
}

// Enumerates different price types, for example list price, invoice price, and sale price.
type PriceTypeEnumeration struct {
	Enumeration
}

// Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
type Product struct {
	Thing

	AdditionalProperty interface{} `json:"additionalProperty,omitempty"` /*
	A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.\n\nNote: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
	*/
	AggregateRating         interface{} `json:"aggregateRating,omitempty"`         // The overall rating, based on a collection of reviews or ratings, of the item.
	Audience                interface{} `json:"audience,omitempty"`                // An intended audience, i.e. a group for whom something was created.
	Award                   interface{} `json:"award,omitempty"`                   // An award won by or for this item.
	Awards                  interface{} `json:"awards,omitempty"`                  // Awards won by or for this item.
	Brand                   interface{} `json:"brand,omitempty"`                   // The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
	Category                interface{} `json:"category,omitempty"`                // A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
	Color                   interface{} `json:"color,omitempty"`                   // The color of the product.
	CountryOfAssembly       interface{} `json:"countryOfAssembly,omitempty"`       // The place where the product was assembled.
	CountryOfLastProcessing interface{} `json:"countryOfLastProcessing,omitempty"` // The place where the item (typically [[Product]]) was last processed and tested before importation.
	CountryOfOrigin         interface{} `json:"countryOfOrigin,omitempty"`         /*
	The country of origin of something, including products as well as creative  works such as movie and TV content.

	In the case of TV and movie, this would be the country of the principle offices of the production company or individual responsible for the movie. For other kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties such as [[contentLocation]] and [[locationCreated]] may be more applicable.

	In the case of products, the country of origin of the product. The exact interpretation of this may vary by context and product type, and cannot be fully enumerated here.
	*/
	Depth   interface{} `json:"depth,omitempty"`   // The depth of the item.
	Funding interface{} `json:"funding,omitempty"` // A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
	Gtin    interface{} `json:"gtin,omitempty"`    /*
	A Global Trade Item Number ([GTIN](https://www.gs1.org/standards/id-keys/gtin)). GTINs identify trade items, including products and services, using numeric identification codes. The [[gtin]] property generalizes the earlier [[gtin8]], [[gtin12]], [[gtin13]], and [[gtin14]] properties. The GS1 [digital link specifications](https://www.gs1.org/standards/Digital-Link/) express GTINs as URLs. A correct [[gtin]] value should be a valid GTIN, which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or a "GS1 Digital Link" URL based on such a string. The numeric component should also have a [valid GS1 check digit](https://www.gs1.org/services/check-digit-calculator) and meet the other rules for valid GTINs. See also [GS1's GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) and [Wikipedia](https://en.wikipedia.org/wiki/Global_Trade_Item_Number) for more details. Left-padding of the gtin values is not required or encouraged.

	*/
	Gtin12                      interface{} `json:"gtin12,omitempty"`                      // The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin13                      interface{} `json:"gtin13,omitempty"`                      // The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceding zero. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin14                      interface{} `json:"gtin14,omitempty"`                      // The GTIN-14 code of the product, or the product to which the offer refers. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin8                       interface{} `json:"gtin8,omitempty"`                       // The GTIN-8 code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	HasAdultConsideration       interface{} `json:"hasAdultConsideration,omitempty"`       // Used to tag an item to be intended or suitable for consumption or use by adults only.
	HasEnergyConsumptionDetails interface{} `json:"hasEnergyConsumptionDetails,omitempty"` // Defines the energy efficiency Category (also known as "class" or "rating") for a product according to an international energy efficiency standard.
	HasMeasurement              interface{} `json:"hasMeasurement,omitempty"`              // A product measurement, for example the inseam of pants, the wheel size of a bicycle, or the gauge of a screw. Usually an exact measurement, but can also be a range of measurements for adjustable products, for example belts and ski bindings.
	HasMerchantReturnPolicy     interface{} `json:"hasMerchantReturnPolicy,omitempty"`     // Specifies a MerchantReturnPolicy that may be applicable.
	Height                      interface{} `json:"height,omitempty"`                      // The height of the item.
	InProductGroupWithID        interface{} `json:"inProductGroupWithID,omitempty"`        // Indicates the [[productGroupID]] for a [[ProductGroup]] that this product [[isVariantOf]].
	IsAccessoryOrSparePartFor   interface{} `json:"isAccessoryOrSparePartFor,omitempty"`   // A pointer to another product (or multiple products) for which this product is an accessory or spare part.
	IsConsumableFor             interface{} `json:"isConsumableFor,omitempty"`             // A pointer to another product (or multiple products) for which this product is a consumable.
	IsFamilyFriendly            interface{} `json:"isFamilyFriendly,omitempty"`            // Indicates whether this content is family friendly.
	IsRelatedTo                 interface{} `json:"isRelatedTo,omitempty"`                 // A pointer to another, somehow related product (or multiple products).
	IsSimilarTo                 interface{} `json:"isSimilarTo,omitempty"`                 // A pointer to another, functionally similar product (or multiple products).
	IsVariantOf                 interface{} `json:"isVariantOf,omitempty"`                 // Indicates the kind of product that this is a variant of. In the case of [[ProductModel]], this is a pointer (from a ProductModel) to a base product from which this product is a variant. It is safe to infer that the variant inherits all product features from the base model, unless defined locally. This is not transitive. In the case of a [[ProductGroup]], the group description also serves as a template, representing a set of Products that vary on explicitly defined, specific dimensions only (so it defines both a set of variants, as well as which values distinguish amongst those variants). When used with [[ProductGroup]], this property can apply to any [[Product]] included in the group.
	ItemCondition               interface{} `json:"itemCondition,omitempty"`               // A predefined value from OfferItemCondition specifying the condition of the product or service, or the products or services included in the offer. Also used for product return policies to specify the condition of products accepted for returns.
	Keywords                    interface{} `json:"keywords,omitempty"`                    // Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
	Logo                        interface{} `json:"logo,omitempty"`                        // An associated logo.
	Manufacturer                interface{} `json:"manufacturer,omitempty"`                // The manufacturer of the product.
	Material                    interface{} `json:"material,omitempty"`                    // A material that something is made from, e.g. leather, wool, cotton, paper.
	Model                       interface{} `json:"model,omitempty"`                       // The model of the product. Use with the URL of a ProductModel or a textual representation of the model identifier. The URL of the ProductModel can be from an external source. It is recommended to additionally provide strong product identifiers via the gtin8/gtin13/gtin14 and mpn properties.
	Mpn                         interface{} `json:"mpn,omitempty"`                         // The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers.
	Nsn                         interface{} `json:"nsn,omitempty"`                         // Indicates the [NATO stock number](https://en.wikipedia.org/wiki/NATO_Stock_Number) (nsn) of a [[Product]].
	Offers                      interface{} `json:"offers,omitempty"`                      /*
	An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.

	*/
	Pattern        interface{} `json:"pattern,omitempty"`        // A pattern that something has, for example 'polka dot', 'striped', 'Canadian flag'. Values are typically expressed as text, although links to controlled value schemes are also supported.
	ProductID      interface{} `json:"productID,omitempty"`      // The product identifier, such as ISBN. For example: ``` meta itemprop="productID" content="isbn:123-456-789" ```.
	ProductionDate interface{} `json:"productionDate,omitempty"` // The date of production of the item, e.g. vehicle.
	PurchaseDate   interface{} `json:"purchaseDate,omitempty"`   // The date the item e.g. vehicle was purchased by the current owner.
	ReleaseDate    interface{} `json:"releaseDate,omitempty"`    // The release date of a product or product model. This can be used to distinguish the exact variant of a product.
	Review         interface{} `json:"review,omitempty"`         // A review of the item.
	Reviews        interface{} `json:"reviews,omitempty"`        // Review of the item.
	Size           interface{} `json:"size,omitempty"`           // A standardized size of a product or creative work, specified either through a simple textual string (for example 'XL', '32Wx34L'), a  QuantitativeValue with a unitCode, or a comprehensive and structured [[SizeSpecification]]; in other cases, the [[width]], [[height]], [[depth]] and [[weight]] properties may be more applicable.
	Sku            interface{} `json:"sku,omitempty"`            // The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers.
	Slogan         interface{} `json:"slogan,omitempty"`         // A slogan or motto associated with the item.
	Weight         interface{} `json:"weight,omitempty"`         // The weight of the product or person.
	Width          interface{} `json:"width,omitempty"`          // The width of the item.
}

// A set of products (either [[ProductGroup]]s or specific variants) that are listed together e.g. in an [[Offer]].
type ProductCollection struct {
	Collection
	// TODO: Product

	IncludesObject interface{} `json:"includesObject,omitempty"` // This links to a node or nodes indicating the exact quantity of the products included in  an [[Offer]] or [[ProductCollection]].
}

/*
A ProductGroup represents a group of [[Product]]s that vary only in certain well-described ways, such as by [[size]], [[color]], [[material]] etc.

While a ProductGroup itself is not directly offered for sale, the various varying products that it represents can be. The ProductGroup serves as a prototype or template, standing in for all of the products who have an [[isVariantOf]] relationship to it. As such, properties (including additional types) can be applied to the ProductGroup to represent characteristics shared by each of the (possibly very many) variants. Properties that reference a ProductGroup are not included in this mechanism; neither are the following specific properties [[variesBy]], [[hasVariant]], [[url]].
*/
type ProductGroup struct {
	Product

	HasVariant     interface{} `json:"hasVariant,omitempty"`     // Indicates a [[Product]] that is a member of this [[ProductGroup]] (or [[ProductModel]]).
	ProductGroupID interface{} `json:"productGroupID,omitempty"` // Indicates a textual identifier for a ProductGroup.
	VariesBy       interface{} `json:"variesBy,omitempty"`       // Indicates the property or properties by which the variants in a [[ProductGroup]] vary, e.g. their size, color etc. Schema.org properties can be referenced by their short name e.g. "color"; terms defined elsewhere can be referenced with their URIs.
}

// A datasheet or vendor specification of a product (in the sense of a prototypical description).
type ProductModel struct {
	Product

	IsVariantOf   interface{} `json:"isVariantOf,omitempty"`   // Indicates the kind of product that this is a variant of. In the case of [[ProductModel]], this is a pointer (from a ProductModel) to a base product from which this product is a variant. It is safe to infer that the variant inherits all product features from the base model, unless defined locally. This is not transitive. In the case of a [[ProductGroup]], the group description also serves as a template, representing a set of Products that vary on explicitly defined, specific dimensions only (so it defines both a set of variants, as well as which values distinguish amongst those variants). When used with [[ProductGroup]], this property can apply to any [[Product]] included in the group.
	PredecessorOf interface{} `json:"predecessorOf,omitempty"` // A pointer from a previous, often discontinued variant of the product to its newer variant.
	SuccessorOf   interface{} `json:"successorOf,omitempty"`   // A pointer from a newer variant of a product  to its previous, often discontinued predecessor.
}

/*
Original definition: "provider of professional services."\n\nThe general [[ProfessionalService]] type for local businesses was deprecated due to confusion with [[Service]]. For reference, the types that it included were: [[Dentist]],
        [[AccountingService]], [[Attorney]], [[Notary]], as well as types for several kinds of [[HomeAndConstructionBusiness]]: [[Electrician]], [[GeneralContractor]],
        [[HousePainter]], [[Locksmith]], [[Plumber]], [[RoofingContractor]]. [[LegalService]] was introduced as a more inclusive supertype of [[Attorney]].
*/
type ProfessionalService struct {
	LocalBusiness
}

// Web page type: Profile page.
type ProfilePage struct {
	WebPage
}

// Used to describe membership in a loyalty programs (e.g. "StarAliance"), traveler clubs (e.g. "AAA"), purchase clubs ("Safeway Club"), etc.
type ProgramMembership struct {
	Intangible

	HostingOrganization    interface{} `json:"hostingOrganization,omitempty"`    // The organization (airline, travelers' club, etc.) the membership is made with.
	Member                 interface{} `json:"member,omitempty"`                 // A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals.
	Members                interface{} `json:"members,omitempty"`                // A member of this organization.
	MembershipNumber       interface{} `json:"membershipNumber,omitempty"`       // A unique identifier for the membership.
	MembershipPointsEarned interface{} `json:"membershipPointsEarned,omitempty"` // The number of membership points earned by the member. If necessary, the unitText can be used to express the units the points are issued in. (e.g. stars, miles, etc.)
	ProgramName            interface{} `json:"programName,omitempty"`            // The program providing the membership.
}

/*
An enterprise (potentially individual but typically collaborative), planned to achieve a particular aim.
Use properties from [[Organization]], [[subOrganization]]/[[parentOrganization]] to indicate project sub-structures.

*/
type Project struct {
	Organization
}

// Data type: PronounceableText.
type PronounceableText struct {
	Text

	InLanguage         interface{} `json:"inLanguage,omitempty"`         // The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
	PhoneticText       interface{} `json:"phoneticText,omitempty"`       // Representation of a text [[textValue]] using the specified [[speechToTextMarkup]]. For example the city name of Houston in IPA: /ˈhjuːstən/.
	SpeechToTextMarkup interface{} `json:"speechToTextMarkup,omitempty"` // Form of markup used. eg. [SSML](https://www.w3.org/TR/speech-synthesis11) or [IPA](https://www.wikidata.org/wiki/Property:P898).
	TextValue          interface{} `json:"textValue,omitempty"`          // Text value being annotated.
}

// A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
type Property struct {
	Intangible

	DomainIncludes interface{} `json:"domainIncludes,omitempty"` // Relates a property to a class that is (one of) the type(s) the property is expected to be used on.
	InverseOf      interface{} `json:"inverseOf,omitempty"`      // Relates a property to a property that is its inverse. Inverse properties relate the same pairs of items to each other, but in reversed direction. For example, the 'alumni' and 'alumniOf' properties are inverseOf each other. Some properties don't have explicit inverses; in these situations RDFa and JSON-LD syntax for reverse properties can be used.
	RangeIncludes  interface{} `json:"rangeIncludes,omitempty"`  // Relates a property to a class that constitutes (one of) the expected type(s) for values of the property.
	SupersededBy   interface{} `json:"supersededBy,omitempty"`   // Relates a term (i.e. a property, class or enumeration) to one that supersedes it.
}

/*
A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.

*/
type PropertyValue struct {
	StructuredValue

	MaxValue             interface{} `json:"maxValue,omitempty"`             // The upper value of some characteristic or property.
	MeasurementTechnique interface{} `json:"measurementTechnique,omitempty"` /*
	A technique or technology used in a [[Dataset]] (or [[DataDownload]], [[DataCatalog]]),
	corresponding to the method used for measuring the corresponding variable(s) (described using [[variableMeasured]]). This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but rather as a high level summary for dataset discovery.

	For example, if [[variableMeasured]] is: molecule concentration, [[measurementTechnique]] could be: "mass spectrometry" or "nmr spectroscopy" or "colorimetry" or "immunofluorescence".

	If the [[variableMeasured]] is "depression rating", the [[measurementTechnique]] could be "Zung Scale" or "HAM-D" or "Beck Depression Inventory".

	If there are several [[variableMeasured]] properties recorded for some given data object, use a [[PropertyValue]] for each [[variableMeasured]] and attach the corresponding [[measurementTechnique]].

	*/
	MinValue   interface{} `json:"minValue,omitempty"`   // The lower value of some characteristic or property.
	PropertyID interface{} `json:"propertyID,omitempty"` /*
	A commonly used identifier for the characteristic represented by the property, e.g. a manufacturer or a standard code for a property. propertyID can be
	(1) a prefixed string, mainly meant to be used with standards for product properties; (2) a site-specific, non-prefixed string (e.g. the primary key of the property or the vendor-specific id of the property), or (3)
	a URL indicating the type of the property, either pointing to an external vocabulary, or a Web resource that describes the property (e.g. a glossary entry).
	Standards bodies should promote a standard prefix for the identifiers of properties from their standards.
	*/
	UnitCode interface{} `json:"unitCode,omitempty"` // The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.
	UnitText interface{} `json:"unitText,omitempty"` /*
	A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for
	<a href='unitCode'>unitCode</a>.
	*/
	Value          interface{} `json:"value,omitempty"`          // The value of the quantitative value or property value node.\n\n* For [[QuantitativeValue]] and [[MonetaryAmount]], the recommended type for values is 'Number'.\n* For [[PropertyValue]], it can be 'Text;', 'Number', 'Boolean', or 'StructuredValue'.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
	ValueReference interface{} `json:"valueReference,omitempty"` // A secondary value that provides additional information on the original value, e.g. a reference temperature or a type of measurement.
}

// A Property value specification.
type PropertyValueSpecification struct {
	Intangible

	DefaultValue   interface{} `json:"defaultValue,omitempty"`   // The default value of the input.  For properties that expect a literal, the default is a literal value, for properties that expect an object, it's an ID reference to one of the current values.
	MaxValue       interface{} `json:"maxValue,omitempty"`       // The upper value of some characteristic or property.
	MinValue       interface{} `json:"minValue,omitempty"`       // The lower value of some characteristic or property.
	MultipleValues interface{} `json:"multipleValues,omitempty"` // Whether multiple values are allowed for the property.  Default is false.
	ReadonlyValue  interface{} `json:"readonlyValue,omitempty"`  // Whether or not a property is mutable.  Default is false. Specifying this for a property that also has a value makes it act similar to a "hidden" input in an HTML form.
	StepValue      interface{} `json:"stepValue,omitempty"`      // The stepValue attribute indicates the granularity that is expected (and required) of the value in a PropertyValueSpecification.
	ValueMaxLength interface{} `json:"valueMaxLength,omitempty"` // Specifies the allowed range for number of characters in a literal value.
	ValueMinLength interface{} `json:"valueMinLength,omitempty"` // Specifies the minimum allowed range for number of characters in a literal value.
	ValueName      interface{} `json:"valueName,omitempty"`      // Indicates the name of the PropertyValueSpecification to be used in URL templates and form encoding in a manner analogous to HTML's input@name.
	ValuePattern   interface{} `json:"valuePattern,omitempty"`   // Specifies a regular expression for testing literal values according to the HTML spec.
	ValueRequired  interface{} `json:"valueRequired,omitempty"`  // Whether the property must be filled in to complete the action.  Default is false.
}

// Protein is here used in its widest possible definition, as classes of amino acid based molecules. Amyloid-beta Protein in human (UniProt P05067), eukaryota (e.g. an OrthoDB group) or even a single molecule that one can point to are all of type schema:Protein. A protein can thus be a subclass of another protein, e.g. schema:Protein as a UniProt record can have multiple isoforms inside it which would also be schema:Protein. They can be imagined, synthetic, hypothetical or naturally occurring.
type Protein struct {
	BioChemEntity

	HasBioPolymerSequence interface{} `json:"hasBioPolymerSequence,omitempty"` // A symbolic representation of a BioChemEnity. For example, a nucleotide sequence of a Gene or an amino acid sequence of a Protein.
}

// A process of care relying upon counseling, dialogue and communication  aimed at improving a mental health condition without use of drugs.
type PsychologicalTreatment struct {
	TherapeuticProcedure
}

// A public swimming pool.
type PublicSwimmingPool struct {
	SportsActivityLocation
}

// A public toilet is a room or small building containing one or more toilets (and possibly also urinals) which is available for use by the general public, or by customers or employees of certain businesses.
type PublicToilet struct {
	CivicStructure
}

// A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
type PublicationEvent struct {
	Event

	Free        interface{} `json:"free,omitempty"`        // A flag to signal that the item, event, or place is accessible for free.
	PublishedBy interface{} `json:"publishedBy,omitempty"` // An agent associated with the publication event.
	PublishedOn interface{} `json:"publishedOn,omitempty"` // A broadcast service associated with the publication event.
}

// A part of a successively published publication such as a periodical or publication volume, often numbered, usually containing a grouping of works such as articles.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
type PublicationIssue struct {
	CreativeWork

	IssueNumber interface{} `json:"issueNumber,omitempty"` // Identifies the issue of publication; for example, "iii" or "2".
	PageEnd     interface{} `json:"pageEnd,omitempty"`     // The page on which the work ends; for example "138" or "xvi".
	PageStart   interface{} `json:"pageStart,omitempty"`   // The page on which the work starts; for example "135" or "xiii".
	Pagination  interface{} `json:"pagination,omitempty"`  // Any description of pages that is not separated into pageStart and pageEnd; for example, "1-6, 9, 55" or "10-12, 46-49".
}

// A part of a successively published publication such as a periodical or multi-volume work, often numbered. It may represent a time span, such as a year.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
type PublicationVolume struct {
	CreativeWork

	PageEnd      interface{} `json:"pageEnd,omitempty"`      // The page on which the work ends; for example "138" or "xvi".
	PageStart    interface{} `json:"pageStart,omitempty"`    // The page on which the work starts; for example "135" or "xiii".
	Pagination   interface{} `json:"pagination,omitempty"`   // Any description of pages that is not separated into pageStart and pageEnd; for example, "1-6, 9, 55" or "10-12, 46-49".
	VolumeNumber interface{} `json:"volumeNumber,omitempty"` // Identifies the volume of publication or multi-part work; for example, "iii" or "2".
}

// A QAPage is a WebPage focussed on a specific Question and its Answer(s), e.g. in a question answering site or documenting Frequently Asked Questions (FAQs).
type QAPage struct {
	WebPage
}

// A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
type QualitativeValue struct {
	Enumeration

	AdditionalProperty interface{} `json:"additionalProperty,omitempty"` /*
	A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.\n\nNote: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
	*/
	Equal          interface{} `json:"equal,omitempty"`          // This ordering relation for qualitative values indicates that the subject is equal to the object.
	Greater        interface{} `json:"greater,omitempty"`        // This ordering relation for qualitative values indicates that the subject is greater than the object.
	GreaterOrEqual interface{} `json:"greaterOrEqual,omitempty"` // This ordering relation for qualitative values indicates that the subject is greater than or equal to the object.
	Lesser         interface{} `json:"lesser,omitempty"`         // This ordering relation for qualitative values indicates that the subject is lesser than the object.
	LesserOrEqual  interface{} `json:"lesserOrEqual,omitempty"`  // This ordering relation for qualitative values indicates that the subject is lesser than or equal to the object.
	NonEqual       interface{} `json:"nonEqual,omitempty"`       // This ordering relation for qualitative values indicates that the subject is not equal to the object.
	ValueReference interface{} `json:"valueReference,omitempty"` // A secondary value that provides additional information on the original value, e.g. a reference temperature or a type of measurement.
}

//  A point value or interval for product characteristics and other purposes.
type QuantitativeValue struct {
	StructuredValue

	AdditionalProperty interface{} `json:"additionalProperty,omitempty"` /*
	A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.\n\nNote: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
	*/
	MaxValue interface{} `json:"maxValue,omitempty"` // The upper value of some characteristic or property.
	MinValue interface{} `json:"minValue,omitempty"` // The lower value of some characteristic or property.
	UnitCode interface{} `json:"unitCode,omitempty"` // The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.
	UnitText interface{} `json:"unitText,omitempty"` /*
	A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for
	<a href='unitCode'>unitCode</a>.
	*/
	Value          interface{} `json:"value,omitempty"`          // The value of the quantitative value or property value node.\n\n* For [[QuantitativeValue]] and [[MonetaryAmount]], the recommended type for values is 'Number'.\n* For [[PropertyValue]], it can be 'Text;', 'Number', 'Boolean', or 'StructuredValue'.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
	ValueReference interface{} `json:"valueReference,omitempty"` // A secondary value that provides additional information on the original value, e.g. a reference temperature or a type of measurement.
}

// A statistical distribution of values.
type QuantitativeValueDistribution struct {
	StructuredValue

	Duration     interface{} `json:"duration,omitempty"`     // The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	Median       interface{} `json:"median,omitempty"`       // The median value.
	Percentile10 interface{} `json:"percentile10,omitempty"` // The 10th percentile value.
	Percentile25 interface{} `json:"percentile25,omitempty"` // The 25th percentile value.
	Percentile75 interface{} `json:"percentile75,omitempty"` // The 75th percentile value.
	Percentile90 interface{} `json:"percentile90,omitempty"` // The 90th percentile value.
}

// Quantities such as distance, time, mass, weight, etc. Particular instances of say Mass are entities like '3 Kg' or '4 milligrams'.
type Quantity struct {
	Intangible
}

// A specific question - e.g. from a user seeking answers online, or collected in a Frequently Asked Questions (FAQ) document.
type Question struct {
	Comment

	AcceptedAnswer  interface{} `json:"acceptedAnswer,omitempty"`  // The answer(s) that has been accepted as best, typically on a Question/Answer site. Sites vary in their selection mechanisms, e.g. drawing on community opinion and/or the view of the Question author.
	AnswerCount     interface{} `json:"answerCount,omitempty"`     // The number of answers this question has received.
	EduQuestionType interface{} `json:"eduQuestionType,omitempty"` // For questions that are part of learning resources (e.g. Quiz), eduQuestionType indicates the format of question being given. Example: "Multiple choice", "Open ended", "Flashcard".
	SuggestedAnswer interface{} `json:"suggestedAnswer,omitempty"` // An answer (possibly one of several, possibly incorrect) to a Question, e.g. on a Question/Answer site.
}

// Quiz: A test of knowledge, skills and abilities.
type Quiz struct {
	LearningResource
}

// A quotation. Often but not necessarily from some written work, attributable to a real world author and - if associated with a fictional character - to any fictional Person. Use [[isBasedOn]] to link to source/origin. The [[recordedIn]] property can be used to reference a Quotation from an [[Event]].
type Quotation struct {
	CreativeWork

	SpokenByCharacter interface{} `json:"spokenByCharacter,omitempty"` // The (e.g. fictional) character, Person or Organization to whom the quotation is attributed within the containing CreativeWork.
}

// An agent quotes/estimates/appraises an object/product/service with a price at a location/store.
type QuoteAction struct {
	TradeAction
}

// A place offering space for "Recreational Vehicles", Caravans, mobile homes and the like.
type RVPark struct {
	CivicStructure
}

// A process of care using radiation aimed at improving a health condition.
type RadiationTherapy struct {
	MedicalTherapy
}

// A delivery service through which radio content is provided via broadcast over the air or online.
type RadioBroadcastService struct {
	BroadcastService
}

// A unique instance of a radio BroadcastService on a CableOrSatelliteService lineup.
type RadioChannel struct {
	BroadcastChannel
}

// A short radio program or a segment/part of a radio program.
type RadioClip struct {
	Clip
}

// A radio episode which can be part of a series or season.
type RadioEpisode struct {
	Episode
}

// Season dedicated to radio broadcast and associated online delivery.
type RadioSeason struct {
	CreativeWorkSeason
}

// CreativeWorkSeries dedicated to radio broadcast and associated online delivery.
type RadioSeries struct {
	CreativeWorkSeries

	Actor             interface{} `json:"actor,omitempty"`             // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Actors            interface{} `json:"actors,omitempty"`            // An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
	ContainsSeason    interface{} `json:"containsSeason,omitempty"`    // A season that is part of the media series.
	Director          interface{} `json:"director,omitempty"`          // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	Directors         interface{} `json:"directors,omitempty"`         // A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
	Episode           interface{} `json:"episode,omitempty"`           // An episode of a tv, radio or game media within a series or season.
	Episodes          interface{} `json:"episodes,omitempty"`          // An episode of a TV/radio series or season.
	MusicBy           interface{} `json:"musicBy,omitempty"`           // The composer of the soundtrack.
	NumberOfEpisodes  interface{} `json:"numberOfEpisodes,omitempty"`  // The number of episodes in this season or series.
	NumberOfSeasons   interface{} `json:"numberOfSeasons,omitempty"`   // The number of seasons in this series.
	ProductionCompany interface{} `json:"productionCompany,omitempty"` // The production company or studio responsible for the item e.g. series, video game, episode etc.
	Season            interface{} `json:"season,omitempty"`            // A season in a media series.
	Seasons           interface{} `json:"seasons,omitempty"`           // A season in a media series.
	Trailer           interface{} `json:"trailer,omitempty"`           // The trailer of a movie or tv/radio series, season, episode, etc.
}

// A radio station.
type RadioStation struct {
	LocalBusiness
}

// A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
type Rating struct {
	Intangible

	Author            interface{} `json:"author,omitempty"`            // The author of this content or rating. Please note that author is special in that HTML 5 provides a special mechanism for indicating authorship via the rel tag. That is equivalent to this and may be used interchangeably.
	BestRating        interface{} `json:"bestRating,omitempty"`        // The highest value allowed in this rating system. If bestRating is omitted, 5 is assumed.
	RatingExplanation interface{} `json:"ratingExplanation,omitempty"` // A short explanation (e.g. one to two sentences) providing background context and other information that led to the conclusion expressed in the rating. This is particularly applicable to ratings associated with "fact check" markup using [[ClaimReview]].
	RatingValue       interface{} `json:"ratingValue,omitempty"`       // The rating for the content.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
	ReviewAspect      interface{} `json:"reviewAspect,omitempty"`      // This Review or Rating is relevant to this part or facet of the itemReviewed.
	WorstRating       interface{} `json:"worstRating,omitempty"`       // The lowest value allowed in this rating system. If worstRating is omitted, 1 is assumed.
}

// The act of responding instinctively and emotionally to an object, expressing a sentiment.
type ReactAction struct {
	AssessAction
}

// The act of consuming written content.
type ReadAction struct {
	ConsumeAction
}

// A real-estate agent.
type RealEstateAgent struct {
	LocalBusiness
}

/*
A [[RealEstateListing]] is a listing that describes one or more real-estate [[Offer]]s (whose [[businessFunction]] is typically to lease out, or to sell).
  The [[RealEstateListing]] type itself represents the overall listing, as manifested in some [[WebPage]].

*/
type RealEstateListing struct {
	WebPage

	DatePosted  interface{} `json:"datePosted,omitempty"`  // Publication date of an online listing.
	LeaseLength interface{} `json:"leaseLength,omitempty"` // Length of the lease for some [[Accommodation]], either particular to some [[Offer]] or in some cases intrinsic to the property.
}

// The act of physically/electronically taking delivery of an object that has been transferred from an origin to a destination. Reciprocal of SendAction.\n\nRelated actions:\n\n* [[SendAction]]: The reciprocal of ReceiveAction.\n* [[TakeAction]]: Unlike TakeAction, ReceiveAction does not imply that the ownership has been transfered (e.g. I can receive a package, but it does not mean the package is now mine).
type ReceiveAction struct {
	TransferAction

	DeliveryMethod interface{} `json:"deliveryMethod,omitempty"` // A sub property of instrument. The method of delivery.
	Sender         interface{} `json:"sender,omitempty"`         // A sub property of participant. The participant who is at the sending end of the action.
}

// A recipe. For dietary restrictions covered by the recipe, a few common restrictions are enumerated via [[suitableForDiet]]. The [[keywords]] property can also be used to add more detail.
type Recipe struct {
	HowTo

	CookTime           interface{} `json:"cookTime,omitempty"`           // The time it takes to actually cook the dish, in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
	CookingMethod      interface{} `json:"cookingMethod,omitempty"`      // The method of cooking, such as Frying, Steaming, ...
	Ingredients        interface{} `json:"ingredients,omitempty"`        // A single ingredient used in the recipe, e.g. sugar, flour or garlic.
	Nutrition          interface{} `json:"nutrition,omitempty"`          // Nutrition information about the recipe or menu item.
	RecipeCategory     interface{} `json:"recipeCategory,omitempty"`     // The category of the recipe—for example, appetizer, entree, etc.
	RecipeCuisine      interface{} `json:"recipeCuisine,omitempty"`      // The cuisine of the recipe (for example, French or Ethiopian).
	RecipeIngredient   interface{} `json:"recipeIngredient,omitempty"`   // A single ingredient used in the recipe, e.g. sugar, flour or garlic.
	RecipeInstructions interface{} `json:"recipeInstructions,omitempty"` // A step in making the recipe, in the form of a single item (document, video, etc.) or an ordered list with HowToStep and/or HowToSection items.
	RecipeYield        interface{} `json:"recipeYield,omitempty"`        // The quantity produced by the recipe (for example, number of people served, number of servings, etc).
	SuitableForDiet    interface{} `json:"suitableForDiet,omitempty"`    // Indicates a dietary restriction or guideline for which this recipe or menu item is suitable, e.g. diabetic, halal etc.
}

// [[Recommendation]] is a type of [[Review]] that suggests or proposes something as the best option or best course of action. Recommendations may be for products or services, or other concrete things, as in the case of a ranked list or product guide. A [[Guide]] may list multiple recommendations for different categories. For example, in a [[Guide]] about which TVs to buy, the author may have several [[Recommendation]]s.
type Recommendation struct {
	Review

	Category interface{} `json:"category,omitempty"` // A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
}

// A recommended dosing schedule for a drug or supplement as prescribed or recommended by an authority or by the drug/supplement's manufacturer. Capture the recommending authority in the recognizingAuthority property of MedicalEntity.
type RecommendedDoseSchedule struct {
	DoseSchedule
}

// A recycling center.
type RecyclingCenter struct {
	LocalBusiness
}

// Enumerates several kinds of product return refund types.
type RefundTypeEnumeration struct {
	Enumeration
}

// The act of registering to be a user of a service, product or web page.\n\nRelated actions:\n\n* [[JoinAction]]: Unlike JoinAction, RegisterAction implies you are registering to be a user of a service, *not* a group/team of people.\n* [FollowAction]]: Unlike FollowAction, RegisterAction doesn't imply that the agent is expecting to poll for updates from the object.\n* [[SubscribeAction]]: Unlike SubscribeAction, RegisterAction doesn't imply that the agent is expecting updates from the object.
type RegisterAction struct {
	InteractAction
}

// The act of rejecting to/adopting an object.\n\nRelated actions:\n\n* [[AcceptAction]]: The antonym of RejectAction.
type RejectAction struct {
	AllocateAction
}

// The act of giving money in return for temporary use, but not ownership, of an object such as a vehicle or property. For example, an agent rents a property from a landlord in exchange for a periodic payment.
type RentAction struct {
	TradeAction

	Landlord        interface{} `json:"landlord,omitempty"`        // A sub property of participant. The owner of the real estate property.
	RealEstateAgent interface{} `json:"realEstateAgent,omitempty"` // A sub property of participant. The real estate agent involved in the action.
}

// A reservation for a rental car.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
type RentalCarReservation struct {
	Reservation

	DropoffLocation interface{} `json:"dropoffLocation,omitempty"` // Where a rental car can be dropped off.
	DropoffTime     interface{} `json:"dropoffTime,omitempty"`     // When a rental car can be dropped off.
	PickupLocation  interface{} `json:"pickupLocation,omitempty"`  // Where a taxi will pick up a passenger or a rental car can be picked up.
	PickupTime      interface{} `json:"pickupTime,omitempty"`      // When a taxi will pickup a passenger or a rental car can be picked up.
}

// A structured value representing repayment.
type RepaymentSpecification struct {
	StructuredValue

	DownPayment            interface{} `json:"downPayment,omitempty"`            // a type of payment made in cash during the onset of the purchase of an expensive good/service. The payment typically represents only a percentage of the full purchase price.
	EarlyPrepaymentPenalty interface{} `json:"earlyPrepaymentPenalty,omitempty"` // The amount to be paid as a penalty in the event of early payment of the loan.
	LoanPaymentAmount      interface{} `json:"loanPaymentAmount,omitempty"`      // The amount of money to pay in a single payment.
	LoanPaymentFrequency   interface{} `json:"loanPaymentFrequency,omitempty"`   // Frequency of payments due, i.e. number of months between payments. This is defined as a frequency, i.e. the reciprocal of a period of time.
	NumberOfLoanPayments   interface{} `json:"numberOfLoanPayments,omitempty"`   // The number of payments contractually required at origination to repay the loan. For monthly paying loans this is the number of months from the contractual first payment date to the maturity date.
}

// The act of editing a recipient by replacing an old object with a new object.
type ReplaceAction struct {
	UpdateAction

	Replacee interface{} `json:"replacee,omitempty"` // A sub property of object. The object that is being replaced.
	Replacer interface{} `json:"replacer,omitempty"` // A sub property of object. The object that replaces.
}

// The act of responding to a question/message asked/sent by the object. Related to [[AskAction]]\n\nRelated actions:\n\n* [[AskAction]]: Appears generally as an origin of a ReplyAction.
type ReplyAction struct {
	CommunicateAction

	ResultComment interface{} `json:"resultComment,omitempty"` // A sub property of result. The Comment created or sent as a result of this action.
}

// A Report generated by governmental or non-governmental organization.
type Report struct {
	Article

	ReportNumber interface{} `json:"reportNumber,omitempty"` // The number or other unique designator assigned to a Report by the publishing organization.
}

/*
The [[ReportageNewsArticle]] type is a subtype of [[NewsArticle]] representing
 news articles which are the result of journalistic news reporting conventions.

In practice many news publishers produce a wide variety of article types, many of which might be considered a [[NewsArticle]] but not a [[ReportageNewsArticle]]. For example, opinion pieces, reviews, analysis, sponsored or satirical articles, or articles that combine several of these elements.

The [[ReportageNewsArticle]] type is based on a stricter ideal for "news" as a work of journalism, with articles based on factual information either observed or verified by the author, or reported and verified from knowledgeable sources.  This often includes perspectives from multiple viewpoints on a particular issue (distinguishing news reports from public relations or propaganda).  News reports in the [[ReportageNewsArticle]] sense de-emphasize the opinion of the author, with commentary and value judgements typically expressed elsewhere.

A [[ReportageNewsArticle]] which goes deeper into analysis can also be marked with an additional type of [[AnalysisNewsArticle]].
*/
type ReportageNewsArticle struct {
	NewsArticle
}

// A patient-reported or observed dosing schedule for a drug or supplement.
type ReportedDoseSchedule struct {
	DoseSchedule
}

// A Research Organization (e.g. scientific institute, research company).
type ResearchOrganization struct {
	Organization
}

// A Research project.
type ResearchProject struct {
	Project
}

// Researchers.
type Researcher struct {
	Audience
}

// Describes a reservation for travel, dining or an event. Some reservations require tickets. \n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, restaurant reservations, flights, or rental cars, use [[Offer]].
type Reservation struct {
	Intangible

	BookingAgent          interface{} `json:"bookingAgent,omitempty"`          // 'bookingAgent' is an out-dated term indicating a 'broker' that serves as a booking agent.
	BookingTime           interface{} `json:"bookingTime,omitempty"`           // The date and time the reservation was booked.
	Broker                interface{} `json:"broker,omitempty"`                // An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
	ModifiedTime          interface{} `json:"modifiedTime,omitempty"`          // The date and time the reservation was modified.
	PriceCurrency         interface{} `json:"priceCurrency,omitempty"`         // The currency of the price, or a price component when attached to [[PriceSpecification]] and its subtypes.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	ProgramMembershipUsed interface{} `json:"programMembershipUsed,omitempty"` // Any membership in a frequent flyer, hotel loyalty program, etc. being applied to the reservation.
	Provider              interface{} `json:"provider,omitempty"`              // The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
	ReservationFor        interface{} `json:"reservationFor,omitempty"`        // The thing -- flight, event, restaurant,etc. being reserved.
	ReservationId         interface{} `json:"reservationId,omitempty"`         // A unique identifier for the reservation.
	ReservationStatus     interface{} `json:"reservationStatus,omitempty"`     // The current status of the reservation.
	ReservedTicket        interface{} `json:"reservedTicket,omitempty"`        // A ticket associated with the reservation.
	TotalPrice            interface{} `json:"totalPrice,omitempty"`            // The total price for the reservation or ticket, including applicable taxes, shipping, etc.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
	UnderName             interface{} `json:"underName,omitempty"`             // The person or organization the reservation or ticket is for.
}

// A group of multiple reservations with common values for all sub-reservations.
type ReservationPackage struct {
	Reservation

	SubReservation interface{} `json:"subReservation,omitempty"` // The individual reservations included in the package. Typically a repeated property.
}

// Enumerated status values for Reservation.
type ReservationStatusType struct {
	StatusEnumeration
}

// Reserving a concrete object.\n\nRelated actions:\n\n* [[ScheduleAction]]: Unlike ScheduleAction, ReserveAction reserves concrete objects (e.g. a table, a hotel) towards a time slot / spatial allocation.
type ReserveAction struct {
	PlanAction
}

// A reservoir of water, typically an artificially created lake, like the Lake Kariba reservoir.
type Reservoir struct {
	BodyOfWater
}

// The place where a person lives.
type Residence struct {
	Place

	AccommodationFloorPlan interface{} `json:"accommodationFloorPlan,omitempty"` // A floorplan of some [[Accommodation]].
}

/*
A resort is a place used for relaxation or recreation, attracting visitors for holidays or vacations. Resorts are places, towns or sometimes commercial establishment operated by a single company (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Resort">http://en.wikipedia.org/wiki/Resort</a>).
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.

*/
type Resort struct {
	LodgingBusiness
}

// A restaurant.
type Restaurant struct {
	FoodEstablishment
}

// A diet restricted to certain foods or preparations for cultural, religious, health or lifestyle reasons.
type RestrictedDiet struct {
	Enumeration
}

// The act of resuming a device or application which was formerly paused (e.g. resume music playback or resume a timer).
type ResumeAction struct {
	ControlAction
}

// The act of returning to the origin that which was previously received (concrete objects) or taken (ownership).
type ReturnAction struct {
	TransferAction

	Recipient interface{} `json:"recipient,omitempty"` // A sub property of participant. The participant who is at the receiving end of the action.
}

// Enumerates several kinds of policies for product return fees.
type ReturnFeesEnumeration struct {
	Enumeration
}

// Enumerates several types of return labels for product returns.
type ReturnLabelSourceEnumeration struct {
	Enumeration
}

// Enumerates several types of product return methods.
type ReturnMethodEnumeration struct {
	Enumeration
}

// A review of an item - for example, of a restaurant, movie, or store.
type Review struct {
	CreativeWork

	AssociatedClaimReview interface{} `json:"associatedClaimReview,omitempty"` // An associated [[ClaimReview]], related by specific common content, topic or claim. The expectation is that this property would be most typically used in cases where a single activity is conducting both claim reviews and media reviews, in which case [[relatedMediaReview]] would commonly be used on a [[ClaimReview]], while [[relatedClaimReview]] would be used on [[MediaReview]].
	AssociatedMediaReview interface{} `json:"associatedMediaReview,omitempty"` // An associated [[MediaReview]], related by specific common content, topic or claim. The expectation is that this property would be most typically used in cases where a single activity is conducting both claim reviews and media reviews, in which case [[relatedMediaReview]] would commonly be used on a [[ClaimReview]], while [[relatedClaimReview]] would be used on [[MediaReview]].
	AssociatedReview      interface{} `json:"associatedReview,omitempty"`      // An associated [[Review]].
	ItemReviewed          interface{} `json:"itemReviewed,omitempty"`          // The item that is being reviewed/rated.
	NegativeNotes         interface{} `json:"negativeNotes,omitempty"`         // Indicates, in the context of a [[Review]] (e.g. framed as 'pro' vs 'con' considerations), negative considerations - either as unstructured text, or a list.
	PositiveNotes         interface{} `json:"positiveNotes,omitempty"`         // Indicates, in the context of a [[Review]] (e.g. framed as 'pro' vs 'con' considerations), positive considerations - either as unstructured text, or a list.
	ReviewAspect          interface{} `json:"reviewAspect,omitempty"`          // This Review or Rating is relevant to this part or facet of the itemReviewed.
	ReviewBody            interface{} `json:"reviewBody,omitempty"`            // The actual body of the review.
	ReviewRating          interface{} `json:"reviewRating,omitempty"`          // The rating given in this review. Note that reviews can themselves be rated. The ```reviewRating``` applies to rating given by the review. The [[aggregateRating]] property applies to the review itself, as a creative work.
}

// The act of producing a balanced opinion about the object for an audience. An agent reviews an object with participants resulting in a review.
type ReviewAction struct {
	AssessAction

	ResultReview interface{} `json:"resultReview,omitempty"` // A sub property of result. The review that resulted in the performing of the action.
}

// A [[NewsArticle]] and [[CriticReview]] providing a professional critic's assessment of a service, product, performance, or artistic or literary work.
type ReviewNewsArticle struct {
	CriticReview
	// TODO: NewsArticle
}

// A river (for example, the broad majestic Shannon).
type RiverBodyOfWater struct {
	BodyOfWater
}

// Represents additional information about a relationship or property. For example a Role can be used to say that a 'member' role linking some SportsTeam to a player occurred during a particular time period. Or that a Person's 'actor' role in a Movie was for some particular characterName. Such properties can be attached to a Role entity, which is then associated with the main entities using ordinary properties like 'member' or 'actor'.\n\nSee also [blog post](http://blog.schema.org/2014/06/introducing-role.html).
type Role struct {
	Intangible

	EndDate       interface{} `json:"endDate,omitempty"`       // The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	NamedPosition interface{} `json:"namedPosition,omitempty"` // A position played, performed or filled by a person or organization, as part of an organization. For example, an athlete in a SportsTeam might play in the position named 'Quarterback'.
	RoleName      interface{} `json:"roleName,omitempty"`      // A role played, performed or filled by a person or organization. For example, the team of creators for a comic book might fill the roles named 'inker', 'penciller', and 'letterer'; or an athlete in a SportsTeam might play in the position named 'Quarterback'.
	StartDate     interface{} `json:"startDate,omitempty"`     // The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
}

// A roofing contractor.
type RoofingContractor struct {
	HomeAndConstructionBusiness
}

/*
A room is a distinguishable space within a structure, usually separated from other spaces by interior walls. (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Room">http://en.wikipedia.org/wiki/Room</a>).
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type Room struct {
	Accommodation
}

// The act of notifying an event organizer as to whether you expect to attend the event.
type RsvpAction struct {
	InformAction

	AdditionalNumberOfGuests interface{} `json:"additionalNumberOfGuests,omitempty"` // If responding yes, the number of guests who will attend in addition to the invitee.
	Comment                  interface{} `json:"comment,omitempty"`                  // Comments, typically from users.
	RsvpResponse             interface{} `json:"rsvpResponse,omitempty"`             // The response (yes, no, maybe) to the RSVP.
}

// RsvpResponseType is an enumeration type whose instances represent responding to an RSVP request.
type RsvpResponseType struct {
	Enumeration
}

// Event type: Sales event.
type SaleEvent struct {
	Event
}

// An [[Article]] whose content is primarily [[satirical]](https://en.wikipedia.org/wiki/Satire) in nature, i.e. unlikely to be literally true. A satirical article is sometimes but not necessarily also a [[NewsArticle]]. [[ScholarlyArticle]]s are also sometimes satirized.
type SatiricalArticle struct {
	Article
}

/*
A schedule defines a repeating time period used to describe a regularly occurring [[Event]]. At a minimum a schedule will specify [[repeatFrequency]] which describes the interval between occurences of the event. Additional information can be provided to specify the schedule more precisely.
      This includes identifying the day(s) of the week or month when the recurring event will take place, in addition to its start and end time. Schedules may also
      have start and end dates to indicate when they are active, e.g. to define a limited calendar of events.
*/
type Schedule struct {
	Intangible

	ByDay       interface{} `json:"byDay,omitempty"`       // Defines the day(s) of the week on which a recurring [[Event]] takes place. May be specified using either [[DayOfWeek]], or alternatively [[Text]] conforming to iCal's syntax for byDay recurrence rules.
	ByMonth     interface{} `json:"byMonth,omitempty"`     // Defines the month(s) of the year on which a recurring [[Event]] takes place. Specified as an [[Integer]] between 1-12. January is 1.
	ByMonthDay  interface{} `json:"byMonthDay,omitempty"`  // Defines the day(s) of the month on which a recurring [[Event]] takes place. Specified as an [[Integer]] between 1-31.
	ByMonthWeek interface{} `json:"byMonthWeek,omitempty"` // Defines the week(s) of the month on which a recurring Event takes place. Specified as an Integer between 1-5. For clarity, byMonthWeek is best used in conjunction with byDay to indicate concepts like the first and third Mondays of a month.
	Duration    interface{} `json:"duration,omitempty"`    // The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	EndDate     interface{} `json:"endDate,omitempty"`     // The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	EndTime     interface{} `json:"endTime,omitempty"`     // The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
	ExceptDate  interface{} `json:"exceptDate,omitempty"`  /*
	Defines a [[Date]] or [[DateTime]] during which a scheduled [[Event]] will not take place. The property allows exceptions to
	      a [[Schedule]] to be specified. If an exception is specified as a [[DateTime]] then only the event that would have started at that specific date and time
	      should be excluded from the schedule. If an exception is specified as a [[Date]] then any event that is scheduled for that 24 hour period should be
	      excluded from the schedule. This allows a whole day to be excluded from the schedule without having to itemise every scheduled event.
	*/
	RepeatCount     interface{} `json:"repeatCount,omitempty"`     // Defines the number of times a recurring [[Event]] will take place
	RepeatFrequency interface{} `json:"repeatFrequency,omitempty"` /*
	Defines the frequency at which [[Event]]s will occur according to a schedule [[Schedule]]. The intervals between
	      events should be defined as a [[Duration]] of time.
	*/
	ScheduleTimezone interface{} `json:"scheduleTimezone,omitempty"` // Indicates the timezone for which the time(s) indicated in the [[Schedule]] are given. The value provided should be among those listed in the IANA Time Zone Database.
	StartDate        interface{} `json:"startDate,omitempty"`        // The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	StartTime        interface{} `json:"startTime,omitempty"`        // The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
}

// Scheduling future actions, events, or tasks.\n\nRelated actions:\n\n* [[ReserveAction]]: Unlike ReserveAction, ScheduleAction allocates future actions (e.g. an event, a task, etc) towards a time slot / spatial allocation.
type ScheduleAction struct {
	PlanAction
}

// A scholarly article.
type ScholarlyArticle struct {
	Article
}

// A school.
type School struct {
	EducationalOrganization
}

// A School District is an administrative area for the administration of schools.
type SchoolDistrict struct {
	AdministrativeArea
}

// A screening of a movie or other video.
type ScreeningEvent struct {
	Event

	SubtitleLanguage interface{} `json:"subtitleLanguage,omitempty"` // Languages in which subtitles/captions are available, in [IETF BCP 47 standard format](http://tools.ietf.org/html/bcp47).
	VideoFormat      interface{} `json:"videoFormat,omitempty"`      // The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.).
	WorkPresented    interface{} `json:"workPresented,omitempty"`    // The movie presented during this event.
}

// A piece of sculpture.
type Sculpture struct {
	CreativeWork
}

// A sea (for example, the Caspian sea).
type SeaBodyOfWater struct {
	BodyOfWater
}

// The act of searching for an object.\n\nRelated actions:\n\n* [[FindAction]]: SearchAction generally leads to a FindAction, but not necessarily.
type SearchAction struct {
	Action

	Query interface{} `json:"query,omitempty"` // A sub property of instrument. The query used on this action.
}

// A Search and Rescue organization of some kind.
type SearchRescueOrganization struct {
	Organization
}

// Web page type: Search results page.
type SearchResultsPage struct {
	WebPage
}

// A media season e.g. tv, radio, video game etc.
type Season struct {
	CreativeWork
}

// Used to describe a seat, such as a reserved seat in an event reservation.
type Seat struct {
	Intangible

	SeatNumber  interface{} `json:"seatNumber,omitempty"`  // The location of the reserved seat (e.g., 27).
	SeatRow     interface{} `json:"seatRow,omitempty"`     // The row location of the reserved seat (e.g., B).
	SeatSection interface{} `json:"seatSection,omitempty"` // The section location of the reserved seat (e.g. Orchestra).
	SeatingType interface{} `json:"seatingType,omitempty"` // The type/class of the seat.
}

// This is the [[Action]] of navigating to a specific [[startOffset]] timestamp within a [[VideoObject]], typically represented with a URL template structure.
type SeekToAction struct {
	Action

	StartOffset interface{} `json:"startOffset,omitempty"` // The start time of the clip expressed as the number of seconds from the beginning of the work.
}

// A self-storage facility.
type SelfStorage struct {
	LocalBusiness
}

// The act of taking money from a buyer in exchange for goods or services rendered. An agent sells an object, product, or service to a buyer for a price. Reciprocal of BuyAction.
type SellAction struct {
	TradeAction

	Buyer           interface{} `json:"buyer,omitempty"`           // A sub property of participant. The participant/person/organization that bought the object.
	WarrantyPromise interface{} `json:"warrantyPromise,omitempty"` // The warranty promise(s) included in the offer.
}

// The act of physically/electronically dispatching an object for transfer from an origin to a destination.Related actions:\n\n* [[ReceiveAction]]: The reciprocal of SendAction.\n* [[GiveAction]]: Unlike GiveAction, SendAction does not imply the transfer of ownership (e.g. I can send you my laptop, but I'm not necessarily giving it to you).
type SendAction struct {
	TransferAction

	DeliveryMethod interface{} `json:"deliveryMethod,omitempty"` // A sub property of instrument. The method of delivery.
	Recipient      interface{} `json:"recipient,omitempty"`      // A sub property of participant. The participant who is at the receiving end of the action.
}

// A Series in schema.org is a group of related items, typically but not necessarily of the same kind. See also [[CreativeWorkSeries]], [[EventSeries]].
type Series struct {
	Intangible
}

// A service provided by an organization, e.g. delivery service, print services, etc.
type Service struct {
	Intangible

	AggregateRating  interface{} `json:"aggregateRating,omitempty"`  // The overall rating, based on a collection of reviews or ratings, of the item.
	AreaServed       interface{} `json:"areaServed,omitempty"`       // The geographic area where a service or offered item is provided.
	Audience         interface{} `json:"audience,omitempty"`         // An intended audience, i.e. a group for whom something was created.
	AvailableChannel interface{} `json:"availableChannel,omitempty"` // A means of accessing the service (e.g. a phone bank, a web site, a location, etc.).
	Award            interface{} `json:"award,omitempty"`            // An award won by or for this item.
	Brand            interface{} `json:"brand,omitempty"`            // The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
	Broker           interface{} `json:"broker,omitempty"`           // An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
	Category         interface{} `json:"category,omitempty"`         // A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
	HasOfferCatalog  interface{} `json:"hasOfferCatalog,omitempty"`  // Indicates an OfferCatalog listing for this Organization, Person, or Service.
	HoursAvailable   interface{} `json:"hoursAvailable,omitempty"`   // The hours during which this service or contact is available.
	IsRelatedTo      interface{} `json:"isRelatedTo,omitempty"`      // A pointer to another, somehow related product (or multiple products).
	IsSimilarTo      interface{} `json:"isSimilarTo,omitempty"`      // A pointer to another, functionally similar product (or multiple products).
	Logo             interface{} `json:"logo,omitempty"`             // An associated logo.
	Offers           interface{} `json:"offers,omitempty"`           /*
	An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.

	*/
	Produces         interface{} `json:"produces,omitempty"`         // The tangible thing generated by the service, e.g. a passport, permit, etc.
	Provider         interface{} `json:"provider,omitempty"`         // The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
	ProviderMobility interface{} `json:"providerMobility,omitempty"` // Indicates the mobility of a provided service (e.g. 'static', 'dynamic').
	Review           interface{} `json:"review,omitempty"`           // A review of the item.
	ServiceArea      interface{} `json:"serviceArea,omitempty"`      // The geographic area where the service is provided.
	ServiceAudience  interface{} `json:"serviceAudience,omitempty"`  // The audience eligible for this service.
	ServiceOutput    interface{} `json:"serviceOutput,omitempty"`    // The tangible thing generated by the service, e.g. a passport, permit, etc.
	ServiceType      interface{} `json:"serviceType,omitempty"`      // The type of service being offered, e.g. veterans' benefits, emergency relief, etc.
	Slogan           interface{} `json:"slogan,omitempty"`           // A slogan or motto associated with the item.
	TermsOfService   interface{} `json:"termsOfService,omitempty"`   // Human-readable terms of service documentation.
}

// A means for accessing a service, e.g. a government office location, web site, or phone number.
type ServiceChannel struct {
	Intangible

	AvailableLanguage    interface{} `json:"availableLanguage,omitempty"`    // A language someone may use with or at the item, service or place. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[inLanguage]]
	ProcessingTime       interface{} `json:"processingTime,omitempty"`       // Estimated processing time for the service using this channel.
	ProvidesService      interface{} `json:"providesService,omitempty"`      // The service provided by this channel.
	ServiceLocation      interface{} `json:"serviceLocation,omitempty"`      // The location (e.g. civic structure, local business, etc.) where a person can go to access the service.
	ServicePhone         interface{} `json:"servicePhone,omitempty"`         // The phone number to use to access the service.
	ServicePostalAddress interface{} `json:"servicePostalAddress,omitempty"` // The address for accessing the service by mail.
	ServiceSmsNumber     interface{} `json:"serviceSmsNumber,omitempty"`     // The number to access the service by text message.
	ServiceUrl           interface{} `json:"serviceUrl,omitempty"`           // The website to access the service.
}

// The act of distributing content to people for their amusement or edification.
type ShareAction struct {
	CommunicateAction
}

// Printed music, as opposed to performed or recorded music.
type SheetMusic struct {
	CreativeWork
}

// ShippingDeliveryTime provides various pieces of information about delivery times for shipping.
type ShippingDeliveryTime struct {
	StructuredValue

	BusinessDays interface{} `json:"businessDays,omitempty"` // Days of the week when the merchant typically operates, indicated via opening hours markup.
	CutoffTime   interface{} `json:"cutoffTime,omitempty"`   // Order cutoff time allows merchants to describe the time after which they will no longer process orders received on that day. For orders processed after cutoff time, one day gets added to the delivery time estimate. This property is expected to be most typically used via the [[ShippingRateSettings]] publication pattern. The time is indicated using the ISO-8601 Time format, e.g. "23:30:00-05:00" would represent 6:30 pm Eastern Standard Time (EST) which is 5 hours behind Coordinated Universal Time (UTC).
	HandlingTime interface{} `json:"handlingTime,omitempty"` // The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup. Typical properties: minValue, maxValue, unitCode (d for DAY).  This is by common convention assumed to mean business days (if a unitCode is used, coded as "d"), i.e. only counting days when the business normally operates.
	TransitTime  interface{} `json:"transitTime,omitempty"`  // The typical delay the order has been sent for delivery and the goods reach the final customer. Typical properties: minValue, maxValue, unitCode (d for DAY).
}

// A ShippingRateSettings represents re-usable pieces of shipping information. It is designed for publication on an URL that may be referenced via the [[shippingSettingsLink]] property of an [[OfferShippingDetails]]. Several occurrences can be published, distinguished and matched (i.e. identified/referenced) by their different values for [[shippingLabel]].
type ShippingRateSettings struct {
	StructuredValue

	DoesNotShip           interface{} `json:"doesNotShip,omitempty"`           // Indicates when shipping to a particular [[shippingDestination]] is not available.
	FreeShippingThreshold interface{} `json:"freeShippingThreshold,omitempty"` // A monetary value above which (or equal to) the shipping rate becomes free. Intended to be used via an [[OfferShippingDetails]] with [[shippingSettingsLink]] matching this [[ShippingRateSettings]].
	IsUnlabelledFallback  interface{} `json:"isUnlabelledFallback,omitempty"`  // This can be marked 'true' to indicate that some published [[DeliveryTimeSettings]] or [[ShippingRateSettings]] are intended to apply to all [[OfferShippingDetails]] published by the same merchant, when referenced by a [[shippingSettingsLink]] in those settings. It is not meaningful to use a 'true' value for this property alongside a transitTimeLabel (for [[DeliveryTimeSettings]]) or shippingLabel (for [[ShippingRateSettings]]), since this property is for use with unlabelled settings.
	ShippingDestination   interface{} `json:"shippingDestination,omitempty"`   // indicates (possibly multiple) shipping destinations. These can be defined in several ways e.g. postalCode ranges.
	ShippingLabel         interface{} `json:"shippingLabel,omitempty"`         // Label to match an [[OfferShippingDetails]] with a [[ShippingRateSettings]] (within the context of a [[shippingSettingsLink]] cross-reference).
	ShippingRate          interface{} `json:"shippingRate,omitempty"`          // The shipping rate is the cost of shipping to the specified destination. Typically, the maxValue and currency values (of the [[MonetaryAmount]]) are most appropriate.
}

// A shoe store.
type ShoeStore struct {
	Store
}

// A shopping center or mall.
type ShoppingCenter struct {
	LocalBusiness
}

// Short story or tale. A brief work of literature, usually written in narrative prose.
type ShortStory struct {
	CreativeWork
}

// Residence type: Single-family home.
type SingleFamilyResidence struct {
	House

	NumberOfRooms interface{} `json:"numberOfRooms,omitempty"` /*
	The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.
	Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.
	*/
	Occupancy interface{} `json:"occupancy,omitempty"` /*
	The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).
	Typical unit code(s): C62 for person
	*/
}

// A navigation element of the page.
type SiteNavigationElement struct {
	WebPageElement
}

// Enumerates common size groups for various product categories.
type SizeGroupEnumeration struct {
	Enumeration
}

// Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
type SizeSpecification struct {
	QualitativeValue

	HasMeasurement       interface{} `json:"hasMeasurement,omitempty"`       // A product measurement, for example the inseam of pants, the wheel size of a bicycle, or the gauge of a screw. Usually an exact measurement, but can also be a range of measurements for adjustable products, for example belts and ski bindings.
	SizeGroup            interface{} `json:"sizeGroup,omitempty"`            // The size group (also known as "size type") for a product's size. Size groups are common in the fashion industry to define size segments and suggested audiences for wearable products. Multiple values can be combined, for example "men's big and tall", "petite maternity" or "regular"
	SizeSystem           interface{} `json:"sizeSystem,omitempty"`           // The size system used to identify a product's size. Typically either a standard (for example, "GS1" or "ISO-EN13402"), country code (for example "US" or "JP"), or a measuring system (for example "Metric" or "Imperial").
	SuggestedAge         interface{} `json:"suggestedAge,omitempty"`         // The age or age range for the intended audience or person, for example 3-12 months for infants, 1-5 years for toddlers.
	SuggestedGender      interface{} `json:"suggestedGender,omitempty"`      // The suggested gender of the intended person or audience, for example "male", "female", or "unisex".
	SuggestedMeasurement interface{} `json:"suggestedMeasurement,omitempty"` // A suggested range of body measurements for the intended audience or person, for example inseam between 32 and 34 inches or height between 170 and 190 cm. Typically found on a size chart for wearable products.
}

// Enumerates common size systems for different categories of products, for example "EN-13402" or "UK" for wearables or "Imperial" for screws.
type SizeSystemEnumeration struct {
	Enumeration
}

// A ski resort.
type SkiResort struct {
	Resort
	// TODO: SportsActivityLocation
}

// Event type: Social event.
type SocialEvent struct {
	Event
}

// A post to a social media platform, including blog posts, tweets, Facebook posts, etc.
type SocialMediaPosting struct {
	Article

	SharedContent interface{} `json:"sharedContent,omitempty"` // A CreativeWork such as an image, video, or audio clip shared as part of this posting.
}

// A software application.
type SoftwareApplication struct {
	CreativeWork

	ApplicationCategory    interface{} `json:"applicationCategory,omitempty"`    // Type of software application, e.g. 'Game, Multimedia'.
	ApplicationSubCategory interface{} `json:"applicationSubCategory,omitempty"` // Subcategory of the application, e.g. 'Arcade Game'.
	ApplicationSuite       interface{} `json:"applicationSuite,omitempty"`       // The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
	AvailableOnDevice      interface{} `json:"availableOnDevice,omitempty"`      // Device required to run the application. Used in cases where a specific make/model is required to run the application.
	CountriesNotSupported  interface{} `json:"countriesNotSupported,omitempty"`  // Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
	CountriesSupported     interface{} `json:"countriesSupported,omitempty"`     // Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
	Device                 interface{} `json:"device,omitempty"`                 // Device required to run the application. Used in cases where a specific make/model is required to run the application.
	DownloadUrl            interface{} `json:"downloadUrl,omitempty"`            // If the file can be downloaded, URL to download the binary.
	FeatureList            interface{} `json:"featureList,omitempty"`            // Features or modules provided by this application (and possibly required by other applications).
	FileSize               interface{} `json:"fileSize,omitempty"`               // Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed.
	InstallUrl             interface{} `json:"installUrl,omitempty"`             // URL at which the app may be installed, if different from the URL of the item.
	MemoryRequirements     interface{} `json:"memoryRequirements,omitempty"`     // Minimum memory requirements.
	OperatingSystem        interface{} `json:"operatingSystem,omitempty"`        // Operating systems supported (Windows 7, OSX 10.6, Android 1.6).
	Permissions            interface{} `json:"permissions,omitempty"`            // Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only on wifi).
	ProcessorRequirements  interface{} `json:"processorRequirements,omitempty"`  // Processor architecture required to run the application (e.g. IA64).
	ReleaseNotes           interface{} `json:"releaseNotes,omitempty"`           // Description of what changed in this version.
	Requirements           interface{} `json:"requirements,omitempty"`           // Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
	Screenshot             interface{} `json:"screenshot,omitempty"`             // A link to a screenshot image of the app.
	SoftwareAddOn          interface{} `json:"softwareAddOn,omitempty"`          // Additional content for a software application.
	SoftwareHelp           interface{} `json:"softwareHelp,omitempty"`           // Software application help.
	SoftwareRequirements   interface{} `json:"softwareRequirements,omitempty"`   // Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
	SoftwareVersion        interface{} `json:"softwareVersion,omitempty"`        // Version of the software instance.
	StorageRequirements    interface{} `json:"storageRequirements,omitempty"`    // Storage requirements (free space required).
	SupportingData         interface{} `json:"supportingData,omitempty"`         // Supporting data for a SoftwareApplication.
}

// Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts, templates.
type SoftwareSourceCode struct {
	CreativeWork

	CodeRepository      interface{} `json:"codeRepository,omitempty"`      // Link to the repository where the un-compiled, human readable code and related code is located (SVN, github, CodePlex).
	CodeSampleType      interface{} `json:"codeSampleType,omitempty"`      // What type of code sample: full (compile ready) solution, code snippet, inline code, scripts, template.
	ProgrammingLanguage interface{} `json:"programmingLanguage,omitempty"` // The computer programming language.
	Runtime             interface{} `json:"runtime,omitempty"`             // Runtime platform or script interpreter dependencies (Example - Java v1, Python2.3, .Net Framework 3.0).
	RuntimePlatform     interface{} `json:"runtimePlatform,omitempty"`     // Runtime platform or script interpreter dependencies (Example - Java v1, Python2.3, .Net Framework 3.0).
	SampleType          interface{} `json:"sampleType,omitempty"`          // What type of code sample: full (compile ready) solution, code snippet, inline code, scripts, template.
	TargetProduct       interface{} `json:"targetProduct,omitempty"`       // Target Operating System / Product to which the code applies.  If applies to several versions, just the product name can be used.
}

// The action that takes in a math expression and directs users to a page potentially capable of solving/simplifying that expression.
type SolveMathAction struct {
	Action

	EduQuestionType interface{} `json:"eduQuestionType,omitempty"` // For questions that are part of learning resources (e.g. Quiz), eduQuestionType indicates the format of question being given. Example: "Multiple choice", "Open ended", "Flashcard".
}

// A placeholder for multiple similar products of the same kind.
type SomeProducts struct {
	Product

	InventoryLevel interface{} `json:"inventoryLevel,omitempty"` // The current approximate inventory level for the item or items.
}

// A SpeakableSpecification indicates (typically via [[xpath]] or [[cssSelector]]) sections of a document that are highlighted as particularly [[speakable]]. Instances of this type are expected to be used primarily as values of the [[speakable]] property.
type SpeakableSpecification struct {
	Intangible

	CssSelector interface{} `json:"cssSelector,omitempty"` // A CSS selector, e.g. of a [[SpeakableSpecification]] or [[WebPageElement]]. In the latter case, multiple matches within a page can constitute a single conceptual "Web page element".
	Xpath       interface{} `json:"xpath,omitempty"`       // An XPath, e.g. of a [[SpeakableSpecification]] or [[WebPageElement]]. In the latter case, multiple matches within a page can constitute a single conceptual "Web page element".
}

/*
A SpecialAnnouncement combines a simple date-stamped textual information update
      with contextualized Web links and other structured data.  It represents an information update made by a
      locally-oriented organization, for example schools, pharmacies, healthcare providers,  community groups, police,
      local government.

For work in progress guidelines on Coronavirus-related markup see [this doc](https://docs.google.com/document/d/14ikaGCKxo50rRM7nvKSlbUpjyIk2WMQd3IkB1lItlrM/edit#).

The motivating scenario for SpecialAnnouncement is the [Coronavirus pandemic](https://en.wikipedia.org/wiki/2019%E2%80%9320_coronavirus_pandemic), and the initial vocabulary is oriented to this urgent situation. Schema.org
expect to improve the markup iteratively as it is deployed and as feedback emerges from use. In addition to our
usual [Github entry](https://github.com/schemaorg/schemaorg/issues/2490), feedback comments can also be provided in [this document](https://docs.google.com/document/d/1fpdFFxk8s87CWwACs53SGkYv3aafSxz_DTtOQxMrBJQ/edit#).


While this schema is designed to communicate urgent crisis-related information, it is not the same as an emergency warning technology like [CAP](https://en.wikipedia.org/wiki/Common_Alerting_Protocol), although there may be overlaps. The intent is to cover
the kinds of everyday practical information being posted to existing websites during an emergency situation.

Several kinds of information can be provided:

We encourage the provision of "name", "text", "datePosted", "expires" (if appropriate), "category" and
"url" as a simple baseline. It is important to provide a value for "category" where possible, most ideally as a well known
URL from Wikipedia or Wikidata. In the case of the 2019-2020 Coronavirus pandemic, this should be "https://en.wikipedia.org/w/index.php?title=2019-20\_coronavirus\_pandemic" or "https://www.wikidata.org/wiki/Q81068910".

For many of the possible properties, values can either be simple links or an inline description, depending on whether a summary is available. For a link, provide just the URL of the appropriate page as the property's value. For an inline description, use a [[WebContent]] type, and provide the url as a property of that, alongside at least a simple "[[text]]" summary of the page. It is
unlikely that a single SpecialAnnouncement will need all of the possible properties simultaneously.

We expect that in many cases the page referenced might contain more specialized structured data, e.g. contact info, [[openingHours]], [[Event]], [[FAQPage]] etc. By linking to those pages from a [[SpecialAnnouncement]] you can help make it clearer that the events are related to the situation (e.g. Coronavirus) indicated by the [[category]] property of the [[SpecialAnnouncement]].

Many [[SpecialAnnouncement]]s will relate to particular regions and to identifiable local organizations. Use [[spatialCoverage]] for the region, and [[announcementLocation]] to indicate specific [[LocalBusiness]]es and [[CivicStructure]]s. If the announcement affects both a particular region and a specific location (for example, a library closure that serves an entire region), use both [[spatialCoverage]] and [[announcementLocation]].

The [[about]] property can be used to indicate entities that are the focus of the announcement. We now recommend using [[about]] only
for representing non-location entities (e.g. a [[Course]] or a [[RadioStation]]). For places, use [[announcementLocation]] and [[spatialCoverage]]. Consumers of this markup should be aware that the initial design encouraged the use of /about for locations too.

The basic content of [[SpecialAnnouncement]] is similar to that of an [RSS](https://en.wikipedia.org/wiki/RSS) or [Atom](https://en.wikipedia.org/wiki/Atom_(Web_standard)) feed. For publishers without such feeds, basic feed-like information can be shared by posting
[[SpecialAnnouncement]] updates in a page, e.g. using JSON-LD. For sites with Atom/RSS functionality, you can point to a feed
with the [[webFeed]] property. This can be a simple URL, or an inline [[DataFeed]] object, with [[encodingFormat]] providing
media type information e.g. "application/rss+xml" or "application/atom+xml".
*/
type SpecialAnnouncement struct {
	CreativeWork

	AnnouncementLocation    interface{} `json:"announcementLocation,omitempty"`    // Indicates a specific [[CivicStructure]] or [[LocalBusiness]] associated with the SpecialAnnouncement. For example, a specific testing facility or business with special opening hours. For a larger geographic region like a quarantine of an entire region, use [[spatialCoverage]].
	Category                interface{} `json:"category,omitempty"`                // A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
	DatePosted              interface{} `json:"datePosted,omitempty"`              // Publication date of an online listing.
	DiseasePreventionInfo   interface{} `json:"diseasePreventionInfo,omitempty"`   // Information about disease prevention.
	DiseaseSpreadStatistics interface{} `json:"diseaseSpreadStatistics,omitempty"` /*
	Statistical information about the spread of a disease, either as [[WebContent]], or
	  described directly as a [[Dataset]], or the specific [[Observation]]s in the dataset. When a [[WebContent]] URL is
	  provided, the page indicated might also contain more such markup.
	*/
	GettingTestedInfo           interface{} `json:"gettingTestedInfo,omitempty"`           // Information about getting tested (for a [[MedicalCondition]]), e.g. in the context of a pandemic.
	GovernmentBenefitsInfo      interface{} `json:"governmentBenefitsInfo,omitempty"`      // governmentBenefitsInfo provides information about government benefits associated with a SpecialAnnouncement.
	NewsUpdatesAndGuidelines    interface{} `json:"newsUpdatesAndGuidelines,omitempty"`    // Indicates a page with news updates and guidelines. This could often be (but is not required to be) the main page containing [[SpecialAnnouncement]] markup on a site.
	PublicTransportClosuresInfo interface{} `json:"publicTransportClosuresInfo,omitempty"` // Information about public transport closures.
	QuarantineGuidelines        interface{} `json:"quarantineGuidelines,omitempty"`        // Guidelines about quarantine rules, e.g. in the context of a pandemic.
	SchoolClosuresInfo          interface{} `json:"schoolClosuresInfo,omitempty"`          // Information about school closures.
	TravelBans                  interface{} `json:"travelBans,omitempty"`                  // Information about travel bans, e.g. in the context of a pandemic.
	WebFeed                     interface{} `json:"webFeed,omitempty"`                     // The URL for a feed, e.g. associated with a podcast series, blog, or series of date-stamped updates. This is usually RSS or Atom.
}

// Any branch of a field in which people typically develop specific expertise, usually after significant study, time, and effort.
type Specialty struct {
	Enumeration
}

// A sporting goods store.
type SportingGoodsStore struct {
	Store
}

// A sports location, such as a playing field.
type SportsActivityLocation struct {
	LocalBusiness
}

// A sports club.
type SportsClub struct {
	SportsActivityLocation
}

// Event type: Sports event.
type SportsEvent struct {
	Event

	AwayTeam   interface{} `json:"awayTeam,omitempty"`   // The away team in a sports event.
	Competitor interface{} `json:"competitor,omitempty"` // A competitor in a sports event.
	HomeTeam   interface{} `json:"homeTeam,omitempty"`   // The home team in a sports event.
	Sport      interface{} `json:"sport,omitempty"`      // A type of sport (e.g. Baseball).
}

// Represents the collection of all sports organizations, including sports teams, governing bodies, and sports associations.
type SportsOrganization struct {
	Organization

	Sport interface{} `json:"sport,omitempty"` // A type of sport (e.g. Baseball).
}

// Organization: Sports team.
type SportsTeam struct {
	SportsOrganization

	Athlete interface{} `json:"athlete,omitempty"` // A person that acts as performing member of a sports team; a player as opposed to a coach.
	Coach   interface{} `json:"coach,omitempty"`   // A person that acts in a coaching role for a sports team.
	Gender  interface{} `json:"gender,omitempty"`  // Gender of something, typically a [[Person]], but possibly also fictional characters, animals, etc. While https://schema.org/Male and https://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender. The [[gender]] property can also be used in an extended sense to cover e.g. the gender of sports teams. As with the gender of individuals, we do not try to enumerate all possibilities. A mixed-gender [[SportsTeam]] can be indicated with a text value of "Mixed".
}

// A spreadsheet file.
type SpreadsheetDigitalDocument struct {
	DigitalDocument
}

// A stadium.
type StadiumOrArena struct {
	CivicStructure
	// TODO: SportsActivityLocation
}

// A state or province of a country.
type State struct {
	AdministrativeArea
}

// A statement about something, for example a fun or interesting fact. If known, the main entity this statement is about, can be indicated using mainEntity. For more formal claims (e.g. in Fact Checking), consider using [[Claim]] instead. Use the [[text]] property to capture the text of the statement.
type Statement struct {
	CreativeWork
}

/*
A StatisticalPopulation is a set of instances of a certain given type that satisfy some set of constraints. The property [[populationType]] is used to specify the type. Any property that can be used on instances of that type can appear on the statistical population. For example, a [[StatisticalPopulation]] representing all [[Person]]s with a [[homeLocation]] of East Podunk California, would be described by applying the appropriate [[homeLocation]] and [[populationType]] properties to a [[StatisticalPopulation]] item that stands for that set of people.
The properties [[numConstraints]] and [[constrainingProperty]] are used to specify which of the populations properties are used to specify the population. Note that the sense of "population" used here is the general sense of a statistical
population, and does not imply that the population consists of people. For example, a [[populationType]] of [[Event]] or [[NewsArticle]] could be used. See also [[Observation]], and the [data and datasets](/docs/data-and-datasets.html) overview for more details.

*/
type StatisticalPopulation struct {
	Intangible

	ConstrainingProperty interface{} `json:"constrainingProperty,omitempty"` /*
	Indicates a property used as a constraint to define a [[StatisticalPopulation]] with respect to the set of entities
	  corresponding to an indicated type (via [[populationType]]).
	*/
	NumConstraints interface{} `json:"numConstraints,omitempty"` // Indicates the number of constraints (not counting [[populationType]]) defined for a particular [[StatisticalPopulation]]. This helps applications understand if they have access to a sufficiently complete description of a [[StatisticalPopulation]].
	PopulationType interface{} `json:"populationType,omitempty"` // Indicates the populationType common to all members of a [[StatisticalPopulation]].
}

// Lists or enumerations dealing with status types.
type StatusEnumeration struct {
	Enumeration
}

// A value indicating a steering position.
type SteeringPositionValue struct {
	QualitativeValue
}

// A retail good store.
type Store struct {
	LocalBusiness
}

// Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
type StructuredValue struct {
	Intangible
}

// The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically to get updates pushed to.\n\nRelated actions:\n\n* [[FollowAction]]: Unlike FollowAction, SubscribeAction implies that the subscriber acts as a passive agent being constantly/actively pushed for updates.\n* [[RegisterAction]]: Unlike RegisterAction, SubscribeAction implies that the agent is interested in continuing receiving updates from the object.\n* [[JoinAction]]: Unlike JoinAction, SubscribeAction implies that the agent is interested in continuing receiving updates from the object.
type SubscribeAction struct {
	InteractAction
}

// Any matter of defined composition that has discrete existence, whose origin may be biological, mineral or chemical.
type Substance struct {
	MedicalEntity

	ActiveIngredient interface{} `json:"activeIngredient,omitempty"` // An active ingredient, typically chemical compounds and/or biologic substances.
	MaximumIntake    interface{} `json:"maximumIntake,omitempty"`    // Recommended intake of this supplement for a given population as defined by a specific recommending authority.
}

// A subway station.
type SubwayStation struct {
	CivicStructure
}

/*
A suite in a hotel or other public accommodation, denotes a class of luxury accommodations, the key feature of which is multiple rooms (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Suite_(hotel)">http://en.wikipedia.org/wiki/Suite_(hotel)</a>).
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type Suite struct {
	Accommodation

	Bed interface{} `json:"bed,omitempty"` /*
	The type of bed or beds included in the accommodation. For the single case of just one bed of a certain type, you use bed directly with a text.
	      If you want to indicate the quantity of a certain kind of bed, use an instance of BedDetails. For more detailed information, use the amenityFeature property.
	*/
	NumberOfRooms interface{} `json:"numberOfRooms,omitempty"` /*
	The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.
	Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.
	*/
	Occupancy interface{} `json:"occupancy,omitempty"` /*
	The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).
	Typical unit code(s): C62 for person
	*/
}

// Anatomical features that can be observed by sight (without dissection), including the form and proportions of the human body as well as surface landmarks that correspond to deeper subcutaneous structures. Superficial anatomy plays an important role in sports medicine, phlebotomy, and other medical specialties as underlying anatomical structures can be identified through surface palpation. For example, during back surgery, superficial anatomy can be used to palpate and count vertebrae to find the site of incision. Or in phlebotomy, superficial anatomy can be used to locate an underlying vein; for example, the median cubital vein can be located by palpating the borders of the cubital fossa (such as the epicondyles of the humerus) and then looking for the superficial signs of the vein, such as size, prominence, ability to refill after depression, and feel of surrounding tissue support. As another example, in a subluxation (dislocation) of the glenohumeral joint, the bony structure becomes pronounced with the deltoid muscle failing to cover the glenohumeral joint allowing the edges of the scapula to be superficially visible. Here, the superficial anatomy is the visible edges of the scapula, implying the underlying dislocation of the joint (the related anatomical structure).
type SuperficialAnatomy struct {
	MedicalEntity

	AssociatedPathophysiology interface{} `json:"associatedPathophysiology,omitempty"` // If applicable, a description of the pathophysiology associated with the anatomical system, including potential abnormal changes in the mechanical, physical, and biochemical functions of the system.
	RelatedAnatomy            interface{} `json:"relatedAnatomy,omitempty"`            // Anatomical systems or structures that relate to the superficial anatomy.
	RelatedCondition          interface{} `json:"relatedCondition,omitempty"`          // A medical condition associated with this anatomy.
	RelatedTherapy            interface{} `json:"relatedTherapy,omitempty"`            // A medical therapy related to this anatomy.
	Significance              interface{} `json:"significance,omitempty"`              // The significance associated with the superficial anatomy; as an example, how characteristics of the superficial anatomy can suggest underlying medical conditions or courses of treatment.
}

// A medical procedure involving an incision with instruments; performed for diagnose, or therapeutic purposes.
type SurgicalProcedure struct {
	MedicalProcedure
}

// The act of momentarily pausing a device or application (e.g. pause music playback or pause a timer).
type SuspendAction struct {
	ControlAction
}

// A synagogue.
type Synagogue struct {
	PlaceOfWorship
}

// A short TV program or a segment/part of a TV program.
type TVClip struct {
	Clip

	PartOfTVSeries interface{} `json:"partOfTVSeries,omitempty"` // The TV series to which this episode or season belongs.
}

// A TV episode which can be part of a series or season.
type TVEpisode struct {
	Episode

	CountryOfOrigin interface{} `json:"countryOfOrigin,omitempty"` /*
	The country of origin of something, including products as well as creative  works such as movie and TV content.

	In the case of TV and movie, this would be the country of the principle offices of the production company or individual responsible for the movie. For other kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties such as [[contentLocation]] and [[locationCreated]] may be more applicable.

	In the case of products, the country of origin of the product. The exact interpretation of this may vary by context and product type, and cannot be fully enumerated here.
	*/
	PartOfTVSeries   interface{} `json:"partOfTVSeries,omitempty"`   // The TV series to which this episode or season belongs.
	SubtitleLanguage interface{} `json:"subtitleLanguage,omitempty"` // Languages in which subtitles/captions are available, in [IETF BCP 47 standard format](http://tools.ietf.org/html/bcp47).
	TitleEIDR        interface{} `json:"titleEIDR,omitempty"`        /*
	An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]] representing at the most general/abstract level, a work of film or television.

	For example, the motion picture known as "Ghostbusters" has a titleEIDR of  "10.5240/7EC7-228A-510A-053E-CBB8-J". This title (or work) may have several variants, which EIDR calls "edits". See [[editEIDR]].

	Since schema.org types like [[Movie]] and [[TVEpisode]] can be used for both works and their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general description), or alongside [[editEIDR]] for a more edit-specific description.
	*/
}

// Season dedicated to TV broadcast and associated online delivery.
type TVSeason struct {
	CreativeWork
	// TODO: CreativeWorkSeason

	CountryOfOrigin interface{} `json:"countryOfOrigin,omitempty"` /*
	The country of origin of something, including products as well as creative  works such as movie and TV content.

	In the case of TV and movie, this would be the country of the principle offices of the production company or individual responsible for the movie. For other kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties such as [[contentLocation]] and [[locationCreated]] may be more applicable.

	In the case of products, the country of origin of the product. The exact interpretation of this may vary by context and product type, and cannot be fully enumerated here.
	*/
	PartOfTVSeries interface{} `json:"partOfTVSeries,omitempty"` // The TV series to which this episode or season belongs.
}

// CreativeWorkSeries dedicated to TV broadcast and associated online delivery.
type TVSeries struct {
	CreativeWork
	// TODO: CreativeWorkSeries

	Actor           interface{} `json:"actor,omitempty"`           // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Actors          interface{} `json:"actors,omitempty"`          // An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
	ContainsSeason  interface{} `json:"containsSeason,omitempty"`  // A season that is part of the media series.
	CountryOfOrigin interface{} `json:"countryOfOrigin,omitempty"` /*
	The country of origin of something, including products as well as creative  works such as movie and TV content.

	In the case of TV and movie, this would be the country of the principle offices of the production company or individual responsible for the movie. For other kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties such as [[contentLocation]] and [[locationCreated]] may be more applicable.

	In the case of products, the country of origin of the product. The exact interpretation of this may vary by context and product type, and cannot be fully enumerated here.
	*/
	Director          interface{} `json:"director,omitempty"`          // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	Directors         interface{} `json:"directors,omitempty"`         // A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
	Episode           interface{} `json:"episode,omitempty"`           // An episode of a tv, radio or game media within a series or season.
	Episodes          interface{} `json:"episodes,omitempty"`          // An episode of a TV/radio series or season.
	MusicBy           interface{} `json:"musicBy,omitempty"`           // The composer of the soundtrack.
	NumberOfEpisodes  interface{} `json:"numberOfEpisodes,omitempty"`  // The number of episodes in this season or series.
	NumberOfSeasons   interface{} `json:"numberOfSeasons,omitempty"`   // The number of seasons in this series.
	ProductionCompany interface{} `json:"productionCompany,omitempty"` // The production company or studio responsible for the item e.g. series, video game, episode etc.
	Season            interface{} `json:"season,omitempty"`            // A season in a media series.
	Seasons           interface{} `json:"seasons,omitempty"`           // A season in a media series.
	Trailer           interface{} `json:"trailer,omitempty"`           // The trailer of a movie or tv/radio series, season, episode, etc.
}

// A table on a Web page.
type Table struct {
	WebPageElement
}

// The act of gaining ownership of an object from an origin. Reciprocal of GiveAction.\n\nRelated actions:\n\n* [[GiveAction]]: The reciprocal of TakeAction.\n* [[ReceiveAction]]: Unlike ReceiveAction, TakeAction implies that ownership has been transfered.
type TakeAction struct {
	TransferAction
}

// A tattoo parlor.
type TattooParlor struct {
	HealthAndBeautyBusiness
}

// A taxi.
type Taxi struct {
	Service
}

// A reservation for a taxi.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
type TaxiReservation struct {
	Reservation

	PartySize      interface{} `json:"partySize,omitempty"`      // Number of people the reservation should accommodate.
	PickupLocation interface{} `json:"pickupLocation,omitempty"` // Where a taxi will pick up a passenger or a rental car can be picked up.
	PickupTime     interface{} `json:"pickupTime,omitempty"`     // When a taxi will pickup a passenger or a rental car can be picked up.
}

// A service for a vehicle for hire with a driver for local travel. Fares are usually calculated based on distance traveled.
type TaxiService struct {
	Service
}

// A taxi stand.
type TaxiStand struct {
	CivicStructure
}

// A set of organisms asserted to represent a natural cohesive biological unit.
type Taxon struct {
	Thing

	ChildTaxon     interface{} `json:"childTaxon,omitempty"`     // Closest child taxa of the taxon in question.
	HasDefinedTerm interface{} `json:"hasDefinedTerm,omitempty"` // A Defined Term contained in this term set.
	ParentTaxon    interface{} `json:"parentTaxon,omitempty"`    // Closest parent taxon of the taxon in question.
	TaxonRank      interface{} `json:"taxonRank,omitempty"`      // The taxonomic rank of this taxon given preferably as a URI from a controlled vocabulary – (typically the ranks from TDWG TaxonRank ontology or equivalent Wikidata URIs).
}

// A technical article - Example: How-to (task) topics, step-by-step, procedural troubleshooting, specifications, etc.
type TechArticle struct {
	Article

	Dependencies     interface{} `json:"dependencies,omitempty"`     // Prerequisites needed to fulfill steps in article.
	ProficiencyLevel interface{} `json:"proficiencyLevel,omitempty"` // Proficiency needed for this content; expected values: 'Beginner', 'Expert'.
}

// A unique instance of a television BroadcastService on a CableOrSatelliteService lineup.
type TelevisionChannel struct {
	BroadcastChannel
}

// A television station.
type TelevisionStation struct {
	LocalBusiness
}

// A tennis complex.
type TennisComplex struct {
	SportsActivityLocation
}

// Data type: Text.
type Text struct{}

// A file composed primarily of text.
type TextDigitalDocument struct {
	DigitalDocument
}

// Event type: Theater performance.
type TheaterEvent struct {
	Event
}

// A theater group or company, for example, the Royal Shakespeare Company or Druid Theatre.
type TheaterGroup struct {
	PerformingGroup
}

// A medical procedure intended primarily for therapeutic purposes, aimed at improving a health condition.
type TherapeuticProcedure struct {
	MedicalProcedure

	AdverseOutcome interface{} `json:"adverseOutcome,omitempty"` // A possible complication and/or side effect of this therapy. If it is known that an adverse outcome is serious (resulting in death, disability, or permanent damage; requiring hospitalization; or is otherwise life-threatening or requires immediate medical attention), tag it as a seriouseAdverseOutcome instead.
	DoseSchedule   interface{} `json:"doseSchedule,omitempty"`   // A dosing schedule for the drug for a given population, either observed, recommended, or maximum dose based on the type used.
	Drug           interface{} `json:"drug,omitempty"`           // Specifying a drug or medicine used in a medication procedure.
}

// A thesis or dissertation document submitted in support of candidature for an academic degree or professional qualification.
type Thesis struct {
	CreativeWork

	InSupportOf interface{} `json:"inSupportOf,omitempty"` // Qualification, candidature, degree, application that Thesis supports.
}

// The most generic type of item.
type Thing struct {
	AdditionalType            interface{} `json:"additionalType,omitempty"`            // An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
	AlternateName             interface{} `json:"alternateName,omitempty"`             // An alias for the item.
	Description               interface{} `json:"description,omitempty"`               // A description of the item.
	DisambiguatingDescription interface{} `json:"disambiguatingDescription,omitempty"` // A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
	Identifier                interface{} `json:"identifier,omitempty"`                /*
	The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.

	*/
	Image            interface{} `json:"image,omitempty"`            // An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
	MainEntityOfPage interface{} `json:"mainEntityOfPage,omitempty"` // Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
	Name             interface{} `json:"name,omitempty"`             // The name of the item.
	PotentialAction  interface{} `json:"potentialAction,omitempty"`  // Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
	SameAs           interface{} `json:"sameAs,omitempty"`           // URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
	SubjectOf        interface{} `json:"subjectOf,omitempty"`        // A CreativeWork or Event about this Thing.
	Url              interface{} `json:"url,omitempty"`              // URL of the item.
}

// Used to describe a ticket to an event, a flight, a bus ride, etc.
type Ticket struct {
	Intangible

	DateIssued    interface{} `json:"dateIssued,omitempty"`    // The date the ticket was issued.
	IssuedBy      interface{} `json:"issuedBy,omitempty"`      // The organization issuing the ticket or permit.
	PriceCurrency interface{} `json:"priceCurrency,omitempty"` // The currency of the price, or a price component when attached to [[PriceSpecification]] and its subtypes.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	TicketNumber  interface{} `json:"ticketNumber,omitempty"`  // The unique identifier for the ticket.
	TicketToken   interface{} `json:"ticketToken,omitempty"`   // Reference to an asset (e.g., Barcode, QR code image or PDF) usable for entrance.
	TicketedSeat  interface{} `json:"ticketedSeat,omitempty"`  // The seat associated with the ticket.
	TotalPrice    interface{} `json:"totalPrice,omitempty"`    // The total price for the reservation or ticket, including applicable taxes, shipping, etc.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
	UnderName     interface{} `json:"underName,omitempty"`     // The person or organization the reservation or ticket is for.
}

// The act of reaching a draw in a competitive activity.
type TieAction struct {
	AchieveAction
}

// A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
type Time struct{}

// The act of giving money voluntarily to a beneficiary in recognition of services rendered.
type TipAction struct {
	TradeAction

	Recipient interface{} `json:"recipient,omitempty"` // A sub property of participant. The participant who is at the receiving end of the action.
}

// A tire shop.
type TireShop struct {
	Store
}

// A tourist attraction.  In principle any Thing can be a [[TouristAttraction]], from a [[Mountain]] and [[LandmarksOrHistoricalBuildings]] to a [[LocalBusiness]].  This Type can be used on its own to describe a general [[TouristAttraction]], or be used as an [[additionalType]] to add tourist attraction properties to any other type.  (See examples below)
type TouristAttraction struct {
	Place

	AvailableLanguage interface{} `json:"availableLanguage,omitempty"` // A language someone may use with or at the item, service or place. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[inLanguage]]
	TouristType       interface{} `json:"touristType,omitempty"`       // Attraction suitable for type(s) of tourist. eg. Children, visitors from a particular country, etc.
}

/*
A tourist destination. In principle any [[Place]] can be a [[TouristDestination]] from a [[City]], Region or [[Country]] to an [[AmusementPark]] or [[Hotel]]. This Type can be used on its own to describe a general [[TouristDestination]], or be used as an [[additionalType]] to add tourist relevant properties to any other [[Place]].  A [[TouristDestination]] is defined as a [[Place]] that contains, or is colocated with, one or more [[TouristAttraction]]s, often linked by a similar theme or interest to a particular [[touristType]]. The [UNWTO](http://www2.unwto.org/) defines Destination (main destination of a tourism trip) as the place visited that is central to the decision to take the trip.
  (See examples below).
*/
type TouristDestination struct {
	Place

	IncludesAttraction interface{} `json:"includesAttraction,omitempty"` // Attraction located at destination.
	TouristType        interface{} `json:"touristType,omitempty"`        // Attraction suitable for type(s) of tourist. eg. Children, visitors from a particular country, etc.
}

// A tourist information center.
type TouristInformationCenter struct {
	LocalBusiness
}

/*
A tourist trip. A created itinerary of visits to one or more places of interest ([[TouristAttraction]]/[[TouristDestination]]) often linked by a similar theme, geographic area, or interest to a particular [[touristType]]. The [UNWTO](http://www2.unwto.org/) defines tourism trip as the Trip taken by visitors.
  (See examples below).
*/
type TouristTrip struct {
	Trip

	TouristType interface{} `json:"touristType,omitempty"` // Attraction suitable for type(s) of tourist. eg. Children, visitors from a particular country, etc.
}

// A toy store.
type ToyStore struct {
	Store
}

// An agent tracks an object for updates.\n\nRelated actions:\n\n* [[FollowAction]]: Unlike FollowAction, TrackAction refers to the interest on the location of innanimates objects.\n* [[SubscribeAction]]: Unlike SubscribeAction, TrackAction refers to  the interest on the location of innanimate objects.
type TrackAction struct {
	FindAction

	DeliveryMethod interface{} `json:"deliveryMethod,omitempty"` // A sub property of instrument. The method of delivery.
}

// The act of participating in an exchange of goods and services for monetary compensation. An agent trades an object, product or service with a participant in exchange for a one time or periodic payment.
type TradeAction struct {
	Action

	Price interface{} `json:"price,omitempty"` /*
	The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.\n\nUsage guidelines:\n\n* Use the [[priceCurrency]] property (with standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR") instead of including [ambiguous symbols](http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign) such as '$' in the value.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.\n* Note that both [RDFa](http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute) and Microdata syntax allow the use of a "content=" attribute for publishing simple machine-readable values alongside more human-friendly formatting.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.

	*/
	PriceCurrency      interface{} `json:"priceCurrency,omitempty"`      // The currency of the price, or a price component when attached to [[PriceSpecification]] and its subtypes.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	PriceSpecification interface{} `json:"priceSpecification,omitempty"` // One or more detailed price specifications, indicating the unit price and delivery or payment charges.
}

// A reservation for train travel.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
type TrainReservation struct {
	Reservation
}

// A train station.
type TrainStation struct {
	CivicStructure
}

// A trip on a commercial train line.
type TrainTrip struct {
	Trip

	ArrivalPlatform   interface{} `json:"arrivalPlatform,omitempty"`   // The platform where the train arrives.
	ArrivalStation    interface{} `json:"arrivalStation,omitempty"`    // The station where the train trip ends.
	DeparturePlatform interface{} `json:"departurePlatform,omitempty"` // The platform from which the train departs.
	DepartureStation  interface{} `json:"departureStation,omitempty"`  // The station from which the train departs.
	TrainName         interface{} `json:"trainName,omitempty"`         // The name of the train (e.g. The Orient Express).
	TrainNumber       interface{} `json:"trainNumber,omitempty"`       // The unique identifier for the train.
}

// The act of transferring/moving (abstract or concrete) animate or inanimate objects from one place to another.
type TransferAction struct {
	Action

	FromLocation interface{} `json:"fromLocation,omitempty"` // A sub property of location. The original location of the object or the agent before the action.
	ToLocation   interface{} `json:"toLocation,omitempty"`   // A sub property of location. The final location of the object or the agent after the action.
}

// The act of traveling from an fromLocation to a destination by a specified mode of transport, optionally with participants.
type TravelAction struct {
	MoveAction

	Distance interface{} `json:"distance,omitempty"` // The distance travelled, e.g. exercising or travelling.
}

// A travel agency.
type TravelAgency struct {
	LocalBusiness
}

// An indication for treating an underlying condition, symptom, etc.
type TreatmentIndication struct {
	MedicalIndication
}

// A trip or journey. An itinerary of visits to one or more places.
type Trip struct {
	Intangible

	ArrivalTime   interface{} `json:"arrivalTime,omitempty"`   // The expected arrival time.
	DepartureTime interface{} `json:"departureTime,omitempty"` // The expected departure time.
	Itinerary     interface{} `json:"itinerary,omitempty"`     // Destination(s) ( [[Place]] ) that make up a trip. For a trip where destination order is important use [[ItemList]] to specify that order (see examples).
	Offers        interface{} `json:"offers,omitempty"`        /*
	An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.

	*/
	PartOfTrip interface{} `json:"partOfTrip,omitempty"` // Identifies that this [[Trip]] is a subTrip of another Trip.  For example Day 1, Day 2, etc. of a multi-day trip.
	Provider   interface{} `json:"provider,omitempty"`   // The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
	SubTrip    interface{} `json:"subTrip,omitempty"`    // Identifies a [[Trip]] that is a subTrip of this Trip.  For example Day 1, Day 2, etc. of a multi-day trip.
}

// A structured value indicating the quantity, unit of measurement, and business function of goods included in a bundle offer.
type TypeAndQuantityNode struct {
	StructuredValue

	AmountOfThisGood interface{} `json:"amountOfThisGood,omitempty"` // The quantity of the goods included in the offer.
	BusinessFunction interface{} `json:"businessFunction,omitempty"` // The business function (e.g. sell, lease, repair, dispose) of the offer or component of a bundle (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell.
	TypeOfGood       interface{} `json:"typeOfGood,omitempty"`       // The product that this structured value is referring to.
	UnitCode         interface{} `json:"unitCode,omitempty"`         // The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.
	UnitText         interface{} `json:"unitText,omitempty"`         /*
	A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for
	<a href='unitCode'>unitCode</a>.
	*/
}

// UKNonprofitType: Non-profit organization type originating from the United Kingdom.
type UKNonprofitType struct {
	NonprofitType
}

// Data type: URL.
type URL struct {
	Text
}

// USNonprofitType: Non-profit organization type originating from the United States.
type USNonprofitType struct {
	NonprofitType
}

// The act of un-registering from a service.\n\nRelated actions:\n\n* [[RegisterAction]]: antonym of UnRegisterAction.\n* [[LeaveAction]]: Unlike LeaveAction, UnRegisterAction implies that you are unregistering from a service you werer previously registered, rather than leaving a team/group of people.
type UnRegisterAction struct {
	InteractAction
}

// The price asked for a given offer by the respective organization or person.
type UnitPriceSpecification struct {
	PriceSpecification

	BillingDuration    interface{} `json:"billingDuration,omitempty"`    // Specifies for how long this price (or price component) will be billed. Can be used, for example, to model the contractual duration of a subscription or payment plan. Type can be either a Duration or a Number (in which case the unit of measurement, for example month, is specified by the unitCode property).
	BillingIncrement   interface{} `json:"billingIncrement,omitempty"`   // This property specifies the minimal quantity and rounding increment that will be the basis for the billing. The unit of measurement is specified by the unitCode property.
	BillingStart       interface{} `json:"billingStart,omitempty"`       // Specifies after how much time this price (or price component) becomes valid and billing starts. Can be used, for example, to model a price increase after the first year of a subscription. The unit of measurement is specified by the unitCode property.
	PriceComponentType interface{} `json:"priceComponentType,omitempty"` // Identifies a price component (for example, a line item on an invoice), part of the total price for an offer.
	PriceType          interface{} `json:"priceType,omitempty"`          // Defines the type of a price specified for an offered product, for example a list price, a (temporary) sale price or a manufacturer suggested retail price. If multiple prices are specified for an offer the [[priceType]] property can be used to identify the type of each such specified price. The value of priceType can be specified as a value from enumeration PriceTypeEnumeration or as a free form text string for price types that are not already predefined in PriceTypeEnumeration.
	ReferenceQuantity  interface{} `json:"referenceQuantity,omitempty"`  // The reference quantity for which a certain price applies, e.g. 1 EUR per 4 kWh of electricity. This property is a replacement for unitOfMeasurement for the advanced cases where the price does not relate to a standard unit.
	UnitCode           interface{} `json:"unitCode,omitempty"`           // The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.
	UnitText           interface{} `json:"unitText,omitempty"`           /*
	A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for
	<a href='unitCode'>unitCode</a>.
	*/
}

// The act of managing by changing/editing the state of the object.
type UpdateAction struct {
	Action

	Collection       interface{} `json:"collection,omitempty"`       // A sub property of object. The collection target of the action.
	TargetCollection interface{} `json:"targetCollection,omitempty"` // A sub property of object. The collection target of the action.
}

// The act of applying an object to its intended purpose.
type UseAction struct {
	ConsumeAction
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserBlocks struct {
	UserInteraction
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserCheckins struct {
	UserInteraction
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserComments struct {
	UserInteraction

	CommentText interface{} `json:"commentText,omitempty"` // The text of the UserComment.
	CommentTime interface{} `json:"commentTime,omitempty"` // The time at which the UserComment was made.
	Creator     interface{} `json:"creator,omitempty"`     // The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.
	Discusses   interface{} `json:"discusses,omitempty"`   // Specifies the CreativeWork associated with the UserComment.
	ReplyToUrl  interface{} `json:"replyToUrl,omitempty"`  // The URL at which a reply may be posted to the specified UserComment.
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserDownloads struct {
	UserInteraction
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserInteraction struct {
	Event
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserLikes struct {
	UserInteraction
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserPageVisits struct {
	UserInteraction
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserPlays struct {
	UserInteraction
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserPlusOnes struct {
	UserInteraction
}

// A review created by an end-user (e.g. consumer, purchaser, attendee etc.), in contrast with [[CriticReview]].
type UserReview struct {
	Review
}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserTweets struct {
	UserInteraction
}

// A vehicle is a device that is designed or used to transport people or cargo over land, water, air, or through space.
type Vehicle struct {
	Product

	AccelerationTime            interface{} `json:"accelerationTime,omitempty"`            // The time needed to accelerate the vehicle from a given start velocity to a given target velocity.\n\nTypical unit code(s): SEC for seconds\n\n* Note: There are unfortunately no standard unit codes for seconds/0..100 km/h or seconds/0..60 mph. Simply use "SEC" for seconds and indicate the velocities in the [[name]] of the [[QuantitativeValue]], or use [[valueReference]] with a [[QuantitativeValue]] of 0..60 mph or 0..100 km/h to specify the reference speeds.
	BodyType                    interface{} `json:"bodyType,omitempty"`                    // Indicates the design and body style of the vehicle (e.g. station wagon, hatchback, etc.).
	CallSign                    interface{} `json:"callSign,omitempty"`                    // A [callsign](https://en.wikipedia.org/wiki/Call_sign), as used in broadcasting and radio communications to identify people, radio and TV stations, or vehicles.
	CargoVolume                 interface{} `json:"cargoVolume,omitempty"`                 // The available volume for cargo or luggage. For automobiles, this is usually the trunk volume.\n\nTypical unit code(s): LTR for liters, FTQ for cubic foot/feet\n\nNote: You can use [[minValue]] and [[maxValue]] to indicate ranges.
	DateVehicleFirstRegistered  interface{} `json:"dateVehicleFirstRegistered,omitempty"`  // The date of the first registration of the vehicle with the respective public authorities.
	DriveWheelConfiguration     interface{} `json:"driveWheelConfiguration,omitempty"`     // The drive wheel configuration, i.e. which roadwheels will receive torque from the vehicle's engine via the drivetrain.
	EmissionsCO2                interface{} `json:"emissionsCO2,omitempty"`                // The CO2 emissions in g/km. When used in combination with a QuantitativeValue, put "g/km" into the unitText property of that value, since there is no UN/CEFACT Common Code for "g/km".
	FuelCapacity                interface{} `json:"fuelCapacity,omitempty"`                // The capacity of the fuel tank or in the case of electric cars, the battery. If there are multiple components for storage, this should indicate the total of all storage of the same type.\n\nTypical unit code(s): LTR for liters, GLL of US gallons, GLI for UK / imperial gallons, AMH for ampere-hours (for electrical vehicles).
	FuelConsumption             interface{} `json:"fuelConsumption,omitempty"`             // The amount of fuel consumed for traveling a particular distance or temporal duration with the given vehicle (e.g. liters per 100 km).\n\n* Note 1: There are unfortunately no standard unit codes for liters per 100 km.  Use [[unitText]] to indicate the unit of measurement, e.g. L/100 km.\n* Note 2: There are two ways of indicating the fuel consumption, [[fuelConsumption]] (e.g. 8 liters per 100 km) and [[fuelEfficiency]] (e.g. 30 miles per gallon). They are reciprocal.\n* Note 3: Often, the absolute value is useful only when related to driving speed ("at 80 km/h") or usage pattern ("city traffic"). You can use [[valueReference]] to link the value for the fuel consumption to another value.
	FuelEfficiency              interface{} `json:"fuelEfficiency,omitempty"`              // The distance traveled per unit of fuel used; most commonly miles per gallon (mpg) or kilometers per liter (km/L).\n\n* Note 1: There are unfortunately no standard unit codes for miles per gallon or kilometers per liter. Use [[unitText]] to indicate the unit of measurement, e.g. mpg or km/L.\n* Note 2: There are two ways of indicating the fuel consumption, [[fuelConsumption]] (e.g. 8 liters per 100 km) and [[fuelEfficiency]] (e.g. 30 miles per gallon). They are reciprocal.\n* Note 3: Often, the absolute value is useful only when related to driving speed ("at 80 km/h") or usage pattern ("city traffic"). You can use [[valueReference]] to link the value for the fuel economy to another value.
	FuelType                    interface{} `json:"fuelType,omitempty"`                    // The type of fuel suitable for the engine or engines of the vehicle. If the vehicle has only one engine, this property can be attached directly to the vehicle.
	KnownVehicleDamages         interface{} `json:"knownVehicleDamages,omitempty"`         // A textual description of known damages, both repaired and unrepaired.
	MeetsEmissionStandard       interface{} `json:"meetsEmissionStandard,omitempty"`       // Indicates that the vehicle meets the respective emission standard.
	MileageFromOdometer         interface{} `json:"mileageFromOdometer,omitempty"`         // The total distance travelled by the particular vehicle since its initial production, as read from its odometer.\n\nTypical unit code(s): KMT for kilometers, SMI for statute miles
	ModelDate                   interface{} `json:"modelDate,omitempty"`                   // The release date of a vehicle model (often used to differentiate versions of the same make and model).
	NumberOfAirbags             interface{} `json:"numberOfAirbags,omitempty"`             // The number or type of airbags in the vehicle.
	NumberOfAxles               interface{} `json:"numberOfAxles,omitempty"`               // The number of axles.\n\nTypical unit code(s): C62
	NumberOfDoors               interface{} `json:"numberOfDoors,omitempty"`               // The number of doors.\n\nTypical unit code(s): C62
	NumberOfForwardGears        interface{} `json:"numberOfForwardGears,omitempty"`        // The total number of forward gears available for the transmission system of the vehicle.\n\nTypical unit code(s): C62
	NumberOfPreviousOwners      interface{} `json:"numberOfPreviousOwners,omitempty"`      // The number of owners of the vehicle, including the current one.\n\nTypical unit code(s): C62
	Payload                     interface{} `json:"payload,omitempty"`                     // The permitted weight of passengers and cargo, EXCLUDING the weight of the empty vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: Many databases specify the permitted TOTAL weight instead, which is the sum of [[weight]] and [[payload]]\n* Note 2: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 3: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]].\n* Note 4: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.
	ProductionDate              interface{} `json:"productionDate,omitempty"`              // The date of production of the item, e.g. vehicle.
	PurchaseDate                interface{} `json:"purchaseDate,omitempty"`                // The date the item e.g. vehicle was purchased by the current owner.
	SeatingCapacity             interface{} `json:"seatingCapacity,omitempty"`             // The number of persons that can be seated (e.g. in a vehicle), both in terms of the physical space available, and in terms of limitations set by law.\n\nTypical unit code(s): C62 for persons
	Speed                       interface{} `json:"speed,omitempty"`                       // The speed range of the vehicle. If the vehicle is powered by an engine, the upper limit of the speed range (indicated by [[maxValue]] should be the maximum speed achievable under regular conditions.\n\nTypical unit code(s): KMH for km/h, HM for mile per hour (0.447 04 m/s), KNT for knot\n\n*Note 1: Use [[minValue]] and [[maxValue]] to indicate the range. Typically, the minimal value is zero.\n* Note 2: There are many different ways of measuring the speed range. You can link to information about how the given value has been determined using the [[valueReference]] property.
	SteeringPosition            interface{} `json:"steeringPosition,omitempty"`            // The position of the steering wheel or similar device (mostly for cars).
	TongueWeight                interface{} `json:"tongueWeight,omitempty"`                // The permitted vertical load (TWR) of a trailer attached to the vehicle. Also referred to as Tongue Load Rating (TLR) or Vertical Load Rating (VLR)\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 2: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]].\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.
	TrailerWeight               interface{} `json:"trailerWeight,omitempty"`               // The permitted weight of a trailer attached to the vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 2: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]].\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.
	VehicleConfiguration        interface{} `json:"vehicleConfiguration,omitempty"`        // A short text indicating the configuration of the vehicle, e.g. '5dr hatchback ST 2.5 MT 225 hp' or 'limited edition'.
	VehicleEngine               interface{} `json:"vehicleEngine,omitempty"`               // Information about the engine or engines of the vehicle.
	VehicleIdentificationNumber interface{} `json:"vehicleIdentificationNumber,omitempty"` // The Vehicle Identification Number (VIN) is a unique serial number used by the automotive industry to identify individual motor vehicles.
	VehicleInteriorColor        interface{} `json:"vehicleInteriorColor,omitempty"`        // The color or color combination of the interior of the vehicle.
	VehicleInteriorType         interface{} `json:"vehicleInteriorType,omitempty"`         // The type or material of the interior of the vehicle (e.g. synthetic fabric, leather, wood, etc.). While most interior types are characterized by the material used, an interior type can also be based on vehicle usage or target audience.
	VehicleModelDate            interface{} `json:"vehicleModelDate,omitempty"`            // The release date of a vehicle model (often used to differentiate versions of the same make and model).
	VehicleSeatingCapacity      interface{} `json:"vehicleSeatingCapacity,omitempty"`      // The number of passengers that can be seated in the vehicle, both in terms of the physical space available, and in terms of limitations set by law.\n\nTypical unit code(s): C62 for persons.
	VehicleSpecialUsage         interface{} `json:"vehicleSpecialUsage,omitempty"`         // Indicates whether the vehicle has been used for special purposes, like commercial rental, driving school, or as a taxi. The legislation in many countries requires this information to be revealed when offering a car for sale.
	VehicleTransmission         interface{} `json:"vehicleTransmission,omitempty"`         // The type of component used for transmitting the power from a rotating power source to the wheels or other relevant component(s) ("gearbox" for cars).
	WeightTotal                 interface{} `json:"weightTotal,omitempty"`                 // The permitted total weight of the loaded vehicle, including passengers and cargo and the weight of the empty vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 2: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]].\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.
	Wheelbase                   interface{} `json:"wheelbase,omitempty"`                   // The distance between the centers of the front and rear wheels.\n\nTypical unit code(s): CMT for centimeters, MTR for meters, INH for inches, FOT for foot/feet
}

// A type of blood vessel that specifically carries blood to the heart.
type Vein struct {
	Vessel

	DrainsTo      interface{} `json:"drainsTo,omitempty"`      // The vasculature that the vein drains into.
	RegionDrained interface{} `json:"regionDrained,omitempty"` // The anatomical or organ system drained by this vessel; generally refers to a specific part of an organ.
	Tributary     interface{} `json:"tributary,omitempty"`     // The anatomical or organ system that the vein flows into; a larger structure that the vein connects to.
}

// A component of the human body circulatory system comprised of an intricate network of hollow tubes that transport blood throughout the entire body.
type Vessel struct {
	AnatomicalStructure
}

// A vet's office.
type VeterinaryCare struct {
	MedicalOrganization
}

// Web page type: Video gallery page.
type VideoGallery struct {
	MediaGallery
}

// A video game is an electronic game that involves human interaction with a user interface to generate visual feedback on a video device.
type VideoGame struct {
	Game
	// TODO: SoftwareApplication

	Actor        interface{} `json:"actor,omitempty"`        // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Actors       interface{} `json:"actors,omitempty"`       // An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
	CheatCode    interface{} `json:"cheatCode,omitempty"`    // Cheat codes to the game.
	Director     interface{} `json:"director,omitempty"`     // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	Directors    interface{} `json:"directors,omitempty"`    // A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
	GameEdition  interface{} `json:"gameEdition,omitempty"`  // The edition of a video game.
	GamePlatform interface{} `json:"gamePlatform,omitempty"` // The electronic systems used to play <a href="http://en.wikipedia.org/wiki/Category:Video_game_platforms">video games</a>.
	GameServer   interface{} `json:"gameServer,omitempty"`   // The server on which  it is possible to play the game.
	GameTip      interface{} `json:"gameTip,omitempty"`      // Links to tips, tactics, etc.
	MusicBy      interface{} `json:"musicBy,omitempty"`      // The composer of the soundtrack.
	PlayMode     interface{} `json:"playMode,omitempty"`     // Indicates whether this game is multi-player, co-op or single-player.  The game can be marked as multi-player, co-op and single-player at the same time.
	Trailer      interface{} `json:"trailer,omitempty"`      // The trailer of a movie or tv/radio series, season, episode, etc.
}

// A short segment/part of a video game.
type VideoGameClip struct {
	Clip
}

// A video game series.
type VideoGameSeries struct {
	CreativeWorkSeries

	Actor              interface{} `json:"actor,omitempty"`              // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Actors             interface{} `json:"actors,omitempty"`             // An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
	CharacterAttribute interface{} `json:"characterAttribute,omitempty"` // A piece of data that represents a particular aspect of a fictional character (skill, power, character points, advantage, disadvantage).
	CheatCode          interface{} `json:"cheatCode,omitempty"`          // Cheat codes to the game.
	ContainsSeason     interface{} `json:"containsSeason,omitempty"`     // A season that is part of the media series.
	Director           interface{} `json:"director,omitempty"`           // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	Directors          interface{} `json:"directors,omitempty"`          // A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
	Episode            interface{} `json:"episode,omitempty"`            // An episode of a tv, radio or game media within a series or season.
	Episodes           interface{} `json:"episodes,omitempty"`           // An episode of a TV/radio series or season.
	GameItem           interface{} `json:"gameItem,omitempty"`           // An item is an object within the game world that can be collected by a player or, occasionally, a non-player character.
	GameLocation       interface{} `json:"gameLocation,omitempty"`       // Real or fictional location of the game (or part of game).
	GamePlatform       interface{} `json:"gamePlatform,omitempty"`       // The electronic systems used to play <a href="http://en.wikipedia.org/wiki/Category:Video_game_platforms">video games</a>.
	MusicBy            interface{} `json:"musicBy,omitempty"`            // The composer of the soundtrack.
	NumberOfEpisodes   interface{} `json:"numberOfEpisodes,omitempty"`   // The number of episodes in this season or series.
	NumberOfPlayers    interface{} `json:"numberOfPlayers,omitempty"`    // Indicate how many people can play this game (minimum, maximum, or range).
	NumberOfSeasons    interface{} `json:"numberOfSeasons,omitempty"`    // The number of seasons in this series.
	PlayMode           interface{} `json:"playMode,omitempty"`           // Indicates whether this game is multi-player, co-op or single-player.  The game can be marked as multi-player, co-op and single-player at the same time.
	ProductionCompany  interface{} `json:"productionCompany,omitempty"`  // The production company or studio responsible for the item e.g. series, video game, episode etc.
	Quest              interface{} `json:"quest,omitempty"`              // The task that a player-controlled character, or group of characters may complete in order to gain a reward.
	Season             interface{} `json:"season,omitempty"`             // A season in a media series.
	Seasons            interface{} `json:"seasons,omitempty"`            // A season in a media series.
	Trailer            interface{} `json:"trailer,omitempty"`            // The trailer of a movie or tv/radio series, season, episode, etc.
}

// A video file.
type VideoObject struct {
	MediaObject

	Actor               interface{} `json:"actor,omitempty"`               // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Actors              interface{} `json:"actors,omitempty"`              // An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
	Caption             interface{} `json:"caption,omitempty"`             // The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the [[encodingFormat]].
	Director            interface{} `json:"director,omitempty"`            // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	Directors           interface{} `json:"directors,omitempty"`           // A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
	EmbeddedTextCaption interface{} `json:"embeddedTextCaption,omitempty"` // Represents textual captioning from a [[MediaObject]], e.g. text of a 'meme'.
	MusicBy             interface{} `json:"musicBy,omitempty"`             // The composer of the soundtrack.
	Thumbnail           interface{} `json:"thumbnail,omitempty"`           // Thumbnail image for an image or video.
	Transcript          interface{} `json:"transcript,omitempty"`          // If this MediaObject is an AudioObject or VideoObject, the transcript of that object.
	VideoFrameSize      interface{} `json:"videoFrameSize,omitempty"`      // The frame size of the video.
	VideoQuality        interface{} `json:"videoQuality,omitempty"`        // The quality of the video.
}

// A specific and exact (byte-for-byte) version of a [[VideoObject]]. Two byte-for-byte identical files, for the purposes of this type, considered identical. If they have different embedded metadata the files will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual content, do not affect this notion of identity.
type VideoObjectSnapshot struct {
	VideoObject
}

// The act of consuming static visual content.
type ViewAction struct {
	ConsumeAction
}

// An online or virtual location for attending events. For example, one may attend an online seminar or educational event. While a virtual location may be used as the location of an event, virtual locations should not be confused with physical locations in the real world.
type VirtualLocation struct {
	Intangible
}

// Event type: Visual arts event.
type VisualArtsEvent struct {
	Event
}

// A work of art that is primarily visual in character.
type VisualArtwork struct {
	CreativeWork

	ArtEdition interface{} `json:"artEdition,omitempty"` // The number of copies when multiple copies of a piece of artwork are produced - e.g. for a limited edition of 20 prints, 'artEdition' refers to the total number of copies (in this example "20").
	ArtMedium  interface{} `json:"artMedium,omitempty"`  // The material used. (e.g. Oil, Watercolour, Acrylic, Linoprint, Marble, Cyanotype, Digital, Lithograph, DryPoint, Intaglio, Pastel, Woodcut, Pencil, Mixed Media, etc.)
	Artform    interface{} `json:"artform,omitempty"`    // e.g. Painting, Drawing, Sculpture, Print, Photograph, Assemblage, Collage, etc.
	Artist     interface{} `json:"artist,omitempty"`     /*
	The primary artist for a work
	    	in a medium other than pencils or digital line art--for example, if the
	    	primary artwork is done in watercolors or digital paints.
	*/
	ArtworkSurface interface{} `json:"artworkSurface,omitempty"` // The supporting materials for the artwork, e.g. Canvas, Paper, Wood, Board, etc.
	Colorist       interface{} `json:"colorist,omitempty"`       // The individual who adds color to inked drawings.
	Depth          interface{} `json:"depth,omitempty"`          // The depth of the item.
	Height         interface{} `json:"height,omitempty"`         // The height of the item.
	Inker          interface{} `json:"inker,omitempty"`          // The individual who traces over the pencil drawings in ink after pencils are complete.
	Letterer       interface{} `json:"letterer,omitempty"`       // The individual who adds lettering, including speech balloons and sound effects, to artwork.
	Penciler       interface{} `json:"penciler,omitempty"`       // The individual who draws the primary narrative artwork.
	Surface        interface{} `json:"surface,omitempty"`        // A material used as a surface in some artwork, e.g. Canvas, Paper, Wood, Board, etc.
	Width          interface{} `json:"width,omitempty"`          // The width of the item.
}

// Vital signs are measures of various physiological functions in order to assess the most basic body functions.
type VitalSign struct {
	MedicalSign
}

// A volcano, like Fuji san.
type Volcano struct {
	Landform
}

// The act of expressing a preference from a fixed/finite/structured set of choices/options.
type VoteAction struct {
	ChooseAction

	Candidate interface{} `json:"candidate,omitempty"` // A sub property of object. The candidate subject of this action.
}

// An advertising section of the page.
type WPAdBlock struct {
	WebPageElement
}

// The footer section of the page.
type WPFooter struct {
	WebPageElement
}

// The header section of the page.
type WPHeader struct {
	WebPageElement
}

// A sidebar section of the page.
type WPSideBar struct {
	WebPageElement
}

// The act of expressing a desire about the object. An agent wants an object.
type WantAction struct {
	ReactAction
}

// A structured value representing the duration and scope of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.
type WarrantyPromise struct {
	StructuredValue

	DurationOfWarranty interface{} `json:"durationOfWarranty,omitempty"` // The duration of the warranty promise. Common unitCode values are ANN for year, MON for months, or DAY for days.
	WarrantyScope      interface{} `json:"warrantyScope,omitempty"`      // The scope of the warranty promise.
}

/*
A range of of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#Labor-BringIn\n* http://purl.org/goodrelations/v1#PartsAndLabor-BringIn\n* http://purl.org/goodrelations/v1#PartsAndLabor-PickUp

*/
type WarrantyScope struct {
	Enumeration
}

// The act of consuming dynamic/moving visual content.
type WatchAction struct {
	ConsumeAction
}

// A waterfall, like Niagara.
type Waterfall struct {
	BodyOfWater
}

// The act of dressing oneself in clothing.
type WearAction struct {
	UseAction
}

// Enumerates common types of measurement for wearables products.
type WearableMeasurementTypeEnumeration struct {
	MeasurementTypeEnumeration
}

// Enumerates common size groups (also known as "size types") for wearable products.
type WearableSizeGroupEnumeration struct {
	SizeGroupEnumeration
}

// Enumerates common size systems specific for wearable products
type WearableSizeSystemEnumeration struct {
	SizeSystemEnumeration
}

// An application programming interface accessible over Web/Internet technologies.
type WebAPI struct {
	Service

	Documentation interface{} `json:"documentation,omitempty"` // Further documentation describing the Web API in more detail.
}

// Web applications.
type WebApplication struct {
	SoftwareApplication

	BrowserRequirements interface{} `json:"browserRequirements,omitempty"` // Specifies browser requirements in human-readable text. For example, 'requires HTML5 support'.
}

// WebContent is a type representing all [[WebPage]], [[WebSite]] and [[WebPageElement]] content. It is sometimes the case that detailed distinctions between Web pages, sites and their parts is not always important or obvious. The  [[WebContent]] type makes it easier to describe Web-addressable content without requiring such distinctions to always be stated. (The intent is that the existing types [[WebPage]], [[WebSite]] and [[WebPageElement]] will eventually be declared as subtypes of [[WebContent]]).
type WebContent struct {
	CreativeWork
}

// A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
type WebPage struct {
	CreativeWork

	Breadcrumb         interface{} `json:"breadcrumb,omitempty"`         // A set of links that can help a user understand and navigate a website hierarchy.
	LastReviewed       interface{} `json:"lastReviewed,omitempty"`       // Date on which the content on this web page was last reviewed for accuracy and/or completeness.
	MainContentOfPage  interface{} `json:"mainContentOfPage,omitempty"`  // Indicates if this web page element is the main subject of the page.
	PrimaryImageOfPage interface{} `json:"primaryImageOfPage,omitempty"` // Indicates the main image on the page.
	RelatedLink        interface{} `json:"relatedLink,omitempty"`        // A link related to this web page, for example to other related web pages.
	ReviewedBy         interface{} `json:"reviewedBy,omitempty"`         // People or organizations that have reviewed the content on this web page for accuracy and/or completeness.
	SignificantLink    interface{} `json:"significantLink,omitempty"`    // One of the more significant URLs on the page. Typically, these are the non-navigation links that are clicked on the most.
	SignificantLinks   interface{} `json:"significantLinks,omitempty"`   // The most significant URLs on the page. Typically, these are the non-navigation links that are clicked on the most.
	Speakable          interface{} `json:"speakable,omitempty"`          /*
	Indicates sections of a Web page that are particularly 'speakable' in the sense of being highlighted as being especially appropriate for text-to-speech conversion. Other sections of a page may also be usefully spoken in particular circumstances; the 'speakable' property serves to indicate the parts most likely to be generally useful for speech.

	The *speakable* property can be repeated an arbitrary number of times, with three kinds of possible 'content-locator' values:

	1.) *id-value* URL references - uses *id-value* of an element in the page being annotated. The simplest use of *speakable* has (potentially relative) URL values, referencing identified sections of the document concerned.

	2.) CSS Selectors - addresses content in the annotated page, eg. via class attribute. Use the [[cssSelector]] property.

	3.)  XPaths - addresses content via XPaths (assuming an XML view of the content). Use the [[xpath]] property.


	For more sophisticated markup of speakable sections beyond simple ID references, either CSS selectors or XPath expressions to pick out document section(s) as speakable. For this
	we define a supporting type, [[SpeakableSpecification]]  which is defined to be a possible value of the *speakable* property.

	*/
	Specialty interface{} `json:"specialty,omitempty"` // One of the domain specialities to which this web page's content applies.
}

// A web page element, like a table or an image.
type WebPageElement struct {
	CreativeWork

	CssSelector interface{} `json:"cssSelector,omitempty"` // A CSS selector, e.g. of a [[SpeakableSpecification]] or [[WebPageElement]]. In the latter case, multiple matches within a page can constitute a single conceptual "Web page element".
	Xpath       interface{} `json:"xpath,omitempty"`       // An XPath, e.g. of a [[SpeakableSpecification]] or [[WebPageElement]]. In the latter case, multiple matches within a page can constitute a single conceptual "Web page element".
}

// A WebSite is a set of related web pages and other items typically served from a single web domain and accessible via URLs.
type WebSite struct {
	CreativeWork

	Issn interface{} `json:"issn,omitempty"` // The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication.
}

// A wholesale store.
type WholesaleStore struct {
	Store
}

// The act of achieving victory in a competitive activity.
type WinAction struct {
	AchieveAction

	Loser interface{} `json:"loser,omitempty"` // A sub property of participant. The loser of the action.
}

// A winery.
type Winery struct {
	FoodEstablishment
}

// A program with both an educational and employment component. Typically based at a workplace and structured around work-based learning, with the aim of instilling competencies related to an occupation. WorkBasedProgram is used to distinguish programs such as apprenticeships from school, college or other classroom based educational programs.
type WorkBasedProgram struct {
	EducationalOccupationalProgram

	OccupationalCategory interface{} `json:"occupationalCategory,omitempty"` /*
	A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.\n
	Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
	*/
	TrainingSalary interface{} `json:"trainingSalary,omitempty"` // The estimated salary earned while in the program.
}

// A Workers Union (also known as a Labor Union, Labour Union, or Trade Union) is an organization that promotes the interests of its worker members by collectively bargaining with management, organizing, and political lobbying.
type WorkersUnion struct {
	Organization
}

// The act of authoring written creative content.
type WriteAction struct {
	CreateAction

	InLanguage interface{} `json:"inLanguage,omitempty"` // The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
	Language   interface{} `json:"language,omitempty"`   // A sub property of instrument. The language used on this action.
}

// Text representing an XPath (typically but not necessarily version 1.0).
type XPathType struct {
	Text
}

// A zoo.
type Zoo struct {
	CivicStructure
}
