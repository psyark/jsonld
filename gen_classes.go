package jsonld

import "encoding/json"

// Code generated by jsonld.codegen; DO NOT EDIT.

func NewThing(name string) Thing {
	switch name {
	case "ThreeDModel":
		return &threeDModelStruct{}
	case "AMRadioChannel":
		return &aMRadioChannelStruct{}
	case "APIReference":
		return &aPIReferenceStruct{}
	case "AboutPage":
		return &aboutPageStruct{}
	case "AcceptAction":
		return &acceptActionStruct{}
	case "Accommodation":
		return &accommodationStruct{}
	case "AccountingService":
		return &accountingServiceStruct{}
	case "AchieveAction":
		return &achieveActionStruct{}
	case "Action":
		return &actionStruct{}
	case "ActionAccessSpecification":
		return &actionAccessSpecificationStruct{}
	case "ActionStatusType":
		return &actionStatusTypeStruct{}
	case "ActivateAction":
		return &activateActionStruct{}
	case "AddAction":
		return &addActionStruct{}
	case "AdministrativeArea":
		return &administrativeAreaStruct{}
	case "AdultEntertainment":
		return &adultEntertainmentStruct{}
	case "AdultOrientedEnumeration":
		return &adultOrientedEnumerationStruct{}
	case "AdvertiserContentArticle":
		return &advertiserContentArticleStruct{}
	case "AggregateOffer":
		return &aggregateOfferStruct{}
	case "AggregateRating":
		return &aggregateRatingStruct{}
	case "AgreeAction":
		return &agreeActionStruct{}
	case "Airline":
		return &airlineStruct{}
	case "Airport":
		return &airportStruct{}
	case "AlignmentObject":
		return &alignmentObjectStruct{}
	case "AllocateAction":
		return &allocateActionStruct{}
	case "AmpStory":
		return &ampStoryStruct{}
	case "AmusementPark":
		return &amusementParkStruct{}
	case "AnalysisNewsArticle":
		return &analysisNewsArticleStruct{}
	case "AnatomicalStructure":
		return &anatomicalStructureStruct{}
	case "AnatomicalSystem":
		return &anatomicalSystemStruct{}
	case "AnimalShelter":
		return &animalShelterStruct{}
	case "Answer":
		return &answerStruct{}
	case "Apartment":
		return &apartmentStruct{}
	case "ApartmentComplex":
		return &apartmentComplexStruct{}
	case "AppendAction":
		return &appendActionStruct{}
	case "ApplyAction":
		return &applyActionStruct{}
	case "ApprovedIndication":
		return &approvedIndicationStruct{}
	case "Aquarium":
		return &aquariumStruct{}
	case "ArchiveComponent":
		return &archiveComponentStruct{}
	case "ArchiveOrganization":
		return &archiveOrganizationStruct{}
	case "ArriveAction":
		return &arriveActionStruct{}
	case "ArtGallery":
		return &artGalleryStruct{}
	case "Artery":
		return &arteryStruct{}
	case "Article":
		return &articleStruct{}
	case "AskAction":
		return &askActionStruct{}
	case "AskPublicNewsArticle":
		return &askPublicNewsArticleStruct{}
	case "AssessAction":
		return &assessActionStruct{}
	case "AssignAction":
		return &assignActionStruct{}
	case "Atlas":
		return &atlasStruct{}
	case "Attorney":
		return &attorneyStruct{}
	case "Audience":
		return &audienceStruct{}
	case "AudioObject":
		return &audioObjectStruct{}
	case "AudioObjectSnapshot":
		return &audioObjectSnapshotStruct{}
	case "Audiobook":
		return &audiobookStruct{}
	case "AuthorizeAction":
		return &authorizeActionStruct{}
	case "AutoBodyShop":
		return &autoBodyShopStruct{}
	case "AutoDealer":
		return &autoDealerStruct{}
	case "AutoPartsStore":
		return &autoPartsStoreStruct{}
	case "AutoRental":
		return &autoRentalStruct{}
	case "AutoRepair":
		return &autoRepairStruct{}
	case "AutoWash":
		return &autoWashStruct{}
	case "AutomatedTeller":
		return &automatedTellerStruct{}
	case "AutomotiveBusiness":
		return &automotiveBusinessStruct{}
	case "BackgroundNewsArticle":
		return &backgroundNewsArticleStruct{}
	case "Bakery":
		return &bakeryStruct{}
	case "BankAccount":
		return &bankAccountStruct{}
	case "BankOrCreditUnion":
		return &bankOrCreditUnionStruct{}
	case "BarOrPub":
		return &barOrPubStruct{}
	case "Barcode":
		return &barcodeStruct{}
	case "Beach":
		return &beachStruct{}
	case "BeautySalon":
		return &beautySalonStruct{}
	case "BedAndBreakfast":
		return &bedAndBreakfastStruct{}
	case "BedDetails":
		return &bedDetailsStruct{}
	case "BedType":
		return &bedTypeStruct{}
	case "BefriendAction":
		return &befriendActionStruct{}
	case "BikeStore":
		return &bikeStoreStruct{}
	case "BioChemEntity":
		return &bioChemEntityStruct{}
	case "Blog":
		return &blogStruct{}
	case "BlogPosting":
		return &blogPostingStruct{}
	case "BloodTest":
		return &bloodTestStruct{}
	case "BoardingPolicyType":
		return &boardingPolicyTypeStruct{}
	case "BoatReservation":
		return &boatReservationStruct{}
	case "BoatTerminal":
		return &boatTerminalStruct{}
	case "BoatTrip":
		return &boatTripStruct{}
	case "BodyMeasurementTypeEnumeration":
		return &bodyMeasurementTypeEnumerationStruct{}
	case "BodyOfWater":
		return &bodyOfWaterStruct{}
	case "Bone":
		return &boneStruct{}
	case "Book":
		return &bookStruct{}
	case "BookFormatType":
		return &bookFormatTypeStruct{}
	case "BookSeries":
		return &bookSeriesStruct{}
	case "BookStore":
		return &bookStoreStruct{}
	case "BookmarkAction":
		return &bookmarkActionStruct{}
	case "BorrowAction":
		return &borrowActionStruct{}
	case "BowlingAlley":
		return &bowlingAlleyStruct{}
	case "BrainStructure":
		return &brainStructureStruct{}
	case "Brand":
		return &brandStruct{}
	case "BreadcrumbList":
		return &breadcrumbListStruct{}
	case "Brewery":
		return &breweryStruct{}
	case "Bridge":
		return &bridgeStruct{}
	case "BroadcastChannel":
		return &broadcastChannelStruct{}
	case "BroadcastEvent":
		return &broadcastEventStruct{}
	case "BroadcastFrequencySpecification":
		return &broadcastFrequencySpecificationStruct{}
	case "BroadcastService":
		return &broadcastServiceStruct{}
	case "BrokerageAccount":
		return &brokerageAccountStruct{}
	case "BuddhistTemple":
		return &buddhistTempleStruct{}
	case "BusOrCoach":
		return &busOrCoachStruct{}
	case "BusReservation":
		return &busReservationStruct{}
	case "BusStation":
		return &busStationStruct{}
	case "BusStop":
		return &busStopStruct{}
	case "BusTrip":
		return &busTripStruct{}
	case "BusinessAudience":
		return &businessAudienceStruct{}
	case "BusinessEntityType":
		return &businessEntityTypeStruct{}
	case "BusinessEvent":
		return &businessEventStruct{}
	case "BusinessFunction":
		return &businessFunctionStruct{}
	case "BuyAction":
		return &buyActionStruct{}
	case "CDCPMDRecord":
		return &cDCPMDRecordStruct{}
	case "CableOrSatelliteService":
		return &cableOrSatelliteServiceStruct{}
	case "CafeOrCoffeeShop":
		return &cafeOrCoffeeShopStruct{}
	case "Campground":
		return &campgroundStruct{}
	case "CampingPitch":
		return &campingPitchStruct{}
	case "Canal":
		return &canalStruct{}
	case "CancelAction":
		return &cancelActionStruct{}
	case "Car":
		return &carStruct{}
	case "CarUsageType":
		return &carUsageTypeStruct{}
	case "Casino":
		return &casinoStruct{}
	case "CategoryCode":
		return &categoryCodeStruct{}
	case "CategoryCodeSet":
		return &categoryCodeSetStruct{}
	case "CatholicChurch":
		return &catholicChurchStruct{}
	case "Cemetery":
		return &cemeteryStruct{}
	case "Chapter":
		return &chapterStruct{}
	case "CheckAction":
		return &checkActionStruct{}
	case "CheckInAction":
		return &checkInActionStruct{}
	case "CheckOutAction":
		return &checkOutActionStruct{}
	case "CheckoutPage":
		return &checkoutPageStruct{}
	case "ChemicalSubstance":
		return &chemicalSubstanceStruct{}
	case "ChildCare":
		return &childCareStruct{}
	case "ChildrensEvent":
		return &childrensEventStruct{}
	case "ChooseAction":
		return &chooseActionStruct{}
	case "Church":
		return &churchStruct{}
	case "City":
		return &cityStruct{}
	case "CityHall":
		return &cityHallStruct{}
	case "CivicStructure":
		return &civicStructureStruct{}
	case "Claim":
		return &claimStruct{}
	case "ClaimReview":
		return &claimReviewStruct{}
	case "Class":
		return &classStruct{}
	case "Clip":
		return &clipStruct{}
	case "ClothingStore":
		return &clothingStoreStruct{}
	case "Code":
		return &codeStruct{}
	case "Collection":
		return &collectionStruct{}
	case "CollectionPage":
		return &collectionPageStruct{}
	case "CollegeOrUniversity":
		return &collegeOrUniversityStruct{}
	case "ComedyClub":
		return &comedyClubStruct{}
	case "ComedyEvent":
		return &comedyEventStruct{}
	case "ComicCoverArt":
		return &comicCoverArtStruct{}
	case "ComicIssue":
		return &comicIssueStruct{}
	case "ComicSeries":
		return &comicSeriesStruct{}
	case "ComicStory":
		return &comicStoryStruct{}
	case "Comment":
		return &commentStruct{}
	case "CommentAction":
		return &commentActionStruct{}
	case "CommunicateAction":
		return &communicateActionStruct{}
	case "CompleteDataFeed":
		return &completeDataFeedStruct{}
	case "CompoundPriceSpecification":
		return &compoundPriceSpecificationStruct{}
	case "ComputerLanguage":
		return &computerLanguageStruct{}
	case "ComputerStore":
		return &computerStoreStruct{}
	case "ConfirmAction":
		return &confirmActionStruct{}
	case "Consortium":
		return &consortiumStruct{}
	case "ConsumeAction":
		return &consumeActionStruct{}
	case "ContactPage":
		return &contactPageStruct{}
	case "ContactPoint":
		return &contactPointStruct{}
	case "ContactPointOption":
		return &contactPointOptionStruct{}
	case "Continent":
		return &continentStruct{}
	case "ControlAction":
		return &controlActionStruct{}
	case "ConvenienceStore":
		return &convenienceStoreStruct{}
	case "Conversation":
		return &conversationStruct{}
	case "CookAction":
		return &cookActionStruct{}
	case "Corporation":
		return &corporationStruct{}
	case "CorrectionComment":
		return &correctionCommentStruct{}
	case "Country":
		return &countryStruct{}
	case "Course":
		return &courseStruct{}
	case "CourseInstance":
		return &courseInstanceStruct{}
	case "Courthouse":
		return &courthouseStruct{}
	case "CoverArt":
		return &coverArtStruct{}
	case "CovidTestingFacility":
		return &covidTestingFacilityStruct{}
	case "CreateAction":
		return &createActionStruct{}
	case "CreativeWork":
		return &creativeWorkStruct{}
	case "CreativeWorkSeason":
		return &creativeWorkSeasonStruct{}
	case "CreativeWorkSeries":
		return &creativeWorkSeriesStruct{}
	case "CreditCard":
		return &creditCardStruct{}
	case "Crematorium":
		return &crematoriumStruct{}
	case "CriticReview":
		return &criticReviewStruct{}
	case "CurrencyConversionService":
		return &currencyConversionServiceStruct{}
	case "DDxElement":
		return &dDxElementStruct{}
	case "DanceEvent":
		return &danceEventStruct{}
	case "DanceGroup":
		return &danceGroupStruct{}
	case "DataCatalog":
		return &dataCatalogStruct{}
	case "DataDownload":
		return &dataDownloadStruct{}
	case "DataFeed":
		return &dataFeedStruct{}
	case "DataFeedItem":
		return &dataFeedItemStruct{}
	case "Dataset":
		return &datasetStruct{}
	case "DatedMoneySpecification":
		return &datedMoneySpecificationStruct{}
	case "DayOfWeek":
		return &dayOfWeekStruct{}
	case "DaySpa":
		return &daySpaStruct{}
	case "DeactivateAction":
		return &deactivateActionStruct{}
	case "DefenceEstablishment":
		return &defenceEstablishmentStruct{}
	case "DefinedRegion":
		return &definedRegionStruct{}
	case "DefinedTerm":
		return &definedTermStruct{}
	case "DefinedTermSet":
		return &definedTermSetStruct{}
	case "DeleteAction":
		return &deleteActionStruct{}
	case "DeliveryChargeSpecification":
		return &deliveryChargeSpecificationStruct{}
	case "DeliveryEvent":
		return &deliveryEventStruct{}
	case "DeliveryMethod":
		return &deliveryMethodStruct{}
	case "DeliveryTimeSettings":
		return &deliveryTimeSettingsStruct{}
	case "Demand":
		return &demandStruct{}
	case "Dentist":
		return &dentistStruct{}
	case "DepartAction":
		return &departActionStruct{}
	case "DepartmentStore":
		return &departmentStoreStruct{}
	case "DepositAccount":
		return &depositAccountStruct{}
	case "DiagnosticLab":
		return &diagnosticLabStruct{}
	case "DiagnosticProcedure":
		return &diagnosticProcedureStruct{}
	case "Diet":
		return &dietStruct{}
	case "DietarySupplement":
		return &dietarySupplementStruct{}
	case "DigitalDocument":
		return &digitalDocumentStruct{}
	case "DigitalDocumentPermission":
		return &digitalDocumentPermissionStruct{}
	case "DigitalDocumentPermissionType":
		return &digitalDocumentPermissionTypeStruct{}
	case "DigitalPlatformEnumeration":
		return &digitalPlatformEnumerationStruct{}
	case "DisagreeAction":
		return &disagreeActionStruct{}
	case "DiscoverAction":
		return &discoverActionStruct{}
	case "DiscussionForumPosting":
		return &discussionForumPostingStruct{}
	case "DislikeAction":
		return &dislikeActionStruct{}
	case "Distance":
		return &distanceStruct{}
	case "Distillery":
		return &distilleryStruct{}
	case "DonateAction":
		return &donateActionStruct{}
	case "DoseSchedule":
		return &doseScheduleStruct{}
	case "DownloadAction":
		return &downloadActionStruct{}
	case "DrawAction":
		return &drawActionStruct{}
	case "Drawing":
		return &drawingStruct{}
	case "DrinkAction":
		return &drinkActionStruct{}
	case "DriveWheelConfigurationValue":
		return &driveWheelConfigurationValueStruct{}
	case "Drug":
		return &drugStruct{}
	case "DrugClass":
		return &drugClassStruct{}
	case "DrugCost":
		return &drugCostStruct{}
	case "DrugCostCategory":
		return &drugCostCategoryStruct{}
	case "DrugLegalStatus":
		return &drugLegalStatusStruct{}
	case "DrugPregnancyCategory":
		return &drugPregnancyCategoryStruct{}
	case "DrugPrescriptionStatus":
		return &drugPrescriptionStatusStruct{}
	case "DrugStrength":
		return &drugStrengthStruct{}
	case "DryCleaningOrLaundry":
		return &dryCleaningOrLaundryStruct{}
	case "Duration":
		return &durationStruct{}
	case "EUEnergyEfficiencyEnumeration":
		return &eUEnergyEfficiencyEnumerationStruct{}
	case "EatAction":
		return &eatActionStruct{}
	case "EducationEvent":
		return &educationEventStruct{}
	case "EducationalAudience":
		return &educationalAudienceStruct{}
	case "EducationalOccupationalCredential":
		return &educationalOccupationalCredentialStruct{}
	case "EducationalOccupationalProgram":
		return &educationalOccupationalProgramStruct{}
	case "EducationalOrganization":
		return &educationalOrganizationStruct{}
	case "Electrician":
		return &electricianStruct{}
	case "ElectronicsStore":
		return &electronicsStoreStruct{}
	case "ElementarySchool":
		return &elementarySchoolStruct{}
	case "EmailMessage":
		return &emailMessageStruct{}
	case "Embassy":
		return &embassyStruct{}
	case "EmergencyService":
		return &emergencyServiceStruct{}
	case "EmployeeRole":
		return &employeeRoleStruct{}
	case "EmployerAggregateRating":
		return &employerAggregateRatingStruct{}
	case "EmployerReview":
		return &employerReviewStruct{}
	case "EmploymentAgency":
		return &employmentAgencyStruct{}
	case "EndorseAction":
		return &endorseActionStruct{}
	case "EndorsementRating":
		return &endorsementRatingStruct{}
	case "Energy":
		return &energyStruct{}
	case "EnergyConsumptionDetails":
		return &energyConsumptionDetailsStruct{}
	case "EnergyEfficiencyEnumeration":
		return &energyEfficiencyEnumerationStruct{}
	case "EnergyStarEnergyEfficiencyEnumeration":
		return &energyStarEnergyEfficiencyEnumerationStruct{}
	case "EngineSpecification":
		return &engineSpecificationStruct{}
	case "EntertainmentBusiness":
		return &entertainmentBusinessStruct{}
	case "EntryPoint":
		return &entryPointStruct{}
	case "Enumeration":
		return &enumerationStruct{}
	case "Episode":
		return &episodeStruct{}
	case "Event":
		return &eventStruct{}
	case "EventAttendanceModeEnumeration":
		return &eventAttendanceModeEnumerationStruct{}
	case "EventReservation":
		return &eventReservationStruct{}
	case "EventSeries":
		return &eventSeriesStruct{}
	case "EventStatusType":
		return &eventStatusTypeStruct{}
	case "EventVenue":
		return &eventVenueStruct{}
	case "ExchangeRateSpecification":
		return &exchangeRateSpecificationStruct{}
	case "ExerciseAction":
		return &exerciseActionStruct{}
	case "ExerciseGym":
		return &exerciseGymStruct{}
	case "ExercisePlan":
		return &exercisePlanStruct{}
	case "ExhibitionEvent":
		return &exhibitionEventStruct{}
	case "FAQPage":
		return &fAQPageStruct{}
	case "FMRadioChannel":
		return &fMRadioChannelStruct{}
	case "FastFoodRestaurant":
		return &fastFoodRestaurantStruct{}
	case "Festival":
		return &festivalStruct{}
	case "FilmAction":
		return &filmActionStruct{}
	case "FinancialProduct":
		return &financialProductStruct{}
	case "FinancialService":
		return &financialServiceStruct{}
	case "FindAction":
		return &findActionStruct{}
	case "FireStation":
		return &fireStationStruct{}
	case "Flight":
		return &flightStruct{}
	case "FlightReservation":
		return &flightReservationStruct{}
	case "FloorPlan":
		return &floorPlanStruct{}
	case "Florist":
		return &floristStruct{}
	case "FollowAction":
		return &followActionStruct{}
	case "FoodEstablishment":
		return &foodEstablishmentStruct{}
	case "FoodEstablishmentReservation":
		return &foodEstablishmentReservationStruct{}
	case "FoodEvent":
		return &foodEventStruct{}
	case "FoodService":
		return &foodServiceStruct{}
	case "FundingAgency":
		return &fundingAgencyStruct{}
	case "FundingScheme":
		return &fundingSchemeStruct{}
	case "FurnitureStore":
		return &furnitureStoreStruct{}
	case "Game":
		return &gameStruct{}
	case "GameAvailabilityEnumeration":
		return &gameAvailabilityEnumerationStruct{}
	case "GamePlayMode":
		return &gamePlayModeStruct{}
	case "GameServer":
		return &gameServerStruct{}
	case "GameServerStatus":
		return &gameServerStatusStruct{}
	case "GardenStore":
		return &gardenStoreStruct{}
	case "GasStation":
		return &gasStationStruct{}
	case "GatedResidenceCommunity":
		return &gatedResidenceCommunityStruct{}
	case "GenderType":
		return &genderTypeStruct{}
	case "Gene":
		return &geneStruct{}
	case "GeneralContractor":
		return &generalContractorStruct{}
	case "GeoCircle":
		return &geoCircleStruct{}
	case "GeoCoordinates":
		return &geoCoordinatesStruct{}
	case "GeoShape":
		return &geoShapeStruct{}
	case "GeospatialGeometry":
		return &geospatialGeometryStruct{}
	case "GiveAction":
		return &giveActionStruct{}
	case "GolfCourse":
		return &golfCourseStruct{}
	case "GovernmentBenefitsType":
		return &governmentBenefitsTypeStruct{}
	case "GovernmentBuilding":
		return &governmentBuildingStruct{}
	case "GovernmentOffice":
		return &governmentOfficeStruct{}
	case "GovernmentOrganization":
		return &governmentOrganizationStruct{}
	case "GovernmentPermit":
		return &governmentPermitStruct{}
	case "GovernmentService":
		return &governmentServiceStruct{}
	case "Grant":
		return &grantStruct{}
	case "GroceryStore":
		return &groceryStoreStruct{}
	case "Guide":
		return &guideStruct{}
	case "HVACBusiness":
		return &hVACBusinessStruct{}
	case "Hackathon":
		return &hackathonStruct{}
	case "HairSalon":
		return &hairSalonStruct{}
	case "HardwareStore":
		return &hardwareStoreStruct{}
	case "HealthAndBeautyBusiness":
		return &healthAndBeautyBusinessStruct{}
	case "HealthAspectEnumeration":
		return &healthAspectEnumerationStruct{}
	case "HealthClub":
		return &healthClubStruct{}
	case "HealthInsurancePlan":
		return &healthInsurancePlanStruct{}
	case "HealthPlanCostSharingSpecification":
		return &healthPlanCostSharingSpecificationStruct{}
	case "HealthPlanFormulary":
		return &healthPlanFormularyStruct{}
	case "HealthPlanNetwork":
		return &healthPlanNetworkStruct{}
	case "HealthTopicContent":
		return &healthTopicContentStruct{}
	case "HighSchool":
		return &highSchoolStruct{}
	case "HinduTemple":
		return &hinduTempleStruct{}
	case "HobbyShop":
		return &hobbyShopStruct{}
	case "HomeAndConstructionBusiness":
		return &homeAndConstructionBusinessStruct{}
	case "HomeGoodsStore":
		return &homeGoodsStoreStruct{}
	case "Hospital":
		return &hospitalStruct{}
	case "Hostel":
		return &hostelStruct{}
	case "Hotel":
		return &hotelStruct{}
	case "HotelRoom":
		return &hotelRoomStruct{}
	case "House":
		return &houseStruct{}
	case "HousePainter":
		return &housePainterStruct{}
	case "HowTo":
		return &howToStruct{}
	case "HowToDirection":
		return &howToDirectionStruct{}
	case "HowToItem":
		return &howToItemStruct{}
	case "HowToSection":
		return &howToSectionStruct{}
	case "HowToStep":
		return &howToStepStruct{}
	case "HowToSupply":
		return &howToSupplyStruct{}
	case "HowToTip":
		return &howToTipStruct{}
	case "HowToTool":
		return &howToToolStruct{}
	case "HyperToc":
		return &hyperTocStruct{}
	case "HyperTocEntry":
		return &hyperTocEntryStruct{}
	case "IceCreamShop":
		return &iceCreamShopStruct{}
	case "IgnoreAction":
		return &ignoreActionStruct{}
	case "ImageGallery":
		return &imageGalleryStruct{}
	case "ImageObject":
		return &imageObjectStruct{}
	case "ImageObjectSnapshot":
		return &imageObjectSnapshotStruct{}
	case "ImagingTest":
		return &imagingTestStruct{}
	case "IndividualProduct":
		return &individualProductStruct{}
	case "InfectiousAgentClass":
		return &infectiousAgentClassStruct{}
	case "InfectiousDisease":
		return &infectiousDiseaseStruct{}
	case "InformAction":
		return &informActionStruct{}
	case "InsertAction":
		return &insertActionStruct{}
	case "InstallAction":
		return &installActionStruct{}
	case "InsuranceAgency":
		return &insuranceAgencyStruct{}
	case "Intangible":
		return &intangibleStruct{}
	case "InteractAction":
		return &interactActionStruct{}
	case "InteractionCounter":
		return &interactionCounterStruct{}
	case "InternetCafe":
		return &internetCafeStruct{}
	case "InvestmentFund":
		return &investmentFundStruct{}
	case "InvestmentOrDeposit":
		return &investmentOrDepositStruct{}
	case "InviteAction":
		return &inviteActionStruct{}
	case "Invoice":
		return &invoiceStruct{}
	case "ItemAvailability":
		return &itemAvailabilityStruct{}
	case "ItemList":
		return &itemListStruct{}
	case "ItemListOrderType":
		return &itemListOrderTypeStruct{}
	case "ItemPage":
		return &itemPageStruct{}
	case "JewelryStore":
		return &jewelryStoreStruct{}
	case "JobPosting":
		return &jobPostingStruct{}
	case "JoinAction":
		return &joinActionStruct{}
	case "Joint":
		return &jointStruct{}
	case "LakeBodyOfWater":
		return &lakeBodyOfWaterStruct{}
	case "Landform":
		return &landformStruct{}
	case "LandmarksOrHistoricalBuildings":
		return &landmarksOrHistoricalBuildingsStruct{}
	case "Language":
		return &languageStruct{}
	case "LearningResource":
		return &learningResourceStruct{}
	case "LeaveAction":
		return &leaveActionStruct{}
	case "LegalForceStatus":
		return &legalForceStatusStruct{}
	case "LegalService":
		return &legalServiceStruct{}
	case "LegalValueLevel":
		return &legalValueLevelStruct{}
	case "Legislation":
		return &legislationStruct{}
	case "LegislationObject":
		return &legislationObjectStruct{}
	case "LegislativeBuilding":
		return &legislativeBuildingStruct{}
	case "LendAction":
		return &lendActionStruct{}
	case "Library":
		return &libraryStruct{}
	case "LibrarySystem":
		return &librarySystemStruct{}
	case "LifestyleModification":
		return &lifestyleModificationStruct{}
	case "Ligament":
		return &ligamentStruct{}
	case "LikeAction":
		return &likeActionStruct{}
	case "LinkRole":
		return &linkRoleStruct{}
	case "LiquorStore":
		return &liquorStoreStruct{}
	case "ListItem":
		return &listItemStruct{}
	case "ListenAction":
		return &listenActionStruct{}
	case "LiteraryEvent":
		return &literaryEventStruct{}
	case "LiveBlogPosting":
		return &liveBlogPostingStruct{}
	case "LoanOrCredit":
		return &loanOrCreditStruct{}
	case "LocalBusiness":
		return &localBusinessStruct{}
	case "LocationFeatureSpecification":
		return &locationFeatureSpecificationStruct{}
	case "Locksmith":
		return &locksmithStruct{}
	case "LodgingBusiness":
		return &lodgingBusinessStruct{}
	case "LodgingReservation":
		return &lodgingReservationStruct{}
	case "LoseAction":
		return &loseActionStruct{}
	case "LymphaticVessel":
		return &lymphaticVesselStruct{}
	case "Manuscript":
		return &manuscriptStruct{}
	case "Map":
		return &mapStruct{}
	case "MapCategoryType":
		return &mapCategoryTypeStruct{}
	case "MarryAction":
		return &marryActionStruct{}
	case "Mass":
		return &massStruct{}
	case "MathSolver":
		return &mathSolverStruct{}
	case "MaximumDoseSchedule":
		return &maximumDoseScheduleStruct{}
	case "MeasurementTypeEnumeration":
		return &measurementTypeEnumerationStruct{}
	case "MediaGallery":
		return &mediaGalleryStruct{}
	case "MediaManipulationRatingEnumeration":
		return &mediaManipulationRatingEnumerationStruct{}
	case "MediaObject":
		return &mediaObjectStruct{}
	case "MediaReview":
		return &mediaReviewStruct{}
	case "MediaReviewItem":
		return &mediaReviewItemStruct{}
	case "MediaSubscription":
		return &mediaSubscriptionStruct{}
	case "MedicalAudience":
		return &medicalAudienceStruct{}
	case "MedicalAudienceType":
		return &medicalAudienceTypeStruct{}
	case "MedicalBusiness":
		return &medicalBusinessStruct{}
	case "MedicalCause":
		return &medicalCauseStruct{}
	case "MedicalClinic":
		return &medicalClinicStruct{}
	case "MedicalCode":
		return &medicalCodeStruct{}
	case "MedicalCondition":
		return &medicalConditionStruct{}
	case "MedicalConditionStage":
		return &medicalConditionStageStruct{}
	case "MedicalContraindication":
		return &medicalContraindicationStruct{}
	case "MedicalDevice":
		return &medicalDeviceStruct{}
	case "MedicalDevicePurpose":
		return &medicalDevicePurposeStruct{}
	case "MedicalEntity":
		return &medicalEntityStruct{}
	case "MedicalEnumeration":
		return &medicalEnumerationStruct{}
	case "MedicalEvidenceLevel":
		return &medicalEvidenceLevelStruct{}
	case "MedicalGuideline":
		return &medicalGuidelineStruct{}
	case "MedicalGuidelineContraindication":
		return &medicalGuidelineContraindicationStruct{}
	case "MedicalGuidelineRecommendation":
		return &medicalGuidelineRecommendationStruct{}
	case "MedicalImagingTechnique":
		return &medicalImagingTechniqueStruct{}
	case "MedicalIndication":
		return &medicalIndicationStruct{}
	case "MedicalIntangible":
		return &medicalIntangibleStruct{}
	case "MedicalObservationalStudy":
		return &medicalObservationalStudyStruct{}
	case "MedicalObservationalStudyDesign":
		return &medicalObservationalStudyDesignStruct{}
	case "MedicalOrganization":
		return &medicalOrganizationStruct{}
	case "MedicalProcedure":
		return &medicalProcedureStruct{}
	case "MedicalProcedureType":
		return &medicalProcedureTypeStruct{}
	case "MedicalRiskCalculator":
		return &medicalRiskCalculatorStruct{}
	case "MedicalRiskEstimator":
		return &medicalRiskEstimatorStruct{}
	case "MedicalRiskFactor":
		return &medicalRiskFactorStruct{}
	case "MedicalRiskScore":
		return &medicalRiskScoreStruct{}
	case "MedicalScholarlyArticle":
		return &medicalScholarlyArticleStruct{}
	case "MedicalSign":
		return &medicalSignStruct{}
	case "MedicalSignOrSymptom":
		return &medicalSignOrSymptomStruct{}
	case "MedicalSpecialty":
		return &medicalSpecialtyStruct{}
	case "MedicalStudy":
		return &medicalStudyStruct{}
	case "MedicalStudyStatus":
		return &medicalStudyStatusStruct{}
	case "MedicalSymptom":
		return &medicalSymptomStruct{}
	case "MedicalTest":
		return &medicalTestStruct{}
	case "MedicalTestPanel":
		return &medicalTestPanelStruct{}
	case "MedicalTherapy":
		return &medicalTherapyStruct{}
	case "MedicalTrial":
		return &medicalTrialStruct{}
	case "MedicalTrialDesign":
		return &medicalTrialDesignStruct{}
	case "MedicalWebPage":
		return &medicalWebPageStruct{}
	case "MedicineSystem":
		return &medicineSystemStruct{}
	case "MeetingRoom":
		return &meetingRoomStruct{}
	case "MensClothingStore":
		return &mensClothingStoreStruct{}
	case "Menu":
		return &menuStruct{}
	case "MenuItem":
		return &menuItemStruct{}
	case "MenuSection":
		return &menuSectionStruct{}
	case "MerchantReturnEnumeration":
		return &merchantReturnEnumerationStruct{}
	case "MerchantReturnPolicy":
		return &merchantReturnPolicyStruct{}
	case "MerchantReturnPolicySeasonalOverride":
		return &merchantReturnPolicySeasonalOverrideStruct{}
	case "Message":
		return &messageStruct{}
	case "MiddleSchool":
		return &middleSchoolStruct{}
	case "MobileApplication":
		return &mobileApplicationStruct{}
	case "MobilePhoneStore":
		return &mobilePhoneStoreStruct{}
	case "MolecularEntity":
		return &molecularEntityStruct{}
	case "MonetaryAmount":
		return &monetaryAmountStruct{}
	case "MonetaryAmountDistribution":
		return &monetaryAmountDistributionStruct{}
	case "MonetaryGrant":
		return &monetaryGrantStruct{}
	case "MoneyTransfer":
		return &moneyTransferStruct{}
	case "MortgageLoan":
		return &mortgageLoanStruct{}
	case "Mosque":
		return &mosqueStruct{}
	case "Motel":
		return &motelStruct{}
	case "Motorcycle":
		return &motorcycleStruct{}
	case "MotorcycleDealer":
		return &motorcycleDealerStruct{}
	case "MotorcycleRepair":
		return &motorcycleRepairStruct{}
	case "MotorizedBicycle":
		return &motorizedBicycleStruct{}
	case "Mountain":
		return &mountainStruct{}
	case "MoveAction":
		return &moveActionStruct{}
	case "Movie":
		return &movieStruct{}
	case "MovieClip":
		return &movieClipStruct{}
	case "MovieRentalStore":
		return &movieRentalStoreStruct{}
	case "MovieSeries":
		return &movieSeriesStruct{}
	case "MovieTheater":
		return &movieTheaterStruct{}
	case "MovingCompany":
		return &movingCompanyStruct{}
	case "Muscle":
		return &muscleStruct{}
	case "Museum":
		return &museumStruct{}
	case "MusicAlbum":
		return &musicAlbumStruct{}
	case "MusicAlbumProductionType":
		return &musicAlbumProductionTypeStruct{}
	case "MusicAlbumReleaseType":
		return &musicAlbumReleaseTypeStruct{}
	case "MusicComposition":
		return &musicCompositionStruct{}
	case "MusicEvent":
		return &musicEventStruct{}
	case "MusicGroup":
		return &musicGroupStruct{}
	case "MusicPlaylist":
		return &musicPlaylistStruct{}
	case "MusicRecording":
		return &musicRecordingStruct{}
	case "MusicRelease":
		return &musicReleaseStruct{}
	case "MusicReleaseFormatType":
		return &musicReleaseFormatTypeStruct{}
	case "MusicStore":
		return &musicStoreStruct{}
	case "MusicVenue":
		return &musicVenueStruct{}
	case "MusicVideoObject":
		return &musicVideoObjectStruct{}
	case "NGO":
		return &nGOStruct{}
	case "NLNonprofitType":
		return &nLNonprofitTypeStruct{}
	case "NailSalon":
		return &nailSalonStruct{}
	case "Nerve":
		return &nerveStruct{}
	case "NewsArticle":
		return &newsArticleStruct{}
	case "NewsMediaOrganization":
		return &newsMediaOrganizationStruct{}
	case "Newspaper":
		return &newspaperStruct{}
	case "NightClub":
		return &nightClubStruct{}
	case "NonprofitType":
		return &nonprofitTypeStruct{}
	case "Notary":
		return &notaryStruct{}
	case "NoteDigitalDocument":
		return &noteDigitalDocumentStruct{}
	case "NutritionInformation":
		return &nutritionInformationStruct{}
	case "Observation":
		return &observationStruct{}
	case "Occupation":
		return &occupationStruct{}
	case "OccupationalExperienceRequirements":
		return &occupationalExperienceRequirementsStruct{}
	case "OccupationalTherapy":
		return &occupationalTherapyStruct{}
	case "OceanBodyOfWater":
		return &oceanBodyOfWaterStruct{}
	case "Offer":
		return &offerStruct{}
	case "OfferCatalog":
		return &offerCatalogStruct{}
	case "OfferForLease":
		return &offerForLeaseStruct{}
	case "OfferForPurchase":
		return &offerForPurchaseStruct{}
	case "OfferItemCondition":
		return &offerItemConditionStruct{}
	case "OfferShippingDetails":
		return &offerShippingDetailsStruct{}
	case "OfficeEquipmentStore":
		return &officeEquipmentStoreStruct{}
	case "OnDemandEvent":
		return &onDemandEventStruct{}
	case "OnlineBusiness":
		return &onlineBusinessStruct{}
	case "OnlineStore":
		return &onlineStoreStruct{}
	case "OpeningHoursSpecification":
		return &openingHoursSpecificationStruct{}
	case "OpinionNewsArticle":
		return &opinionNewsArticleStruct{}
	case "Optician":
		return &opticianStruct{}
	case "Order":
		return &orderStruct{}
	case "OrderAction":
		return &orderActionStruct{}
	case "OrderItem":
		return &orderItemStruct{}
	case "OrderStatus":
		return &orderStatusStruct{}
	case "Organization":
		return &organizationStruct{}
	case "OrganizationRole":
		return &organizationRoleStruct{}
	case "OrganizeAction":
		return &organizeActionStruct{}
	case "OutletStore":
		return &outletStoreStruct{}
	case "OwnershipInfo":
		return &ownershipInfoStruct{}
	case "PaintAction":
		return &paintActionStruct{}
	case "Painting":
		return &paintingStruct{}
	case "PalliativeProcedure":
		return &palliativeProcedureStruct{}
	case "ParcelDelivery":
		return &parcelDeliveryStruct{}
	case "ParentAudience":
		return &parentAudienceStruct{}
	case "Park":
		return &parkStruct{}
	case "ParkingFacility":
		return &parkingFacilityStruct{}
	case "PathologyTest":
		return &pathologyTestStruct{}
	case "Patient":
		return &patientStruct{}
	case "PawnShop":
		return &pawnShopStruct{}
	case "PayAction":
		return &payActionStruct{}
	case "PaymentCard":
		return &paymentCardStruct{}
	case "PaymentChargeSpecification":
		return &paymentChargeSpecificationStruct{}
	case "PaymentMethod":
		return &paymentMethodStruct{}
	case "PaymentService":
		return &paymentServiceStruct{}
	case "PaymentStatusType":
		return &paymentStatusTypeStruct{}
	case "PeopleAudience":
		return &peopleAudienceStruct{}
	case "PerformAction":
		return &performActionStruct{}
	case "PerformanceRole":
		return &performanceRoleStruct{}
	case "PerformingArtsTheater":
		return &performingArtsTheaterStruct{}
	case "PerformingGroup":
		return &performingGroupStruct{}
	case "Periodical":
		return &periodicalStruct{}
	case "Permit":
		return &permitStruct{}
	case "Person":
		return &personStruct{}
	case "PetStore":
		return &petStoreStruct{}
	case "Pharmacy":
		return &pharmacyStruct{}
	case "Photograph":
		return &photographStruct{}
	case "PhotographAction":
		return &photographActionStruct{}
	case "PhysicalActivity":
		return &physicalActivityStruct{}
	case "PhysicalActivityCategory":
		return &physicalActivityCategoryStruct{}
	case "PhysicalExam":
		return &physicalExamStruct{}
	case "PhysicalTherapy":
		return &physicalTherapyStruct{}
	case "Physician":
		return &physicianStruct{}
	case "Place":
		return &placeStruct{}
	case "PlaceOfWorship":
		return &placeOfWorshipStruct{}
	case "PlanAction":
		return &planActionStruct{}
	case "Play":
		return &playStruct{}
	case "PlayAction":
		return &playActionStruct{}
	case "PlayGameAction":
		return &playGameActionStruct{}
	case "Playground":
		return &playgroundStruct{}
	case "Plumber":
		return &plumberStruct{}
	case "PodcastEpisode":
		return &podcastEpisodeStruct{}
	case "PodcastSeason":
		return &podcastSeasonStruct{}
	case "PodcastSeries":
		return &podcastSeriesStruct{}
	case "PoliceStation":
		return &policeStationStruct{}
	case "Pond":
		return &pondStruct{}
	case "PostOffice":
		return &postOfficeStruct{}
	case "PostalAddress":
		return &postalAddressStruct{}
	case "PostalCodeRangeSpecification":
		return &postalCodeRangeSpecificationStruct{}
	case "Poster":
		return &posterStruct{}
	case "PreOrderAction":
		return &preOrderActionStruct{}
	case "PrependAction":
		return &prependActionStruct{}
	case "Preschool":
		return &preschoolStruct{}
	case "PresentationDigitalDocument":
		return &presentationDigitalDocumentStruct{}
	case "PreventionIndication":
		return &preventionIndicationStruct{}
	case "PriceComponentTypeEnumeration":
		return &priceComponentTypeEnumerationStruct{}
	case "PriceSpecification":
		return &priceSpecificationStruct{}
	case "PriceTypeEnumeration":
		return &priceTypeEnumerationStruct{}
	case "Product":
		return &productStruct{}
	case "ProductCollection":
		return &productCollectionStruct{}
	case "ProductGroup":
		return &productGroupStruct{}
	case "ProductModel":
		return &productModelStruct{}
	case "ProfessionalService":
		return &professionalServiceStruct{}
	case "ProfilePage":
		return &profilePageStruct{}
	case "ProgramMembership":
		return &programMembershipStruct{}
	case "Project":
		return &projectStruct{}
	case "Property":
		return &propertyStruct{}
	case "PropertyValue":
		return &propertyValueStruct{}
	case "PropertyValueSpecification":
		return &propertyValueSpecificationStruct{}
	case "Protein":
		return &proteinStruct{}
	case "PsychologicalTreatment":
		return &psychologicalTreatmentStruct{}
	case "PublicSwimmingPool":
		return &publicSwimmingPoolStruct{}
	case "PublicToilet":
		return &publicToiletStruct{}
	case "PublicationEvent":
		return &publicationEventStruct{}
	case "PublicationIssue":
		return &publicationIssueStruct{}
	case "PublicationVolume":
		return &publicationVolumeStruct{}
	case "QAPage":
		return &qAPageStruct{}
	case "QualitativeValue":
		return &qualitativeValueStruct{}
	case "QuantitativeValue":
		return &quantitativeValueStruct{}
	case "QuantitativeValueDistribution":
		return &quantitativeValueDistributionStruct{}
	case "Quantity":
		return &quantityStruct{}
	case "Question":
		return &questionStruct{}
	case "Quiz":
		return &quizStruct{}
	case "Quotation":
		return &quotationStruct{}
	case "QuoteAction":
		return &quoteActionStruct{}
	case "RVPark":
		return &rVParkStruct{}
	case "RadiationTherapy":
		return &radiationTherapyStruct{}
	case "RadioBroadcastService":
		return &radioBroadcastServiceStruct{}
	case "RadioChannel":
		return &radioChannelStruct{}
	case "RadioClip":
		return &radioClipStruct{}
	case "RadioEpisode":
		return &radioEpisodeStruct{}
	case "RadioSeason":
		return &radioSeasonStruct{}
	case "RadioSeries":
		return &radioSeriesStruct{}
	case "RadioStation":
		return &radioStationStruct{}
	case "Rating":
		return &ratingStruct{}
	case "ReactAction":
		return &reactActionStruct{}
	case "ReadAction":
		return &readActionStruct{}
	case "RealEstateAgent":
		return &realEstateAgentStruct{}
	case "RealEstateListing":
		return &realEstateListingStruct{}
	case "ReceiveAction":
		return &receiveActionStruct{}
	case "Recipe":
		return &recipeStruct{}
	case "Recommendation":
		return &recommendationStruct{}
	case "RecommendedDoseSchedule":
		return &recommendedDoseScheduleStruct{}
	case "RecyclingCenter":
		return &recyclingCenterStruct{}
	case "RefundTypeEnumeration":
		return &refundTypeEnumerationStruct{}
	case "RegisterAction":
		return &registerActionStruct{}
	case "RejectAction":
		return &rejectActionStruct{}
	case "RentAction":
		return &rentActionStruct{}
	case "RentalCarReservation":
		return &rentalCarReservationStruct{}
	case "RepaymentSpecification":
		return &repaymentSpecificationStruct{}
	case "ReplaceAction":
		return &replaceActionStruct{}
	case "ReplyAction":
		return &replyActionStruct{}
	case "Report":
		return &reportStruct{}
	case "ReportageNewsArticle":
		return &reportageNewsArticleStruct{}
	case "ReportedDoseSchedule":
		return &reportedDoseScheduleStruct{}
	case "ResearchOrganization":
		return &researchOrganizationStruct{}
	case "ResearchProject":
		return &researchProjectStruct{}
	case "Researcher":
		return &researcherStruct{}
	case "Reservation":
		return &reservationStruct{}
	case "ReservationPackage":
		return &reservationPackageStruct{}
	case "ReservationStatusType":
		return &reservationStatusTypeStruct{}
	case "ReserveAction":
		return &reserveActionStruct{}
	case "Reservoir":
		return &reservoirStruct{}
	case "Residence":
		return &residenceStruct{}
	case "Resort":
		return &resortStruct{}
	case "Restaurant":
		return &restaurantStruct{}
	case "RestrictedDiet":
		return &restrictedDietStruct{}
	case "ResumeAction":
		return &resumeActionStruct{}
	case "ReturnAction":
		return &returnActionStruct{}
	case "ReturnFeesEnumeration":
		return &returnFeesEnumerationStruct{}
	case "ReturnLabelSourceEnumeration":
		return &returnLabelSourceEnumerationStruct{}
	case "ReturnMethodEnumeration":
		return &returnMethodEnumerationStruct{}
	case "Review":
		return &reviewStruct{}
	case "ReviewAction":
		return &reviewActionStruct{}
	case "ReviewNewsArticle":
		return &reviewNewsArticleStruct{}
	case "RiverBodyOfWater":
		return &riverBodyOfWaterStruct{}
	case "Role":
		return &roleStruct{}
	case "RoofingContractor":
		return &roofingContractorStruct{}
	case "Room":
		return &roomStruct{}
	case "RsvpAction":
		return &rsvpActionStruct{}
	case "RsvpResponseType":
		return &rsvpResponseTypeStruct{}
	case "SaleEvent":
		return &saleEventStruct{}
	case "SatiricalArticle":
		return &satiricalArticleStruct{}
	case "Schedule":
		return &scheduleStruct{}
	case "ScheduleAction":
		return &scheduleActionStruct{}
	case "ScholarlyArticle":
		return &scholarlyArticleStruct{}
	case "School":
		return &schoolStruct{}
	case "SchoolDistrict":
		return &schoolDistrictStruct{}
	case "ScreeningEvent":
		return &screeningEventStruct{}
	case "Sculpture":
		return &sculptureStruct{}
	case "SeaBodyOfWater":
		return &seaBodyOfWaterStruct{}
	case "SearchAction":
		return &searchActionStruct{}
	case "SearchRescueOrganization":
		return &searchRescueOrganizationStruct{}
	case "SearchResultsPage":
		return &searchResultsPageStruct{}
	case "Season":
		return &seasonStruct{}
	case "Seat":
		return &seatStruct{}
	case "SeekToAction":
		return &seekToActionStruct{}
	case "SelfStorage":
		return &selfStorageStruct{}
	case "SellAction":
		return &sellActionStruct{}
	case "SendAction":
		return &sendActionStruct{}
	case "Series":
		return &seriesStruct{}
	case "Service":
		return &serviceStruct{}
	case "ServiceChannel":
		return &serviceChannelStruct{}
	case "ShareAction":
		return &shareActionStruct{}
	case "SheetMusic":
		return &sheetMusicStruct{}
	case "ShippingDeliveryTime":
		return &shippingDeliveryTimeStruct{}
	case "ShippingRateSettings":
		return &shippingRateSettingsStruct{}
	case "ShoeStore":
		return &shoeStoreStruct{}
	case "ShoppingCenter":
		return &shoppingCenterStruct{}
	case "ShortStory":
		return &shortStoryStruct{}
	case "SingleFamilyResidence":
		return &singleFamilyResidenceStruct{}
	case "SiteNavigationElement":
		return &siteNavigationElementStruct{}
	case "SizeGroupEnumeration":
		return &sizeGroupEnumerationStruct{}
	case "SizeSpecification":
		return &sizeSpecificationStruct{}
	case "SizeSystemEnumeration":
		return &sizeSystemEnumerationStruct{}
	case "SkiResort":
		return &skiResortStruct{}
	case "SocialEvent":
		return &socialEventStruct{}
	case "SocialMediaPosting":
		return &socialMediaPostingStruct{}
	case "SoftwareApplication":
		return &softwareApplicationStruct{}
	case "SoftwareSourceCode":
		return &softwareSourceCodeStruct{}
	case "SolveMathAction":
		return &solveMathActionStruct{}
	case "SomeProducts":
		return &someProductsStruct{}
	case "SpeakableSpecification":
		return &speakableSpecificationStruct{}
	case "SpecialAnnouncement":
		return &specialAnnouncementStruct{}
	case "Specialty":
		return &specialtyStruct{}
	case "SportingGoodsStore":
		return &sportingGoodsStoreStruct{}
	case "SportsActivityLocation":
		return &sportsActivityLocationStruct{}
	case "SportsClub":
		return &sportsClubStruct{}
	case "SportsEvent":
		return &sportsEventStruct{}
	case "SportsOrganization":
		return &sportsOrganizationStruct{}
	case "SportsTeam":
		return &sportsTeamStruct{}
	case "SpreadsheetDigitalDocument":
		return &spreadsheetDigitalDocumentStruct{}
	case "StadiumOrArena":
		return &stadiumOrArenaStruct{}
	case "State":
		return &stateStruct{}
	case "Statement":
		return &statementStruct{}
	case "StatisticalPopulation":
		return &statisticalPopulationStruct{}
	case "StatusEnumeration":
		return &statusEnumerationStruct{}
	case "SteeringPositionValue":
		return &steeringPositionValueStruct{}
	case "Store":
		return &storeStruct{}
	case "StructuredValue":
		return &structuredValueStruct{}
	case "SubscribeAction":
		return &subscribeActionStruct{}
	case "Substance":
		return &substanceStruct{}
	case "SubwayStation":
		return &subwayStationStruct{}
	case "Suite":
		return &suiteStruct{}
	case "SuperficialAnatomy":
		return &superficialAnatomyStruct{}
	case "SurgicalProcedure":
		return &surgicalProcedureStruct{}
	case "SuspendAction":
		return &suspendActionStruct{}
	case "Synagogue":
		return &synagogueStruct{}
	case "TVClip":
		return &tVClipStruct{}
	case "TVEpisode":
		return &tVEpisodeStruct{}
	case "TVSeason":
		return &tVSeasonStruct{}
	case "TVSeries":
		return &tVSeriesStruct{}
	case "Table":
		return &tableStruct{}
	case "TakeAction":
		return &takeActionStruct{}
	case "TattooParlor":
		return &tattooParlorStruct{}
	case "Taxi":
		return &taxiStruct{}
	case "TaxiReservation":
		return &taxiReservationStruct{}
	case "TaxiService":
		return &taxiServiceStruct{}
	case "TaxiStand":
		return &taxiStandStruct{}
	case "Taxon":
		return &taxonStruct{}
	case "TechArticle":
		return &techArticleStruct{}
	case "TelevisionChannel":
		return &televisionChannelStruct{}
	case "TelevisionStation":
		return &televisionStationStruct{}
	case "TennisComplex":
		return &tennisComplexStruct{}
	case "TextDigitalDocument":
		return &textDigitalDocumentStruct{}
	case "TheaterEvent":
		return &theaterEventStruct{}
	case "TheaterGroup":
		return &theaterGroupStruct{}
	case "TherapeuticProcedure":
		return &therapeuticProcedureStruct{}
	case "Thesis":
		return &thesisStruct{}
	case "Thing":
		return &thingStruct{}
	case "Ticket":
		return &ticketStruct{}
	case "TieAction":
		return &tieActionStruct{}
	case "TipAction":
		return &tipActionStruct{}
	case "TireShop":
		return &tireShopStruct{}
	case "TouristAttraction":
		return &touristAttractionStruct{}
	case "TouristDestination":
		return &touristDestinationStruct{}
	case "TouristInformationCenter":
		return &touristInformationCenterStruct{}
	case "TouristTrip":
		return &touristTripStruct{}
	case "ToyStore":
		return &toyStoreStruct{}
	case "TrackAction":
		return &trackActionStruct{}
	case "TradeAction":
		return &tradeActionStruct{}
	case "TrainReservation":
		return &trainReservationStruct{}
	case "TrainStation":
		return &trainStationStruct{}
	case "TrainTrip":
		return &trainTripStruct{}
	case "TransferAction":
		return &transferActionStruct{}
	case "TravelAction":
		return &travelActionStruct{}
	case "TravelAgency":
		return &travelAgencyStruct{}
	case "TreatmentIndication":
		return &treatmentIndicationStruct{}
	case "Trip":
		return &tripStruct{}
	case "TypeAndQuantityNode":
		return &typeAndQuantityNodeStruct{}
	case "UKNonprofitType":
		return &uKNonprofitTypeStruct{}
	case "USNonprofitType":
		return &uSNonprofitTypeStruct{}
	case "UnRegisterAction":
		return &unRegisterActionStruct{}
	case "UnitPriceSpecification":
		return &unitPriceSpecificationStruct{}
	case "UpdateAction":
		return &updateActionStruct{}
	case "UseAction":
		return &useActionStruct{}
	case "UserBlocks":
		return &userBlocksStruct{}
	case "UserCheckins":
		return &userCheckinsStruct{}
	case "UserComments":
		return &userCommentsStruct{}
	case "UserDownloads":
		return &userDownloadsStruct{}
	case "UserInteraction":
		return &userInteractionStruct{}
	case "UserLikes":
		return &userLikesStruct{}
	case "UserPageVisits":
		return &userPageVisitsStruct{}
	case "UserPlays":
		return &userPlaysStruct{}
	case "UserPlusOnes":
		return &userPlusOnesStruct{}
	case "UserReview":
		return &userReviewStruct{}
	case "UserTweets":
		return &userTweetsStruct{}
	case "Vehicle":
		return &vehicleStruct{}
	case "Vein":
		return &veinStruct{}
	case "Vessel":
		return &vesselStruct{}
	case "VeterinaryCare":
		return &veterinaryCareStruct{}
	case "VideoGallery":
		return &videoGalleryStruct{}
	case "VideoGame":
		return &videoGameStruct{}
	case "VideoGameClip":
		return &videoGameClipStruct{}
	case "VideoGameSeries":
		return &videoGameSeriesStruct{}
	case "VideoObject":
		return &videoObjectStruct{}
	case "VideoObjectSnapshot":
		return &videoObjectSnapshotStruct{}
	case "ViewAction":
		return &viewActionStruct{}
	case "VirtualLocation":
		return &virtualLocationStruct{}
	case "VisualArtsEvent":
		return &visualArtsEventStruct{}
	case "VisualArtwork":
		return &visualArtworkStruct{}
	case "VitalSign":
		return &vitalSignStruct{}
	case "Volcano":
		return &volcanoStruct{}
	case "VoteAction":
		return &voteActionStruct{}
	case "WPAdBlock":
		return &wPAdBlockStruct{}
	case "WPFooter":
		return &wPFooterStruct{}
	case "WPHeader":
		return &wPHeaderStruct{}
	case "WPSideBar":
		return &wPSideBarStruct{}
	case "WantAction":
		return &wantActionStruct{}
	case "WarrantyPromise":
		return &warrantyPromiseStruct{}
	case "WarrantyScope":
		return &warrantyScopeStruct{}
	case "WatchAction":
		return &watchActionStruct{}
	case "Waterfall":
		return &waterfallStruct{}
	case "WearAction":
		return &wearActionStruct{}
	case "WearableMeasurementTypeEnumeration":
		return &wearableMeasurementTypeEnumerationStruct{}
	case "WearableSizeGroupEnumeration":
		return &wearableSizeGroupEnumerationStruct{}
	case "WearableSizeSystemEnumeration":
		return &wearableSizeSystemEnumerationStruct{}
	case "WebAPI":
		return &webAPIStruct{}
	case "WebApplication":
		return &webApplicationStruct{}
	case "WebContent":
		return &webContentStruct{}
	case "WebPage":
		return &webPageStruct{}
	case "WebPageElement":
		return &webPageElementStruct{}
	case "WebSite":
		return &webSiteStruct{}
	case "WholesaleStore":
		return &wholesaleStoreStruct{}
	case "WinAction":
		return &winActionStruct{}
	case "Winery":
		return &wineryStruct{}
	case "WorkBasedProgram":
		return &workBasedProgramStruct{}
	case "WorkersUnion":
		return &workersUnionStruct{}
	case "WriteAction":
		return &writeActionStruct{}
	case "Zoo":
		return &zooStruct{}
	}
	panic(name)
}

/*
A 3D model represents some kind of 3D content, which may have [[encoding]]s in one or more [[MediaObject]]s. Many 3D formats are available (e.g. see [Wikipedia](https://en.wikipedia.org/wiki/Category:3D_graphics_file_formats)); specific encoding formats can be represented using the [[encodingFormat]] property applied to the relevant [[MediaObject]]. For the
case of a single file published after Zip compression, the convention of appending '+zip' to the [[encodingFormat]] can be used. Geospatial, AR/VR, artistic/animation, gaming, engineering and scientific content can all be represented using [[3DModel]].
*/
type ThreeDModel interface {
	// Parents
	MediaObject
	// Accessors
	IsResizable() []Boolean // Whether the 3DModel allows resizing. For example, room layout applications often do not allow 3DModel elements to be resized to reflect reality.
}
type threeDModelStruct struct {
	mediaObjectStruct

	IsResizable_ BooleanSlice `json:"isResizable,omitempty"`
}

func (s *threeDModelStruct) IsResizable() []Boolean {
	return s.IsResizable_
}

type ThreeDModelSlice []ThreeDModel

func (s *ThreeDModelSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ThreeDModelSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ThreeDModel)
	}
	return nil
}

var _ ThreeDModel = &threeDModelStruct{}

// A radio channel that uses AM.
type AMRadioChannel interface {
	// Parents
	RadioChannel
}
type aMRadioChannelStruct struct {
	radioChannelStruct
}
type AMRadioChannelSlice []AMRadioChannel

func (s *AMRadioChannelSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AMRadioChannelSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AMRadioChannel)
	}
	return nil
}

var _ AMRadioChannel = &aMRadioChannelStruct{}

// Reference documentation for application programming interfaces (APIs).
type APIReference interface {
	// Parents
	TechArticle
	// Accessors
	Assembly() []Text              // Library file name e.g., mscorlib.dll, system.web.dll.
	AssemblyVersion() []Text       // Associated product/technology version. e.g., .NET Framework 4.5.
	ExecutableLibraryName() []Text // Library file name e.g., mscorlib.dll, system.web.dll.
	ProgrammingModel() []Text      // Indicates whether API is managed or unmanaged.
	TargetPlatform() []Text        // Type of app development: phone, Metro style, desktop, XBox, etc.
}
type aPIReferenceStruct struct {
	techArticleStruct

	Assembly_              TextSlice `json:"assembly,omitempty"`
	AssemblyVersion_       TextSlice `json:"assemblyVersion,omitempty"`
	ExecutableLibraryName_ TextSlice `json:"executableLibraryName,omitempty"`
	ProgrammingModel_      TextSlice `json:"programmingModel,omitempty"`
	TargetPlatform_        TextSlice `json:"targetPlatform,omitempty"`
}

func (s *aPIReferenceStruct) Assembly() []Text {
	return s.Assembly_
}
func (s *aPIReferenceStruct) AssemblyVersion() []Text {
	return s.AssemblyVersion_
}
func (s *aPIReferenceStruct) ExecutableLibraryName() []Text {
	return s.ExecutableLibraryName_
}
func (s *aPIReferenceStruct) ProgrammingModel() []Text {
	return s.ProgrammingModel_
}
func (s *aPIReferenceStruct) TargetPlatform() []Text {
	return s.TargetPlatform_
}

type APIReferenceSlice []APIReference

func (s *APIReferenceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(APIReferenceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(APIReference)
	}
	return nil
}

var _ APIReference = &aPIReferenceStruct{}

// Web page type: About page.
type AboutPage interface {
	// Parents
	WebPage
	// Unions
	AboutPage_CreativeWork_Text_URL_Union
}
type aboutPageStruct struct {
	webPageStruct
}

func (s *aboutPageStruct) implementsAboutPage_CreativeWork_Text_URL_Union() {}

type AboutPageSlice []AboutPage

func (s *AboutPageSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AboutPageSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AboutPage)
	}
	return nil
}

var _ AboutPage = &aboutPageStruct{}

// The act of committing to/adopting an object.\n\nRelated actions:\n\n* [[RejectAction]]: The antonym of AcceptAction.
type AcceptAction interface {
	// Parents
	AllocateAction
}
type acceptActionStruct struct {
	allocateActionStruct
}
type AcceptActionSlice []AcceptAction

func (s *AcceptActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AcceptActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AcceptAction)
	}
	return nil
}

var _ AcceptAction = &acceptActionStruct{}

/*
An accommodation is a place that can accommodate human beings, e.g. a hotel room, a camping pitch, or a meeting room. Many accommodations are for overnight stays, but this is not a mandatory requirement.
For more specific types of accommodations not defined in schema.org, one can use additionalType with external vocabularies.
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type Accommodation interface {
	// Parents
	Place
	// Accessors
	AccommodationCategory() []Text                  // Category of an [[Accommodation]], following real estate conventions e.g. RESO (see [PropertySubType](https://ddwiki.reso.org/display/DDW17/PropertySubType+Field), and [PropertyType](https://ddwiki.reso.org/display/DDW17/PropertyType+Field) fields  for suggested values).
	AccommodationFloorPlan() []FloorPlan            // A floorplan of some [[Accommodation]].
	AmenityFeature() []LocationFeatureSpecification // An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs.
	FloorLevel() []Text                             /*
	The floor level for an [[Accommodation]] in a multi-storey building. Since counting
	  systems [vary internationally](https://en.wikipedia.org/wiki/Storey#Consecutive_number_floor_designations), the local system should be used where possible.
	*/
	FloorSize() []QuantitativeValue /*
	The size of the accommodation, e.g. in square meter or squarefoot.
	Typical unit code(s): MTK for square meter, FTK for square foot, or YDK for square yard
	*/
	LeaseLength() []Duration_QuantitativeValue_Union    // Length of the lease for some [[Accommodation]], either particular to some [[Offer]] or in some cases intrinsic to the property.
	NumberOfBathroomsTotal() []Integer                  // The total integer number of bathrooms in a some [[Accommodation]], following real estate conventions as [documented in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsTotalInteger+Field): "The simple sum of the number of bathrooms. For example for a property with two Full Bathrooms and one Half Bathroom, the Bathrooms Total Integer will be 3.". See also [[numberOfRooms]].
	NumberOfBedrooms() []Number_QuantitativeValue_Union // The total integer number of bedrooms in a some [[Accommodation]], [[ApartmentComplex]] or [[FloorPlan]].
	NumberOfFullBathrooms() []Number                    // Number of full bathrooms - The total number of full and ¾ bathrooms in an [[Accommodation]]. This corresponds to the [BathroomsFull field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsFull+Field).
	NumberOfPartialBathrooms() []Number                 // Number of partial bathrooms - The total number of half and ¼ bathrooms in an [[Accommodation]]. This corresponds to the [BathroomsPartial field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsPartial+Field).
	NumberOfRooms() []Number_QuantitativeValue_Union    /*
	The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.
	Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.
	*/
	PermittedUsage() []Text            // Indications regarding the permitted usage of the accommodation.
	PetsAllowed() []Boolean_Text_Union // Indicates whether pets are allowed to enter the accommodation or lodging business. More detailed information can be put in a text value.
	TourBookingPage() []URL            // A page providing information on how to book a tour of some [[Place]], such as an [[Accommodation]] or [[ApartmentComplex]] in a real estate setting, as well as other kinds of tours as appropriate.
	YearBuilt() []Number               // The year an [[Accommodation]] was constructed. This corresponds to the [YearBuilt field in RESO](https://ddwiki.reso.org/display/DDW17/YearBuilt+Field).
}
type accommodationStruct struct {
	placeStruct

	AccommodationCategory_    TextSlice                             `json:"accommodationCategory,omitempty"`
	AccommodationFloorPlan_   FloorPlanSlice                        `json:"accommodationFloorPlan,omitempty"`
	AmenityFeature_           LocationFeatureSpecificationSlice     `json:"amenityFeature,omitempty"`
	FloorLevel_               TextSlice                             `json:"floorLevel,omitempty"`
	FloorSize_                QuantitativeValueSlice                `json:"floorSize,omitempty"`
	LeaseLength_              Duration_QuantitativeValue_UnionSlice `json:"leaseLength,omitempty"`
	NumberOfBathroomsTotal_   IntegerSlice                          `json:"numberOfBathroomsTotal,omitempty"`
	NumberOfBedrooms_         Number_QuantitativeValue_UnionSlice   `json:"numberOfBedrooms,omitempty"`
	NumberOfFullBathrooms_    NumberSlice                           `json:"numberOfFullBathrooms,omitempty"`
	NumberOfPartialBathrooms_ NumberSlice                           `json:"numberOfPartialBathrooms,omitempty"`
	NumberOfRooms_            Number_QuantitativeValue_UnionSlice   `json:"numberOfRooms,omitempty"`
	PermittedUsage_           TextSlice                             `json:"permittedUsage,omitempty"`
	PetsAllowed_              Boolean_Text_UnionSlice               `json:"petsAllowed,omitempty"`
	TourBookingPage_          URLSlice                              `json:"tourBookingPage,omitempty"`
	YearBuilt_                NumberSlice                           `json:"yearBuilt,omitempty"`
}

func (s *accommodationStruct) AccommodationCategory() []Text {
	return s.AccommodationCategory_
}
func (s *accommodationStruct) AccommodationFloorPlan() []FloorPlan {
	return s.AccommodationFloorPlan_
}
func (s *accommodationStruct) AmenityFeature() []LocationFeatureSpecification {
	return s.AmenityFeature_
}
func (s *accommodationStruct) FloorLevel() []Text {
	return s.FloorLevel_
}
func (s *accommodationStruct) FloorSize() []QuantitativeValue {
	return s.FloorSize_
}
func (s *accommodationStruct) LeaseLength() []Duration_QuantitativeValue_Union {
	return s.LeaseLength_
}
func (s *accommodationStruct) NumberOfBathroomsTotal() []Integer {
	return s.NumberOfBathroomsTotal_
}
func (s *accommodationStruct) NumberOfBedrooms() []Number_QuantitativeValue_Union {
	return s.NumberOfBedrooms_
}
func (s *accommodationStruct) NumberOfFullBathrooms() []Number {
	return s.NumberOfFullBathrooms_
}
func (s *accommodationStruct) NumberOfPartialBathrooms() []Number {
	return s.NumberOfPartialBathrooms_
}
func (s *accommodationStruct) NumberOfRooms() []Number_QuantitativeValue_Union {
	return s.NumberOfRooms_
}
func (s *accommodationStruct) PermittedUsage() []Text {
	return s.PermittedUsage_
}
func (s *accommodationStruct) PetsAllowed() []Boolean_Text_Union {
	return s.PetsAllowed_
}
func (s *accommodationStruct) TourBookingPage() []URL {
	return s.TourBookingPage_
}
func (s *accommodationStruct) YearBuilt() []Number {
	return s.YearBuilt_
}

type AccommodationSlice []Accommodation

func (s *AccommodationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AccommodationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Accommodation)
	}
	return nil
}

var _ Accommodation = &accommodationStruct{}

/*
Accountancy business.\n\nAs a [[LocalBusiness]] it can be described as a [[provider]] of one or more [[Service]]\(s).

*/
type AccountingService interface {
	// Parents
	FinancialService
}
type accountingServiceStruct struct {
	financialServiceStruct
}
type AccountingServiceSlice []AccountingService

func (s *AccountingServiceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AccountingServiceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AccountingService)
	}
	return nil
}

var _ AccountingService = &accountingServiceStruct{}

// The act of accomplishing something via previous efforts. It is an instantaneous action rather than an ongoing process.
type AchieveAction interface {
	// Parents
	Action
}
type achieveActionStruct struct {
	actionStruct
}
type AchieveActionSlice []AchieveAction

func (s *AchieveActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AchieveActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AchieveAction)
	}
	return nil
}

var _ AchieveAction = &achieveActionStruct{}

// An action performed by a direct agent and indirect participants upon a direct object. Optionally happens at a location with the help of an inanimate instrument. The execution of the action may produce a result. Specific action sub-type documentation specifies the exact expectation of each argument/role.\n\nSee also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html) and [Actions overview document](https://schema.org/docs/actions.html).
type Action interface {
	// Parents
	Thing
	// Accessors
	ActionStatus() []ActionStatusType                           // Indicates the current disposition of the Action.
	Agent() []Organization_Person_Union                         // The direct performer or driver of the action (animate or inanimate). e.g. *John* wrote a book.
	EndTime() []DateTime_Time_Union                             // The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
	Error_() []Thing                                            // For failed actions, more information on the cause of the failure.
	Instrument() []Thing                                        // The object that helped the agent perform the action. e.g. John wrote a book with *a pen*.
	Location() []Place_PostalAddress_Text_VirtualLocation_Union // The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
	Object() []Thing                                            // The object upon which the action is carried out, whose state is kept intact or changed. Also known as the semantic roles patient, affected or undergoer (which change their state) or theme (which doesn't). e.g. John read *a book*.
	Participant() []Organization_Person_Union                   // Other co-agents that participated in the action indirectly. e.g. John wrote a book with *Steve*.
	Provider() []Organization_Person_Union                      // The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
	Result() []Thing                                            // The result produced in the action. e.g. John wrote *a book*.
	StartTime() []DateTime_Time_Union                           // The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
	Target() []EntryPoint                                       // Indicates a target EntryPoint for an Action.
}
type actionStruct struct {
	thingStruct

	ActionStatus_ ActionStatusTypeSlice                               `json:"actionStatus,omitempty"`
	Agent_        Organization_Person_UnionSlice                      `json:"agent,omitempty"`
	EndTime_      DateTime_Time_UnionSlice                            `json:"endTime,omitempty"`
	Error__       ThingSlice                                          `json:"error_,omitempty"`
	Instrument_   ThingSlice                                          `json:"instrument,omitempty"`
	Location_     Place_PostalAddress_Text_VirtualLocation_UnionSlice `json:"location,omitempty"`
	Object_       ThingSlice                                          `json:"object,omitempty"`
	Participant_  Organization_Person_UnionSlice                      `json:"participant,omitempty"`
	Provider_     Organization_Person_UnionSlice                      `json:"provider,omitempty"`
	Result_       ThingSlice                                          `json:"result,omitempty"`
	StartTime_    DateTime_Time_UnionSlice                            `json:"startTime,omitempty"`
	Target_       EntryPointSlice                                     `json:"target,omitempty"`
}

func (s *actionStruct) ActionStatus() []ActionStatusType {
	return s.ActionStatus_
}
func (s *actionStruct) Agent() []Organization_Person_Union {
	return s.Agent_
}
func (s *actionStruct) EndTime() []DateTime_Time_Union {
	return s.EndTime_
}
func (s *actionStruct) Error_() []Thing {
	return s.Error__
}
func (s *actionStruct) Instrument() []Thing {
	return s.Instrument_
}
func (s *actionStruct) Location() []Place_PostalAddress_Text_VirtualLocation_Union {
	return s.Location_
}
func (s *actionStruct) Object() []Thing {
	return s.Object_
}
func (s *actionStruct) Participant() []Organization_Person_Union {
	return s.Participant_
}
func (s *actionStruct) Provider() []Organization_Person_Union {
	return s.Provider_
}
func (s *actionStruct) Result() []Thing {
	return s.Result_
}
func (s *actionStruct) StartTime() []DateTime_Time_Union {
	return s.StartTime_
}
func (s *actionStruct) Target() []EntryPoint {
	return s.Target_
}

type ActionSlice []Action

func (s *ActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Action)
	}
	return nil
}

var _ Action = &actionStruct{}

// A set of requirements that a must be fulfilled in order to perform an Action.
type ActionAccessSpecification interface {
	// Parents
	Intangible
	// Accessors
	AvailabilityEnds() []Date_DateTime_Time_Union                           // The end of the availability of the product or service included in the offer.
	AvailabilityStarts() []Date_DateTime_Time_Union                         // The beginning of the availability of the product or service included in the offer.
	Category() []CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union // A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
	EligibleRegion() []GeoShape_Place_Text_Union                            /*
	The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.\n\nSee also [[ineligibleRegion]].

	*/
	ExpectsAcceptanceOf() []Offer                  // An Offer which must be accepted before the user can perform the Action. For example, the user may need to buy a movie before being able to watch it.
	IneligibleRegion() []GeoShape_Place_Text_Union /*
	The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.\n\nSee also [[eligibleRegion]].

	*/
	RequiresSubscription() []Boolean_MediaSubscription_Union // Indicates if use of the media require a subscription  (either paid or free). Allowed values are ```true``` or ```false``` (note that an earlier version had 'yes', 'no').
}
type actionAccessSpecificationStruct struct {
	intangibleStruct

	AvailabilityEnds_     Date_DateTime_Time_UnionSlice                                   `json:"availabilityEnds,omitempty"`
	AvailabilityStarts_   Date_DateTime_Time_UnionSlice                                   `json:"availabilityStarts,omitempty"`
	Category_             CategoryCode_PhysicalActivityCategory_Text_Thing_URL_UnionSlice `json:"category,omitempty"`
	EligibleRegion_       GeoShape_Place_Text_UnionSlice                                  `json:"eligibleRegion,omitempty"`
	ExpectsAcceptanceOf_  OfferSlice                                                      `json:"expectsAcceptanceOf,omitempty"`
	IneligibleRegion_     GeoShape_Place_Text_UnionSlice                                  `json:"ineligibleRegion,omitempty"`
	RequiresSubscription_ Boolean_MediaSubscription_UnionSlice                            `json:"requiresSubscription,omitempty"`
}

func (s *actionAccessSpecificationStruct) AvailabilityEnds() []Date_DateTime_Time_Union {
	return s.AvailabilityEnds_
}
func (s *actionAccessSpecificationStruct) AvailabilityStarts() []Date_DateTime_Time_Union {
	return s.AvailabilityStarts_
}
func (s *actionAccessSpecificationStruct) Category() []CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union {
	return s.Category_
}
func (s *actionAccessSpecificationStruct) EligibleRegion() []GeoShape_Place_Text_Union {
	return s.EligibleRegion_
}
func (s *actionAccessSpecificationStruct) ExpectsAcceptanceOf() []Offer {
	return s.ExpectsAcceptanceOf_
}
func (s *actionAccessSpecificationStruct) IneligibleRegion() []GeoShape_Place_Text_Union {
	return s.IneligibleRegion_
}
func (s *actionAccessSpecificationStruct) RequiresSubscription() []Boolean_MediaSubscription_Union {
	return s.RequiresSubscription_
}

type ActionAccessSpecificationSlice []ActionAccessSpecification

func (s *ActionAccessSpecificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ActionAccessSpecificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ActionAccessSpecification)
	}
	return nil
}

var _ ActionAccessSpecification = &actionAccessSpecificationStruct{}

// The status of an Action.
type ActionStatusType interface {
	// Parents
	StatusEnumeration
}
type actionStatusTypeStruct struct {
	statusEnumerationStruct
}
type ActionStatusTypeSlice []ActionStatusType

func (s *ActionStatusTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ActionStatusTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ActionStatusType)
	}
	return nil
}

var _ ActionStatusType = &actionStatusTypeStruct{}

// The act of starting or activating a device or application (e.g. starting a timer or turning on a flashlight).
type ActivateAction interface {
	// Parents
	ControlAction
}
type activateActionStruct struct {
	controlActionStruct
}
type ActivateActionSlice []ActivateAction

func (s *ActivateActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ActivateActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ActivateAction)
	}
	return nil
}

var _ ActivateAction = &activateActionStruct{}

// The act of editing by adding an object to a collection.
type AddAction interface {
	// Parents
	UpdateAction
}
type addActionStruct struct {
	updateActionStruct
}
type AddActionSlice []AddAction

func (s *AddActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AddActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AddAction)
	}
	return nil
}

var _ AddAction = &addActionStruct{}

// A geographical region, typically under the jurisdiction of a particular government.
type AdministrativeArea interface {
	// Parents
	Place
	// Unions
	AdministrativeArea_GeoShape_Place_Text_Union
	AdministrativeArea_GeoShape_Place_Union
	AdministrativeArea_Text_Union
}
type administrativeAreaStruct struct {
	placeStruct
}

func (s *administrativeAreaStruct) implementsAdministrativeArea_GeoShape_Place_Text_Union() {}
func (s *administrativeAreaStruct) implementsAdministrativeArea_GeoShape_Place_Union()      {}
func (s *administrativeAreaStruct) implementsAdministrativeArea_Text_Union()                {}

type AdministrativeAreaSlice []AdministrativeArea

func (s *AdministrativeAreaSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AdministrativeAreaSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AdministrativeArea)
	}
	return nil
}

var _ AdministrativeArea = &administrativeAreaStruct{}

// An adult entertainment establishment.
type AdultEntertainment interface {
	// Parents
	EntertainmentBusiness
}
type adultEntertainmentStruct struct {
	entertainmentBusinessStruct
}
type AdultEntertainmentSlice []AdultEntertainment

func (s *AdultEntertainmentSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AdultEntertainmentSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AdultEntertainment)
	}
	return nil
}

var _ AdultEntertainment = &adultEntertainmentStruct{}

// Enumeration of considerations that make a product relevant or potentially restricted for adults only.
type AdultOrientedEnumeration interface {
	// Parents
	Enumeration
}
type adultOrientedEnumerationStruct struct {
	enumerationStruct
}
type AdultOrientedEnumerationSlice []AdultOrientedEnumeration

func (s *AdultOrientedEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AdultOrientedEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AdultOrientedEnumeration)
	}
	return nil
}

var _ AdultOrientedEnumeration = &adultOrientedEnumerationStruct{}

// An [[Article]] that an external entity has paid to place or to produce to its specifications. Includes [advertorials](https://en.wikipedia.org/wiki/Advertorial), sponsored content, native advertising and other paid content.
type AdvertiserContentArticle interface {
	// Parents
	Article
}
type advertiserContentArticleStruct struct {
	articleStruct
}
type AdvertiserContentArticleSlice []AdvertiserContentArticle

func (s *AdvertiserContentArticleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AdvertiserContentArticleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AdvertiserContentArticle)
	}
	return nil
}

var _ AdvertiserContentArticle = &advertiserContentArticleStruct{}

// When a single product is associated with multiple offers (for example, the same pair of shoes is offered by different merchants), then AggregateOffer can be used.\n\nNote: AggregateOffers are normally expected to associate multiple offers that all share the same defined [[businessFunction]] value, or default to http://purl.org/goodrelations/v1#Sell if businessFunction is not explicitly defined.
type AggregateOffer interface {
	// Parents
	Offer
	// Unions
	AggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union
	// Accessors
	HighPrice() []Number_Text_Union // The highest price of all offers available.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
	LowPrice() []Number_Text_Union  // The lowest price of all offers available.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
	OfferCount() []Integer          // The number of offers for the product.
	Offers() []Demand_Offer_Union   /*
	An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.

	*/
}
type aggregateOfferStruct struct {
	offerStruct

	HighPrice_  Number_Text_UnionSlice  `json:"highPrice,omitempty"`
	LowPrice_   Number_Text_UnionSlice  `json:"lowPrice,omitempty"`
	OfferCount_ IntegerSlice            `json:"offerCount,omitempty"`
	Offers_     Demand_Offer_UnionSlice `json:"offers,omitempty"`
}

func (s *aggregateOfferStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
}

func (s *aggregateOfferStruct) HighPrice() []Number_Text_Union {
	return s.HighPrice_
}
func (s *aggregateOfferStruct) LowPrice() []Number_Text_Union {
	return s.LowPrice_
}
func (s *aggregateOfferStruct) OfferCount() []Integer {
	return s.OfferCount_
}
func (s *aggregateOfferStruct) Offers() []Demand_Offer_Union {
	return s.Offers_
}

type AggregateOfferSlice []AggregateOffer

func (s *AggregateOfferSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AggregateOfferSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AggregateOffer)
	}
	return nil
}

var _ AggregateOffer = &aggregateOfferStruct{}

// The average rating based on multiple ratings or reviews.
type AggregateRating interface {
	// Parents
	Rating
	// Accessors
	ItemReviewed() []Thing  // The item that is being reviewed/rated.
	RatingCount() []Integer // The count of total number of ratings.
	ReviewCount() []Integer // The count of total number of reviews.
}
type aggregateRatingStruct struct {
	ratingStruct

	ItemReviewed_ ThingSlice   `json:"itemReviewed,omitempty"`
	RatingCount_  IntegerSlice `json:"ratingCount,omitempty"`
	ReviewCount_  IntegerSlice `json:"reviewCount,omitempty"`
}

func (s *aggregateRatingStruct) ItemReviewed() []Thing {
	return s.ItemReviewed_
}
func (s *aggregateRatingStruct) RatingCount() []Integer {
	return s.RatingCount_
}
func (s *aggregateRatingStruct) ReviewCount() []Integer {
	return s.ReviewCount_
}

type AggregateRatingSlice []AggregateRating

func (s *AggregateRatingSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AggregateRatingSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AggregateRating)
	}
	return nil
}

var _ AggregateRating = &aggregateRatingStruct{}

// The act of expressing a consistency of opinion with the object. An agent agrees to/about an object (a proposition, topic or theme) with participants.
type AgreeAction interface {
	// Parents
	ReactAction
}
type agreeActionStruct struct {
	reactActionStruct
}
type AgreeActionSlice []AgreeAction

func (s *AgreeActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AgreeActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AgreeAction)
	}
	return nil
}

var _ AgreeAction = &agreeActionStruct{}

// An organization that provides flights for passengers.
type Airline interface {
	// Parents
	Organization
	// Accessors
	BoardingPolicy() []BoardingPolicyType // The type of boarding policy used by the airline (e.g. zone-based or group-based).
	IataCode() []Text                     // IATA identifier for an airline or airport.
}
type airlineStruct struct {
	organizationStruct

	BoardingPolicy_ BoardingPolicyTypeSlice `json:"boardingPolicy,omitempty"`
	IataCode_       TextSlice               `json:"iataCode,omitempty"`
}

func (s *airlineStruct) BoardingPolicy() []BoardingPolicyType {
	return s.BoardingPolicy_
}
func (s *airlineStruct) IataCode() []Text {
	return s.IataCode_
}

type AirlineSlice []Airline

func (s *AirlineSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AirlineSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Airline)
	}
	return nil
}

var _ Airline = &airlineStruct{}

// An airport.
type Airport interface {
	// Parents
	CivicStructure
	// Accessors
	IataCode() []Text // IATA identifier for an airline or airport.
	IcaoCode() []Text // ICAO identifier for an airport.
}
type airportStruct struct {
	civicStructureStruct

	IataCode_ TextSlice `json:"iataCode,omitempty"`
	IcaoCode_ TextSlice `json:"icaoCode,omitempty"`
}

func (s *airportStruct) IataCode() []Text {
	return s.IataCode_
}
func (s *airportStruct) IcaoCode() []Text {
	return s.IcaoCode_
}

type AirportSlice []Airport

func (s *AirportSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AirportSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Airport)
	}
	return nil
}

var _ Airport = &airportStruct{}

/*
An intangible item that describes an alignment between a learning resource and a node in an educational framework.

Should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
*/
type AlignmentObject interface {
	// Parents
	Intangible
	// Unions
	AlignmentObject_Course_EducationalOccupationalCredential_Text_Union
	AlignmentObject_Course_Text_Union
	// Accessors
	AlignmentType() []Text        // A category of alignment between the learning resource and the framework node. Recommended values include: 'requires', 'textComplexity', 'readingLevel', and 'educationalSubject'.
	EducationalFramework() []Text // The framework to which the resource being described is aligned.
	TargetDescription() []Text    // The description of a node in an established educational framework.
	TargetName() []Text           // The name of a node in an established educational framework.
	TargetUrl() []URL             // The URL of a node in an established educational framework.
}
type alignmentObjectStruct struct {
	intangibleStruct

	AlignmentType_        TextSlice `json:"alignmentType,omitempty"`
	EducationalFramework_ TextSlice `json:"educationalFramework,omitempty"`
	TargetDescription_    TextSlice `json:"targetDescription,omitempty"`
	TargetName_           TextSlice `json:"targetName,omitempty"`
	TargetUrl_            URLSlice  `json:"targetUrl,omitempty"`
}

func (s *alignmentObjectStruct) implementsAlignmentObject_Course_EducationalOccupationalCredential_Text_Union() {
}
func (s *alignmentObjectStruct) implementsAlignmentObject_Course_Text_Union() {}

func (s *alignmentObjectStruct) AlignmentType() []Text {
	return s.AlignmentType_
}
func (s *alignmentObjectStruct) EducationalFramework() []Text {
	return s.EducationalFramework_
}
func (s *alignmentObjectStruct) TargetDescription() []Text {
	return s.TargetDescription_
}
func (s *alignmentObjectStruct) TargetName() []Text {
	return s.TargetName_
}
func (s *alignmentObjectStruct) TargetUrl() []URL {
	return s.TargetUrl_
}

type AlignmentObjectSlice []AlignmentObject

func (s *AlignmentObjectSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AlignmentObjectSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AlignmentObject)
	}
	return nil
}

var _ AlignmentObject = &alignmentObjectStruct{}

// The act of organizing tasks/objects/events by associating resources to it.
type AllocateAction interface {
	// Parents
	OrganizeAction
}
type allocateActionStruct struct {
	organizeActionStruct
}
type AllocateActionSlice []AllocateAction

func (s *AllocateActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AllocateActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AllocateAction)
	}
	return nil
}

var _ AllocateAction = &allocateActionStruct{}

// A creative work with a visual storytelling format intended to be viewed online, particularly on mobile devices.
type AmpStory interface {
	// Parents
	CreativeWork
	MediaObject
}
type ampStoryStruct struct {
	creativeWorkStruct
	mediaObjectStruct_
}

func (s *ampStoryStruct) implementsAboutPage_CreativeWork_Text_URL_Union() {} // re
func (s *ampStoryStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
} // re
func (s *ampStoryStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}                                                                                               // re
func (s *ampStoryStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *ampStoryStruct) implementsCreativeWork_Event_Union()                                   {} // re
func (s *ampStoryStruct) implementsCreativeWork_HowToSection_HowToStep_Text_Union()             {} // re
func (s *ampStoryStruct) implementsCreativeWork_ItemList_Text_Union()                           {} // re
func (s *ampStoryStruct) implementsCreativeWork_Product_URL_Union()                             {} // re
func (s *ampStoryStruct) implementsCreativeWork_Text_Union()                                    {} // re
func (s *ampStoryStruct) implementsCreativeWork_URL_Union()                                     {} // re
func (s *ampStoryStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *ampStoryStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *ampStoryStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *ampStoryStruct) implementsText_Thing_Union()                                           {} // re
type AmpStorySlice []AmpStory

func (s *AmpStorySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AmpStorySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AmpStory)
	}
	return nil
}

var _ AmpStory = &ampStoryStruct{}

// An amusement park.
type AmusementPark interface {
	// Parents
	EntertainmentBusiness
}
type amusementParkStruct struct {
	entertainmentBusinessStruct
}
type AmusementParkSlice []AmusementPark

func (s *AmusementParkSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AmusementParkSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AmusementPark)
	}
	return nil
}

var _ AmusementPark = &amusementParkStruct{}

// An AnalysisNewsArticle is a [[NewsArticle]] that, while based on factual reporting, incorporates the expertise of the author/producer, offering interpretations and conclusions.
type AnalysisNewsArticle interface {
	// Parents
	NewsArticle
}
type analysisNewsArticleStruct struct {
	newsArticleStruct
}
type AnalysisNewsArticleSlice []AnalysisNewsArticle

func (s *AnalysisNewsArticleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AnalysisNewsArticleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AnalysisNewsArticle)
	}
	return nil
}

var _ AnalysisNewsArticle = &analysisNewsArticleStruct{}

// Any part of the human body, typically a component of an anatomical system. Organs, tissues, and cells are all anatomical structures.
type AnatomicalStructure interface {
	// Parents
	MedicalEntity
	// Unions
	AnatomicalStructure_AnatomicalSystem_BioChemEntity_DefinedTerm_Union
	AnatomicalStructure_AnatomicalSystem_SuperficialAnatomy_Union
	AnatomicalStructure_AnatomicalSystem_Union
	AnatomicalStructure_SuperficialAnatomy_Union
	// Accessors
	AssociatedPathophysiology() []Text    // If applicable, a description of the pathophysiology associated with the anatomical system, including potential abnormal changes in the mechanical, physical, and biochemical functions of the system.
	BodyLocation() []Text                 // Location in the body of the anatomical structure.
	ConnectedTo() []AnatomicalStructure   // Other anatomical structures to which this structure is connected.
	Diagram() []ImageObject               // An image containing a diagram that illustrates the structure and/or its component substructures and/or connections with other structures.
	PartOfSystem() []AnatomicalSystem     // The anatomical or organ system that this structure is part of.
	RelatedCondition() []MedicalCondition // A medical condition associated with this anatomy.
	RelatedTherapy() []MedicalTherapy     // A medical therapy related to this anatomy.
	SubStructure() []AnatomicalStructure  // Component (sub-)structure(s) that comprise this anatomical structure.
}
type anatomicalStructureStruct struct {
	medicalEntityStruct

	AssociatedPathophysiology_ TextSlice                `json:"associatedPathophysiology,omitempty"`
	BodyLocation_              TextSlice                `json:"bodyLocation,omitempty"`
	ConnectedTo_               AnatomicalStructureSlice `json:"connectedTo,omitempty"`
	Diagram_                   ImageObjectSlice         `json:"diagram,omitempty"`
	PartOfSystem_              AnatomicalSystemSlice    `json:"partOfSystem,omitempty"`
	RelatedCondition_          MedicalConditionSlice    `json:"relatedCondition,omitempty"`
	RelatedTherapy_            MedicalTherapySlice      `json:"relatedTherapy,omitempty"`
	SubStructure_              AnatomicalStructureSlice `json:"subStructure,omitempty"`
}

func (s *anatomicalStructureStruct) implementsAnatomicalStructure_AnatomicalSystem_BioChemEntity_DefinedTerm_Union() {
}
func (s *anatomicalStructureStruct) implementsAnatomicalStructure_AnatomicalSystem_SuperficialAnatomy_Union() {
}
func (s *anatomicalStructureStruct) implementsAnatomicalStructure_AnatomicalSystem_Union()   {}
func (s *anatomicalStructureStruct) implementsAnatomicalStructure_SuperficialAnatomy_Union() {}

func (s *anatomicalStructureStruct) AssociatedPathophysiology() []Text {
	return s.AssociatedPathophysiology_
}
func (s *anatomicalStructureStruct) BodyLocation() []Text {
	return s.BodyLocation_
}
func (s *anatomicalStructureStruct) ConnectedTo() []AnatomicalStructure {
	return s.ConnectedTo_
}
func (s *anatomicalStructureStruct) Diagram() []ImageObject {
	return s.Diagram_
}
func (s *anatomicalStructureStruct) PartOfSystem() []AnatomicalSystem {
	return s.PartOfSystem_
}
func (s *anatomicalStructureStruct) RelatedCondition() []MedicalCondition {
	return s.RelatedCondition_
}
func (s *anatomicalStructureStruct) RelatedTherapy() []MedicalTherapy {
	return s.RelatedTherapy_
}
func (s *anatomicalStructureStruct) SubStructure() []AnatomicalStructure {
	return s.SubStructure_
}

type AnatomicalStructureSlice []AnatomicalStructure

func (s *AnatomicalStructureSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AnatomicalStructureSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AnatomicalStructure)
	}
	return nil
}

var _ AnatomicalStructure = &anatomicalStructureStruct{}

// An anatomical system is a group of anatomical structures that work together to perform a certain task. Anatomical systems, such as organ systems, are one organizing principle of anatomy, and can includes circulatory, digestive, endocrine, integumentary, immune, lymphatic, muscular, nervous, reproductive, respiratory, skeletal, urinary, vestibular, and other systems.
type AnatomicalSystem interface {
	// Parents
	MedicalEntity
	// Unions
	AnatomicalStructure_AnatomicalSystem_BioChemEntity_DefinedTerm_Union
	AnatomicalStructure_AnatomicalSystem_SuperficialAnatomy_Union
	AnatomicalStructure_AnatomicalSystem_Union
	// Accessors
	AssociatedPathophysiology() []Text                         // If applicable, a description of the pathophysiology associated with the anatomical system, including potential abnormal changes in the mechanical, physical, and biochemical functions of the system.
	ComprisedOf() []AnatomicalStructure_AnatomicalSystem_Union // Specifying something physically contained by something else. Typically used here for the underlying anatomical structures, such as organs, that comprise the anatomical system.
	RelatedCondition() []MedicalCondition                      // A medical condition associated with this anatomy.
	RelatedStructure() []AnatomicalStructure                   // Related anatomical structure(s) that are not part of the system but relate or connect to it, such as vascular bundles associated with an organ system.
	RelatedTherapy() []MedicalTherapy                          // A medical therapy related to this anatomy.
}
type anatomicalSystemStruct struct {
	medicalEntityStruct

	AssociatedPathophysiology_ TextSlice                                       `json:"associatedPathophysiology,omitempty"`
	ComprisedOf_               AnatomicalStructure_AnatomicalSystem_UnionSlice `json:"comprisedOf,omitempty"`
	RelatedCondition_          MedicalConditionSlice                           `json:"relatedCondition,omitempty"`
	RelatedStructure_          AnatomicalStructureSlice                        `json:"relatedStructure,omitempty"`
	RelatedTherapy_            MedicalTherapySlice                             `json:"relatedTherapy,omitempty"`
}

func (s *anatomicalSystemStruct) implementsAnatomicalStructure_AnatomicalSystem_BioChemEntity_DefinedTerm_Union() {
}
func (s *anatomicalSystemStruct) implementsAnatomicalStructure_AnatomicalSystem_SuperficialAnatomy_Union() {
}
func (s *anatomicalSystemStruct) implementsAnatomicalStructure_AnatomicalSystem_Union() {}

func (s *anatomicalSystemStruct) AssociatedPathophysiology() []Text {
	return s.AssociatedPathophysiology_
}
func (s *anatomicalSystemStruct) ComprisedOf() []AnatomicalStructure_AnatomicalSystem_Union {
	return s.ComprisedOf_
}
func (s *anatomicalSystemStruct) RelatedCondition() []MedicalCondition {
	return s.RelatedCondition_
}
func (s *anatomicalSystemStruct) RelatedStructure() []AnatomicalStructure {
	return s.RelatedStructure_
}
func (s *anatomicalSystemStruct) RelatedTherapy() []MedicalTherapy {
	return s.RelatedTherapy_
}

type AnatomicalSystemSlice []AnatomicalSystem

func (s *AnatomicalSystemSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AnatomicalSystemSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AnatomicalSystem)
	}
	return nil
}

var _ AnatomicalSystem = &anatomicalSystemStruct{}

// Animal shelter.
type AnimalShelter interface {
	// Parents
	LocalBusiness
}
type animalShelterStruct struct {
	localBusinessStruct
}
type AnimalShelterSlice []AnimalShelter

func (s *AnimalShelterSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AnimalShelterSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AnimalShelter)
	}
	return nil
}

var _ AnimalShelter = &animalShelterStruct{}

// An answer offered to a question; perhaps correct, perhaps opinionated or wrong.
type Answer interface {
	// Parents
	Comment
	// Unions
	Answer_ItemList_Union
	// Accessors
	AnswerExplanation() []Comment_WebContent_Union // A step-by-step or full explanation about Answer. Can outline how this Answer was achieved or contain more broad clarification or statement about it.
}
type answerStruct struct {
	commentStruct

	AnswerExplanation_ Comment_WebContent_UnionSlice `json:"answerExplanation,omitempty"`
}

func (s *answerStruct) implementsAnswer_ItemList_Union() {}

func (s *answerStruct) AnswerExplanation() []Comment_WebContent_Union {
	return s.AnswerExplanation_
}

type AnswerSlice []Answer

func (s *AnswerSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AnswerSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Answer)
	}
	return nil
}

var _ Answer = &answerStruct{}

// An apartment (in American English) or flat (in British English) is a self-contained housing unit (a type of residential real estate) that occupies only part of a building (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Apartment">http://en.wikipedia.org/wiki/Apartment</a>).
type Apartment interface {
	// Parents
	Accommodation
	// Accessors
	NumberOfRooms() []Number_QuantitativeValue_Union /*
	The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.
	Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.
	*/
	Occupancy() []QuantitativeValue /*
	The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).
	Typical unit code(s): C62 for person
	*/
}
type apartmentStruct struct {
	accommodationStruct

	NumberOfRooms_ Number_QuantitativeValue_UnionSlice `json:"numberOfRooms,omitempty"`
	Occupancy_     QuantitativeValueSlice              `json:"occupancy,omitempty"`
}

func (s *apartmentStruct) NumberOfRooms() []Number_QuantitativeValue_Union {
	return s.NumberOfRooms_
}
func (s *apartmentStruct) Occupancy() []QuantitativeValue {
	return s.Occupancy_
}

type ApartmentSlice []Apartment

func (s *ApartmentSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ApartmentSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Apartment)
	}
	return nil
}

var _ Apartment = &apartmentStruct{}

// Residence type: Apartment complex.
type ApartmentComplex interface {
	// Parents
	Residence
	// Accessors
	NumberOfAccommodationUnits() []QuantitativeValue          // Indicates the total (available plus unavailable) number of accommodation units in an [[ApartmentComplex]], or the number of accommodation units for a specific [[FloorPlan]] (within its specific [[ApartmentComplex]]). See also [[numberOfAvailableAccommodationUnits]].
	NumberOfAvailableAccommodationUnits() []QuantitativeValue // Indicates the number of available accommodation units in an [[ApartmentComplex]], or the number of accommodation units for a specific [[FloorPlan]] (within its specific [[ApartmentComplex]]). See also [[numberOfAccommodationUnits]].
	NumberOfBedrooms() []Number_QuantitativeValue_Union       // The total integer number of bedrooms in a some [[Accommodation]], [[ApartmentComplex]] or [[FloorPlan]].
	PetsAllowed() []Boolean_Text_Union                        // Indicates whether pets are allowed to enter the accommodation or lodging business. More detailed information can be put in a text value.
	TourBookingPage() []URL                                   // A page providing information on how to book a tour of some [[Place]], such as an [[Accommodation]] or [[ApartmentComplex]] in a real estate setting, as well as other kinds of tours as appropriate.
}
type apartmentComplexStruct struct {
	residenceStruct

	NumberOfAccommodationUnits_          QuantitativeValueSlice              `json:"numberOfAccommodationUnits,omitempty"`
	NumberOfAvailableAccommodationUnits_ QuantitativeValueSlice              `json:"numberOfAvailableAccommodationUnits,omitempty"`
	NumberOfBedrooms_                    Number_QuantitativeValue_UnionSlice `json:"numberOfBedrooms,omitempty"`
	PetsAllowed_                         Boolean_Text_UnionSlice             `json:"petsAllowed,omitempty"`
	TourBookingPage_                     URLSlice                            `json:"tourBookingPage,omitempty"`
}

func (s *apartmentComplexStruct) NumberOfAccommodationUnits() []QuantitativeValue {
	return s.NumberOfAccommodationUnits_
}
func (s *apartmentComplexStruct) NumberOfAvailableAccommodationUnits() []QuantitativeValue {
	return s.NumberOfAvailableAccommodationUnits_
}
func (s *apartmentComplexStruct) NumberOfBedrooms() []Number_QuantitativeValue_Union {
	return s.NumberOfBedrooms_
}
func (s *apartmentComplexStruct) PetsAllowed() []Boolean_Text_Union {
	return s.PetsAllowed_
}
func (s *apartmentComplexStruct) TourBookingPage() []URL {
	return s.TourBookingPage_
}

type ApartmentComplexSlice []ApartmentComplex

func (s *ApartmentComplexSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ApartmentComplexSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ApartmentComplex)
	}
	return nil
}

var _ ApartmentComplex = &apartmentComplexStruct{}

// The act of inserting at the end if an ordered collection.
type AppendAction interface {
	// Parents
	InsertAction
}
type appendActionStruct struct {
	insertActionStruct
}
type AppendActionSlice []AppendAction

func (s *AppendActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AppendActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AppendAction)
	}
	return nil
}

var _ AppendAction = &appendActionStruct{}

// The act of registering to an organization/service without the guarantee to receive it.\n\nRelated actions:\n\n* [[RegisterAction]]: Unlike RegisterAction, ApplyAction has no guarantees that the application will be accepted.
type ApplyAction interface {
	// Parents
	OrganizeAction
}
type applyActionStruct struct {
	organizeActionStruct
}
type ApplyActionSlice []ApplyAction

func (s *ApplyActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ApplyActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ApplyAction)
	}
	return nil
}

var _ ApplyAction = &applyActionStruct{}

// An indication for a medical therapy that has been formally specified or approved by a regulatory body that regulates use of the therapy; for example, the US FDA approves indications for most drugs in the US.
type ApprovedIndication interface {
	// Parents
	MedicalIndication
}
type approvedIndicationStruct struct {
	medicalIndicationStruct
}
type ApprovedIndicationSlice []ApprovedIndication

func (s *ApprovedIndicationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ApprovedIndicationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ApprovedIndication)
	}
	return nil
}

var _ ApprovedIndication = &approvedIndicationStruct{}

// Aquarium.
type Aquarium interface {
	// Parents
	CivicStructure
}
type aquariumStruct struct {
	civicStructureStruct
}
type AquariumSlice []Aquarium

func (s *AquariumSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AquariumSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Aquarium)
	}
	return nil
}

var _ Aquarium = &aquariumStruct{}

//
type ArchiveComponent interface {
	// Parents
	CreativeWork
	// Accessors
	HoldingArchive() []ArchiveOrganization          //
	ItemLocation() []Place_PostalAddress_Text_Union //
}
type archiveComponentStruct struct {
	creativeWorkStruct

	HoldingArchive_ ArchiveOrganizationSlice            `json:"holdingArchive,omitempty"`
	ItemLocation_   Place_PostalAddress_Text_UnionSlice `json:"itemLocation,omitempty"`
}

func (s *archiveComponentStruct) HoldingArchive() []ArchiveOrganization {
	return s.HoldingArchive_
}
func (s *archiveComponentStruct) ItemLocation() []Place_PostalAddress_Text_Union {
	return s.ItemLocation_
}

type ArchiveComponentSlice []ArchiveComponent

func (s *ArchiveComponentSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ArchiveComponentSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ArchiveComponent)
	}
	return nil
}

var _ ArchiveComponent = &archiveComponentStruct{}

//
type ArchiveOrganization interface {
	// Parents
	LocalBusiness
	// Accessors
	ArchiveHeld() []ArchiveComponent //
}
type archiveOrganizationStruct struct {
	localBusinessStruct

	ArchiveHeld_ ArchiveComponentSlice `json:"archiveHeld,omitempty"`
}

func (s *archiveOrganizationStruct) ArchiveHeld() []ArchiveComponent {
	return s.ArchiveHeld_
}

type ArchiveOrganizationSlice []ArchiveOrganization

func (s *ArchiveOrganizationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ArchiveOrganizationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ArchiveOrganization)
	}
	return nil
}

var _ ArchiveOrganization = &archiveOrganizationStruct{}

// The act of arriving at a place. An agent arrives at a destination from a fromLocation, optionally with participants.
type ArriveAction interface {
	// Parents
	MoveAction
}
type arriveActionStruct struct {
	moveActionStruct
}
type ArriveActionSlice []ArriveAction

func (s *ArriveActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ArriveActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ArriveAction)
	}
	return nil
}

var _ ArriveAction = &arriveActionStruct{}

// An art gallery.
type ArtGallery interface {
	// Parents
	EntertainmentBusiness
}
type artGalleryStruct struct {
	entertainmentBusinessStruct
}
type ArtGallerySlice []ArtGallery

func (s *ArtGallerySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ArtGallerySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ArtGallery)
	}
	return nil
}

var _ ArtGallery = &artGalleryStruct{}

// A type of blood vessel that specifically carries blood away from the heart.
type Artery interface {
	// Parents
	Vessel
	// Accessors
	ArterialBranch() []AnatomicalStructure // The branches that comprise the arterial structure.
	SupplyTo() []AnatomicalStructure       // The area to which the artery supplies blood.
}
type arteryStruct struct {
	vesselStruct

	ArterialBranch_ AnatomicalStructureSlice `json:"arterialBranch,omitempty"`
	SupplyTo_       AnatomicalStructureSlice `json:"supplyTo,omitempty"`
}

func (s *arteryStruct) ArterialBranch() []AnatomicalStructure {
	return s.ArterialBranch_
}
func (s *arteryStruct) SupplyTo() []AnatomicalStructure {
	return s.SupplyTo_
}

type ArterySlice []Artery

func (s *ArterySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ArterySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Artery)
	}
	return nil
}

var _ Artery = &arteryStruct{}

// An article, such as a news article or piece of investigative report. Newspapers and magazines have articles of many different types and this is intended to cover them all.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
type Article interface {
	// Parents
	CreativeWork
	// Unions
	Article_URL_Union
	// Accessors
	ArticleBody() []Text                           // The actual body of the article.
	ArticleSection() []Text                        // Articles may belong to one or more 'sections' in a magazine or newspaper, such as Sports, Lifestyle, etc.
	Backstory() []CreativeWork_Text_Union          // For an [[Article]], typically a [[NewsArticle]], the backstory property provides a textual summary giving a brief explanation of why and how an article was created. In a journalistic setting this could include information about reporting process, methods, interviews, data sources, etc.
	PageEnd() []Integer_Text_Union                 // The page on which the work ends; for example "138" or "xvi".
	PageStart() []Integer_Text_Union               // The page on which the work starts; for example "135" or "xiii".
	Pagination() []Text                            // Any description of pages that is not separated into pageStart and pageEnd; for example, "1-6, 9, 55" or "10-12, 46-49".
	Speakable() []SpeakableSpecification_URL_Union /*
	Indicates sections of a Web page that are particularly 'speakable' in the sense of being highlighted as being especially appropriate for text-to-speech conversion. Other sections of a page may also be usefully spoken in particular circumstances; the 'speakable' property serves to indicate the parts most likely to be generally useful for speech.

	The *speakable* property can be repeated an arbitrary number of times, with three kinds of possible 'content-locator' values:

	1.) *id-value* URL references - uses *id-value* of an element in the page being annotated. The simplest use of *speakable* has (potentially relative) URL values, referencing identified sections of the document concerned.

	2.) CSS Selectors - addresses content in the annotated page, eg. via class attribute. Use the [[cssSelector]] property.

	3.)  XPaths - addresses content via XPaths (assuming an XML view of the content). Use the [[xpath]] property.


	For more sophisticated markup of speakable sections beyond simple ID references, either CSS selectors or XPath expressions to pick out document section(s) as speakable. For this
	we define a supporting type, [[SpeakableSpecification]]  which is defined to be a possible value of the *speakable* property.

	*/
	WordCount() []Integer // The number of words in the text of the Article.
}
type articleStruct struct {
	creativeWorkStruct

	ArticleBody_    TextSlice                             `json:"articleBody,omitempty"`
	ArticleSection_ TextSlice                             `json:"articleSection,omitempty"`
	Backstory_      CreativeWork_Text_UnionSlice          `json:"backstory,omitempty"`
	PageEnd_        Integer_Text_UnionSlice               `json:"pageEnd,omitempty"`
	PageStart_      Integer_Text_UnionSlice               `json:"pageStart,omitempty"`
	Pagination_     TextSlice                             `json:"pagination,omitempty"`
	Speakable_      SpeakableSpecification_URL_UnionSlice `json:"speakable,omitempty"`
	WordCount_      IntegerSlice                          `json:"wordCount,omitempty"`
}

func (s *articleStruct) implementsArticle_URL_Union() {}

func (s *articleStruct) ArticleBody() []Text {
	return s.ArticleBody_
}
func (s *articleStruct) ArticleSection() []Text {
	return s.ArticleSection_
}
func (s *articleStruct) Backstory() []CreativeWork_Text_Union {
	return s.Backstory_
}
func (s *articleStruct) PageEnd() []Integer_Text_Union {
	return s.PageEnd_
}
func (s *articleStruct) PageStart() []Integer_Text_Union {
	return s.PageStart_
}
func (s *articleStruct) Pagination() []Text {
	return s.Pagination_
}
func (s *articleStruct) Speakable() []SpeakableSpecification_URL_Union {
	return s.Speakable_
}
func (s *articleStruct) WordCount() []Integer {
	return s.WordCount_
}

type ArticleSlice []Article

func (s *ArticleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ArticleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Article)
	}
	return nil
}

var _ Article = &articleStruct{}

// The act of posing a question / favor to someone.\n\nRelated actions:\n\n* [[ReplyAction]]: Appears generally as a response to AskAction.
type AskAction interface {
	// Parents
	CommunicateAction
	// Accessors
	Question() []Question // A sub property of object. A question.
}
type askActionStruct struct {
	communicateActionStruct

	Question_ QuestionSlice `json:"question,omitempty"`
}

func (s *askActionStruct) Question() []Question {
	return s.Question_
}

type AskActionSlice []AskAction

func (s *AskActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AskActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AskAction)
	}
	return nil
}

var _ AskAction = &askActionStruct{}

// A [[NewsArticle]] expressing an open call by a [[NewsMediaOrganization]] asking the public for input, insights, clarifications, anecdotes, documentation, etc., on an issue, for reporting purposes.
type AskPublicNewsArticle interface {
	// Parents
	NewsArticle
}
type askPublicNewsArticleStruct struct {
	newsArticleStruct
}
type AskPublicNewsArticleSlice []AskPublicNewsArticle

func (s *AskPublicNewsArticleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AskPublicNewsArticleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AskPublicNewsArticle)
	}
	return nil
}

var _ AskPublicNewsArticle = &askPublicNewsArticleStruct{}

// The act of forming one's opinion, reaction or sentiment.
type AssessAction interface {
	// Parents
	Action
}
type assessActionStruct struct {
	actionStruct
}
type AssessActionSlice []AssessAction

func (s *AssessActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AssessActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AssessAction)
	}
	return nil
}

var _ AssessAction = &assessActionStruct{}

// The act of allocating an action/event/task to some destination (someone or something).
type AssignAction interface {
	// Parents
	AllocateAction
}
type assignActionStruct struct {
	allocateActionStruct
}
type AssignActionSlice []AssignAction

func (s *AssignActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AssignActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AssignAction)
	}
	return nil
}

var _ AssignAction = &assignActionStruct{}

// A collection or bound volume of maps, charts, plates or tables, physical or in media form illustrating any subject.
type Atlas interface {
	// Parents
	CreativeWork
}
type atlasStruct struct {
	creativeWorkStruct
}
type AtlasSlice []Atlas

func (s *AtlasSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AtlasSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Atlas)
	}
	return nil
}

var _ Atlas = &atlasStruct{}

// Professional service: Attorney. \n\nThis type is deprecated - [[LegalService]] is more inclusive and less ambiguous.
type Attorney interface {
	// Parents
	LegalService
}
type attorneyStruct struct {
	legalServiceStruct
}
type AttorneySlice []Attorney

func (s *AttorneySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AttorneySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Attorney)
	}
	return nil
}

var _ Attorney = &attorneyStruct{}

// Intended audience for an item, i.e. the group for whom the item was created.
type Audience interface {
	// Parents
	Intangible
	// Unions
	Audience_ContactPoint_Organization_Person_Union
	Audience_Organization_Person_Union
	Audience_Text_Union
	// Accessors
	AudienceType() []Text                 // The target group associated with a given audience (e.g. veterans, car owners, musicians, etc.).
	GeographicArea() []AdministrativeArea // The geographic area associated with the audience.
}
type audienceStruct struct {
	intangibleStruct

	AudienceType_   TextSlice               `json:"audienceType,omitempty"`
	GeographicArea_ AdministrativeAreaSlice `json:"geographicArea,omitempty"`
}

func (s *audienceStruct) implementsAudience_ContactPoint_Organization_Person_Union() {}
func (s *audienceStruct) implementsAudience_Organization_Person_Union()              {}
func (s *audienceStruct) implementsAudience_Text_Union()                             {}

func (s *audienceStruct) AudienceType() []Text {
	return s.AudienceType_
}
func (s *audienceStruct) GeographicArea() []AdministrativeArea {
	return s.GeographicArea_
}

type AudienceSlice []Audience

func (s *AudienceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AudienceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Audience)
	}
	return nil
}

var _ Audience = &audienceStruct{}

// An audio file.
type AudioObject interface {
	// Parents
	MediaObject
	// Unions
	AudioObject_Clip_MusicRecording_Union
	// Accessors
	Caption() []MediaObject_Text_Union // The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the [[encodingFormat]].
	EmbeddedTextCaption() []Text       // Represents textual captioning from a [[MediaObject]], e.g. text of a 'meme'.
	Transcript() []Text                // If this MediaObject is an AudioObject or VideoObject, the transcript of that object.
}
type audioObjectStruct struct {
	mediaObjectStruct

	Caption_             MediaObject_Text_UnionSlice `json:"caption,omitempty"`
	EmbeddedTextCaption_ TextSlice                   `json:"embeddedTextCaption,omitempty"`
	Transcript_          TextSlice                   `json:"transcript,omitempty"`
}

func (s *audioObjectStruct) implementsAudioObject_Clip_MusicRecording_Union() {}

func (s *audioObjectStruct) Caption() []MediaObject_Text_Union {
	return s.Caption_
}
func (s *audioObjectStruct) EmbeddedTextCaption() []Text {
	return s.EmbeddedTextCaption_
}
func (s *audioObjectStruct) Transcript() []Text {
	return s.Transcript_
}

type AudioObjectSlice []AudioObject

func (s *AudioObjectSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AudioObjectSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AudioObject)
	}
	return nil
}

var _ AudioObject = &audioObjectStruct{}

// A specific and exact (byte-for-byte) version of an [[AudioObject]]. Two byte-for-byte identical files, for the purposes of this type, considered identical. If they have different embedded metadata the files will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual content, do not affect this notion of identity.
type AudioObjectSnapshot interface {
	// Parents
	AudioObject
}
type audioObjectSnapshotStruct struct {
	audioObjectStruct
}
type AudioObjectSnapshotSlice []AudioObjectSnapshot

func (s *AudioObjectSnapshotSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AudioObjectSnapshotSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AudioObjectSnapshot)
	}
	return nil
}

var _ AudioObjectSnapshot = &audioObjectSnapshotStruct{}

// An audiobook.
type Audiobook interface {
	// Parents
	AudioObject
	Book
	// Accessors
	Duration() []Duration // The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	ReadBy() []Person     // A person who reads (performs) the audiobook.
}
type audiobookStruct struct {
	audioObjectStruct
	bookStruct__

	Duration_ DurationSlice `json:"duration,omitempty"`
	ReadBy_   PersonSlice   `json:"readBy,omitempty"`
}

func (s *audiobookStruct) implementsAboutPage_CreativeWork_Text_URL_Union() {} // re
func (s *audiobookStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
} // re
func (s *audiobookStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}                                                                                                // re
func (s *audiobookStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *audiobookStruct) implementsCreativeWork_Event_Union()                                   {} // re
func (s *audiobookStruct) implementsCreativeWork_HowToSection_HowToStep_Text_Union()             {} // re
func (s *audiobookStruct) implementsCreativeWork_ItemList_Text_Union()                           {} // re
func (s *audiobookStruct) implementsCreativeWork_Product_URL_Union()                             {} // re
func (s *audiobookStruct) implementsCreativeWork_Text_Union()                                    {} // re
func (s *audiobookStruct) implementsCreativeWork_URL_Union()                                     {} // re
func (s *audiobookStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *audiobookStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *audiobookStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *audiobookStruct) implementsText_Thing_Union()                                           {} // re
func (s *audiobookStruct) Duration() []Duration {
	return s.Duration_
}
func (s *audiobookStruct) ReadBy() []Person {
	return s.ReadBy_
}

type AudiobookSlice []Audiobook

func (s *AudiobookSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AudiobookSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Audiobook)
	}
	return nil
}

var _ Audiobook = &audiobookStruct{}

// The act of granting permission to an object.
type AuthorizeAction interface {
	// Parents
	AllocateAction
	// Accessors
	Recipient() []Audience_ContactPoint_Organization_Person_Union // A sub property of participant. The participant who is at the receiving end of the action.
}
type authorizeActionStruct struct {
	allocateActionStruct

	Recipient_ Audience_ContactPoint_Organization_Person_UnionSlice `json:"recipient,omitempty"`
}

func (s *authorizeActionStruct) Recipient() []Audience_ContactPoint_Organization_Person_Union {
	return s.Recipient_
}

type AuthorizeActionSlice []AuthorizeAction

func (s *AuthorizeActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AuthorizeActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AuthorizeAction)
	}
	return nil
}

var _ AuthorizeAction = &authorizeActionStruct{}

// Auto body shop.
type AutoBodyShop interface {
	// Parents
	AutomotiveBusiness
}
type autoBodyShopStruct struct {
	automotiveBusinessStruct
}
type AutoBodyShopSlice []AutoBodyShop

func (s *AutoBodyShopSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AutoBodyShopSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AutoBodyShop)
	}
	return nil
}

var _ AutoBodyShop = &autoBodyShopStruct{}

// An car dealership.
type AutoDealer interface {
	// Parents
	AutomotiveBusiness
}
type autoDealerStruct struct {
	automotiveBusinessStruct
}
type AutoDealerSlice []AutoDealer

func (s *AutoDealerSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AutoDealerSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AutoDealer)
	}
	return nil
}

var _ AutoDealer = &autoDealerStruct{}

// An auto parts store.
type AutoPartsStore interface {
	// Parents
	AutomotiveBusiness
	Store
}
type autoPartsStoreStruct struct {
	automotiveBusinessStruct
	storeStruct__
}

func (s *autoPartsStoreStruct) implementsAdministrativeArea_GeoShape_Place_Text_Union()    {} // re
func (s *autoPartsStoreStruct) implementsAdministrativeArea_GeoShape_Place_Union()         {} // re
func (s *autoPartsStoreStruct) implementsAudience_ContactPoint_Organization_Person_Union() {} // re
func (s *autoPartsStoreStruct) implementsAudience_Organization_Person_Union()              {} // re
func (s *autoPartsStoreStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}                                                                   // re
func (s *autoPartsStoreStruct) implementsBrand_Organization_Union() {} // re
func (s *autoPartsStoreStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {
}                                                                                         // re
func (s *autoPartsStoreStruct) implementsCivicStructure_LocalBusiness_Union()             {} // re
func (s *autoPartsStoreStruct) implementsContactPoint_Organization_Person_Union()         {} // re
func (s *autoPartsStoreStruct) implementsContactPoint_Place_Union()                       {} // re
func (s *autoPartsStoreStruct) implementsDataFeedItem_Text_Thing_Union()                  {} // re
func (s *autoPartsStoreStruct) implementsEducationalOrganization_Organization_Union()     {} // re
func (s *autoPartsStoreStruct) implementsFoodEstablishment_Place_Union()                  {} // re
func (s *autoPartsStoreStruct) implementsGeoShape_Place_Text_Union()                      {} // re
func (s *autoPartsStoreStruct) implementsGeospatialGeometry_Place_Union()                 {} // re
func (s *autoPartsStoreStruct) implementsItemList_Place_Union()                           {} // re
func (s *autoPartsStoreStruct) implementsListItem_Text_Thing_Union()                      {} // re
func (s *autoPartsStoreStruct) implementsOrganization_Person_Union()                      {} // re
func (s *autoPartsStoreStruct) implementsOrganization_ProgramMembership_Union()           {} // re
func (s *autoPartsStoreStruct) implementsPlace_PostalAddress_Text_Union()                 {} // re
func (s *autoPartsStoreStruct) implementsPlace_PostalAddress_Text_VirtualLocation_Union() {} // re
func (s *autoPartsStoreStruct) implementsPlace_PostalAddress_URL_Union()                  {} // re
func (s *autoPartsStoreStruct) implementsText_Thing_URL_Union()                           {} // re
func (s *autoPartsStoreStruct) implementsText_Thing_Union()                               {} // re
type AutoPartsStoreSlice []AutoPartsStore

func (s *AutoPartsStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AutoPartsStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AutoPartsStore)
	}
	return nil
}

var _ AutoPartsStore = &autoPartsStoreStruct{}

// A car rental business.
type AutoRental interface {
	// Parents
	AutomotiveBusiness
}
type autoRentalStruct struct {
	automotiveBusinessStruct
}
type AutoRentalSlice []AutoRental

func (s *AutoRentalSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AutoRentalSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AutoRental)
	}
	return nil
}

var _ AutoRental = &autoRentalStruct{}

// Car repair business.
type AutoRepair interface {
	// Parents
	AutomotiveBusiness
}
type autoRepairStruct struct {
	automotiveBusinessStruct
}
type AutoRepairSlice []AutoRepair

func (s *AutoRepairSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AutoRepairSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AutoRepair)
	}
	return nil
}

var _ AutoRepair = &autoRepairStruct{}

// A car wash business.
type AutoWash interface {
	// Parents
	AutomotiveBusiness
}
type autoWashStruct struct {
	automotiveBusinessStruct
}
type AutoWashSlice []AutoWash

func (s *AutoWashSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AutoWashSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AutoWash)
	}
	return nil
}

var _ AutoWash = &autoWashStruct{}

// ATM/cash machine.
type AutomatedTeller interface {
	// Parents
	FinancialService
}
type automatedTellerStruct struct {
	financialServiceStruct
}
type AutomatedTellerSlice []AutomatedTeller

func (s *AutomatedTellerSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AutomatedTellerSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AutomatedTeller)
	}
	return nil
}

var _ AutomatedTeller = &automatedTellerStruct{}

// Car repair, sales, or parts.
type AutomotiveBusiness interface {
	// Parents
	LocalBusiness
}
type automotiveBusinessStruct struct {
	localBusinessStruct
}
type AutomotiveBusinessSlice []AutomotiveBusiness

func (s *AutomotiveBusinessSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(AutomotiveBusinessSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(AutomotiveBusiness)
	}
	return nil
}

var _ AutomotiveBusiness = &automotiveBusinessStruct{}

// A [[NewsArticle]] providing historical context, definition and detail on a specific topic (aka "explainer" or "backgrounder"). For example, an in-depth article or frequently-asked-questions ([FAQ](https://en.wikipedia.org/wiki/FAQ)) document on topics such as Climate Change or the European Union. Other kinds of background material from a non-news setting are often described using [[Book]] or [[Article]], in particular [[ScholarlyArticle]]. See also [[NewsArticle]] for related vocabulary from a learning/education perspective.
type BackgroundNewsArticle interface {
	// Parents
	NewsArticle
}
type backgroundNewsArticleStruct struct {
	newsArticleStruct
}
type BackgroundNewsArticleSlice []BackgroundNewsArticle

func (s *BackgroundNewsArticleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BackgroundNewsArticleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BackgroundNewsArticle)
	}
	return nil
}

var _ BackgroundNewsArticle = &backgroundNewsArticleStruct{}

// A bakery.
type Bakery interface {
	// Parents
	FoodEstablishment
}
type bakeryStruct struct {
	foodEstablishmentStruct
}
type BakerySlice []Bakery

func (s *BakerySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BakerySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Bakery)
	}
	return nil
}

var _ Bakery = &bakeryStruct{}

// A product or service offered by a bank whereby one may deposit, withdraw or transfer money and in some cases be paid interest.
type BankAccount interface {
	// Parents
	FinancialProduct
	// Accessors
	AccountMinimumInflow() []MonetaryAmount  // A minimum amount that has to be paid in every month.
	AccountOverdraftLimit() []MonetaryAmount // An overdraft is an extension of credit from a lending institution when an account reaches zero. An overdraft allows the individual to continue withdrawing money even if the account has no funds in it. Basically the bank allows people to borrow a set amount of money.
	BankAccountType() []Text_URL_Union       // The type of a bank account.
}
type bankAccountStruct struct {
	financialProductStruct

	AccountMinimumInflow_  MonetaryAmountSlice `json:"accountMinimumInflow,omitempty"`
	AccountOverdraftLimit_ MonetaryAmountSlice `json:"accountOverdraftLimit,omitempty"`
	BankAccountType_       Text_URL_UnionSlice `json:"bankAccountType,omitempty"`
}

func (s *bankAccountStruct) AccountMinimumInflow() []MonetaryAmount {
	return s.AccountMinimumInflow_
}
func (s *bankAccountStruct) AccountOverdraftLimit() []MonetaryAmount {
	return s.AccountOverdraftLimit_
}
func (s *bankAccountStruct) BankAccountType() []Text_URL_Union {
	return s.BankAccountType_
}

type BankAccountSlice []BankAccount

func (s *BankAccountSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BankAccountSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BankAccount)
	}
	return nil
}

var _ BankAccount = &bankAccountStruct{}

// Bank or credit union.
type BankOrCreditUnion interface {
	// Parents
	FinancialService
	// Unions
	BankOrCreditUnion_Text_Union
}
type bankOrCreditUnionStruct struct {
	financialServiceStruct
}

func (s *bankOrCreditUnionStruct) implementsBankOrCreditUnion_Text_Union() {}

type BankOrCreditUnionSlice []BankOrCreditUnion

func (s *BankOrCreditUnionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BankOrCreditUnionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BankOrCreditUnion)
	}
	return nil
}

var _ BankOrCreditUnion = &bankOrCreditUnionStruct{}

// A bar or pub.
type BarOrPub interface {
	// Parents
	FoodEstablishment
}
type barOrPubStruct struct {
	foodEstablishmentStruct
}
type BarOrPubSlice []BarOrPub

func (s *BarOrPubSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BarOrPubSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BarOrPub)
	}
	return nil
}

var _ BarOrPub = &barOrPubStruct{}

// An image of a visual machine-readable code such as a barcode or QR code.
type Barcode interface {
	// Parents
	ImageObject
}
type barcodeStruct struct {
	imageObjectStruct
}
type BarcodeSlice []Barcode

func (s *BarcodeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BarcodeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Barcode)
	}
	return nil
}

var _ Barcode = &barcodeStruct{}

// Beach.
type Beach interface {
	// Parents
	CivicStructure
}
type beachStruct struct {
	civicStructureStruct
}
type BeachSlice []Beach

func (s *BeachSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BeachSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Beach)
	}
	return nil
}

var _ Beach = &beachStruct{}

// Beauty salon.
type BeautySalon interface {
	// Parents
	HealthAndBeautyBusiness
}
type beautySalonStruct struct {
	healthAndBeautyBusinessStruct
}
type BeautySalonSlice []BeautySalon

func (s *BeautySalonSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BeautySalonSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BeautySalon)
	}
	return nil
}

var _ BeautySalon = &beautySalonStruct{}

/*
Bed and breakfast.
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type BedAndBreakfast interface {
	// Parents
	LodgingBusiness
}
type bedAndBreakfastStruct struct {
	lodgingBusinessStruct
}
type BedAndBreakfastSlice []BedAndBreakfast

func (s *BedAndBreakfastSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BedAndBreakfastSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BedAndBreakfast)
	}
	return nil
}

var _ BedAndBreakfast = &bedAndBreakfastStruct{}

// An entity holding detailed information about the available bed types, e.g. the quantity of twin beds for a hotel room. For the single case of just one bed of a certain type, you can use bed directly with a text. See also [[BedType]] (under development).
type BedDetails interface {
	// Parents
	Intangible
	// Unions
	BedDetails_BedType_Text_Union
	// Accessors
	NumberOfBeds() []Number          // The quantity of the given bed type available in the HotelRoom, Suite, House, or Apartment.
	TypeOfBed() []BedType_Text_Union // The type of bed to which the BedDetail refers, i.e. the type of bed available in the quantity indicated by quantity.
}
type bedDetailsStruct struct {
	intangibleStruct

	NumberOfBeds_ NumberSlice             `json:"numberOfBeds,omitempty"`
	TypeOfBed_    BedType_Text_UnionSlice `json:"typeOfBed,omitempty"`
}

func (s *bedDetailsStruct) implementsBedDetails_BedType_Text_Union() {}

func (s *bedDetailsStruct) NumberOfBeds() []Number {
	return s.NumberOfBeds_
}
func (s *bedDetailsStruct) TypeOfBed() []BedType_Text_Union {
	return s.TypeOfBed_
}

type BedDetailsSlice []BedDetails

func (s *BedDetailsSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BedDetailsSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BedDetails)
	}
	return nil
}

var _ BedDetails = &bedDetailsStruct{}

// A type of bed. This is used for indicating the bed or beds available in an accommodation.
type BedType interface {
	// Parents
	QualitativeValue
	// Unions
	BedDetails_BedType_Text_Union
	BedType_Text_Union
}
type bedTypeStruct struct {
	qualitativeValueStruct
}

func (s *bedTypeStruct) implementsBedDetails_BedType_Text_Union() {}
func (s *bedTypeStruct) implementsBedType_Text_Union()            {}

type BedTypeSlice []BedType

func (s *BedTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BedTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BedType)
	}
	return nil
}

var _ BedType = &bedTypeStruct{}

// The act of forming a personal connection with someone (object) mutually/bidirectionally/symmetrically.\n\nRelated actions:\n\n* [[FollowAction]]: Unlike FollowAction, BefriendAction implies that the connection is reciprocal.
type BefriendAction interface {
	// Parents
	InteractAction
}
type befriendActionStruct struct {
	interactActionStruct
}
type BefriendActionSlice []BefriendAction

func (s *BefriendActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BefriendActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BefriendAction)
	}
	return nil
}

var _ BefriendAction = &befriendActionStruct{}

// A bike store.
type BikeStore interface {
	// Parents
	Store
}
type bikeStoreStruct struct {
	storeStruct
}
type BikeStoreSlice []BikeStore

func (s *BikeStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BikeStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BikeStore)
	}
	return nil
}

var _ BikeStore = &bikeStoreStruct{}

// Any biological, chemical, or biochemical thing. For example: a protein; a gene; a chemical; a synthetic chemical.
type BioChemEntity interface {
	// Parents
	Thing
	// Unions
	AnatomicalStructure_AnatomicalSystem_BioChemEntity_DefinedTerm_Union
	BioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union
	// Accessors
	AssociatedDisease() []MedicalCondition_PropertyValue_URL_Union         // Disease associated to this BioChemEntity. Such disease can be a MedicalCondition or a URL. If you want to add an evidence supporting the association, please use PropertyValue.
	BioChemInteraction() []BioChemEntity                                   // A BioChemEntity that is known to interact with this item.
	BioChemSimilarity() []BioChemEntity                                    // A similar BioChemEntity, e.g., obtained by fingerprint similarity algorithms.
	BiologicalRole() []DefinedTerm                                         // A role played by the BioChemEntity within a biological context.
	Funding() []Grant                                                      // A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
	HasBioChemEntityPart() []BioChemEntity                                 // Indicates a BioChemEntity that (in some sense) has this BioChemEntity as a part.
	HasMolecularFunction() []DefinedTerm_PropertyValue_URL_Union           // Molecular function performed by this BioChemEntity; please use PropertyValue if you want to include any evidence.
	HasRepresentation() []PropertyValue_Text_URL_Union                     // A common representation such as a protein sequence or chemical structure for this entity. For images use schema.org/image.
	IsEncodedByBioChemEntity() []Gene                                      // Another BioChemEntity encoding by this one.
	IsInvolvedInBiologicalProcess() []DefinedTerm_PropertyValue_URL_Union  // Biological process this BioChemEntity is involved in; please use PropertyValue if you want to include any evidence.
	IsLocatedInSubcellularLocation() []DefinedTerm_PropertyValue_URL_Union // Subcellular location where this BioChemEntity is located; please use PropertyValue if you want to include any evidence.
	IsPartOfBioChemEntity() []BioChemEntity                                // Indicates a BioChemEntity that is (in some sense) a part of this BioChemEntity.
	TaxonomicRange() []DefinedTerm_Taxon_Text_URL_Union                    // The taxonomic grouping of the organism that expresses, encodes, or in someway related to the BioChemEntity.
}
type bioChemEntityStruct struct {
	thingStruct

	AssociatedDisease_              MedicalCondition_PropertyValue_URL_UnionSlice `json:"associatedDisease,omitempty"`
	BioChemInteraction_             BioChemEntitySlice                            `json:"bioChemInteraction,omitempty"`
	BioChemSimilarity_              BioChemEntitySlice                            `json:"bioChemSimilarity,omitempty"`
	BiologicalRole_                 DefinedTermSlice                              `json:"biologicalRole,omitempty"`
	Funding_                        GrantSlice                                    `json:"funding,omitempty"`
	HasBioChemEntityPart_           BioChemEntitySlice                            `json:"hasBioChemEntityPart,omitempty"`
	HasMolecularFunction_           DefinedTerm_PropertyValue_URL_UnionSlice      `json:"hasMolecularFunction,omitempty"`
	HasRepresentation_              PropertyValue_Text_URL_UnionSlice             `json:"hasRepresentation,omitempty"`
	IsEncodedByBioChemEntity_       GeneSlice                                     `json:"isEncodedByBioChemEntity,omitempty"`
	IsInvolvedInBiologicalProcess_  DefinedTerm_PropertyValue_URL_UnionSlice      `json:"isInvolvedInBiologicalProcess,omitempty"`
	IsLocatedInSubcellularLocation_ DefinedTerm_PropertyValue_URL_UnionSlice      `json:"isLocatedInSubcellularLocation,omitempty"`
	IsPartOfBioChemEntity_          BioChemEntitySlice                            `json:"isPartOfBioChemEntity,omitempty"`
	TaxonomicRange_                 DefinedTerm_Taxon_Text_URL_UnionSlice         `json:"taxonomicRange,omitempty"`
}

func (s *bioChemEntityStruct) implementsAnatomicalStructure_AnatomicalSystem_BioChemEntity_DefinedTerm_Union() {
}
func (s *bioChemEntityStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}

func (s *bioChemEntityStruct) AssociatedDisease() []MedicalCondition_PropertyValue_URL_Union {
	return s.AssociatedDisease_
}
func (s *bioChemEntityStruct) BioChemInteraction() []BioChemEntity {
	return s.BioChemInteraction_
}
func (s *bioChemEntityStruct) BioChemSimilarity() []BioChemEntity {
	return s.BioChemSimilarity_
}
func (s *bioChemEntityStruct) BiologicalRole() []DefinedTerm {
	return s.BiologicalRole_
}
func (s *bioChemEntityStruct) Funding() []Grant {
	return s.Funding_
}
func (s *bioChemEntityStruct) HasBioChemEntityPart() []BioChemEntity {
	return s.HasBioChemEntityPart_
}
func (s *bioChemEntityStruct) HasMolecularFunction() []DefinedTerm_PropertyValue_URL_Union {
	return s.HasMolecularFunction_
}
func (s *bioChemEntityStruct) HasRepresentation() []PropertyValue_Text_URL_Union {
	return s.HasRepresentation_
}
func (s *bioChemEntityStruct) IsEncodedByBioChemEntity() []Gene {
	return s.IsEncodedByBioChemEntity_
}
func (s *bioChemEntityStruct) IsInvolvedInBiologicalProcess() []DefinedTerm_PropertyValue_URL_Union {
	return s.IsInvolvedInBiologicalProcess_
}
func (s *bioChemEntityStruct) IsLocatedInSubcellularLocation() []DefinedTerm_PropertyValue_URL_Union {
	return s.IsLocatedInSubcellularLocation_
}
func (s *bioChemEntityStruct) IsPartOfBioChemEntity() []BioChemEntity {
	return s.IsPartOfBioChemEntity_
}
func (s *bioChemEntityStruct) TaxonomicRange() []DefinedTerm_Taxon_Text_URL_Union {
	return s.TaxonomicRange_
}

type BioChemEntitySlice []BioChemEntity

func (s *BioChemEntitySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BioChemEntitySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BioChemEntity)
	}
	return nil
}

var _ BioChemEntity = &bioChemEntityStruct{}

// A [blog](https://en.wikipedia.org/wiki/Blog), sometimes known as a "weblog". Note that the individual posts ([[BlogPosting]]s) in a [[Blog]] are often colloqually referred to by the same term.
type Blog interface {
	// Parents
	CreativeWork
	// Accessors
	BlogPost() []BlogPosting  // A posting that is part of this blog.
	BlogPosts() []BlogPosting // Indicates a post that is part of a [[Blog]]. Note that historically, what we term a "Blog" was once known as a "weblog", and that what we term a "BlogPosting" is now often colloquially referred to as a "blog".
	Issn() []Text             // The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication.
}
type blogStruct struct {
	creativeWorkStruct

	BlogPost_  BlogPostingSlice `json:"blogPost,omitempty"`
	BlogPosts_ BlogPostingSlice `json:"blogPosts,omitempty"`
	Issn_      TextSlice        `json:"issn,omitempty"`
}

func (s *blogStruct) BlogPost() []BlogPosting {
	return s.BlogPost_
}
func (s *blogStruct) BlogPosts() []BlogPosting {
	return s.BlogPosts_
}
func (s *blogStruct) Issn() []Text {
	return s.Issn_
}

type BlogSlice []Blog

func (s *BlogSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BlogSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Blog)
	}
	return nil
}

var _ Blog = &blogStruct{}

// A blog post.
type BlogPosting interface {
	// Parents
	SocialMediaPosting
}
type blogPostingStruct struct {
	socialMediaPostingStruct
}
type BlogPostingSlice []BlogPosting

func (s *BlogPostingSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BlogPostingSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BlogPosting)
	}
	return nil
}

var _ BlogPosting = &blogPostingStruct{}

// A medical test performed on a sample of a patient's blood.
type BloodTest interface {
	// Parents
	MedicalTest
}
type bloodTestStruct struct {
	medicalTestStruct
}
type BloodTestSlice []BloodTest

func (s *BloodTestSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BloodTestSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BloodTest)
	}
	return nil
}

var _ BloodTest = &bloodTestStruct{}

// A type of boarding policy used by an airline.
type BoardingPolicyType interface {
	// Parents
	Enumeration
}
type boardingPolicyTypeStruct struct {
	enumerationStruct
}
type BoardingPolicyTypeSlice []BoardingPolicyType

func (s *BoardingPolicyTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BoardingPolicyTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BoardingPolicyType)
	}
	return nil
}

var _ BoardingPolicyType = &boardingPolicyTypeStruct{}

/*
A reservation for boat travel.

Note: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
*/
type BoatReservation interface {
	// Parents
	Reservation
}
type boatReservationStruct struct {
	reservationStruct
}
type BoatReservationSlice []BoatReservation

func (s *BoatReservationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BoatReservationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BoatReservation)
	}
	return nil
}

var _ BoatReservation = &boatReservationStruct{}

// A terminal for boats, ships, and other water vessels.
type BoatTerminal interface {
	// Parents
	CivicStructure
}
type boatTerminalStruct struct {
	civicStructureStruct
}
type BoatTerminalSlice []BoatTerminal

func (s *BoatTerminalSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BoatTerminalSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BoatTerminal)
	}
	return nil
}

var _ BoatTerminal = &boatTerminalStruct{}

// A trip on a commercial ferry line.
type BoatTrip interface {
	// Parents
	Trip
	// Accessors
	ArrivalBoatTerminal() []BoatTerminal   // The terminal or port from which the boat arrives.
	DepartureBoatTerminal() []BoatTerminal // The terminal or port from which the boat departs.
}
type boatTripStruct struct {
	tripStruct

	ArrivalBoatTerminal_   BoatTerminalSlice `json:"arrivalBoatTerminal,omitempty"`
	DepartureBoatTerminal_ BoatTerminalSlice `json:"departureBoatTerminal,omitempty"`
}

func (s *boatTripStruct) ArrivalBoatTerminal() []BoatTerminal {
	return s.ArrivalBoatTerminal_
}
func (s *boatTripStruct) DepartureBoatTerminal() []BoatTerminal {
	return s.DepartureBoatTerminal_
}

type BoatTripSlice []BoatTrip

func (s *BoatTripSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BoatTripSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BoatTrip)
	}
	return nil
}

var _ BoatTrip = &boatTripStruct{}

// Enumerates types (or dimensions) of a person's body measurements, for example for fitting of clothes.
type BodyMeasurementTypeEnumeration interface {
	// Parents
	MeasurementTypeEnumeration
}
type bodyMeasurementTypeEnumerationStruct struct {
	measurementTypeEnumerationStruct
}
type BodyMeasurementTypeEnumerationSlice []BodyMeasurementTypeEnumeration

func (s *BodyMeasurementTypeEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BodyMeasurementTypeEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BodyMeasurementTypeEnumeration)
	}
	return nil
}

var _ BodyMeasurementTypeEnumeration = &bodyMeasurementTypeEnumerationStruct{}

// A body of water, such as a sea, ocean, or lake.
type BodyOfWater interface {
	// Parents
	Landform
}
type bodyOfWaterStruct struct {
	landformStruct
}
type BodyOfWaterSlice []BodyOfWater

func (s *BodyOfWaterSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BodyOfWaterSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BodyOfWater)
	}
	return nil
}

var _ BodyOfWater = &bodyOfWaterStruct{}

// Rigid connective tissue that comprises up the skeletal structure of the human body.
type Bone interface {
	// Parents
	AnatomicalStructure
}
type boneStruct struct {
	anatomicalStructureStruct
}
type BoneSlice []Bone

func (s *BoneSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BoneSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Bone)
	}
	return nil
}

var _ Bone = &boneStruct{}

// A book.
type Book interface {
	// Parents
	CreativeWork
	// Accessors
	Abridged() []Boolean          // Indicates whether the book is an abridged edition.
	BookEdition() []Text          // The edition of the book.
	BookFormat() []BookFormatType // The format of the book.
	Illustrator() []Person        // The illustrator of the book.
	Isbn() []Text                 // The ISBN of the book.
	NumberOfPages() []Integer     // The number of pages in the book.
}
type bookStruct struct {
	creativeWorkStruct

	Abridged_      BooleanSlice        `json:"abridged,omitempty"`
	BookEdition_   TextSlice           `json:"bookEdition,omitempty"`
	BookFormat_    BookFormatTypeSlice `json:"bookFormat,omitempty"`
	Illustrator_   PersonSlice         `json:"illustrator,omitempty"`
	Isbn_          TextSlice           `json:"isbn,omitempty"`
	NumberOfPages_ IntegerSlice        `json:"numberOfPages,omitempty"`
}
type bookStruct_ struct {
	bookStruct
}
type bookStruct__ struct {
	bookStruct_
}

func (s *bookStruct) Abridged() []Boolean {
	return s.Abridged_
}
func (s *bookStruct) BookEdition() []Text {
	return s.BookEdition_
}
func (s *bookStruct) BookFormat() []BookFormatType {
	return s.BookFormat_
}
func (s *bookStruct) Illustrator() []Person {
	return s.Illustrator_
}
func (s *bookStruct) Isbn() []Text {
	return s.Isbn_
}
func (s *bookStruct) NumberOfPages() []Integer {
	return s.NumberOfPages_
}

type BookSlice []Book

func (s *BookSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BookSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Book)
	}
	return nil
}

var _ Book = &bookStruct{}

// The publication format of the book.
type BookFormatType interface {
	// Parents
	Enumeration
}
type bookFormatTypeStruct struct {
	enumerationStruct
}
type BookFormatTypeSlice []BookFormatType

func (s *BookFormatTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BookFormatTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BookFormatType)
	}
	return nil
}

var _ BookFormatType = &bookFormatTypeStruct{}

// A series of books. Included books can be indicated with the hasPart property.
type BookSeries interface {
	// Parents
	CreativeWorkSeries
}
type bookSeriesStruct struct {
	creativeWorkSeriesStruct
}
type BookSeriesSlice []BookSeries

func (s *BookSeriesSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BookSeriesSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BookSeries)
	}
	return nil
}

var _ BookSeries = &bookSeriesStruct{}

// A bookstore.
type BookStore interface {
	// Parents
	Store
}
type bookStoreStruct struct {
	storeStruct
}
type BookStoreSlice []BookStore

func (s *BookStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BookStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BookStore)
	}
	return nil
}

var _ BookStore = &bookStoreStruct{}

// An agent bookmarks/flags/labels/tags/marks an object.
type BookmarkAction interface {
	// Parents
	OrganizeAction
}
type bookmarkActionStruct struct {
	organizeActionStruct
}
type BookmarkActionSlice []BookmarkAction

func (s *BookmarkActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BookmarkActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BookmarkAction)
	}
	return nil
}

var _ BookmarkAction = &bookmarkActionStruct{}

// Boolean: True or False.
type Boolean interface {
	Value() bool
	// Unions
	Boolean_MediaSubscription_Union
	Boolean_Number_StructuredValue_Text_Union
	Boolean_Number_Union
	Boolean_Text_URL_Union
	Boolean_Text_Union
}
type booleanStruct struct {
	value bool
}

func (s *booleanStruct) implementsBoolean_MediaSubscription_Union()           {}
func (s *booleanStruct) implementsBoolean_Number_StructuredValue_Text_Union() {}
func (s *booleanStruct) implementsBoolean_Number_Union()                      {}
func (s *booleanStruct) implementsBoolean_Text_URL_Union()                    {}
func (s *booleanStruct) implementsBoolean_Text_Union()                        {}

func (s *booleanStruct) Value() bool {
	return s.value
}
func (s *booleanStruct) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &s.value)
}
func (s *booleanStruct) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.value)
}

type BooleanSlice []Boolean

func (s *BooleanSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BooleanSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Boolean)
	}
	return nil
}

var _ Boolean = &booleanStruct{}

// The act of obtaining an object under an agreement to return it at a later date. Reciprocal of LendAction.\n\nRelated actions:\n\n* [[LendAction]]: Reciprocal of BorrowAction.
type BorrowAction interface {
	// Parents
	TransferAction
	// Accessors
	Lender() []Organization_Person_Union // A sub property of participant. The person that lends the object being borrowed.
}
type borrowActionStruct struct {
	transferActionStruct

	Lender_ Organization_Person_UnionSlice `json:"lender,omitempty"`
}

func (s *borrowActionStruct) Lender() []Organization_Person_Union {
	return s.Lender_
}

type BorrowActionSlice []BorrowAction

func (s *BorrowActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BorrowActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BorrowAction)
	}
	return nil
}

var _ BorrowAction = &borrowActionStruct{}

// A bowling alley.
type BowlingAlley interface {
	// Parents
	SportsActivityLocation
}
type bowlingAlleyStruct struct {
	sportsActivityLocationStruct
}
type BowlingAlleySlice []BowlingAlley

func (s *BowlingAlleySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BowlingAlleySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BowlingAlley)
	}
	return nil
}

var _ BowlingAlley = &bowlingAlleyStruct{}

// Any anatomical structure which pertains to the soft nervous tissue functioning as the coordinating center of sensation and intellectual and nervous activity.
type BrainStructure interface {
	// Parents
	AnatomicalStructure
}
type brainStructureStruct struct {
	anatomicalStructureStruct
}
type BrainStructureSlice []BrainStructure

func (s *BrainStructureSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BrainStructureSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BrainStructure)
	}
	return nil
}

var _ BrainStructure = &brainStructureStruct{}

// A brand is a name used by an organization or business person for labeling a product, product group, or similar.
type Brand interface {
	// Parents
	Intangible
	// Unions
	Brand_Organization_Union
	// Accessors
	AggregateRating() []AggregateRating // The overall rating, based on a collection of reviews or ratings, of the item.
	Logo() []ImageObject_URL_Union      // An associated logo.
	Review() []Review                   // A review of the item.
	Slogan() []Text                     // A slogan or motto associated with the item.
}
type brandStruct struct {
	intangibleStruct

	AggregateRating_ AggregateRatingSlice       `json:"aggregateRating,omitempty"`
	Logo_            ImageObject_URL_UnionSlice `json:"logo,omitempty"`
	Review_          ReviewSlice                `json:"review,omitempty"`
	Slogan_          TextSlice                  `json:"slogan,omitempty"`
}

func (s *brandStruct) implementsBrand_Organization_Union() {}

func (s *brandStruct) AggregateRating() []AggregateRating {
	return s.AggregateRating_
}
func (s *brandStruct) Logo() []ImageObject_URL_Union {
	return s.Logo_
}
func (s *brandStruct) Review() []Review {
	return s.Review_
}
func (s *brandStruct) Slogan() []Text {
	return s.Slogan_
}

type BrandSlice []Brand

func (s *BrandSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BrandSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Brand)
	}
	return nil
}

var _ Brand = &brandStruct{}

/*
A BreadcrumbList is an ItemList consisting of a chain of linked Web pages, typically described using at least their URL and their name, and typically ending with the current page.\n\nThe [[position]] property is used to reconstruct the order of the items in a BreadcrumbList The convention is that a breadcrumb list has an [[itemListOrder]] of [[ItemListOrderAscending]] (lower values listed first), and that the first items in this list correspond to the "top" or beginning of the breadcrumb trail, e.g. with a site or section homepage. The specific values of 'position' are not assigned meaning for a BreadcrumbList, but they should be integers, e.g. beginning with '1' for the first item in the list.

*/
type BreadcrumbList interface {
	// Parents
	ItemList
	// Unions
	BreadcrumbList_Text_Union
}
type breadcrumbListStruct struct {
	itemListStruct
}

func (s *breadcrumbListStruct) implementsBreadcrumbList_Text_Union() {}

type BreadcrumbListSlice []BreadcrumbList

func (s *BreadcrumbListSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BreadcrumbListSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BreadcrumbList)
	}
	return nil
}

var _ BreadcrumbList = &breadcrumbListStruct{}

// Brewery.
type Brewery interface {
	// Parents
	FoodEstablishment
}
type breweryStruct struct {
	foodEstablishmentStruct
}
type BrewerySlice []Brewery

func (s *BrewerySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BrewerySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Brewery)
	}
	return nil
}

var _ Brewery = &breweryStruct{}

// A bridge.
type Bridge interface {
	// Parents
	CivicStructure
}
type bridgeStruct struct {
	civicStructureStruct
}
type BridgeSlice []Bridge

func (s *BridgeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BridgeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Bridge)
	}
	return nil
}

var _ Bridge = &bridgeStruct{}

// A unique instance of a BroadcastService on a CableOrSatelliteService lineup.
type BroadcastChannel interface {
	// Parents
	Intangible
	// Accessors
	BroadcastChannelId() []Text                                       // The unique address by which the BroadcastService can be identified in a provider lineup. In US, this is typically a number.
	BroadcastFrequency() []BroadcastFrequencySpecification_Text_Union // The frequency used for over-the-air broadcasts. Numeric values or simple ranges e.g. 87-99. In addition a shortcut idiom is supported for frequences of AM and FM radio channels, e.g. "87 FM".
	BroadcastServiceTier() []Text                                     // The type of service required to have access to the channel (e.g. Standard or Premium).
	Genre() []Text_URL_Union                                          // Genre of the creative work, broadcast channel or group.
	InBroadcastLineup() []CableOrSatelliteService                     // The CableOrSatelliteService offering the channel.
	ProvidesBroadcastService() []BroadcastService                     // The BroadcastService offered on this channel.
}
type broadcastChannelStruct struct {
	intangibleStruct

	BroadcastChannelId_       TextSlice                                       `json:"broadcastChannelId,omitempty"`
	BroadcastFrequency_       BroadcastFrequencySpecification_Text_UnionSlice `json:"broadcastFrequency,omitempty"`
	BroadcastServiceTier_     TextSlice                                       `json:"broadcastServiceTier,omitempty"`
	Genre_                    Text_URL_UnionSlice                             `json:"genre,omitempty"`
	InBroadcastLineup_        CableOrSatelliteServiceSlice                    `json:"inBroadcastLineup,omitempty"`
	ProvidesBroadcastService_ BroadcastServiceSlice                           `json:"providesBroadcastService,omitempty"`
}

func (s *broadcastChannelStruct) BroadcastChannelId() []Text {
	return s.BroadcastChannelId_
}
func (s *broadcastChannelStruct) BroadcastFrequency() []BroadcastFrequencySpecification_Text_Union {
	return s.BroadcastFrequency_
}
func (s *broadcastChannelStruct) BroadcastServiceTier() []Text {
	return s.BroadcastServiceTier_
}
func (s *broadcastChannelStruct) Genre() []Text_URL_Union {
	return s.Genre_
}
func (s *broadcastChannelStruct) InBroadcastLineup() []CableOrSatelliteService {
	return s.InBroadcastLineup_
}
func (s *broadcastChannelStruct) ProvidesBroadcastService() []BroadcastService {
	return s.ProvidesBroadcastService_
}

type BroadcastChannelSlice []BroadcastChannel

func (s *BroadcastChannelSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BroadcastChannelSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BroadcastChannel)
	}
	return nil
}

var _ BroadcastChannel = &broadcastChannelStruct{}

// An over the air or online broadcast event.
type BroadcastEvent interface {
	// Parents
	PublicationEvent
	// Accessors
	BroadcastOfEvent() []Event               // The event being broadcast such as a sporting event or awards ceremony.
	IsLiveBroadcast() []Boolean              // True if the broadcast is of a live event.
	SubtitleLanguage() []Language_Text_Union // Languages in which subtitles/captions are available, in [IETF BCP 47 standard format](http://tools.ietf.org/html/bcp47).
	VideoFormat() []Text                     // The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.).
}
type broadcastEventStruct struct {
	publicationEventStruct

	BroadcastOfEvent_ EventSlice               `json:"broadcastOfEvent,omitempty"`
	IsLiveBroadcast_  BooleanSlice             `json:"isLiveBroadcast,omitempty"`
	SubtitleLanguage_ Language_Text_UnionSlice `json:"subtitleLanguage,omitempty"`
	VideoFormat_      TextSlice                `json:"videoFormat,omitempty"`
}

func (s *broadcastEventStruct) BroadcastOfEvent() []Event {
	return s.BroadcastOfEvent_
}
func (s *broadcastEventStruct) IsLiveBroadcast() []Boolean {
	return s.IsLiveBroadcast_
}
func (s *broadcastEventStruct) SubtitleLanguage() []Language_Text_Union {
	return s.SubtitleLanguage_
}
func (s *broadcastEventStruct) VideoFormat() []Text {
	return s.VideoFormat_
}

type BroadcastEventSlice []BroadcastEvent

func (s *BroadcastEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BroadcastEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BroadcastEvent)
	}
	return nil
}

var _ BroadcastEvent = &broadcastEventStruct{}

// The frequency in MHz and the modulation used for a particular BroadcastService.
type BroadcastFrequencySpecification interface {
	// Parents
	Intangible
	// Unions
	BroadcastFrequencySpecification_Text_Union
	// Accessors
	BroadcastFrequencyValue() []Number_QuantitativeValue_Union // The frequency in MHz for a particular broadcast.
	BroadcastSignalModulation() []QualitativeValue_Text_Union  // The modulation (e.g. FM, AM, etc) used by a particular broadcast service.
	BroadcastSubChannel() []Text                               // The subchannel used for the broadcast.
}
type broadcastFrequencySpecificationStruct struct {
	intangibleStruct

	BroadcastFrequencyValue_   Number_QuantitativeValue_UnionSlice `json:"broadcastFrequencyValue,omitempty"`
	BroadcastSignalModulation_ QualitativeValue_Text_UnionSlice    `json:"broadcastSignalModulation,omitempty"`
	BroadcastSubChannel_       TextSlice                           `json:"broadcastSubChannel,omitempty"`
}

func (s *broadcastFrequencySpecificationStruct) implementsBroadcastFrequencySpecification_Text_Union() {
}

func (s *broadcastFrequencySpecificationStruct) BroadcastFrequencyValue() []Number_QuantitativeValue_Union {
	return s.BroadcastFrequencyValue_
}
func (s *broadcastFrequencySpecificationStruct) BroadcastSignalModulation() []QualitativeValue_Text_Union {
	return s.BroadcastSignalModulation_
}
func (s *broadcastFrequencySpecificationStruct) BroadcastSubChannel() []Text {
	return s.BroadcastSubChannel_
}

type BroadcastFrequencySpecificationSlice []BroadcastFrequencySpecification

func (s *BroadcastFrequencySpecificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BroadcastFrequencySpecificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BroadcastFrequencySpecification)
	}
	return nil
}

var _ BroadcastFrequencySpecification = &broadcastFrequencySpecificationStruct{}

// A delivery service through which content is provided via broadcast over the air or online.
type BroadcastService interface {
	// Parents
	Service
	// Accessors
	Area() []Place                                                    // The area within which users can expect to reach the broadcast service.
	BroadcastAffiliateOf() []Organization                             // The media network(s) whose content is broadcast on this station.
	BroadcastDisplayName() []Text                                     // The name displayed in the channel guide. For many US affiliates, it is the network name.
	BroadcastFrequency() []BroadcastFrequencySpecification_Text_Union // The frequency used for over-the-air broadcasts. Numeric values or simple ranges e.g. 87-99. In addition a shortcut idiom is supported for frequences of AM and FM radio channels, e.g. "87 FM".
	BroadcastTimezone() []Text                                        // The timezone in [ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601) for which the service bases its broadcasts
	Broadcaster() []Organization                                      // The organization owning or operating the broadcast service.
	CallSign() []Text                                                 // A [callsign](https://en.wikipedia.org/wiki/Call_sign), as used in broadcasting and radio communications to identify people, radio and TV stations, or vehicles.
	HasBroadcastChannel() []BroadcastChannel                          // A broadcast channel of a broadcast service.
	InLanguage() []Language_Text_Union                                // The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
	ParentService() []BroadcastService                                // A broadcast service to which the broadcast service may belong to such as regional variations of a national channel.
	VideoFormat() []Text                                              // The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.).
}
type broadcastServiceStruct struct {
	serviceStruct

	Area_                 PlaceSlice                                      `json:"area,omitempty"`
	BroadcastAffiliateOf_ OrganizationSlice                               `json:"broadcastAffiliateOf,omitempty"`
	BroadcastDisplayName_ TextSlice                                       `json:"broadcastDisplayName,omitempty"`
	BroadcastFrequency_   BroadcastFrequencySpecification_Text_UnionSlice `json:"broadcastFrequency,omitempty"`
	BroadcastTimezone_    TextSlice                                       `json:"broadcastTimezone,omitempty"`
	Broadcaster_          OrganizationSlice                               `json:"broadcaster,omitempty"`
	CallSign_             TextSlice                                       `json:"callSign,omitempty"`
	HasBroadcastChannel_  BroadcastChannelSlice                           `json:"hasBroadcastChannel,omitempty"`
	InLanguage_           Language_Text_UnionSlice                        `json:"inLanguage,omitempty"`
	ParentService_        BroadcastServiceSlice                           `json:"parentService,omitempty"`
	VideoFormat_          TextSlice                                       `json:"videoFormat,omitempty"`
}

func (s *broadcastServiceStruct) Area() []Place {
	return s.Area_
}
func (s *broadcastServiceStruct) BroadcastAffiliateOf() []Organization {
	return s.BroadcastAffiliateOf_
}
func (s *broadcastServiceStruct) BroadcastDisplayName() []Text {
	return s.BroadcastDisplayName_
}
func (s *broadcastServiceStruct) BroadcastFrequency() []BroadcastFrequencySpecification_Text_Union {
	return s.BroadcastFrequency_
}
func (s *broadcastServiceStruct) BroadcastTimezone() []Text {
	return s.BroadcastTimezone_
}
func (s *broadcastServiceStruct) Broadcaster() []Organization {
	return s.Broadcaster_
}
func (s *broadcastServiceStruct) CallSign() []Text {
	return s.CallSign_
}
func (s *broadcastServiceStruct) HasBroadcastChannel() []BroadcastChannel {
	return s.HasBroadcastChannel_
}
func (s *broadcastServiceStruct) InLanguage() []Language_Text_Union {
	return s.InLanguage_
}
func (s *broadcastServiceStruct) ParentService() []BroadcastService {
	return s.ParentService_
}
func (s *broadcastServiceStruct) VideoFormat() []Text {
	return s.VideoFormat_
}

type BroadcastServiceSlice []BroadcastService

func (s *BroadcastServiceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BroadcastServiceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BroadcastService)
	}
	return nil
}

var _ BroadcastService = &broadcastServiceStruct{}

// An account that allows an investor to deposit funds and place investment orders with a licensed broker or brokerage firm.
type BrokerageAccount interface {
	// Parents
	InvestmentOrDeposit
}
type brokerageAccountStruct struct {
	investmentOrDepositStruct
}
type BrokerageAccountSlice []BrokerageAccount

func (s *BrokerageAccountSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BrokerageAccountSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BrokerageAccount)
	}
	return nil
}

var _ BrokerageAccount = &brokerageAccountStruct{}

// A Buddhist temple.
type BuddhistTemple interface {
	// Parents
	PlaceOfWorship
}
type buddhistTempleStruct struct {
	placeOfWorshipStruct
}
type BuddhistTempleSlice []BuddhistTemple

func (s *BuddhistTempleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BuddhistTempleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BuddhistTemple)
	}
	return nil
}

var _ BuddhistTemple = &buddhistTempleStruct{}

// A bus (also omnibus or autobus) is a road vehicle designed to carry passengers. Coaches are luxury busses, usually in service for long distance travel.
type BusOrCoach interface {
	// Parents
	Vehicle
	// Accessors
	AcrissCode() []Text            // The ACRISS Car Classification Code is a code used by many car rental companies, for classifying vehicles. ACRISS stands for Association of Car Rental Industry Systems and Standards.
	RoofLoad() []QuantitativeValue // The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 2: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]]\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.
}
type busOrCoachStruct struct {
	vehicleStruct

	AcrissCode_ TextSlice              `json:"acrissCode,omitempty"`
	RoofLoad_   QuantitativeValueSlice `json:"roofLoad,omitempty"`
}

func (s *busOrCoachStruct) AcrissCode() []Text {
	return s.AcrissCode_
}
func (s *busOrCoachStruct) RoofLoad() []QuantitativeValue {
	return s.RoofLoad_
}

type BusOrCoachSlice []BusOrCoach

func (s *BusOrCoachSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BusOrCoachSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BusOrCoach)
	}
	return nil
}

var _ BusOrCoach = &busOrCoachStruct{}

// A reservation for bus travel. \n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
type BusReservation interface {
	// Parents
	Reservation
}
type busReservationStruct struct {
	reservationStruct
}
type BusReservationSlice []BusReservation

func (s *BusReservationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BusReservationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BusReservation)
	}
	return nil
}

var _ BusReservation = &busReservationStruct{}

// A bus station.
type BusStation interface {
	// Parents
	CivicStructure
	// Unions
	BusStation_BusStop_Union
}
type busStationStruct struct {
	civicStructureStruct
}

func (s *busStationStruct) implementsBusStation_BusStop_Union() {}

type BusStationSlice []BusStation

func (s *BusStationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BusStationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BusStation)
	}
	return nil
}

var _ BusStation = &busStationStruct{}

// A bus stop.
type BusStop interface {
	// Parents
	CivicStructure
	// Unions
	BusStation_BusStop_Union
}
type busStopStruct struct {
	civicStructureStruct
}

func (s *busStopStruct) implementsBusStation_BusStop_Union() {}

type BusStopSlice []BusStop

func (s *BusStopSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BusStopSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BusStop)
	}
	return nil
}

var _ BusStop = &busStopStruct{}

// A trip on a commercial bus line.
type BusTrip interface {
	// Parents
	Trip
	// Accessors
	ArrivalBusStop() []BusStation_BusStop_Union   // The stop or station from which the bus arrives.
	BusName() []Text                              // The name of the bus (e.g. Bolt Express).
	BusNumber() []Text                            // The unique identifier for the bus.
	DepartureBusStop() []BusStation_BusStop_Union // The stop or station from which the bus departs.
}
type busTripStruct struct {
	tripStruct

	ArrivalBusStop_   BusStation_BusStop_UnionSlice `json:"arrivalBusStop,omitempty"`
	BusName_          TextSlice                     `json:"busName,omitempty"`
	BusNumber_        TextSlice                     `json:"busNumber,omitempty"`
	DepartureBusStop_ BusStation_BusStop_UnionSlice `json:"departureBusStop,omitempty"`
}

func (s *busTripStruct) ArrivalBusStop() []BusStation_BusStop_Union {
	return s.ArrivalBusStop_
}
func (s *busTripStruct) BusName() []Text {
	return s.BusName_
}
func (s *busTripStruct) BusNumber() []Text {
	return s.BusNumber_
}
func (s *busTripStruct) DepartureBusStop() []BusStation_BusStop_Union {
	return s.DepartureBusStop_
}

type BusTripSlice []BusTrip

func (s *BusTripSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BusTripSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BusTrip)
	}
	return nil
}

var _ BusTrip = &busTripStruct{}

// A set of characteristics belonging to businesses, e.g. who compose an item's target audience.
type BusinessAudience interface {
	// Parents
	Audience
	// Accessors
	NumberOfEmployees() []QuantitativeValue // The number of employees in an organization e.g. business.
	YearlyRevenue() []QuantitativeValue     // The size of the business in annual revenue.
	YearsInOperation() []QuantitativeValue  // The age of the business.
}
type businessAudienceStruct struct {
	audienceStruct

	NumberOfEmployees_ QuantitativeValueSlice `json:"numberOfEmployees,omitempty"`
	YearlyRevenue_     QuantitativeValueSlice `json:"yearlyRevenue,omitempty"`
	YearsInOperation_  QuantitativeValueSlice `json:"yearsInOperation,omitempty"`
}

func (s *businessAudienceStruct) NumberOfEmployees() []QuantitativeValue {
	return s.NumberOfEmployees_
}
func (s *businessAudienceStruct) YearlyRevenue() []QuantitativeValue {
	return s.YearlyRevenue_
}
func (s *businessAudienceStruct) YearsInOperation() []QuantitativeValue {
	return s.YearsInOperation_
}

type BusinessAudienceSlice []BusinessAudience

func (s *BusinessAudienceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BusinessAudienceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BusinessAudience)
	}
	return nil
}

var _ BusinessAudience = &businessAudienceStruct{}

/*
A business entity type is a conceptual entity representing the legal form, the size, the main line of business, the position in the value chain, or any combination thereof, of an organization or business person.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#Business\n* http://purl.org/goodrelations/v1#Enduser\n* http://purl.org/goodrelations/v1#PublicInstitution\n* http://purl.org/goodrelations/v1#Reseller

*/
type BusinessEntityType interface {
	// Parents
	Enumeration
}
type businessEntityTypeStruct struct {
	enumerationStruct
}
type BusinessEntityTypeSlice []BusinessEntityType

func (s *BusinessEntityTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BusinessEntityTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BusinessEntityType)
	}
	return nil
}

var _ BusinessEntityType = &businessEntityTypeStruct{}

// Event type: Business event.
type BusinessEvent interface {
	// Parents
	Event
}
type businessEventStruct struct {
	eventStruct
}
type BusinessEventSlice []BusinessEvent

func (s *BusinessEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BusinessEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BusinessEvent)
	}
	return nil
}

var _ BusinessEvent = &businessEventStruct{}

/*
The business function specifies the type of activity or access (i.e., the bundle of rights) offered by the organization or business person through the offer. Typical are sell, rental or lease, maintenance or repair, manufacture / produce, recycle / dispose, engineering / construction, or installation. Proprietary specifications of access rights are also instances of this class.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#ConstructionInstallation\n* http://purl.org/goodrelations/v1#Dispose\n* http://purl.org/goodrelations/v1#LeaseOut\n* http://purl.org/goodrelations/v1#Maintain\n* http://purl.org/goodrelations/v1#ProvideService\n* http://purl.org/goodrelations/v1#Repair\n* http://purl.org/goodrelations/v1#Sell\n* http://purl.org/goodrelations/v1#Buy

*/
type BusinessFunction interface {
	// Parents
	Enumeration
}
type businessFunctionStruct struct {
	enumerationStruct
}
type BusinessFunctionSlice []BusinessFunction

func (s *BusinessFunctionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BusinessFunctionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BusinessFunction)
	}
	return nil
}

var _ BusinessFunction = &businessFunctionStruct{}

// The act of giving money to a seller in exchange for goods or services rendered. An agent buys an object, product, or service from a seller for a price. Reciprocal of SellAction.
type BuyAction interface {
	// Parents
	TradeAction
	// Accessors
	Seller() []Organization_Person_Union // An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
	Vendor() []Organization_Person_Union // 'vendor' is an earlier term for 'seller'.
	WarrantyPromise() []WarrantyPromise  // The warranty promise(s) included in the offer.
}
type buyActionStruct struct {
	tradeActionStruct

	Seller_          Organization_Person_UnionSlice `json:"seller,omitempty"`
	Vendor_          Organization_Person_UnionSlice `json:"vendor,omitempty"`
	WarrantyPromise_ WarrantyPromiseSlice           `json:"warrantyPromise,omitempty"`
}

func (s *buyActionStruct) Seller() []Organization_Person_Union {
	return s.Seller_
}
func (s *buyActionStruct) Vendor() []Organization_Person_Union {
	return s.Vendor_
}
func (s *buyActionStruct) WarrantyPromise() []WarrantyPromise {
	return s.WarrantyPromise_
}

type BuyActionSlice []BuyAction

func (s *BuyActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(BuyActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(BuyAction)
	}
	return nil
}

var _ BuyAction = &buyActionStruct{}

/*
A CDCPMDRecord is a data structure representing a record in a CDC tabular data format
      used for hospital data reporting. See [documentation](/docs/cdc-covid.html) for details, and the linked CDC materials for authoritative
      definitions used as the source here.

*/
type CDCPMDRecord interface {
	// Parents
	StructuredValue
	// Unions
	CDCPMDRecord_Dataset_Union
	// Accessors
	CvdCollectionDate() []DateTime_Text_Union // collectiondate - Date for which patient counts are reported.
	CvdFacilityCounty() []Text                // Name of the County of the NHSN facility that this data record applies to. Use [[cvdFacilityId]] to identify the facility. To provide other details, [[healthcareReportingData]] can be used on a [[Hospital]] entry.
	CvdFacilityId() []Text                    // Identifier of the NHSN facility that this data record applies to. Use [[cvdFacilityCounty]] to indicate the county. To provide other details, [[healthcareReportingData]] can be used on a [[Hospital]] entry.
	CvdNumBeds() []Number                     // numbeds - HOSPITAL INPATIENT BEDS: Inpatient beds, including all staffed, licensed, and overflow (surge) beds used for inpatients.
	CvdNumBedsOcc() []Number                  // numbedsocc - HOSPITAL INPATIENT BED OCCUPANCY: Total number of staffed inpatient beds that are occupied.
	CvdNumC19Died() []Number                  // numc19died - DEATHS: Patients with suspected or confirmed COVID-19 who died in the hospital, ED, or any overflow location.
	CvdNumC19HOPats() []Number                // numc19hopats - HOSPITAL ONSET: Patients hospitalized in an NHSN inpatient care location with onset of suspected or confirmed COVID-19 14 or more days after hospitalization.
	CvdNumC19HospPats() []Number              // numc19hosppats - HOSPITALIZED: Patients currently hospitalized in an inpatient care location who have suspected or confirmed COVID-19.
	CvdNumC19MechVentPats() []Number          // numc19mechventpats - HOSPITALIZED and VENTILATED: Patients hospitalized in an NHSN inpatient care location who have suspected or confirmed COVID-19 and are on a mechanical ventilator.
	CvdNumC19OFMechVentPats() []Number        // numc19ofmechventpats - ED/OVERFLOW and VENTILATED: Patients with suspected or confirmed COVID-19 who are in the ED or any overflow location awaiting an inpatient bed and on a mechanical ventilator.
	CvdNumC19OverflowPats() []Number          // numc19overflowpats - ED/OVERFLOW: Patients with suspected or confirmed COVID-19 who are in the ED or any overflow location awaiting an inpatient bed.
	CvdNumICUBeds() []Number                  // numicubeds - ICU BEDS: Total number of staffed inpatient intensive care unit (ICU) beds.
	CvdNumICUBedsOcc() []Number               // numicubedsocc - ICU BED OCCUPANCY: Total number of staffed inpatient ICU beds that are occupied.
	CvdNumTotBeds() []Number                  // numtotbeds - ALL HOSPITAL BEDS: Total number of all Inpatient and outpatient beds, including all staffed,ICU, licensed, and overflow (surge) beds used for inpatients or outpatients.
	CvdNumVent() []Number                     // numvent - MECHANICAL VENTILATORS: Total number of ventilators available.
	CvdNumVentUse() []Number                  // numventuse - MECHANICAL VENTILATORS IN USE: Total number of ventilators in use.
	DatePosted() []Date_DateTime_Union        // Publication date of an online listing.
}
type cDCPMDRecordStruct struct {
	structuredValueStruct

	CvdCollectionDate_       DateTime_Text_UnionSlice `json:"cvdCollectionDate,omitempty"`
	CvdFacilityCounty_       TextSlice                `json:"cvdFacilityCounty,omitempty"`
	CvdFacilityId_           TextSlice                `json:"cvdFacilityId,omitempty"`
	CvdNumBeds_              NumberSlice              `json:"cvdNumBeds,omitempty"`
	CvdNumBedsOcc_           NumberSlice              `json:"cvdNumBedsOcc,omitempty"`
	CvdNumC19Died_           NumberSlice              `json:"cvdNumC19Died,omitempty"`
	CvdNumC19HOPats_         NumberSlice              `json:"cvdNumC19HOPats,omitempty"`
	CvdNumC19HospPats_       NumberSlice              `json:"cvdNumC19HospPats,omitempty"`
	CvdNumC19MechVentPats_   NumberSlice              `json:"cvdNumC19MechVentPats,omitempty"`
	CvdNumC19OFMechVentPats_ NumberSlice              `json:"cvdNumC19OFMechVentPats,omitempty"`
	CvdNumC19OverflowPats_   NumberSlice              `json:"cvdNumC19OverflowPats,omitempty"`
	CvdNumICUBeds_           NumberSlice              `json:"cvdNumICUBeds,omitempty"`
	CvdNumICUBedsOcc_        NumberSlice              `json:"cvdNumICUBedsOcc,omitempty"`
	CvdNumTotBeds_           NumberSlice              `json:"cvdNumTotBeds,omitempty"`
	CvdNumVent_              NumberSlice              `json:"cvdNumVent,omitempty"`
	CvdNumVentUse_           NumberSlice              `json:"cvdNumVentUse,omitempty"`
	DatePosted_              Date_DateTime_UnionSlice `json:"datePosted,omitempty"`
}

func (s *cDCPMDRecordStruct) implementsCDCPMDRecord_Dataset_Union() {}

func (s *cDCPMDRecordStruct) CvdCollectionDate() []DateTime_Text_Union {
	return s.CvdCollectionDate_
}
func (s *cDCPMDRecordStruct) CvdFacilityCounty() []Text {
	return s.CvdFacilityCounty_
}
func (s *cDCPMDRecordStruct) CvdFacilityId() []Text {
	return s.CvdFacilityId_
}
func (s *cDCPMDRecordStruct) CvdNumBeds() []Number {
	return s.CvdNumBeds_
}
func (s *cDCPMDRecordStruct) CvdNumBedsOcc() []Number {
	return s.CvdNumBedsOcc_
}
func (s *cDCPMDRecordStruct) CvdNumC19Died() []Number {
	return s.CvdNumC19Died_
}
func (s *cDCPMDRecordStruct) CvdNumC19HOPats() []Number {
	return s.CvdNumC19HOPats_
}
func (s *cDCPMDRecordStruct) CvdNumC19HospPats() []Number {
	return s.CvdNumC19HospPats_
}
func (s *cDCPMDRecordStruct) CvdNumC19MechVentPats() []Number {
	return s.CvdNumC19MechVentPats_
}
func (s *cDCPMDRecordStruct) CvdNumC19OFMechVentPats() []Number {
	return s.CvdNumC19OFMechVentPats_
}
func (s *cDCPMDRecordStruct) CvdNumC19OverflowPats() []Number {
	return s.CvdNumC19OverflowPats_
}
func (s *cDCPMDRecordStruct) CvdNumICUBeds() []Number {
	return s.CvdNumICUBeds_
}
func (s *cDCPMDRecordStruct) CvdNumICUBedsOcc() []Number {
	return s.CvdNumICUBedsOcc_
}
func (s *cDCPMDRecordStruct) CvdNumTotBeds() []Number {
	return s.CvdNumTotBeds_
}
func (s *cDCPMDRecordStruct) CvdNumVent() []Number {
	return s.CvdNumVent_
}
func (s *cDCPMDRecordStruct) CvdNumVentUse() []Number {
	return s.CvdNumVentUse_
}
func (s *cDCPMDRecordStruct) DatePosted() []Date_DateTime_Union {
	return s.DatePosted_
}

type CDCPMDRecordSlice []CDCPMDRecord

func (s *CDCPMDRecordSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CDCPMDRecordSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CDCPMDRecord)
	}
	return nil
}

var _ CDCPMDRecord = &cDCPMDRecordStruct{}

// A service which provides access to media programming like TV or radio. Access may be via cable or satellite.
type CableOrSatelliteService interface {
	// Parents
	Service
}
type cableOrSatelliteServiceStruct struct {
	serviceStruct
}
type CableOrSatelliteServiceSlice []CableOrSatelliteService

func (s *CableOrSatelliteServiceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CableOrSatelliteServiceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CableOrSatelliteService)
	}
	return nil
}

var _ CableOrSatelliteService = &cableOrSatelliteServiceStruct{}

// A cafe or coffee shop.
type CafeOrCoffeeShop interface {
	// Parents
	FoodEstablishment
}
type cafeOrCoffeeShopStruct struct {
	foodEstablishmentStruct
}
type CafeOrCoffeeShopSlice []CafeOrCoffeeShop

func (s *CafeOrCoffeeShopSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CafeOrCoffeeShopSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CafeOrCoffeeShop)
	}
	return nil
}

var _ CafeOrCoffeeShop = &cafeOrCoffeeShopStruct{}

/*
A camping site, campsite, or [[Campground]] is a place used for overnight stay in the outdoors, typically containing individual [[CampingPitch]] locations. \n\n
In British English a campsite is an area, usually divided into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English use of the word is synonymous with the American English expression campground. In American English the term campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a camper; a campground may contain many campsites (Source: Wikipedia see [https://en.wikipedia.org/wiki/Campsite](https://en.wikipedia.org/wiki/Campsite)).\n\n

See also the dedicated [document on the use of schema.org for marking up hotels and other forms of accommodations](/docs/hotels.html).
*/
type Campground interface {
	// Parents
	CivicStructure
	LodgingBusiness
}
type campgroundStruct struct {
	civicStructureStruct
	lodgingBusinessStruct
}

func (s *campgroundStruct) implementsAdministrativeArea_GeoShape_Place_Text_Union()               {} // re
func (s *campgroundStruct) implementsAdministrativeArea_GeoShape_Place_Union()                    {} // re
func (s *campgroundStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *campgroundStruct) implementsCivicStructure_LocalBusiness_Union()                         {} // re
func (s *campgroundStruct) implementsContactPoint_Place_Union()                                   {} // re
func (s *campgroundStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *campgroundStruct) implementsFoodEstablishment_Place_Union()                              {} // re
func (s *campgroundStruct) implementsGeoShape_Place_Text_Union()                                  {} // re
func (s *campgroundStruct) implementsGeospatialGeometry_Place_Union()                             {} // re
func (s *campgroundStruct) implementsItemList_Place_Union()                                       {} // re
func (s *campgroundStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *campgroundStruct) implementsPlace_PostalAddress_Text_Union()                             {} // re
func (s *campgroundStruct) implementsPlace_PostalAddress_Text_VirtualLocation_Union()             {} // re
func (s *campgroundStruct) implementsPlace_PostalAddress_URL_Union()                              {} // re
func (s *campgroundStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *campgroundStruct) implementsText_Thing_Union()                                           {} // re
type CampgroundSlice []Campground

func (s *CampgroundSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CampgroundSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Campground)
	}
	return nil
}

var _ Campground = &campgroundStruct{}

/*
A [[CampingPitch]] is an individual place for overnight stay in the outdoors, typically being part of a larger camping site, or [[Campground]].\n\n
In British English a campsite, or campground, is an area, usually divided into a number of pitches, where people can camp overnight using tents or camper vans or caravans; this British English use of the word is synonymous with the American English expression campground. In American English the term campsite generally means an area where an individual, family, group, or military unit can pitch a tent or park a camper; a campground may contain many campsites.
(Source: Wikipedia see [https://en.wikipedia.org/wiki/Campsite](https://en.wikipedia.org/wiki/Campsite)).\n\n
See also the dedicated [document on the use of schema.org for marking up hotels and other forms of accommodations](/docs/hotels.html).
*/
type CampingPitch interface {
	// Parents
	Accommodation
}
type campingPitchStruct struct {
	accommodationStruct
}
type CampingPitchSlice []CampingPitch

func (s *CampingPitchSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CampingPitchSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CampingPitch)
	}
	return nil
}

var _ CampingPitch = &campingPitchStruct{}

// A canal, like the Panama Canal.
type Canal interface {
	// Parents
	BodyOfWater
}
type canalStruct struct {
	bodyOfWaterStruct
}
type CanalSlice []Canal

func (s *CanalSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CanalSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Canal)
	}
	return nil
}

var _ Canal = &canalStruct{}

// The act of asserting that a future event/action is no longer going to happen.\n\nRelated actions:\n\n* [[ConfirmAction]]: The antonym of CancelAction.
type CancelAction interface {
	// Parents
	PlanAction
}
type cancelActionStruct struct {
	planActionStruct
}
type CancelActionSlice []CancelAction

func (s *CancelActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CancelActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CancelAction)
	}
	return nil
}

var _ CancelAction = &cancelActionStruct{}

// A car is a wheeled, self-powered motor vehicle used for transportation.
type Car interface {
	// Parents
	Vehicle
	// Accessors
	AcrissCode() []Text            // The ACRISS Car Classification Code is a code used by many car rental companies, for classifying vehicles. ACRISS stands for Association of Car Rental Industry Systems and Standards.
	RoofLoad() []QuantitativeValue // The permitted total weight of cargo and installations (e.g. a roof rack) on top of the vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 2: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]]\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.
}
type carStruct struct {
	vehicleStruct

	AcrissCode_ TextSlice              `json:"acrissCode,omitempty"`
	RoofLoad_   QuantitativeValueSlice `json:"roofLoad,omitempty"`
}

func (s *carStruct) AcrissCode() []Text {
	return s.AcrissCode_
}
func (s *carStruct) RoofLoad() []QuantitativeValue {
	return s.RoofLoad_
}

type CarSlice []Car

func (s *CarSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CarSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Car)
	}
	return nil
}

var _ Car = &carStruct{}

// A value indicating a special usage of a car, e.g. commercial rental, driving school, or as a taxi.
type CarUsageType interface {
	// Parents
	Enumeration
	// Unions
	CarUsageType_Text_Union
}
type carUsageTypeStruct struct {
	enumerationStruct
}

func (s *carUsageTypeStruct) implementsCarUsageType_Text_Union() {}

type CarUsageTypeSlice []CarUsageType

func (s *CarUsageTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CarUsageTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CarUsageType)
	}
	return nil
}

var _ CarUsageType = &carUsageTypeStruct{}

// A casino.
type Casino interface {
	// Parents
	EntertainmentBusiness
}
type casinoStruct struct {
	entertainmentBusinessStruct
}
type CasinoSlice []Casino

func (s *CasinoSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CasinoSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Casino)
	}
	return nil
}

var _ Casino = &casinoStruct{}

// A Category Code.
type CategoryCode interface {
	// Parents
	DefinedTerm
	// Unions
	CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union
	CategoryCode_Text_Union
	// Accessors
	CodeValue() []Text                      // A short textual code that uniquely identifies the value.
	InCodeSet() []CategoryCodeSet_URL_Union // A [[CategoryCodeSet]] that contains this category code.
}
type categoryCodeStruct struct {
	definedTermStruct

	CodeValue_ TextSlice                      `json:"codeValue,omitempty"`
	InCodeSet_ CategoryCodeSet_URL_UnionSlice `json:"inCodeSet,omitempty"`
}

func (s *categoryCodeStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {}
func (s *categoryCodeStruct) implementsCategoryCode_Text_Union()                                    {}

func (s *categoryCodeStruct) CodeValue() []Text {
	return s.CodeValue_
}
func (s *categoryCodeStruct) InCodeSet() []CategoryCodeSet_URL_Union {
	return s.InCodeSet_
}

type CategoryCodeSlice []CategoryCode

func (s *CategoryCodeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CategoryCodeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CategoryCode)
	}
	return nil
}

var _ CategoryCode = &categoryCodeStruct{}

// A set of Category Code values.
type CategoryCodeSet interface {
	// Parents
	DefinedTermSet
	// Unions
	CategoryCodeSet_URL_Union
	// Accessors
	HasCategoryCode() []CategoryCode // A Category code contained in this code set.
}
type categoryCodeSetStruct struct {
	definedTermSetStruct

	HasCategoryCode_ CategoryCodeSlice `json:"hasCategoryCode,omitempty"`
}

func (s *categoryCodeSetStruct) implementsCategoryCodeSet_URL_Union() {}

func (s *categoryCodeSetStruct) HasCategoryCode() []CategoryCode {
	return s.HasCategoryCode_
}

type CategoryCodeSetSlice []CategoryCodeSet

func (s *CategoryCodeSetSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CategoryCodeSetSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CategoryCodeSet)
	}
	return nil
}

var _ CategoryCodeSet = &categoryCodeSetStruct{}

// A Catholic church.
type CatholicChurch interface {
	// Parents
	Church
}
type catholicChurchStruct struct {
	churchStruct
}
type CatholicChurchSlice []CatholicChurch

func (s *CatholicChurchSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CatholicChurchSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CatholicChurch)
	}
	return nil
}

var _ CatholicChurch = &catholicChurchStruct{}

// A graveyard.
type Cemetery interface {
	// Parents
	CivicStructure
}
type cemeteryStruct struct {
	civicStructureStruct
}
type CemeterySlice []Cemetery

func (s *CemeterySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CemeterySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Cemetery)
	}
	return nil
}

var _ Cemetery = &cemeteryStruct{}

// One of the sections into which a book is divided. A chapter usually has a section number or a name.
type Chapter interface {
	// Parents
	CreativeWork
	// Accessors
	PageEnd() []Integer_Text_Union   // The page on which the work ends; for example "138" or "xvi".
	PageStart() []Integer_Text_Union // The page on which the work starts; for example "135" or "xiii".
	Pagination() []Text              // Any description of pages that is not separated into pageStart and pageEnd; for example, "1-6, 9, 55" or "10-12, 46-49".
}
type chapterStruct struct {
	creativeWorkStruct

	PageEnd_    Integer_Text_UnionSlice `json:"pageEnd,omitempty"`
	PageStart_  Integer_Text_UnionSlice `json:"pageStart,omitempty"`
	Pagination_ TextSlice               `json:"pagination,omitempty"`
}

func (s *chapterStruct) PageEnd() []Integer_Text_Union {
	return s.PageEnd_
}
func (s *chapterStruct) PageStart() []Integer_Text_Union {
	return s.PageStart_
}
func (s *chapterStruct) Pagination() []Text {
	return s.Pagination_
}

type ChapterSlice []Chapter

func (s *ChapterSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ChapterSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Chapter)
	}
	return nil
}

var _ Chapter = &chapterStruct{}

// An agent inspects, determines, investigates, inquires, or examines an object's accuracy, quality, condition, or state.
type CheckAction interface {
	// Parents
	FindAction
}
type checkActionStruct struct {
	findActionStruct
}
type CheckActionSlice []CheckAction

func (s *CheckActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CheckActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CheckAction)
	}
	return nil
}

var _ CheckAction = &checkActionStruct{}

// The act of an agent communicating (service provider, social media, etc) their arrival by registering/confirming for a previously reserved service (e.g. flight check in) or at a place (e.g. hotel), possibly resulting in a result (boarding pass, etc).\n\nRelated actions:\n\n* [[CheckOutAction]]: The antonym of CheckInAction.\n* [[ArriveAction]]: Unlike ArriveAction, CheckInAction implies that the agent is informing/confirming the start of a previously reserved service.\n* [[ConfirmAction]]: Unlike ConfirmAction, CheckInAction implies that the agent is informing/confirming the *start* of a previously reserved service rather than its validity/existence.
type CheckInAction interface {
	// Parents
	CommunicateAction
}
type checkInActionStruct struct {
	communicateActionStruct
}
type CheckInActionSlice []CheckInAction

func (s *CheckInActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CheckInActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CheckInAction)
	}
	return nil
}

var _ CheckInAction = &checkInActionStruct{}

// The act of an agent communicating (service provider, social media, etc) their departure of a previously reserved service (e.g. flight check in) or place (e.g. hotel).\n\nRelated actions:\n\n* [[CheckInAction]]: The antonym of CheckOutAction.\n* [[DepartAction]]: Unlike DepartAction, CheckOutAction implies that the agent is informing/confirming the end of a previously reserved service.\n* [[CancelAction]]: Unlike CancelAction, CheckOutAction implies that the agent is informing/confirming the end of a previously reserved service.
type CheckOutAction interface {
	// Parents
	CommunicateAction
}
type checkOutActionStruct struct {
	communicateActionStruct
}
type CheckOutActionSlice []CheckOutAction

func (s *CheckOutActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CheckOutActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CheckOutAction)
	}
	return nil
}

var _ CheckOutAction = &checkOutActionStruct{}

// Web page type: Checkout page.
type CheckoutPage interface {
	// Parents
	WebPage
}
type checkoutPageStruct struct {
	webPageStruct
}
type CheckoutPageSlice []CheckoutPage

func (s *CheckoutPageSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CheckoutPageSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CheckoutPage)
	}
	return nil
}

var _ CheckoutPage = &checkoutPageStruct{}

// A chemical substance is 'a portion of matter of constant composition, composed of molecular entities of the same type or of different types' (source: [ChEBI:59999](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=59999)).
type ChemicalSubstance interface {
	// Parents
	BioChemEntity
	// Accessors
	ChemicalComposition() []Text // The chemical composition describes the identity and relative ratio of the chemical elements that make up the substance.
	ChemicalRole() []DefinedTerm // A role played by the BioChemEntity within a chemical context.
	PotentialUse() []DefinedTerm // Intended use of the BioChemEntity by humans.
}
type chemicalSubstanceStruct struct {
	bioChemEntityStruct

	ChemicalComposition_ TextSlice        `json:"chemicalComposition,omitempty"`
	ChemicalRole_        DefinedTermSlice `json:"chemicalRole,omitempty"`
	PotentialUse_        DefinedTermSlice `json:"potentialUse,omitempty"`
}

func (s *chemicalSubstanceStruct) ChemicalComposition() []Text {
	return s.ChemicalComposition_
}
func (s *chemicalSubstanceStruct) ChemicalRole() []DefinedTerm {
	return s.ChemicalRole_
}
func (s *chemicalSubstanceStruct) PotentialUse() []DefinedTerm {
	return s.PotentialUse_
}

type ChemicalSubstanceSlice []ChemicalSubstance

func (s *ChemicalSubstanceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ChemicalSubstanceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ChemicalSubstance)
	}
	return nil
}

var _ ChemicalSubstance = &chemicalSubstanceStruct{}

// A Childcare center.
type ChildCare interface {
	// Parents
	LocalBusiness
}
type childCareStruct struct {
	localBusinessStruct
}
type ChildCareSlice []ChildCare

func (s *ChildCareSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ChildCareSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ChildCare)
	}
	return nil
}

var _ ChildCare = &childCareStruct{}

// Event type: Children's event.
type ChildrensEvent interface {
	// Parents
	Event
}
type childrensEventStruct struct {
	eventStruct
}
type ChildrensEventSlice []ChildrensEvent

func (s *ChildrensEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ChildrensEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ChildrensEvent)
	}
	return nil
}

var _ ChildrensEvent = &childrensEventStruct{}

// The act of expressing a preference from a set of options or a large or unbounded set of choices/options.
type ChooseAction interface {
	// Parents
	AssessAction
	// Accessors
	ActionOption() []Text_Thing_Union // A sub property of object. The options subject to this action.
	Option() []Text_Thing_Union       // A sub property of object. The options subject to this action.
}
type chooseActionStruct struct {
	assessActionStruct

	ActionOption_ Text_Thing_UnionSlice `json:"actionOption,omitempty"`
	Option_       Text_Thing_UnionSlice `json:"option,omitempty"`
}

func (s *chooseActionStruct) ActionOption() []Text_Thing_Union {
	return s.ActionOption_
}
func (s *chooseActionStruct) Option() []Text_Thing_Union {
	return s.Option_
}

type ChooseActionSlice []ChooseAction

func (s *ChooseActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ChooseActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ChooseAction)
	}
	return nil
}

var _ ChooseAction = &chooseActionStruct{}

// A church.
type Church interface {
	// Parents
	PlaceOfWorship
}
type churchStruct struct {
	placeOfWorshipStruct
}
type ChurchSlice []Church

func (s *ChurchSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ChurchSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Church)
	}
	return nil
}

var _ Church = &churchStruct{}

// A city or town.
type City interface {
	// Parents
	AdministrativeArea
}
type cityStruct struct {
	administrativeAreaStruct
}
type CitySlice []City

func (s *CitySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CitySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(City)
	}
	return nil
}

var _ City = &cityStruct{}

// A city hall.
type CityHall interface {
	// Parents
	GovernmentBuilding
}
type cityHallStruct struct {
	governmentBuildingStruct
}
type CityHallSlice []CityHall

func (s *CityHallSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CityHallSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CityHall)
	}
	return nil
}

var _ CityHall = &cityHallStruct{}

// A public structure, such as a town hall or concert hall.
type CivicStructure interface {
	// Parents
	Place
	// Unions
	CivicStructure_LocalBusiness_Union
	// Accessors
	OpeningHours() []Text // The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with days, then times per day. Multiple days can be listed with commas ',' separating each day. Day or time ranges are specified using a hyphen '-'.\n\n* Days are specified using the following two-letter combinations: ```Mo```, ```Tu```, ```We```, ```Th```, ```Fr```, ```Sa```, ```Su```.\n* Times are specified using 24:00 format. For example, 3pm is specified as ```15:00```, 10am as ```10:00```. \n* Here is an example: <code>&lt;time itemprop="openingHours" datetime=&quot;Tu,Th 16:00-20:00&quot;&gt;Tuesdays and Thursdays 4-8pm&lt;/time&gt;</code>.\n* If a business is open 7 days a week, then it can be specified as <code>&lt;time itemprop=&quot;openingHours&quot; datetime=&quot;Mo-Su&quot;&gt;Monday through Sunday, all day&lt;/time&gt;</code>.
}
type civicStructureStruct struct {
	placeStruct

	OpeningHours_ TextSlice `json:"openingHours,omitempty"`
}

func (s *civicStructureStruct) implementsCivicStructure_LocalBusiness_Union() {}

func (s *civicStructureStruct) OpeningHours() []Text {
	return s.OpeningHours_
}

type CivicStructureSlice []CivicStructure

func (s *CivicStructureSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CivicStructureSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CivicStructure)
	}
	return nil
}

var _ CivicStructure = &civicStructureStruct{}

/*
A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized with the [[text]] property. Variations on well known claims can have their common identity indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]] description includes enough contextual information to minimize the risk of ambiguity or inclarity. In practice, many claims are better understood in the context in which they appear or the interpretations provided by claim reviews.

  Beyond [[ClaimReview]], the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]] or [[Question]] might be [[about]] some [[Claim]].

  At this time, Schema.org does not define any types of relationship between claims. This is a natural area for future exploration.

*/
type Claim interface {
	// Parents
	CreativeWork
	// Accessors
	Appearance() []CreativeWork                    // Indicates an occurence of a [[Claim]] in some [[CreativeWork]].
	ClaimInterpreter() []Organization_Person_Union /*
	For a [[Claim]] interpreted from [[MediaObject]] content
	    sed to indicate a claim contained, implied or refined from the content of a [[MediaObject]].
	*/
	FirstAppearance() []CreativeWork // Indicates the first known occurence of a [[Claim]] in some [[CreativeWork]].
}
type claimStruct struct {
	creativeWorkStruct

	Appearance_       CreativeWorkSlice              `json:"appearance,omitempty"`
	ClaimInterpreter_ Organization_Person_UnionSlice `json:"claimInterpreter,omitempty"`
	FirstAppearance_  CreativeWorkSlice              `json:"firstAppearance,omitempty"`
}

func (s *claimStruct) Appearance() []CreativeWork {
	return s.Appearance_
}
func (s *claimStruct) ClaimInterpreter() []Organization_Person_Union {
	return s.ClaimInterpreter_
}
func (s *claimStruct) FirstAppearance() []CreativeWork {
	return s.FirstAppearance_
}

type ClaimSlice []Claim

func (s *ClaimSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ClaimSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Claim)
	}
	return nil
}

var _ Claim = &claimStruct{}

// A fact-checking review of claims made (or reported) in some creative work (referenced via itemReviewed).
type ClaimReview interface {
	// Parents
	Review
	// Accessors
	ClaimReviewed() []Text // A short summary of the specific claims reviewed in a ClaimReview.
}
type claimReviewStruct struct {
	reviewStruct

	ClaimReviewed_ TextSlice `json:"claimReviewed,omitempty"`
}

func (s *claimReviewStruct) ClaimReviewed() []Text {
	return s.ClaimReviewed_
}

type ClaimReviewSlice []ClaimReview

func (s *ClaimReviewSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ClaimReviewSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ClaimReview)
	}
	return nil
}

var _ ClaimReview = &claimReviewStruct{}

// A class, also often called a 'Type'; equivalent to rdfs:Class.
type Class interface {
	// Parents
	Intangible
	// Unions
	Class_Enumeration_Property_Union
	// Accessors
	SupersededBy() []Class_Enumeration_Property_Union // Relates a term (i.e. a property, class or enumeration) to one that supersedes it.
}
type classStruct struct {
	intangibleStruct

	SupersededBy_ Class_Enumeration_Property_UnionSlice `json:"supersededBy,omitempty"`
}

func (s *classStruct) implementsClass_Enumeration_Property_Union() {}

func (s *classStruct) SupersededBy() []Class_Enumeration_Property_Union {
	return s.SupersededBy_
}

type ClassSlice []Class

func (s *ClassSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ClassSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Class)
	}
	return nil
}

var _ Class = &classStruct{}

// A short TV or radio program or a segment/part of a program.
type Clip interface {
	// Parents
	CreativeWork
	// Unions
	AudioObject_Clip_MusicRecording_Union
	Clip_VideoObject_Union
	// Accessors
	Actor() []Person                           // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Actors() []Person                          // An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
	ClipNumber() []Integer_Text_Union          // Position of the clip within an ordered group of clips.
	Director() []Person                        // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	Directors() []Person                       // A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
	EndOffset() []HyperTocEntry_Number_Union   // The end time of the clip expressed as the number of seconds from the beginning of the work.
	MusicBy() []MusicGroup_Person_Union        // The composer of the soundtrack.
	PartOfEpisode() []Episode                  // The episode to which this clip belongs.
	PartOfSeason() []CreativeWorkSeason        // The season to which this episode belongs.
	PartOfSeries() []CreativeWorkSeries        // The series to which this episode or season belongs.
	StartOffset() []HyperTocEntry_Number_Union // The start time of the clip expressed as the number of seconds from the beginning of the work.
}
type clipStruct struct {
	creativeWorkStruct

	Actor_         PersonSlice                     `json:"actor,omitempty"`
	Actors_        PersonSlice                     `json:"actors,omitempty"`
	ClipNumber_    Integer_Text_UnionSlice         `json:"clipNumber,omitempty"`
	Director_      PersonSlice                     `json:"director,omitempty"`
	Directors_     PersonSlice                     `json:"directors,omitempty"`
	EndOffset_     HyperTocEntry_Number_UnionSlice `json:"endOffset,omitempty"`
	MusicBy_       MusicGroup_Person_UnionSlice    `json:"musicBy,omitempty"`
	PartOfEpisode_ EpisodeSlice                    `json:"partOfEpisode,omitempty"`
	PartOfSeason_  CreativeWorkSeasonSlice         `json:"partOfSeason,omitempty"`
	PartOfSeries_  CreativeWorkSeriesSlice         `json:"partOfSeries,omitempty"`
	StartOffset_   HyperTocEntry_Number_UnionSlice `json:"startOffset,omitempty"`
}

func (s *clipStruct) implementsAudioObject_Clip_MusicRecording_Union() {}
func (s *clipStruct) implementsClip_VideoObject_Union()                {}

func (s *clipStruct) Actor() []Person {
	return s.Actor_
}
func (s *clipStruct) Actors() []Person {
	return s.Actors_
}
func (s *clipStruct) ClipNumber() []Integer_Text_Union {
	return s.ClipNumber_
}
func (s *clipStruct) Director() []Person {
	return s.Director_
}
func (s *clipStruct) Directors() []Person {
	return s.Directors_
}
func (s *clipStruct) EndOffset() []HyperTocEntry_Number_Union {
	return s.EndOffset_
}
func (s *clipStruct) MusicBy() []MusicGroup_Person_Union {
	return s.MusicBy_
}
func (s *clipStruct) PartOfEpisode() []Episode {
	return s.PartOfEpisode_
}
func (s *clipStruct) PartOfSeason() []CreativeWorkSeason {
	return s.PartOfSeason_
}
func (s *clipStruct) PartOfSeries() []CreativeWorkSeries {
	return s.PartOfSeries_
}
func (s *clipStruct) StartOffset() []HyperTocEntry_Number_Union {
	return s.StartOffset_
}

type ClipSlice []Clip

func (s *ClipSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ClipSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Clip)
	}
	return nil
}

var _ Clip = &clipStruct{}

// A clothing store.
type ClothingStore interface {
	// Parents
	Store
}
type clothingStoreStruct struct {
	storeStruct
}
type ClothingStoreSlice []ClothingStore

func (s *ClothingStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ClothingStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ClothingStore)
	}
	return nil
}

var _ ClothingStore = &clothingStoreStruct{}

// Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts, templates.
type Code interface {
	// Parents
	CreativeWork
}
type codeStruct struct {
	creativeWorkStruct
}
type CodeSlice []Code

func (s *CodeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CodeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Code)
	}
	return nil
}

var _ Code = &codeStruct{}

// A collection of items e.g. creative works or products.
type Collection interface {
	// Parents
	CreativeWork
	// Accessors
	CollectionSize() []Integer //
}
type collectionStruct struct {
	creativeWorkStruct

	CollectionSize_ IntegerSlice `json:"collectionSize,omitempty"`
}

func (s *collectionStruct) CollectionSize() []Integer {
	return s.CollectionSize_
}

type CollectionSlice []Collection

func (s *CollectionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CollectionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Collection)
	}
	return nil
}

var _ Collection = &collectionStruct{}

// Web page type: Collection page.
type CollectionPage interface {
	// Parents
	WebPage
}
type collectionPageStruct struct {
	webPageStruct
}
type CollectionPageSlice []CollectionPage

func (s *CollectionPageSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CollectionPageSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CollectionPage)
	}
	return nil
}

var _ CollectionPage = &collectionPageStruct{}

// A college, university, or other third-level educational institution.
type CollegeOrUniversity interface {
	// Parents
	EducationalOrganization
}
type collegeOrUniversityStruct struct {
	educationalOrganizationStruct
}
type CollegeOrUniversitySlice []CollegeOrUniversity

func (s *CollegeOrUniversitySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CollegeOrUniversitySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CollegeOrUniversity)
	}
	return nil
}

var _ CollegeOrUniversity = &collegeOrUniversityStruct{}

// A comedy club.
type ComedyClub interface {
	// Parents
	EntertainmentBusiness
}
type comedyClubStruct struct {
	entertainmentBusinessStruct
}
type ComedyClubSlice []ComedyClub

func (s *ComedyClubSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ComedyClubSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ComedyClub)
	}
	return nil
}

var _ ComedyClub = &comedyClubStruct{}

// Event type: Comedy event.
type ComedyEvent interface {
	// Parents
	Event
}
type comedyEventStruct struct {
	eventStruct
}
type ComedyEventSlice []ComedyEvent

func (s *ComedyEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ComedyEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ComedyEvent)
	}
	return nil
}

var _ ComedyEvent = &comedyEventStruct{}

// The artwork on the cover of a comic.
type ComicCoverArt interface {
	// Parents
	ComicStory
	CoverArt
}
type comicCoverArtStruct struct {
	comicStoryStruct
	coverArtStruct
}

func (s *comicCoverArtStruct) implementsAboutPage_CreativeWork_Text_URL_Union() {} // re
func (s *comicCoverArtStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
} // re
func (s *comicCoverArtStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
} // re
func (s *comicCoverArtStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {
}                                                                                        // re
func (s *comicCoverArtStruct) implementsCreativeWork_Event_Union()                       {} // re
func (s *comicCoverArtStruct) implementsCreativeWork_HowToSection_HowToStep_Text_Union() {} // re
func (s *comicCoverArtStruct) implementsCreativeWork_ItemList_Text_Union()               {} // re
func (s *comicCoverArtStruct) implementsCreativeWork_Product_URL_Union()                 {} // re
func (s *comicCoverArtStruct) implementsCreativeWork_Text_Union()                        {} // re
func (s *comicCoverArtStruct) implementsCreativeWork_URL_Union()                         {} // re
func (s *comicCoverArtStruct) implementsDataFeedItem_Text_Thing_Union()                  {} // re
func (s *comicCoverArtStruct) implementsListItem_Text_Thing_Union()                      {} // re
func (s *comicCoverArtStruct) implementsText_Thing_URL_Union()                           {} // re
func (s *comicCoverArtStruct) implementsText_Thing_Union()                               {} // re
type ComicCoverArtSlice []ComicCoverArt

func (s *ComicCoverArtSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ComicCoverArtSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ComicCoverArt)
	}
	return nil
}

var _ ComicCoverArt = &comicCoverArtStruct{}

/*
Individual comic issues are serially published as
    	part of a larger series. For the sake of consistency, even one-shot issues
    	belong to a series comprised of a single issue. All comic issues can be
    	uniquely identified by: the combination of the name and volume number of the
    	series to which the issue belongs; the issue number; and the variant
    	description of the issue (if any).
*/
type ComicIssue interface {
	// Parents
	PublicationIssue
	// Accessors
	Artist() []Person /*
	The primary artist for a work
	    	in a medium other than pencils or digital line art--for example, if the
	    	primary artwork is done in watercolors or digital paints.
	*/
	Colorist() []Person   // The individual who adds color to inked drawings.
	Inker() []Person      // The individual who traces over the pencil drawings in ink after pencils are complete.
	Letterer() []Person   // The individual who adds lettering, including speech balloons and sound effects, to artwork.
	Penciler() []Person   // The individual who draws the primary narrative artwork.
	VariantCover() []Text /*
	A description of the variant cover
	    	for the issue, if the issue is a variant printing. For example, "Bryan Hitch
	    	Variant Cover" or "2nd Printing Variant".
	*/
}
type comicIssueStruct struct {
	publicationIssueStruct

	Artist_       PersonSlice `json:"artist,omitempty"`
	Colorist_     PersonSlice `json:"colorist,omitempty"`
	Inker_        PersonSlice `json:"inker,omitempty"`
	Letterer_     PersonSlice `json:"letterer,omitempty"`
	Penciler_     PersonSlice `json:"penciler,omitempty"`
	VariantCover_ TextSlice   `json:"variantCover,omitempty"`
}

func (s *comicIssueStruct) Artist() []Person {
	return s.Artist_
}
func (s *comicIssueStruct) Colorist() []Person {
	return s.Colorist_
}
func (s *comicIssueStruct) Inker() []Person {
	return s.Inker_
}
func (s *comicIssueStruct) Letterer() []Person {
	return s.Letterer_
}
func (s *comicIssueStruct) Penciler() []Person {
	return s.Penciler_
}
func (s *comicIssueStruct) VariantCover() []Text {
	return s.VariantCover_
}

type ComicIssueSlice []ComicIssue

func (s *ComicIssueSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ComicIssueSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ComicIssue)
	}
	return nil
}

var _ ComicIssue = &comicIssueStruct{}

/*
A sequential publication of comic stories under a
    	unifying title, for example "The Amazing Spider-Man" or "Groo the
    	Wanderer".
*/
type ComicSeries interface {
	// Parents
	Periodical
}
type comicSeriesStruct struct {
	periodicalStruct
}
type ComicSeriesSlice []ComicSeries

func (s *ComicSeriesSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ComicSeriesSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ComicSeries)
	}
	return nil
}

var _ ComicSeries = &comicSeriesStruct{}

/*
The term "story" is any indivisible, re-printable
    	unit of a comic, including the interior stories, covers, and backmatter. Most
    	comics have at least two stories: a cover (ComicCoverArt) and an interior story.
*/
type ComicStory interface {
	// Parents
	CreativeWork
	// Accessors
	Artist() []Person /*
	The primary artist for a work
	    	in a medium other than pencils or digital line art--for example, if the
	    	primary artwork is done in watercolors or digital paints.
	*/
	Colorist() []Person // The individual who adds color to inked drawings.
	Inker() []Person    // The individual who traces over the pencil drawings in ink after pencils are complete.
	Letterer() []Person // The individual who adds lettering, including speech balloons and sound effects, to artwork.
	Penciler() []Person // The individual who draws the primary narrative artwork.
}
type comicStoryStruct struct {
	creativeWorkStruct

	Artist_   PersonSlice `json:"artist,omitempty"`
	Colorist_ PersonSlice `json:"colorist,omitempty"`
	Inker_    PersonSlice `json:"inker,omitempty"`
	Letterer_ PersonSlice `json:"letterer,omitempty"`
	Penciler_ PersonSlice `json:"penciler,omitempty"`
}

func (s *comicStoryStruct) Artist() []Person {
	return s.Artist_
}
func (s *comicStoryStruct) Colorist() []Person {
	return s.Colorist_
}
func (s *comicStoryStruct) Inker() []Person {
	return s.Inker_
}
func (s *comicStoryStruct) Letterer() []Person {
	return s.Letterer_
}
func (s *comicStoryStruct) Penciler() []Person {
	return s.Penciler_
}

type ComicStorySlice []ComicStory

func (s *ComicStorySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ComicStorySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ComicStory)
	}
	return nil
}

var _ ComicStory = &comicStoryStruct{}

// A comment on an item - for example, a comment on a blog post. The comment's content is expressed via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.
type Comment interface {
	// Parents
	CreativeWork
	// Unions
	Comment_WebContent_Union
	// Accessors
	DownvoteCount() []Integer // The number of downvotes this question, answer or comment has received from the community.
	ParentItem() []Comment    // The parent of a question, answer or item in general.
	UpvoteCount() []Integer   // The number of upvotes this question, answer or comment has received from the community.
}
type commentStruct struct {
	creativeWorkStruct

	DownvoteCount_ IntegerSlice `json:"downvoteCount,omitempty"`
	ParentItem_    CommentSlice `json:"parentItem,omitempty"`
	UpvoteCount_   IntegerSlice `json:"upvoteCount,omitempty"`
}

func (s *commentStruct) implementsComment_WebContent_Union() {}

func (s *commentStruct) DownvoteCount() []Integer {
	return s.DownvoteCount_
}
func (s *commentStruct) ParentItem() []Comment {
	return s.ParentItem_
}
func (s *commentStruct) UpvoteCount() []Integer {
	return s.UpvoteCount_
}

type CommentSlice []Comment

func (s *CommentSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CommentSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Comment)
	}
	return nil
}

var _ Comment = &commentStruct{}

// The act of generating a comment about a subject.
type CommentAction interface {
	// Parents
	CommunicateAction
	// Accessors
	ResultComment() []Comment // A sub property of result. The Comment created or sent as a result of this action.
}
type commentActionStruct struct {
	communicateActionStruct

	ResultComment_ CommentSlice `json:"resultComment,omitempty"`
}

func (s *commentActionStruct) ResultComment() []Comment {
	return s.ResultComment_
}

type CommentActionSlice []CommentAction

func (s *CommentActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CommentActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CommentAction)
	}
	return nil
}

var _ CommentAction = &commentActionStruct{}

// The act of conveying information to another person via a communication medium (instrument) such as speech, email, or telephone conversation.
type CommunicateAction interface {
	// Parents
	InteractAction
	// Accessors
	About() []Thing                                               // The subject matter of the content.
	InLanguage() []Language_Text_Union                            // The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
	Language() []Language                                         // A sub property of instrument. The language used on this action.
	Recipient() []Audience_ContactPoint_Organization_Person_Union // A sub property of participant. The participant who is at the receiving end of the action.
}
type communicateActionStruct struct {
	interactActionStruct

	About_      ThingSlice                                           `json:"about,omitempty"`
	InLanguage_ Language_Text_UnionSlice                             `json:"inLanguage,omitempty"`
	Language_   LanguageSlice                                        `json:"language,omitempty"`
	Recipient_  Audience_ContactPoint_Organization_Person_UnionSlice `json:"recipient,omitempty"`
}

func (s *communicateActionStruct) About() []Thing {
	return s.About_
}
func (s *communicateActionStruct) InLanguage() []Language_Text_Union {
	return s.InLanguage_
}
func (s *communicateActionStruct) Language() []Language {
	return s.Language_
}
func (s *communicateActionStruct) Recipient() []Audience_ContactPoint_Organization_Person_Union {
	return s.Recipient_
}

type CommunicateActionSlice []CommunicateAction

func (s *CommunicateActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CommunicateActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CommunicateAction)
	}
	return nil
}

var _ CommunicateAction = &communicateActionStruct{}

/*
A [[CompleteDataFeed]] is a [[DataFeed]] whose standard representation includes content for every item currently in the feed.

This is the equivalent of Atom's element as defined in Feed Paging and Archiving [RFC 5005](https://tools.ietf.org/html/rfc5005), For example (and as defined for Atom), when using data from a feed that represents a collection of items that varies over time (e.g. "Top Twenty Records") there is no need to have newer entries mixed in alongside older, obsolete entries. By marking this feed as a CompleteDataFeed, old entries can be safely discarded when the feed is refreshed, since we can assume the feed has provided descriptions for all current items.
*/
type CompleteDataFeed interface {
	// Parents
	DataFeed
}
type completeDataFeedStruct struct {
	dataFeedStruct
}
type CompleteDataFeedSlice []CompleteDataFeed

func (s *CompleteDataFeedSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CompleteDataFeedSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CompleteDataFeed)
	}
	return nil
}

var _ CompleteDataFeed = &completeDataFeedStruct{}

// A compound price specification is one that bundles multiple prices that all apply in combination for different dimensions of consumption. Use the name property of the attached unit price specification for indicating the dimension of a price component (e.g. "electricity" or "final cleaning").
type CompoundPriceSpecification interface {
	// Parents
	PriceSpecification
	// Accessors
	PriceComponent() []UnitPriceSpecification     // This property links to all [[UnitPriceSpecification]] nodes that apply in parallel for the [[CompoundPriceSpecification]] node.
	PriceType() []PriceTypeEnumeration_Text_Union // Defines the type of a price specified for an offered product, for example a list price, a (temporary) sale price or a manufacturer suggested retail price. If multiple prices are specified for an offer the [[priceType]] property can be used to identify the type of each such specified price. The value of priceType can be specified as a value from enumeration PriceTypeEnumeration or as a free form text string for price types that are not already predefined in PriceTypeEnumeration.
}
type compoundPriceSpecificationStruct struct {
	priceSpecificationStruct

	PriceComponent_ UnitPriceSpecificationSlice          `json:"priceComponent,omitempty"`
	PriceType_      PriceTypeEnumeration_Text_UnionSlice `json:"priceType,omitempty"`
}

func (s *compoundPriceSpecificationStruct) PriceComponent() []UnitPriceSpecification {
	return s.PriceComponent_
}
func (s *compoundPriceSpecificationStruct) PriceType() []PriceTypeEnumeration_Text_Union {
	return s.PriceType_
}

type CompoundPriceSpecificationSlice []CompoundPriceSpecification

func (s *CompoundPriceSpecificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CompoundPriceSpecificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CompoundPriceSpecification)
	}
	return nil
}

var _ CompoundPriceSpecification = &compoundPriceSpecificationStruct{}

// This type covers computer programming languages such as Scheme and Lisp, as well as other language-like computer representations. Natural languages are best represented with the [[Language]] type.
type ComputerLanguage interface {
	// Parents
	Intangible
	// Unions
	ComputerLanguage_Text_Union
}
type computerLanguageStruct struct {
	intangibleStruct
}

func (s *computerLanguageStruct) implementsComputerLanguage_Text_Union() {}

type ComputerLanguageSlice []ComputerLanguage

func (s *ComputerLanguageSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ComputerLanguageSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ComputerLanguage)
	}
	return nil
}

var _ ComputerLanguage = &computerLanguageStruct{}

// A computer store.
type ComputerStore interface {
	// Parents
	Store
}
type computerStoreStruct struct {
	storeStruct
}
type ComputerStoreSlice []ComputerStore

func (s *ComputerStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ComputerStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ComputerStore)
	}
	return nil
}

var _ ComputerStore = &computerStoreStruct{}

// The act of notifying someone that a future event/action is going to happen as expected.\n\nRelated actions:\n\n* [[CancelAction]]: The antonym of ConfirmAction.
type ConfirmAction interface {
	// Parents
	InformAction
}
type confirmActionStruct struct {
	informActionStruct
}
type ConfirmActionSlice []ConfirmAction

func (s *ConfirmActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ConfirmActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ConfirmAction)
	}
	return nil
}

var _ ConfirmAction = &confirmActionStruct{}

// A Consortium is a membership [[Organization]] whose members are typically Organizations.
type Consortium interface {
	// Parents
	Organization
}
type consortiumStruct struct {
	organizationStruct
}
type ConsortiumSlice []Consortium

func (s *ConsortiumSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ConsortiumSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Consortium)
	}
	return nil
}

var _ Consortium = &consortiumStruct{}

// The act of ingesting information/resources/food.
type ConsumeAction interface {
	// Parents
	Action
	// Accessors
	ActionAccessibilityRequirement() []ActionAccessSpecification // A set of requirements that a must be fulfilled in order to perform an Action. If more than one value is specied, fulfilling one set of requirements will allow the Action to be performed.
	ExpectsAcceptanceOf() []Offer                                // An Offer which must be accepted before the user can perform the Action. For example, the user may need to buy a movie before being able to watch it.
}
type consumeActionStruct struct {
	actionStruct

	ActionAccessibilityRequirement_ ActionAccessSpecificationSlice `json:"actionAccessibilityRequirement,omitempty"`
	ExpectsAcceptanceOf_            OfferSlice                     `json:"expectsAcceptanceOf,omitempty"`
}

func (s *consumeActionStruct) ActionAccessibilityRequirement() []ActionAccessSpecification {
	return s.ActionAccessibilityRequirement_
}
func (s *consumeActionStruct) ExpectsAcceptanceOf() []Offer {
	return s.ExpectsAcceptanceOf_
}

type ConsumeActionSlice []ConsumeAction

func (s *ConsumeActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ConsumeActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ConsumeAction)
	}
	return nil
}

var _ ConsumeAction = &consumeActionStruct{}

// Web page type: Contact page.
type ContactPage interface {
	// Parents
	WebPage
}
type contactPageStruct struct {
	webPageStruct
}
type ContactPageSlice []ContactPage

func (s *ContactPageSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ContactPageSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ContactPage)
	}
	return nil
}

var _ ContactPage = &contactPageStruct{}

// A contact point&#x2014;for example, a Customer Complaints department.
type ContactPoint interface {
	// Parents
	StructuredValue
	// Unions
	Audience_ContactPoint_Organization_Person_Union
	ContactPoint_Organization_Person_Union
	ContactPoint_Place_Union
	// Accessors
	AreaServed() []AdministrativeArea_GeoShape_Place_Text_Union // The geographic area where a service or offered item is provided.
	AvailableLanguage() []Language_Text_Union                   // A language someone may use with or at the item, service or place. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[inLanguage]]
	ContactOption() []ContactPointOption                        // An option available on this contact point (e.g. a toll-free number or support for hearing-impaired callers).
	ContactType() []Text                                        // A person or organization can have different contact points, for different purposes. For example, a sales contact point, a PR contact point and so on. This property is used to specify the kind of contact point.
	Email() []Text                                              // Email address.
	FaxNumber() []Text                                          // The fax number.
	HoursAvailable() []OpeningHoursSpecification                // The hours during which this service or contact is available.
	ProductSupported() []Product_Text_Union                     // The product or service this support contact point is related to (such as product support for a particular product line). This can be a specific product or product line (e.g. "iPhone") or a general category of products or services (e.g. "smartphones").
	ServiceArea() []AdministrativeArea_GeoShape_Place_Union     // The geographic area where the service is provided.
	Telephone() []Text                                          // The telephone number.
}
type contactPointStruct struct {
	structuredValueStruct

	AreaServed_        AdministrativeArea_GeoShape_Place_Text_UnionSlice `json:"areaServed,omitempty"`
	AvailableLanguage_ Language_Text_UnionSlice                          `json:"availableLanguage,omitempty"`
	ContactOption_     ContactPointOptionSlice                           `json:"contactOption,omitempty"`
	ContactType_       TextSlice                                         `json:"contactType,omitempty"`
	Email_             TextSlice                                         `json:"email,omitempty"`
	FaxNumber_         TextSlice                                         `json:"faxNumber,omitempty"`
	HoursAvailable_    OpeningHoursSpecificationSlice                    `json:"hoursAvailable,omitempty"`
	ProductSupported_  Product_Text_UnionSlice                           `json:"productSupported,omitempty"`
	ServiceArea_       AdministrativeArea_GeoShape_Place_UnionSlice      `json:"serviceArea,omitempty"`
	Telephone_         TextSlice                                         `json:"telephone,omitempty"`
}

func (s *contactPointStruct) implementsAudience_ContactPoint_Organization_Person_Union() {}
func (s *contactPointStruct) implementsContactPoint_Organization_Person_Union()          {}
func (s *contactPointStruct) implementsContactPoint_Place_Union()                        {}

func (s *contactPointStruct) AreaServed() []AdministrativeArea_GeoShape_Place_Text_Union {
	return s.AreaServed_
}
func (s *contactPointStruct) AvailableLanguage() []Language_Text_Union {
	return s.AvailableLanguage_
}
func (s *contactPointStruct) ContactOption() []ContactPointOption {
	return s.ContactOption_
}
func (s *contactPointStruct) ContactType() []Text {
	return s.ContactType_
}
func (s *contactPointStruct) Email() []Text {
	return s.Email_
}
func (s *contactPointStruct) FaxNumber() []Text {
	return s.FaxNumber_
}
func (s *contactPointStruct) HoursAvailable() []OpeningHoursSpecification {
	return s.HoursAvailable_
}
func (s *contactPointStruct) ProductSupported() []Product_Text_Union {
	return s.ProductSupported_
}
func (s *contactPointStruct) ServiceArea() []AdministrativeArea_GeoShape_Place_Union {
	return s.ServiceArea_
}
func (s *contactPointStruct) Telephone() []Text {
	return s.Telephone_
}

type ContactPointSlice []ContactPoint

func (s *ContactPointSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ContactPointSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ContactPoint)
	}
	return nil
}

var _ ContactPoint = &contactPointStruct{}

// Enumerated options related to a ContactPoint.
type ContactPointOption interface {
	// Parents
	Enumeration
}
type contactPointOptionStruct struct {
	enumerationStruct
}
type ContactPointOptionSlice []ContactPointOption

func (s *ContactPointOptionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ContactPointOptionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ContactPointOption)
	}
	return nil
}

var _ ContactPointOption = &contactPointOptionStruct{}

// One of the continents (for example, Europe or Africa).
type Continent interface {
	// Parents
	Landform
}
type continentStruct struct {
	landformStruct
}
type ContinentSlice []Continent

func (s *ContinentSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ContinentSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Continent)
	}
	return nil
}

var _ Continent = &continentStruct{}

// An agent controls a device or application.
type ControlAction interface {
	// Parents
	Action
}
type controlActionStruct struct {
	actionStruct
}
type ControlActionSlice []ControlAction

func (s *ControlActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ControlActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ControlAction)
	}
	return nil
}

var _ ControlAction = &controlActionStruct{}

// A convenience store.
type ConvenienceStore interface {
	// Parents
	Store
}
type convenienceStoreStruct struct {
	storeStruct
}
type ConvenienceStoreSlice []ConvenienceStore

func (s *ConvenienceStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ConvenienceStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ConvenienceStore)
	}
	return nil
}

var _ ConvenienceStore = &convenienceStoreStruct{}

// One or more messages between organizations or people on a particular topic. Individual messages can be linked to the conversation with isPartOf or hasPart properties.
type Conversation interface {
	// Parents
	CreativeWork
}
type conversationStruct struct {
	creativeWorkStruct
}
type ConversationSlice []Conversation

func (s *ConversationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ConversationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Conversation)
	}
	return nil
}

var _ Conversation = &conversationStruct{}

// The act of producing/preparing food.
type CookAction interface {
	// Parents
	CreateAction
	// Accessors
	FoodEstablishment() []FoodEstablishment_Place_Union // A sub property of location. The specific food establishment where the action occurred.
	FoodEvent() []FoodEvent                             // A sub property of location. The specific food event where the action occurred.
	Recipe() []Recipe                                   // A sub property of instrument. The recipe/instructions used to perform the action.
}
type cookActionStruct struct {
	createActionStruct

	FoodEstablishment_ FoodEstablishment_Place_UnionSlice `json:"foodEstablishment,omitempty"`
	FoodEvent_         FoodEventSlice                     `json:"foodEvent,omitempty"`
	Recipe_            RecipeSlice                        `json:"recipe,omitempty"`
}

func (s *cookActionStruct) FoodEstablishment() []FoodEstablishment_Place_Union {
	return s.FoodEstablishment_
}
func (s *cookActionStruct) FoodEvent() []FoodEvent {
	return s.FoodEvent_
}
func (s *cookActionStruct) Recipe() []Recipe {
	return s.Recipe_
}

type CookActionSlice []CookAction

func (s *CookActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CookActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CookAction)
	}
	return nil
}

var _ CookAction = &cookActionStruct{}

// Organization: A business corporation.
type Corporation interface {
	// Parents
	Organization
	// Accessors
	TickerSymbol() []Text // The exchange traded instrument associated with a Corporation object. The tickerSymbol is expressed as an exchange and an instrument name separated by a space character. For the exchange component of the tickerSymbol attribute, we recommend using the controlled vocabulary of Market Identifier Codes (MIC) specified in ISO15022.
}
type corporationStruct struct {
	organizationStruct

	TickerSymbol_ TextSlice `json:"tickerSymbol,omitempty"`
}

func (s *corporationStruct) TickerSymbol() []Text {
	return s.TickerSymbol_
}

type CorporationSlice []Corporation

func (s *CorporationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CorporationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Corporation)
	}
	return nil
}

var _ Corporation = &corporationStruct{}

// A [[comment]] that corrects [[CreativeWork]].
type CorrectionComment interface {
	// Parents
	Comment
	// Unions
	CorrectionComment_Text_URL_Union
}
type correctionCommentStruct struct {
	commentStruct
}

func (s *correctionCommentStruct) implementsCorrectionComment_Text_URL_Union() {}

type CorrectionCommentSlice []CorrectionComment

func (s *CorrectionCommentSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CorrectionCommentSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CorrectionComment)
	}
	return nil
}

var _ CorrectionComment = &correctionCommentStruct{}

// A country.
type Country interface {
	// Parents
	AdministrativeArea
	// Unions
	Country_Text_Union
}
type countryStruct struct {
	administrativeAreaStruct
}

func (s *countryStruct) implementsCountry_Text_Union() {}

type CountrySlice []Country

func (s *CountrySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CountrySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Country)
	}
	return nil
}

var _ Country = &countryStruct{}

// A description of an educational course which may be offered as distinct instances at which take place at different times or take place at different locations, or be offered through different media or modes of study. An educational course is a sequence of one or more educational events and/or creative works which aims to build knowledge, competence or ability of learners.
type Course interface {
	// Parents
	CreativeWork
	LearningResource
	// Unions
	AlignmentObject_Course_EducationalOccupationalCredential_Text_Union
	AlignmentObject_Course_Text_Union
	// Accessors
	CourseCode() []Text                                                                // The identifier for the [[Course]] used by the course [[provider]] (e.g. CS101 or 6.001).
	CoursePrerequisites() []AlignmentObject_Course_Text_Union                          // Requirements for taking the Course. May be completion of another [[Course]] or a textual description like "permission of instructor". Requirements may be a pre-requisite competency, referenced using [[AlignmentObject]].
	EducationalCredentialAwarded() []EducationalOccupationalCredential_Text_URL_Union  // A description of the qualification, award, certificate, diploma or other educational credential awarded as a consequence of successful completion of this course or program.
	HasCourseInstance() []CourseInstance                                               // An offering of the course at a specific time and place or through specific media or mode of study or to a specific section of students.
	NumberOfCredits() []Integer_StructuredValue_Union                                  // The number of credits or units awarded by a Course or required to complete an EducationalOccupationalProgram.
	OccupationalCredentialAwarded() []EducationalOccupationalCredential_Text_URL_Union // A description of the qualification, award, certificate, diploma or other occupational credential awarded as a consequence of successful completion of this course or program.
}
type courseStruct struct {
	creativeWorkStruct
	learningResourceStruct_

	CourseCode_                    TextSlice                                             `json:"courseCode,omitempty"`
	CoursePrerequisites_           AlignmentObject_Course_Text_UnionSlice                `json:"coursePrerequisites,omitempty"`
	EducationalCredentialAwarded_  EducationalOccupationalCredential_Text_URL_UnionSlice `json:"educationalCredentialAwarded,omitempty"`
	HasCourseInstance_             CourseInstanceSlice                                   `json:"hasCourseInstance,omitempty"`
	NumberOfCredits_               Integer_StructuredValue_UnionSlice                    `json:"numberOfCredits,omitempty"`
	OccupationalCredentialAwarded_ EducationalOccupationalCredential_Text_URL_UnionSlice `json:"occupationalCredentialAwarded,omitempty"`
}

func (s *courseStruct) implementsAlignmentObject_Course_EducationalOccupationalCredential_Text_Union() {
}
func (s *courseStruct) implementsAlignmentObject_Course_Text_Union() {}

func (s *courseStruct) implementsAboutPage_CreativeWork_Text_URL_Union() {} // re
func (s *courseStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
} // re
func (s *courseStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}                                                                                             // re
func (s *courseStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *courseStruct) implementsCreativeWork_Event_Union()                                   {} // re
func (s *courseStruct) implementsCreativeWork_HowToSection_HowToStep_Text_Union()             {} // re
func (s *courseStruct) implementsCreativeWork_ItemList_Text_Union()                           {} // re
func (s *courseStruct) implementsCreativeWork_Product_URL_Union()                             {} // re
func (s *courseStruct) implementsCreativeWork_Text_Union()                                    {} // re
func (s *courseStruct) implementsCreativeWork_URL_Union()                                     {} // re
func (s *courseStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *courseStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *courseStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *courseStruct) implementsText_Thing_Union()                                           {} // re
func (s *courseStruct) CourseCode() []Text {
	return s.CourseCode_
}
func (s *courseStruct) CoursePrerequisites() []AlignmentObject_Course_Text_Union {
	return s.CoursePrerequisites_
}
func (s *courseStruct) EducationalCredentialAwarded() []EducationalOccupationalCredential_Text_URL_Union {
	return s.EducationalCredentialAwarded_
}
func (s *courseStruct) HasCourseInstance() []CourseInstance {
	return s.HasCourseInstance_
}
func (s *courseStruct) NumberOfCredits() []Integer_StructuredValue_Union {
	return s.NumberOfCredits_
}
func (s *courseStruct) OccupationalCredentialAwarded() []EducationalOccupationalCredential_Text_URL_Union {
	return s.OccupationalCredentialAwarded_
}

type CourseSlice []Course

func (s *CourseSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CourseSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Course)
	}
	return nil
}

var _ Course = &courseStruct{}

// An instance of a [[Course]] which is distinct from other instances because it is offered at a different time or location or through different media or modes of study or to a specific section of students.
type CourseInstance interface {
	// Parents
	Event
	// Accessors
	CourseMode() []Text_URL_Union // The medium or means of delivery of the course instance or the mode of study, either as a text label (e.g. "online", "onsite" or "blended"; "synchronous" or "asynchronous"; "full-time" or "part-time") or as a URL reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous ).
	CourseWorkload() []Text       // The amount of work expected of students taking the course, often provided as a figure per week or per month, and may be broken down by type. For example, "2 hours of lectures, 1 hour of lab work and 3 hours of independent study per week".
	Instructor() []Person         // A person assigned to instruct or provide instructional assistance for the [[CourseInstance]].
}
type courseInstanceStruct struct {
	eventStruct

	CourseMode_     Text_URL_UnionSlice `json:"courseMode,omitempty"`
	CourseWorkload_ TextSlice           `json:"courseWorkload,omitempty"`
	Instructor_     PersonSlice         `json:"instructor,omitempty"`
}

func (s *courseInstanceStruct) CourseMode() []Text_URL_Union {
	return s.CourseMode_
}
func (s *courseInstanceStruct) CourseWorkload() []Text {
	return s.CourseWorkload_
}
func (s *courseInstanceStruct) Instructor() []Person {
	return s.Instructor_
}

type CourseInstanceSlice []CourseInstance

func (s *CourseInstanceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CourseInstanceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CourseInstance)
	}
	return nil
}

var _ CourseInstance = &courseInstanceStruct{}

// A courthouse.
type Courthouse interface {
	// Parents
	GovernmentBuilding
}
type courthouseStruct struct {
	governmentBuildingStruct
}
type CourthouseSlice []Courthouse

func (s *CourthouseSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CourthouseSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Courthouse)
	}
	return nil
}

var _ Courthouse = &courthouseStruct{}

// The artwork on the outer surface of a CreativeWork.
type CoverArt interface {
	// Parents
	VisualArtwork
}
type coverArtStruct struct {
	visualArtworkStruct
}
type CoverArtSlice []CoverArt

func (s *CoverArtSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CoverArtSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CoverArt)
	}
	return nil
}

var _ CoverArt = &coverArtStruct{}

/*
A CovidTestingFacility is a [[MedicalClinic]] where testing for the COVID-19 Coronavirus
      disease is available. If the facility is being made available from an established [[Pharmacy]], [[Hotel]], or other
      non-medical organization, multiple types can be listed. This makes it easier to re-use existing schema.org information
      about that place e.g. contact info, address, opening hours. Note that in an emergency, such information may not always be reliable.

*/
type CovidTestingFacility interface {
	// Parents
	MedicalClinic
}
type covidTestingFacilityStruct struct {
	medicalClinicStruct
}
type CovidTestingFacilitySlice []CovidTestingFacility

func (s *CovidTestingFacilitySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CovidTestingFacilitySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CovidTestingFacility)
	}
	return nil
}

var _ CovidTestingFacility = &covidTestingFacilityStruct{}

// The act of deliberately creating/producing/generating/building a result out of the agent.
type CreateAction interface {
	// Parents
	Action
}
type createActionStruct struct {
	actionStruct
}
type CreateActionSlice []CreateAction

func (s *CreateActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CreateActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CreateAction)
	}
	return nil
}

var _ CreateAction = &createActionStruct{}

// The most generic kind of creative work, including books, movies, photographs, software programs, etc.
type CreativeWork interface {
	// Parents
	Thing
	// Unions
	AboutPage_CreativeWork_Text_URL_Union
	AggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union
	BioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union
	CreativeWork_Event_Union
	CreativeWork_HowToSection_HowToStep_Text_Union
	CreativeWork_ItemList_Text_Union
	CreativeWork_Product_URL_Union
	CreativeWork_Text_Union
	CreativeWork_URL_Union
	// Accessors
	About() []Thing                                 // The subject matter of the content.
	Abstract() []Text                               // An abstract is a short description that summarizes a [[CreativeWork]].
	AccessMode() []Text                             // The human sensory perceptual system or cognitive faculty through which a person may process or perceive information. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessMode-vocabulary).
	AccessModeSufficient() []ItemList               // A list of single or combined accessModes that are sufficient to understand all the intellectual content of a resource. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessModeSufficient-vocabulary).
	AccessibilityAPI() []Text                       // Indicates that the resource is compatible with the referenced accessibility API. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityAPI-vocabulary).
	AccessibilityControl() []Text                   // Identifies input methods that are sufficient to fully control the described resource. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityControl-vocabulary).
	AccessibilityFeature() []Text                   // Content features of the resource, such as accessible media, alternatives and supported enhancements for accessibility. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityFeature-vocabulary).
	AccessibilityHazard() []Text                    // A characteristic of the described resource that is physiologically dangerous to some users. Related to WCAG 2.0 guideline 2.3. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityHazard-vocabulary).
	AccessibilitySummary() []Text                   // A human-readable summary of specific accessibility features or deficiencies, consistent with the other accessibility metadata but expressing subtleties such as "short descriptions are present but long descriptions will be needed for non-visual users" or "short descriptions are present and no long descriptions are needed."
	AccountablePerson() []Person                    // Specifies the Person that is legally accountable for the CreativeWork.
	AcquireLicensePage() []CreativeWork_URL_Union   // Indicates a page documenting how licenses can be purchased or otherwise acquired, for the current item.
	AggregateRating() []AggregateRating             // The overall rating, based on a collection of reviews or ratings, of the item.
	AlternativeHeadline() []Text                    // A secondary title of the CreativeWork.
	ArchivedAt() []URL_WebPage_Union                // Indicates a page or other link involved in archival of a [[CreativeWork]]. In the case of [[MediaReview]], the items in a [[MediaReviewItem]] may often become inaccessible, but be archived by archival, journalistic, activist, or law enforcement organizations. In such cases, the referenced page may not directly publish the content.
	Assesses() []DefinedTerm_Text_Union             // The item being described is intended to assess the competency or learning outcome defined by the referenced term.
	AssociatedMedia() []MediaObject                 // A media object that encodes this CreativeWork. This property is a synonym for encoding.
	Audience() []Audience                           // An intended audience, i.e. a group for whom something was created.
	Audio() []AudioObject_Clip_MusicRecording_Union // An embedded audio object.
	Author() []Organization_Person_Union            // The author of this content or rating. Please note that author is special in that HTML 5 provides a special mechanism for indicating authorship via the rel tag. That is equivalent to this and may be used interchangeably.
	Award() []Text                                  // An award won by or for this item.
	Awards() []Text                                 // Awards won by or for this item.
	Character() []Person                            // Fictional person connected with a creative work.
	Citation() []CreativeWork_Text_Union            // A citation or reference to another creative work, such as another publication, web page, scholarly article, etc.
	Comment() []Comment                             // Comments, typically from users.
	CommentCount() []Integer                        // The number of comments this CreativeWork (e.g. Article, Question or Answer) has received. This is most applicable to works published in Web sites with commenting system; additional comments may exist elsewhere.
	ConditionsOfAccess() []Text                     // Conditions that affect the availability of, or method(s) of access to, an item. Typically used for real world items such as an [[ArchiveComponent]] held by an [[ArchiveOrganization]]. This property is not suitable for use as a general Web access control mechanism. It is expressed only in natural language.\n\nFor example "Available by appointment from the Reading Room" or "Accessible only from logged-in accounts ".
	ContentLocation() []Place                       // The location depicted or described in the content. For example, the location in a photograph or painting.
	ContentRating() []Rating_Text_Union             // Official rating of a piece of content&#x2014;for example,'MPAA PG-13'.
	ContentReferenceTime() []DateTime               // The specific time described by a creative work, for works (e.g. articles, video objects etc.) that emphasise a particular moment within an Event.
	Contributor() []Organization_Person_Union       // A secondary contributor to the CreativeWork or Event.
	CopyrightHolder() []Organization_Person_Union   // The party holding the legal copyright to the CreativeWork.
	CopyrightNotice() []Text                        // Text of a notice appropriate for describing the copyright aspects of this Creative Work, ideally indicating the owner of the copyright for the Work.
	CopyrightYear() []Number                        // The year during which the claimed copyright for the CreativeWork was first asserted.
	Correction() []CorrectionComment_Text_URL_Union // Indicates a correction to a [[CreativeWork]], either via a [[CorrectionComment]], textually or in another document.
	CountryOfOrigin() []Country                     /*
	The country of origin of something, including products as well as creative  works such as movie and TV content.

	In the case of TV and movie, this would be the country of the principle offices of the production company or individual responsible for the movie. For other kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties such as [[contentLocation]] and [[locationCreated]] may be more applicable.

	In the case of products, the country of origin of the product. The exact interpretation of this may vary by context and product type, and cannot be fully enumerated here.
	*/
	CreativeWorkStatus() []DefinedTerm_Text_Union // The status of a creative work in terms of its stage in a lifecycle. Example terms include Incomplete, Draft, Published, Obsolete. Some organizations define a set of terms for the stages of their publication lifecycle.
	Creator() []Organization_Person_Union         // The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.
	CreditText() []Text                           // Text that can be used to credit person(s) and/or organization(s) associated with a published Creative Work.
	DateCreated() []Date_DateTime_Union           // The date on which the CreativeWork was created or the item was added to a DataFeed.
	DateModified() []Date_DateTime_Union          // The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed.
	DatePublished() []Date_DateTime_Union         // Date of first broadcast/publication.
	DiscussionUrl() []URL                         // A link to the page containing the comments of the CreativeWork.
	EditEIDR() []Text_URL_Union                   /*
	An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]] representing a specific edit / edition for a work of film or television.

	For example, the motion picture known as "Ghostbusters" whose [[titleEIDR]] is "10.5240/7EC7-228A-510A-053E-CBB8-J", has several edits e.g. "10.5240/1F2A-E1C5-680A-14C6-E76B-I" and "10.5240/8A35-3BEE-6497-5D12-9E4F-3".

	Since schema.org types like [[Movie]] and [[TVEpisode]] can be used for both works and their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general description), or alongside [[editEIDR]] for a more edit-specific description.
	*/
	Editor() []Person                        // Specifies the Person who edited the CreativeWork.
	EducationalAlignment() []AlignmentObject /*
	An alignment to an established educational framework.

	This property should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
	*/
	EducationalLevel() []DefinedTerm_Text_URL_Union // The level in terms of progression through an educational or training context. Examples of educational levels include 'beginner', 'intermediate' or 'advanced', and formal sets of level indicators.
	EducationalUse() []DefinedTerm_Text_Union       // The purpose of a work in the context of education; for example, 'assignment', 'group work'.
	Encoding() []MediaObject                        // A media object that encodes this CreativeWork. This property is a synonym for associatedMedia.
	EncodingFormat() []Text_URL_Union               /*
	Media type typically expressed using a MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml) and [MDN reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).

	In cases where a [[CreativeWork]] has several media type representations, [[encoding]] can be used to indicate each [[MediaObject]] alongside particular [[encodingFormat]] information.

	Unregistered or niche encoding and file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.
	*/
	Encodings() []MediaObject                       // A media object that encodes this CreativeWork.
	ExampleOfWork() []CreativeWork                  // A creative work that this work is an example/instance/realization/derivation of.
	Expires() []Date                                // Date the content expires and is no longer useful or available. For example a [[VideoObject]] or [[NewsArticle]] whose availability or relevance is time-limited, or a [[ClaimReview]] fact check whose publisher wants to indicate that it may no longer be relevant (or helpful to highlight) after some date.
	FileFormat() []Text_URL_Union                   // Media type, typically MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml)) of the content e.g. application/zip of a SoftwareApplication binary. In cases where a CreativeWork has several media type representations, 'encoding' can be used to indicate each MediaObject alongside particular fileFormat information. Unregistered or niche file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia entry.
	Funder() []Organization_Person_Union            // A person or organization that supports (sponsors) something through some kind of financial contribution.
	Funding() []Grant                               // A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
	Genre() []Text_URL_Union                        // Genre of the creative work, broadcast channel or group.
	HasPart() []CreativeWork                        // Indicates an item or CreativeWork that is part of this item, or CreativeWork (in some sense).
	Headline() []Text                               // Headline of the article.
	InLanguage() []Language_Text_Union              // The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
	InteractionStatistic() []InteractionCounter     // The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used.
	InteractivityType() []Text                      // The predominant mode of learning supported by the learning resource. Acceptable values are 'active', 'expositive', or 'mixed'.
	InterpretedAsClaim() []Claim                    // Used to indicate a specific claim contained, implied, translated or refined from the content of a [[MediaObject]] or other [[CreativeWork]]. The interpreting party can be indicated using [[claimInterpreter]].
	IsAccessibleForFree() []Boolean                 // A flag to signal that the item, event, or place is accessible for free.
	IsBasedOn() []CreativeWork_Product_URL_Union    // A resource from which this work is derived or from which it is a modification or adaption.
	IsBasedOnUrl() []CreativeWork_Product_URL_Union // A resource that was used in the creation of this resource. This term can be repeated for multiple sources. For example, http://example.com/great-multiplication-intro.html.
	IsFamilyFriendly() []Boolean                    // Indicates whether this content is family friendly.
	IsPartOf() []CreativeWork_URL_Union             // Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is part of.
	Keywords() []DefinedTerm_Text_URL_Union         // Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
	LearningResourceType() []DefinedTerm_Text_Union // The predominant type or kind characterizing the learning resource. For example, 'presentation', 'handout'.
	License() []CreativeWork_URL_Union              // A license document that applies to this content, typically indicated by URL.
	LocationCreated() []Place                       // The location where the CreativeWork was created, which may not be the same as the location depicted in the CreativeWork.
	MainEntity() []Thing                            // Indicates the primary entity described in some page or other CreativeWork.
	Maintainer() []Organization_Person_Union        /*
	A maintainer of a [[Dataset]], software package ([[SoftwareApplication]]), or other [[Project]]. A maintainer is a [[Person]] or [[Organization]] that manages contributions to, and/or publication of, some (typically complex) artifact. It is common for distributions of software and data to be based on "upstream" sources. When [[maintainer]] is applied to a specific version of something e.g. a particular version or packaging of a [[Dataset]], it is always  possible that the upstream source has a different maintainer. The [[isBasedOn]] property can be used to indicate such relationships between datasets to make the different maintenance roles clear. Similarly in the case of software, a package may have dedicated maintainers working on integration into software distributions such as Ubuntu, as well as upstream maintainers of the underlying work.

	*/
	Material() []Product_Text_URL_Union             // A material that something is made from, e.g. leather, wool, cotton, paper.
	MaterialExtent() []QuantitativeValue_Text_Union //
	Mentions() []Thing                              // Indicates that the CreativeWork contains a reference to, but is not necessarily about a concept.
	Offers() []Demand_Offer_Union                   /*
	An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.

	*/
	Pattern() []DefinedTerm_Text_Union              // A pattern that something has, for example 'polka dot', 'striped', 'Canadian flag'. Values are typically expressed as text, although links to controlled value schemes are also supported.
	Position() []Integer_Text_Union                 // The position of an item in a series or sequence of items.
	Producer() []Organization_Person_Union          // The person or organization who produced the work (e.g. music album, movie, tv/radio series etc.).
	Provider() []Organization_Person_Union          // The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
	Publication() []PublicationEvent                // A publication event associated with the item.
	Publisher() []Organization_Person_Union         // The publisher of the creative work.
	PublisherImprint() []Organization               // The publishing division which published the comic.
	PublishingPrinciples() []CreativeWork_URL_Union /*
	The publishingPrinciples property indicates (typically via [[URL]]) a document describing the editorial principles of an [[Organization]] (or individual e.g. a [[Person]] writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a [[CreativeWork]] (e.g. [[NewsArticle]]) the principles are those of the party primarily responsible for the creation of the [[CreativeWork]].

	While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a [[funder]]) can be expressed using schema.org terminology.
	*/
	RecordedAt() []Event               // The Event where the CreativeWork was recorded. The CreativeWork may capture all or part of the event.
	ReleasedEvent() []PublicationEvent // The place and time the release was issued, expressed as a PublicationEvent.
	Review() []Review                  // A review of the item.
	Reviews() []Review                 // Review of the item.
	SchemaVersion() []Text_URL_Union   /*
	Indicates (by URL or string) a particular version of a schema used in some CreativeWork. This property was created primarily to
	    indicate the use of a specific schema.org release, e.g. ```10.0``` as a simple string, or more explicitly via URL, ```https://schema.org/docs/releases.html#v10.0```. There may be situations in which other schemas might usefully be referenced this way, e.g. ```http://dublincore.org/specifications/dublin-core/dces/1999-07-02/``` but this has not been carefully explored in the community.
	*/
	SdDatePublished() []Date                  // Indicates the date on which the current structured data was generated / published. Typically used alongside [[sdPublisher]]
	SdLicense() []CreativeWork_URL_Union      // A license document that applies to this structured data, typically indicated by URL.
	SdPublisher() []Organization_Person_Union /*
	Indicates the party responsible for generating and publishing the current structured data markup, typically in cases where the structured data is derived automatically from existing published content but published on a different site. For example, student projects and open data initiatives often re-publish existing content with more explicitly structured metadata. The
	[[sdPublisher]] property helps make such practices more explicit.
	*/
	Size() []DefinedTerm_QuantitativeValue_SizeSpecification_Text_Union // A standardized size of a product or creative work, specified either through a simple textual string (for example 'XL', '32Wx34L'), a  QuantitativeValue with a unitCode, or a comprehensive and structured [[SizeSpecification]]; in other cases, the [[width]], [[height]], [[depth]] and [[weight]] properties may be more applicable.
	SourceOrganization() []Organization                                 // The Organization on whose behalf the creator was working.
	Spatial() []Place                                                   /*
	The "spatial" property can be used in cases when more specific properties
	(e.g. [[locationCreated]], [[spatialCoverage]], [[contentLocation]]) are not known to be appropriate.
	*/
	SpatialCoverage() []Place /*
	The spatialCoverage of a CreativeWork indicates the place(s) which are the focus of the content. It is a subproperty of
	      contentLocation intended primarily for more technical and detailed materials. For example with a Dataset, it indicates
	      areas that the dataset describes: a dataset of New York weather would have spatialCoverage which was the place: the state of New York.
	*/
	Sponsor() []Organization_Person_Union // A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
	Teaches() []DefinedTerm_Text_Union    // The item being described is intended to help a person learn the competency or learning outcome defined by the referenced term.
	Temporal() []DateTime_Text_Union      /*
	The "temporal" property can be used in cases where more specific properties
	(e.g. [[temporalCoverage]], [[dateCreated]], [[dateModified]], [[datePublished]]) are not known to be appropriate.
	*/
	TemporalCoverage() []DateTime_Text_URL_Union /*
	The temporalCoverage of a CreativeWork indicates the period that the content applies to, i.e. that it describes, either as a DateTime or as a textual string indicating a time period in [ISO 8601 time interval format](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals). In
	      the case of a Dataset it will typically indicate the relevant time period in a precise notation (e.g. for a 2011 census dataset, the year 2011 would be written "2011/2012"). Other forms of content e.g. ScholarlyArticle, Book, TVSeries or TVEpisode may indicate their temporalCoverage in broader terms - textually or via well-known URL.
	      Written works such as books may sometimes have precise temporal coverage too, e.g. a work set in 1939 - 1945 can be indicated in ISO 8601 interval format format via "1939/1945".

	Open-ended date ranges can be written with ".." in place of the end date. For example, "2015-11/.." indicates a range beginning in November 2015 and with no specified final date. This is tentative and might be updated in future when ISO 8601 is officially updated.
	*/
	Text() []Text                            // The textual content of this CreativeWork.
	ThumbnailUrl() []URL                     // A thumbnail image relevant to the Thing.
	TimeRequired() []Duration                // Approximate or typical time it takes to work with or through this learning resource for the typical intended target audience, e.g. 'PT30M', 'PT1H25M'.
	TranslationOfWork() []CreativeWork       // The work that this work has been translated from. e.g. 物种起源 is a translationOf “On the Origin of Species”
	Translator() []Organization_Person_Union // Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event.
	TypicalAgeRange() []Text                 // The typical expected age range, e.g. '7-9', '11-'.
	UsageInfo() []CreativeWork_URL_Union     /*
	The schema.org [[usageInfo]] property indicates further information about a [[CreativeWork]]. This property is applicable both to works that are freely available and to those that require payment or other transactions. It can reference additional information e.g. community expectations on preferred linking and citation conventions, as well as purchasing details. For something that can be commercially licensed, usageInfo can provide detailed, resource-specific information about licensing options.

	This property can be used alongside the license property which indicates license(s) applicable to some piece of content. The usageInfo property can provide information about other licensing options, e.g. acquiring commercial usage rights for an image that is also available under non-commercial creative commons licenses.
	*/
	Version() []Number_Text_Union    // The version of the CreativeWork embodied by a specified resource.
	Video() []Clip_VideoObject_Union // An embedded video object.
	WorkExample() []CreativeWork     // Example/instance/realization/derivation of the concept of this creative work. eg. The paperback edition, first edition, or eBook.
	WorkTranslation() []CreativeWork // A work that is a translation of the content of this work. e.g. 西遊記 has an English workTranslation “Journey to the West”,a German workTranslation “Monkeys Pilgerfahrt” and a Vietnamese  translation Tây du ký bình khảo.
}
type creativeWorkStruct struct {
	thingStruct

	About_                ThingSlice                                                      `json:"about,omitempty"`
	Abstract_             TextSlice                                                       `json:"abstract,omitempty"`
	AccessMode_           TextSlice                                                       `json:"accessMode,omitempty"`
	AccessModeSufficient_ ItemListSlice                                                   `json:"accessModeSufficient,omitempty"`
	AccessibilityAPI_     TextSlice                                                       `json:"accessibilityAPI,omitempty"`
	AccessibilityControl_ TextSlice                                                       `json:"accessibilityControl,omitempty"`
	AccessibilityFeature_ TextSlice                                                       `json:"accessibilityFeature,omitempty"`
	AccessibilityHazard_  TextSlice                                                       `json:"accessibilityHazard,omitempty"`
	AccessibilitySummary_ TextSlice                                                       `json:"accessibilitySummary,omitempty"`
	AccountablePerson_    PersonSlice                                                     `json:"accountablePerson,omitempty"`
	AcquireLicensePage_   CreativeWork_URL_UnionSlice                                     `json:"acquireLicensePage,omitempty"`
	AggregateRating_      AggregateRatingSlice                                            `json:"aggregateRating,omitempty"`
	AlternativeHeadline_  TextSlice                                                       `json:"alternativeHeadline,omitempty"`
	ArchivedAt_           URL_WebPage_UnionSlice                                          `json:"archivedAt,omitempty"`
	Assesses_             DefinedTerm_Text_UnionSlice                                     `json:"assesses,omitempty"`
	AssociatedMedia_      MediaObjectSlice                                                `json:"associatedMedia,omitempty"`
	Audience_             AudienceSlice                                                   `json:"audience,omitempty"`
	Audio_                AudioObject_Clip_MusicRecording_UnionSlice                      `json:"audio,omitempty"`
	Author_               Organization_Person_UnionSlice                                  `json:"author,omitempty"`
	Award_                TextSlice                                                       `json:"award,omitempty"`
	Awards_               TextSlice                                                       `json:"awards,omitempty"`
	Character_            PersonSlice                                                     `json:"character,omitempty"`
	Citation_             CreativeWork_Text_UnionSlice                                    `json:"citation,omitempty"`
	Comment_              CommentSlice                                                    `json:"comment,omitempty"`
	CommentCount_         IntegerSlice                                                    `json:"commentCount,omitempty"`
	ConditionsOfAccess_   TextSlice                                                       `json:"conditionsOfAccess,omitempty"`
	ContentLocation_      PlaceSlice                                                      `json:"contentLocation,omitempty"`
	ContentRating_        Rating_Text_UnionSlice                                          `json:"contentRating,omitempty"`
	ContentReferenceTime_ DateTimeSlice                                                   `json:"contentReferenceTime,omitempty"`
	Contributor_          Organization_Person_UnionSlice                                  `json:"contributor,omitempty"`
	CopyrightHolder_      Organization_Person_UnionSlice                                  `json:"copyrightHolder,omitempty"`
	CopyrightNotice_      TextSlice                                                       `json:"copyrightNotice,omitempty"`
	CopyrightYear_        NumberSlice                                                     `json:"copyrightYear,omitempty"`
	Correction_           CorrectionComment_Text_URL_UnionSlice                           `json:"correction,omitempty"`
	CountryOfOrigin_      CountrySlice                                                    `json:"countryOfOrigin,omitempty"`
	CreativeWorkStatus_   DefinedTerm_Text_UnionSlice                                     `json:"creativeWorkStatus,omitempty"`
	Creator_              Organization_Person_UnionSlice                                  `json:"creator,omitempty"`
	CreditText_           TextSlice                                                       `json:"creditText,omitempty"`
	DateCreated_          Date_DateTime_UnionSlice                                        `json:"dateCreated,omitempty"`
	DateModified_         Date_DateTime_UnionSlice                                        `json:"dateModified,omitempty"`
	DatePublished_        Date_DateTime_UnionSlice                                        `json:"datePublished,omitempty"`
	DiscussionUrl_        URLSlice                                                        `json:"discussionUrl,omitempty"`
	EditEIDR_             Text_URL_UnionSlice                                             `json:"editEIDR,omitempty"`
	Editor_               PersonSlice                                                     `json:"editor,omitempty"`
	EducationalAlignment_ AlignmentObjectSlice                                            `json:"educationalAlignment,omitempty"`
	EducationalLevel_     DefinedTerm_Text_URL_UnionSlice                                 `json:"educationalLevel,omitempty"`
	EducationalUse_       DefinedTerm_Text_UnionSlice                                     `json:"educationalUse,omitempty"`
	Encoding_             MediaObjectSlice                                                `json:"encoding,omitempty"`
	EncodingFormat_       Text_URL_UnionSlice                                             `json:"encodingFormat,omitempty"`
	Encodings_            MediaObjectSlice                                                `json:"encodings,omitempty"`
	ExampleOfWork_        CreativeWorkSlice                                               `json:"exampleOfWork,omitempty"`
	Expires_              DateSlice                                                       `json:"expires,omitempty"`
	FileFormat_           Text_URL_UnionSlice                                             `json:"fileFormat,omitempty"`
	Funder_               Organization_Person_UnionSlice                                  `json:"funder,omitempty"`
	Funding_              GrantSlice                                                      `json:"funding,omitempty"`
	Genre_                Text_URL_UnionSlice                                             `json:"genre,omitempty"`
	HasPart_              CreativeWorkSlice                                               `json:"hasPart,omitempty"`
	Headline_             TextSlice                                                       `json:"headline,omitempty"`
	InLanguage_           Language_Text_UnionSlice                                        `json:"inLanguage,omitempty"`
	InteractionStatistic_ InteractionCounterSlice                                         `json:"interactionStatistic,omitempty"`
	InteractivityType_    TextSlice                                                       `json:"interactivityType,omitempty"`
	InterpretedAsClaim_   ClaimSlice                                                      `json:"interpretedAsClaim,omitempty"`
	IsAccessibleForFree_  BooleanSlice                                                    `json:"isAccessibleForFree,omitempty"`
	IsBasedOn_            CreativeWork_Product_URL_UnionSlice                             `json:"isBasedOn,omitempty"`
	IsBasedOnUrl_         CreativeWork_Product_URL_UnionSlice                             `json:"isBasedOnUrl,omitempty"`
	IsFamilyFriendly_     BooleanSlice                                                    `json:"isFamilyFriendly,omitempty"`
	IsPartOf_             CreativeWork_URL_UnionSlice                                     `json:"isPartOf,omitempty"`
	Keywords_             DefinedTerm_Text_URL_UnionSlice                                 `json:"keywords,omitempty"`
	LearningResourceType_ DefinedTerm_Text_UnionSlice                                     `json:"learningResourceType,omitempty"`
	License_              CreativeWork_URL_UnionSlice                                     `json:"license,omitempty"`
	LocationCreated_      PlaceSlice                                                      `json:"locationCreated,omitempty"`
	MainEntity_           ThingSlice                                                      `json:"mainEntity,omitempty"`
	Maintainer_           Organization_Person_UnionSlice                                  `json:"maintainer,omitempty"`
	Material_             Product_Text_URL_UnionSlice                                     `json:"material,omitempty"`
	MaterialExtent_       QuantitativeValue_Text_UnionSlice                               `json:"materialExtent,omitempty"`
	Mentions_             ThingSlice                                                      `json:"mentions,omitempty"`
	Offers_               Demand_Offer_UnionSlice                                         `json:"offers,omitempty"`
	Pattern_              DefinedTerm_Text_UnionSlice                                     `json:"pattern,omitempty"`
	Position_             Integer_Text_UnionSlice                                         `json:"position,omitempty"`
	Producer_             Organization_Person_UnionSlice                                  `json:"producer,omitempty"`
	Provider_             Organization_Person_UnionSlice                                  `json:"provider,omitempty"`
	Publication_          PublicationEventSlice                                           `json:"publication,omitempty"`
	Publisher_            Organization_Person_UnionSlice                                  `json:"publisher,omitempty"`
	PublisherImprint_     OrganizationSlice                                               `json:"publisherImprint,omitempty"`
	PublishingPrinciples_ CreativeWork_URL_UnionSlice                                     `json:"publishingPrinciples,omitempty"`
	RecordedAt_           EventSlice                                                      `json:"recordedAt,omitempty"`
	ReleasedEvent_        PublicationEventSlice                                           `json:"releasedEvent,omitempty"`
	Review_               ReviewSlice                                                     `json:"review,omitempty"`
	Reviews_              ReviewSlice                                                     `json:"reviews,omitempty"`
	SchemaVersion_        Text_URL_UnionSlice                                             `json:"schemaVersion,omitempty"`
	SdDatePublished_      DateSlice                                                       `json:"sdDatePublished,omitempty"`
	SdLicense_            CreativeWork_URL_UnionSlice                                     `json:"sdLicense,omitempty"`
	SdPublisher_          Organization_Person_UnionSlice                                  `json:"sdPublisher,omitempty"`
	Size_                 DefinedTerm_QuantitativeValue_SizeSpecification_Text_UnionSlice `json:"size,omitempty"`
	SourceOrganization_   OrganizationSlice                                               `json:"sourceOrganization,omitempty"`
	Spatial_              PlaceSlice                                                      `json:"spatial,omitempty"`
	SpatialCoverage_      PlaceSlice                                                      `json:"spatialCoverage,omitempty"`
	Sponsor_              Organization_Person_UnionSlice                                  `json:"sponsor,omitempty"`
	Teaches_              DefinedTerm_Text_UnionSlice                                     `json:"teaches,omitempty"`
	Temporal_             DateTime_Text_UnionSlice                                        `json:"temporal,omitempty"`
	TemporalCoverage_     DateTime_Text_URL_UnionSlice                                    `json:"temporalCoverage,omitempty"`
	Text_                 TextSlice                                                       `json:"text,omitempty"`
	ThumbnailUrl_         URLSlice                                                        `json:"thumbnailUrl,omitempty"`
	TimeRequired_         DurationSlice                                                   `json:"timeRequired,omitempty"`
	TranslationOfWork_    CreativeWorkSlice                                               `json:"translationOfWork,omitempty"`
	Translator_           Organization_Person_UnionSlice                                  `json:"translator,omitempty"`
	TypicalAgeRange_      TextSlice                                                       `json:"typicalAgeRange,omitempty"`
	UsageInfo_            CreativeWork_URL_UnionSlice                                     `json:"usageInfo,omitempty"`
	Version_              Number_Text_UnionSlice                                          `json:"version,omitempty"`
	Video_                Clip_VideoObject_UnionSlice                                     `json:"video,omitempty"`
	WorkExample_          CreativeWorkSlice                                               `json:"workExample,omitempty"`
	WorkTranslation_      CreativeWorkSlice                                               `json:"workTranslation,omitempty"`
}

func (s *creativeWorkStruct) implementsAboutPage_CreativeWork_Text_URL_Union() {}
func (s *creativeWorkStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
}
func (s *creativeWorkStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}
func (s *creativeWorkStruct) implementsCreativeWork_Event_Union()                       {}
func (s *creativeWorkStruct) implementsCreativeWork_HowToSection_HowToStep_Text_Union() {}
func (s *creativeWorkStruct) implementsCreativeWork_ItemList_Text_Union()               {}
func (s *creativeWorkStruct) implementsCreativeWork_Product_URL_Union()                 {}
func (s *creativeWorkStruct) implementsCreativeWork_Text_Union()                        {}
func (s *creativeWorkStruct) implementsCreativeWork_URL_Union()                         {}

func (s *creativeWorkStruct) About() []Thing {
	return s.About_
}
func (s *creativeWorkStruct) Abstract() []Text {
	return s.Abstract_
}
func (s *creativeWorkStruct) AccessMode() []Text {
	return s.AccessMode_
}
func (s *creativeWorkStruct) AccessModeSufficient() []ItemList {
	return s.AccessModeSufficient_
}
func (s *creativeWorkStruct) AccessibilityAPI() []Text {
	return s.AccessibilityAPI_
}
func (s *creativeWorkStruct) AccessibilityControl() []Text {
	return s.AccessibilityControl_
}
func (s *creativeWorkStruct) AccessibilityFeature() []Text {
	return s.AccessibilityFeature_
}
func (s *creativeWorkStruct) AccessibilityHazard() []Text {
	return s.AccessibilityHazard_
}
func (s *creativeWorkStruct) AccessibilitySummary() []Text {
	return s.AccessibilitySummary_
}
func (s *creativeWorkStruct) AccountablePerson() []Person {
	return s.AccountablePerson_
}
func (s *creativeWorkStruct) AcquireLicensePage() []CreativeWork_URL_Union {
	return s.AcquireLicensePage_
}
func (s *creativeWorkStruct) AggregateRating() []AggregateRating {
	return s.AggregateRating_
}
func (s *creativeWorkStruct) AlternativeHeadline() []Text {
	return s.AlternativeHeadline_
}
func (s *creativeWorkStruct) ArchivedAt() []URL_WebPage_Union {
	return s.ArchivedAt_
}
func (s *creativeWorkStruct) Assesses() []DefinedTerm_Text_Union {
	return s.Assesses_
}
func (s *creativeWorkStruct) AssociatedMedia() []MediaObject {
	return s.AssociatedMedia_
}
func (s *creativeWorkStruct) Audience() []Audience {
	return s.Audience_
}
func (s *creativeWorkStruct) Audio() []AudioObject_Clip_MusicRecording_Union {
	return s.Audio_
}
func (s *creativeWorkStruct) Author() []Organization_Person_Union {
	return s.Author_
}
func (s *creativeWorkStruct) Award() []Text {
	return s.Award_
}
func (s *creativeWorkStruct) Awards() []Text {
	return s.Awards_
}
func (s *creativeWorkStruct) Character() []Person {
	return s.Character_
}
func (s *creativeWorkStruct) Citation() []CreativeWork_Text_Union {
	return s.Citation_
}
func (s *creativeWorkStruct) Comment() []Comment {
	return s.Comment_
}
func (s *creativeWorkStruct) CommentCount() []Integer {
	return s.CommentCount_
}
func (s *creativeWorkStruct) ConditionsOfAccess() []Text {
	return s.ConditionsOfAccess_
}
func (s *creativeWorkStruct) ContentLocation() []Place {
	return s.ContentLocation_
}
func (s *creativeWorkStruct) ContentRating() []Rating_Text_Union {
	return s.ContentRating_
}
func (s *creativeWorkStruct) ContentReferenceTime() []DateTime {
	return s.ContentReferenceTime_
}
func (s *creativeWorkStruct) Contributor() []Organization_Person_Union {
	return s.Contributor_
}
func (s *creativeWorkStruct) CopyrightHolder() []Organization_Person_Union {
	return s.CopyrightHolder_
}
func (s *creativeWorkStruct) CopyrightNotice() []Text {
	return s.CopyrightNotice_
}
func (s *creativeWorkStruct) CopyrightYear() []Number {
	return s.CopyrightYear_
}
func (s *creativeWorkStruct) Correction() []CorrectionComment_Text_URL_Union {
	return s.Correction_
}
func (s *creativeWorkStruct) CountryOfOrigin() []Country {
	return s.CountryOfOrigin_
}
func (s *creativeWorkStruct) CreativeWorkStatus() []DefinedTerm_Text_Union {
	return s.CreativeWorkStatus_
}
func (s *creativeWorkStruct) Creator() []Organization_Person_Union {
	return s.Creator_
}
func (s *creativeWorkStruct) CreditText() []Text {
	return s.CreditText_
}
func (s *creativeWorkStruct) DateCreated() []Date_DateTime_Union {
	return s.DateCreated_
}
func (s *creativeWorkStruct) DateModified() []Date_DateTime_Union {
	return s.DateModified_
}
func (s *creativeWorkStruct) DatePublished() []Date_DateTime_Union {
	return s.DatePublished_
}
func (s *creativeWorkStruct) DiscussionUrl() []URL {
	return s.DiscussionUrl_
}
func (s *creativeWorkStruct) EditEIDR() []Text_URL_Union {
	return s.EditEIDR_
}
func (s *creativeWorkStruct) Editor() []Person {
	return s.Editor_
}
func (s *creativeWorkStruct) EducationalAlignment() []AlignmentObject {
	return s.EducationalAlignment_
}
func (s *creativeWorkStruct) EducationalLevel() []DefinedTerm_Text_URL_Union {
	return s.EducationalLevel_
}
func (s *creativeWorkStruct) EducationalUse() []DefinedTerm_Text_Union {
	return s.EducationalUse_
}
func (s *creativeWorkStruct) Encoding() []MediaObject {
	return s.Encoding_
}
func (s *creativeWorkStruct) EncodingFormat() []Text_URL_Union {
	return s.EncodingFormat_
}
func (s *creativeWorkStruct) Encodings() []MediaObject {
	return s.Encodings_
}
func (s *creativeWorkStruct) ExampleOfWork() []CreativeWork {
	return s.ExampleOfWork_
}
func (s *creativeWorkStruct) Expires() []Date {
	return s.Expires_
}
func (s *creativeWorkStruct) FileFormat() []Text_URL_Union {
	return s.FileFormat_
}
func (s *creativeWorkStruct) Funder() []Organization_Person_Union {
	return s.Funder_
}
func (s *creativeWorkStruct) Funding() []Grant {
	return s.Funding_
}
func (s *creativeWorkStruct) Genre() []Text_URL_Union {
	return s.Genre_
}
func (s *creativeWorkStruct) HasPart() []CreativeWork {
	return s.HasPart_
}
func (s *creativeWorkStruct) Headline() []Text {
	return s.Headline_
}
func (s *creativeWorkStruct) InLanguage() []Language_Text_Union {
	return s.InLanguage_
}
func (s *creativeWorkStruct) InteractionStatistic() []InteractionCounter {
	return s.InteractionStatistic_
}
func (s *creativeWorkStruct) InteractivityType() []Text {
	return s.InteractivityType_
}
func (s *creativeWorkStruct) InterpretedAsClaim() []Claim {
	return s.InterpretedAsClaim_
}
func (s *creativeWorkStruct) IsAccessibleForFree() []Boolean {
	return s.IsAccessibleForFree_
}
func (s *creativeWorkStruct) IsBasedOn() []CreativeWork_Product_URL_Union {
	return s.IsBasedOn_
}
func (s *creativeWorkStruct) IsBasedOnUrl() []CreativeWork_Product_URL_Union {
	return s.IsBasedOnUrl_
}
func (s *creativeWorkStruct) IsFamilyFriendly() []Boolean {
	return s.IsFamilyFriendly_
}
func (s *creativeWorkStruct) IsPartOf() []CreativeWork_URL_Union {
	return s.IsPartOf_
}
func (s *creativeWorkStruct) Keywords() []DefinedTerm_Text_URL_Union {
	return s.Keywords_
}
func (s *creativeWorkStruct) LearningResourceType() []DefinedTerm_Text_Union {
	return s.LearningResourceType_
}
func (s *creativeWorkStruct) License() []CreativeWork_URL_Union {
	return s.License_
}
func (s *creativeWorkStruct) LocationCreated() []Place {
	return s.LocationCreated_
}
func (s *creativeWorkStruct) MainEntity() []Thing {
	return s.MainEntity_
}
func (s *creativeWorkStruct) Maintainer() []Organization_Person_Union {
	return s.Maintainer_
}
func (s *creativeWorkStruct) Material() []Product_Text_URL_Union {
	return s.Material_
}
func (s *creativeWorkStruct) MaterialExtent() []QuantitativeValue_Text_Union {
	return s.MaterialExtent_
}
func (s *creativeWorkStruct) Mentions() []Thing {
	return s.Mentions_
}
func (s *creativeWorkStruct) Offers() []Demand_Offer_Union {
	return s.Offers_
}
func (s *creativeWorkStruct) Pattern() []DefinedTerm_Text_Union {
	return s.Pattern_
}
func (s *creativeWorkStruct) Position() []Integer_Text_Union {
	return s.Position_
}
func (s *creativeWorkStruct) Producer() []Organization_Person_Union {
	return s.Producer_
}
func (s *creativeWorkStruct) Provider() []Organization_Person_Union {
	return s.Provider_
}
func (s *creativeWorkStruct) Publication() []PublicationEvent {
	return s.Publication_
}
func (s *creativeWorkStruct) Publisher() []Organization_Person_Union {
	return s.Publisher_
}
func (s *creativeWorkStruct) PublisherImprint() []Organization {
	return s.PublisherImprint_
}
func (s *creativeWorkStruct) PublishingPrinciples() []CreativeWork_URL_Union {
	return s.PublishingPrinciples_
}
func (s *creativeWorkStruct) RecordedAt() []Event {
	return s.RecordedAt_
}
func (s *creativeWorkStruct) ReleasedEvent() []PublicationEvent {
	return s.ReleasedEvent_
}
func (s *creativeWorkStruct) Review() []Review {
	return s.Review_
}
func (s *creativeWorkStruct) Reviews() []Review {
	return s.Reviews_
}
func (s *creativeWorkStruct) SchemaVersion() []Text_URL_Union {
	return s.SchemaVersion_
}
func (s *creativeWorkStruct) SdDatePublished() []Date {
	return s.SdDatePublished_
}
func (s *creativeWorkStruct) SdLicense() []CreativeWork_URL_Union {
	return s.SdLicense_
}
func (s *creativeWorkStruct) SdPublisher() []Organization_Person_Union {
	return s.SdPublisher_
}
func (s *creativeWorkStruct) Size() []DefinedTerm_QuantitativeValue_SizeSpecification_Text_Union {
	return s.Size_
}
func (s *creativeWorkStruct) SourceOrganization() []Organization {
	return s.SourceOrganization_
}
func (s *creativeWorkStruct) Spatial() []Place {
	return s.Spatial_
}
func (s *creativeWorkStruct) SpatialCoverage() []Place {
	return s.SpatialCoverage_
}
func (s *creativeWorkStruct) Sponsor() []Organization_Person_Union {
	return s.Sponsor_
}
func (s *creativeWorkStruct) Teaches() []DefinedTerm_Text_Union {
	return s.Teaches_
}
func (s *creativeWorkStruct) Temporal() []DateTime_Text_Union {
	return s.Temporal_
}
func (s *creativeWorkStruct) TemporalCoverage() []DateTime_Text_URL_Union {
	return s.TemporalCoverage_
}
func (s *creativeWorkStruct) Text() []Text {
	return s.Text_
}
func (s *creativeWorkStruct) ThumbnailUrl() []URL {
	return s.ThumbnailUrl_
}
func (s *creativeWorkStruct) TimeRequired() []Duration {
	return s.TimeRequired_
}
func (s *creativeWorkStruct) TranslationOfWork() []CreativeWork {
	return s.TranslationOfWork_
}
func (s *creativeWorkStruct) Translator() []Organization_Person_Union {
	return s.Translator_
}
func (s *creativeWorkStruct) TypicalAgeRange() []Text {
	return s.TypicalAgeRange_
}
func (s *creativeWorkStruct) UsageInfo() []CreativeWork_URL_Union {
	return s.UsageInfo_
}
func (s *creativeWorkStruct) Version() []Number_Text_Union {
	return s.Version_
}
func (s *creativeWorkStruct) Video() []Clip_VideoObject_Union {
	return s.Video_
}
func (s *creativeWorkStruct) WorkExample() []CreativeWork {
	return s.WorkExample_
}
func (s *creativeWorkStruct) WorkTranslation() []CreativeWork {
	return s.WorkTranslation_
}

type CreativeWorkSlice []CreativeWork

func (s *CreativeWorkSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CreativeWorkSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CreativeWork)
	}
	return nil
}

var _ CreativeWork = &creativeWorkStruct{}

// A media season e.g. tv, radio, video game etc.
type CreativeWorkSeason interface {
	// Parents
	CreativeWork
	// Unions
	CreativeWorkSeason_URL_Union
	// Accessors
	Actor() []Person                    // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Director() []Person                 // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	EndDate() []Date_DateTime_Union     // The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	Episode() []Episode                 // An episode of a tv, radio or game media within a series or season.
	Episodes() []Episode                // An episode of a TV/radio series or season.
	NumberOfEpisodes() []Integer        // The number of episodes in this season or series.
	PartOfSeries() []CreativeWorkSeries // The series to which this episode or season belongs.
	ProductionCompany() []Organization  // The production company or studio responsible for the item e.g. series, video game, episode etc.
	SeasonNumber() []Integer_Text_Union // Position of the season within an ordered group of seasons.
	StartDate() []Date_DateTime_Union   // The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	Trailer() []VideoObject             // The trailer of a movie or tv/radio series, season, episode, etc.
}
type creativeWorkSeasonStruct struct {
	creativeWorkStruct

	Actor_             PersonSlice              `json:"actor,omitempty"`
	Director_          PersonSlice              `json:"director,omitempty"`
	EndDate_           Date_DateTime_UnionSlice `json:"endDate,omitempty"`
	Episode_           EpisodeSlice             `json:"episode,omitempty"`
	Episodes_          EpisodeSlice             `json:"episodes,omitempty"`
	NumberOfEpisodes_  IntegerSlice             `json:"numberOfEpisodes,omitempty"`
	PartOfSeries_      CreativeWorkSeriesSlice  `json:"partOfSeries,omitempty"`
	ProductionCompany_ OrganizationSlice        `json:"productionCompany,omitempty"`
	SeasonNumber_      Integer_Text_UnionSlice  `json:"seasonNumber,omitempty"`
	StartDate_         Date_DateTime_UnionSlice `json:"startDate,omitempty"`
	Trailer_           VideoObjectSlice         `json:"trailer,omitempty"`
}

func (s *creativeWorkSeasonStruct) implementsCreativeWorkSeason_URL_Union() {}

func (s *creativeWorkSeasonStruct) Actor() []Person {
	return s.Actor_
}
func (s *creativeWorkSeasonStruct) Director() []Person {
	return s.Director_
}
func (s *creativeWorkSeasonStruct) EndDate() []Date_DateTime_Union {
	return s.EndDate_
}
func (s *creativeWorkSeasonStruct) Episode() []Episode {
	return s.Episode_
}
func (s *creativeWorkSeasonStruct) Episodes() []Episode {
	return s.Episodes_
}
func (s *creativeWorkSeasonStruct) NumberOfEpisodes() []Integer {
	return s.NumberOfEpisodes_
}
func (s *creativeWorkSeasonStruct) PartOfSeries() []CreativeWorkSeries {
	return s.PartOfSeries_
}
func (s *creativeWorkSeasonStruct) ProductionCompany() []Organization {
	return s.ProductionCompany_
}
func (s *creativeWorkSeasonStruct) SeasonNumber() []Integer_Text_Union {
	return s.SeasonNumber_
}
func (s *creativeWorkSeasonStruct) StartDate() []Date_DateTime_Union {
	return s.StartDate_
}
func (s *creativeWorkSeasonStruct) Trailer() []VideoObject {
	return s.Trailer_
}

type CreativeWorkSeasonSlice []CreativeWorkSeason

func (s *CreativeWorkSeasonSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CreativeWorkSeasonSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CreativeWorkSeason)
	}
	return nil
}

var _ CreativeWorkSeason = &creativeWorkSeasonStruct{}

/*
A CreativeWorkSeries in schema.org is a group of related items, typically but not necessarily of the same kind. CreativeWorkSeries are usually organized into some order, often chronological. Unlike [[ItemList]] which is a general purpose data structure for lists of things, the emphasis with CreativeWorkSeries is on published materials (written e.g. books and periodicals, or media such as tv, radio and games).\n\nSpecific subtypes are available for describing [[TVSeries]], [[RadioSeries]], [[MovieSeries]], [[BookSeries]], [[Periodical]] and [[VideoGameSeries]]. In each case, the [[hasPart]] / [[isPartOf]] properties can be used to relate the CreativeWorkSeries to its parts. The general CreativeWorkSeries type serves largely just to organize these more specific and practical subtypes.\n\nIt is common for properties applicable to an item from the series to be usefully applied to the containing group. Schema.org attempts to anticipate some of these cases, but publishers should be free to apply properties of the series parts to the series as a whole wherever they seem appropriate.

*/
type CreativeWorkSeries interface {
	// Parents
	CreativeWork
	Series
	// Accessors
	EndDate() []Date_DateTime_Union   // The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	Issn() []Text                     // The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication.
	StartDate() []Date_DateTime_Union // The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
}
type creativeWorkSeriesStruct struct {
	creativeWorkStruct
	seriesStruct

	EndDate_   Date_DateTime_UnionSlice `json:"endDate,omitempty"`
	Issn_      TextSlice                `json:"issn,omitempty"`
	StartDate_ Date_DateTime_UnionSlice `json:"startDate,omitempty"`
}

func (s *creativeWorkSeriesStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {
}                                                                            // re
func (s *creativeWorkSeriesStruct) implementsDataFeedItem_Text_Thing_Union() {} // re
func (s *creativeWorkSeriesStruct) implementsListItem_Text_Thing_Union()     {} // re
func (s *creativeWorkSeriesStruct) implementsText_Thing_URL_Union()          {} // re
func (s *creativeWorkSeriesStruct) implementsText_Thing_Union()              {} // re
func (s *creativeWorkSeriesStruct) EndDate() []Date_DateTime_Union {
	return s.EndDate_
}
func (s *creativeWorkSeriesStruct) Issn() []Text {
	return s.Issn_
}
func (s *creativeWorkSeriesStruct) StartDate() []Date_DateTime_Union {
	return s.StartDate_
}

type CreativeWorkSeriesSlice []CreativeWorkSeries

func (s *CreativeWorkSeriesSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CreativeWorkSeriesSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CreativeWorkSeries)
	}
	return nil
}

var _ CreativeWorkSeries = &creativeWorkSeriesStruct{}

/*
A card payment method of a particular brand or name.  Used to mark up a particular payment method and/or the financial product/service that supplies the card account.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#AmericanExpress\n* http://purl.org/goodrelations/v1#DinersClub\n* http://purl.org/goodrelations/v1#Discover\n* http://purl.org/goodrelations/v1#JCB\n* http://purl.org/goodrelations/v1#MasterCard\n* http://purl.org/goodrelations/v1#VISA

*/
type CreditCard interface {
	// Parents
	LoanOrCredit
	PaymentCard
}
type creditCardStruct struct {
	loanOrCreditStruct
	paymentCardStruct_
}

func (s *creditCardStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
}                                                                                                 // re
func (s *creditCardStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *creditCardStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *creditCardStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *creditCardStruct) implementsLoanOrCredit_PaymentMethod_Union()                           {} // re
func (s *creditCardStruct) implementsOrderItem_Product_Service_Union()                            {} // re
func (s *creditCardStruct) implementsProduct_Service_Union()                                      {} // re
func (s *creditCardStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *creditCardStruct) implementsText_Thing_Union()                                           {} // re
type CreditCardSlice []CreditCard

func (s *CreditCardSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CreditCardSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CreditCard)
	}
	return nil
}

var _ CreditCard = &creditCardStruct{}

// A crematorium.
type Crematorium interface {
	// Parents
	CivicStructure
}
type crematoriumStruct struct {
	civicStructureStruct
}
type CrematoriumSlice []Crematorium

func (s *CrematoriumSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CrematoriumSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Crematorium)
	}
	return nil
}

var _ Crematorium = &crematoriumStruct{}

// A [[CriticReview]] is a more specialized form of Review written or published by a source that is recognized for its reviewing activities. These can include online columns, travel and food guides, TV and radio shows, blogs and other independent Web sites. [[CriticReview]]s are typically more in-depth and professionally written. For simpler, casually written user/visitor/viewer/customer reviews, it is more appropriate to use the [[UserReview]] type. Review aggregator sites such as Metacritic already separate out the site's user reviews from selected critic reviews that originate from third-party sources.
type CriticReview interface {
	// Parents
	Review
}
type criticReviewStruct struct {
	reviewStruct
}
type CriticReviewSlice []CriticReview

func (s *CriticReviewSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CriticReviewSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CriticReview)
	}
	return nil
}

var _ CriticReview = &criticReviewStruct{}

// Text representing a CSS selector.
type CssSelectorType interface {
	// Parents
	Text
}
type cssSelectorTypeStruct struct {
	textStruct
}
type CssSelectorTypeSlice []CssSelectorType

func (s *CssSelectorTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{ExpectCssSelectorType: true})
	if err != nil {
		return err
	}
	*s = make(CssSelectorTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CssSelectorType)
	}
	return nil
}

var _ CssSelectorType = &cssSelectorTypeStruct{}

// A service to convert funds from one currency to another currency.
type CurrencyConversionService interface {
	// Parents
	FinancialProduct
}
type currencyConversionServiceStruct struct {
	financialProductStruct
}
type CurrencyConversionServiceSlice []CurrencyConversionService

func (s *CurrencyConversionServiceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(CurrencyConversionServiceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(CurrencyConversionService)
	}
	return nil
}

var _ CurrencyConversionService = &currencyConversionServiceStruct{}

// An alternative, closely-related condition typically considered later in the differential diagnosis process along with the signs that are used to distinguish it.
type DDxElement interface {
	// Parents
	MedicalIntangible
	// Accessors
	Diagnosis() []MedicalCondition              // One or more alternative conditions considered in the differential diagnosis process as output of a diagnosis process.
	DistinguishingSign() []MedicalSignOrSymptom // One of a set of signs and symptoms that can be used to distinguish this diagnosis from others in the differential diagnosis.
}
type dDxElementStruct struct {
	medicalIntangibleStruct

	Diagnosis_          MedicalConditionSlice     `json:"diagnosis,omitempty"`
	DistinguishingSign_ MedicalSignOrSymptomSlice `json:"distinguishingSign,omitempty"`
}

func (s *dDxElementStruct) Diagnosis() []MedicalCondition {
	return s.Diagnosis_
}
func (s *dDxElementStruct) DistinguishingSign() []MedicalSignOrSymptom {
	return s.DistinguishingSign_
}

type DDxElementSlice []DDxElement

func (s *DDxElementSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DDxElementSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DDxElement)
	}
	return nil
}

var _ DDxElement = &dDxElementStruct{}

// Event type: A social dance.
type DanceEvent interface {
	// Parents
	Event
}
type danceEventStruct struct {
	eventStruct
}
type DanceEventSlice []DanceEvent

func (s *DanceEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DanceEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DanceEvent)
	}
	return nil
}

var _ DanceEvent = &danceEventStruct{}

// A dance group&#x2014;for example, the Alvin Ailey Dance Theater or Riverdance.
type DanceGroup interface {
	// Parents
	PerformingGroup
}
type danceGroupStruct struct {
	performingGroupStruct
}
type DanceGroupSlice []DanceGroup

func (s *DanceGroupSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DanceGroupSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DanceGroup)
	}
	return nil
}

var _ DanceGroup = &danceGroupStruct{}

// A collection of datasets.
type DataCatalog interface {
	// Parents
	CreativeWork
	// Accessors
	Dataset() []Dataset                     // A dataset contained in this catalog.
	MeasurementTechnique() []Text_URL_Union /*
	A technique or technology used in a [[Dataset]] (or [[DataDownload]], [[DataCatalog]]),
	corresponding to the method used for measuring the corresponding variable(s) (described using [[variableMeasured]]). This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but rather as a high level summary for dataset discovery.

	For example, if [[variableMeasured]] is: molecule concentration, [[measurementTechnique]] could be: "mass spectrometry" or "nmr spectroscopy" or "colorimetry" or "immunofluorescence".

	If the [[variableMeasured]] is "depression rating", the [[measurementTechnique]] could be "Zung Scale" or "HAM-D" or "Beck Depression Inventory".

	If there are several [[variableMeasured]] properties recorded for some given data object, use a [[PropertyValue]] for each [[variableMeasured]] and attach the corresponding [[measurementTechnique]].

	*/
}
type dataCatalogStruct struct {
	creativeWorkStruct

	Dataset_              DatasetSlice        `json:"dataset,omitempty"`
	MeasurementTechnique_ Text_URL_UnionSlice `json:"measurementTechnique,omitempty"`
}

func (s *dataCatalogStruct) Dataset() []Dataset {
	return s.Dataset_
}
func (s *dataCatalogStruct) MeasurementTechnique() []Text_URL_Union {
	return s.MeasurementTechnique_
}

type DataCatalogSlice []DataCatalog

func (s *DataCatalogSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DataCatalogSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DataCatalog)
	}
	return nil
}

var _ DataCatalog = &dataCatalogStruct{}

// A dataset in downloadable form.
type DataDownload interface {
	// Parents
	MediaObject
	// Accessors
	MeasurementTechnique() []Text_URL_Union /*
	A technique or technology used in a [[Dataset]] (or [[DataDownload]], [[DataCatalog]]),
	corresponding to the method used for measuring the corresponding variable(s) (described using [[variableMeasured]]). This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but rather as a high level summary for dataset discovery.

	For example, if [[variableMeasured]] is: molecule concentration, [[measurementTechnique]] could be: "mass spectrometry" or "nmr spectroscopy" or "colorimetry" or "immunofluorescence".

	If the [[variableMeasured]] is "depression rating", the [[measurementTechnique]] could be "Zung Scale" or "HAM-D" or "Beck Depression Inventory".

	If there are several [[variableMeasured]] properties recorded for some given data object, use a [[PropertyValue]] for each [[variableMeasured]] and attach the corresponding [[measurementTechnique]].

	*/
}
type dataDownloadStruct struct {
	mediaObjectStruct

	MeasurementTechnique_ Text_URL_UnionSlice `json:"measurementTechnique,omitempty"`
}

func (s *dataDownloadStruct) MeasurementTechnique() []Text_URL_Union {
	return s.MeasurementTechnique_
}

type DataDownloadSlice []DataDownload

func (s *DataDownloadSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DataDownloadSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DataDownload)
	}
	return nil
}

var _ DataDownload = &dataDownloadStruct{}

// A single feed providing structured information about one or more entities or topics.
type DataFeed interface {
	// Parents
	Dataset
	// Unions
	DataFeed_URL_Union
	// Accessors
	DataFeedElement() []DataFeedItem_Text_Thing_Union // An item within in a data feed. Data feeds may have many elements.
}
type dataFeedStruct struct {
	datasetStruct

	DataFeedElement_ DataFeedItem_Text_Thing_UnionSlice `json:"dataFeedElement,omitempty"`
}

func (s *dataFeedStruct) implementsDataFeed_URL_Union() {}

func (s *dataFeedStruct) DataFeedElement() []DataFeedItem_Text_Thing_Union {
	return s.DataFeedElement_
}

type DataFeedSlice []DataFeed

func (s *DataFeedSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DataFeedSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DataFeed)
	}
	return nil
}

var _ DataFeed = &dataFeedStruct{}

// A single item within a larger data feed.
type DataFeedItem interface {
	// Parents
	Intangible
	// Unions
	DataFeedItem_Text_Thing_Union
	// Accessors
	DateCreated() []Date_DateTime_Union  // The date on which the CreativeWork was created or the item was added to a DataFeed.
	DateDeleted() []Date_DateTime_Union  // The datetime the item was removed from the DataFeed.
	DateModified() []Date_DateTime_Union // The date on which the CreativeWork was most recently modified or when the item's entry was modified within a DataFeed.
	Item() []Thing                       // An entity represented by an entry in a list or data feed (e.g. an 'artist' in a list of 'artists')’.
}
type dataFeedItemStruct struct {
	intangibleStruct

	DateCreated_  Date_DateTime_UnionSlice `json:"dateCreated,omitempty"`
	DateDeleted_  Date_DateTime_UnionSlice `json:"dateDeleted,omitempty"`
	DateModified_ Date_DateTime_UnionSlice `json:"dateModified,omitempty"`
	Item_         ThingSlice               `json:"item,omitempty"`
}

func (s *dataFeedItemStruct) implementsDataFeedItem_Text_Thing_Union() {}

func (s *dataFeedItemStruct) DateCreated() []Date_DateTime_Union {
	return s.DateCreated_
}
func (s *dataFeedItemStruct) DateDeleted() []Date_DateTime_Union {
	return s.DateDeleted_
}
func (s *dataFeedItemStruct) DateModified() []Date_DateTime_Union {
	return s.DateModified_
}
func (s *dataFeedItemStruct) Item() []Thing {
	return s.Item_
}

type DataFeedItemSlice []DataFeedItem

func (s *DataFeedItemSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DataFeedItemSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DataFeedItem)
	}
	return nil
}

var _ DataFeedItem = &dataFeedItemStruct{}

// The basic data types such as Integers, Strings, etc.
type DataType interface{}
type dataTypeStruct struct{}
type DataTypeSlice []DataType

func (s *DataTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DataTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DataType)
	}
	return nil
}

var _ DataType = &dataTypeStruct{}

// A body of structured information describing some topic(s) of interest.
type Dataset interface {
	// Parents
	CreativeWork
	// Unions
	CDCPMDRecord_Dataset_Union
	Dataset_Observation_URL_WebContent_Union
	// Accessors
	Catalog() []DataCatalog                 // A data catalog which contains this dataset.
	DatasetTimeInterval() []DateTime        // The range of temporal applicability of a dataset, e.g. for a 2011 census dataset, the year 2011 (in ISO 8601 time interval format).
	Distribution() []DataDownload           // A downloadable form of this dataset, at a specific location, in a specific format.
	IncludedDataCatalog() []DataCatalog     // A data catalog which contains this dataset (this property was previously 'catalog', preferred name is now 'includedInDataCatalog').
	IncludedInDataCatalog() []DataCatalog   // A data catalog which contains this dataset.
	Issn() []Text                           // The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication.
	MeasurementTechnique() []Text_URL_Union /*
	A technique or technology used in a [[Dataset]] (or [[DataDownload]], [[DataCatalog]]),
	corresponding to the method used for measuring the corresponding variable(s) (described using [[variableMeasured]]). This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but rather as a high level summary for dataset discovery.

	For example, if [[variableMeasured]] is: molecule concentration, [[measurementTechnique]] could be: "mass spectrometry" or "nmr spectroscopy" or "colorimetry" or "immunofluorescence".

	If the [[variableMeasured]] is "depression rating", the [[measurementTechnique]] could be "Zung Scale" or "HAM-D" or "Beck Depression Inventory".

	If there are several [[variableMeasured]] properties recorded for some given data object, use a [[PropertyValue]] for each [[variableMeasured]] and attach the corresponding [[measurementTechnique]].

	*/
	VariableMeasured() []PropertyValue_Text_Union // The variableMeasured property can indicate (repeated as necessary) the  variables that are measured in some dataset, either described as text or as pairs of identifier and description using PropertyValue.
}
type datasetStruct struct {
	creativeWorkStruct

	Catalog_               DataCatalogSlice              `json:"catalog,omitempty"`
	DatasetTimeInterval_   DateTimeSlice                 `json:"datasetTimeInterval,omitempty"`
	Distribution_          DataDownloadSlice             `json:"distribution,omitempty"`
	IncludedDataCatalog_   DataCatalogSlice              `json:"includedDataCatalog,omitempty"`
	IncludedInDataCatalog_ DataCatalogSlice              `json:"includedInDataCatalog,omitempty"`
	Issn_                  TextSlice                     `json:"issn,omitempty"`
	MeasurementTechnique_  Text_URL_UnionSlice           `json:"measurementTechnique,omitempty"`
	VariableMeasured_      PropertyValue_Text_UnionSlice `json:"variableMeasured,omitempty"`
}

func (s *datasetStruct) implementsCDCPMDRecord_Dataset_Union()               {}
func (s *datasetStruct) implementsDataset_Observation_URL_WebContent_Union() {}

func (s *datasetStruct) Catalog() []DataCatalog {
	return s.Catalog_
}
func (s *datasetStruct) DatasetTimeInterval() []DateTime {
	return s.DatasetTimeInterval_
}
func (s *datasetStruct) Distribution() []DataDownload {
	return s.Distribution_
}
func (s *datasetStruct) IncludedDataCatalog() []DataCatalog {
	return s.IncludedDataCatalog_
}
func (s *datasetStruct) IncludedInDataCatalog() []DataCatalog {
	return s.IncludedInDataCatalog_
}
func (s *datasetStruct) Issn() []Text {
	return s.Issn_
}
func (s *datasetStruct) MeasurementTechnique() []Text_URL_Union {
	return s.MeasurementTechnique_
}
func (s *datasetStruct) VariableMeasured() []PropertyValue_Text_Union {
	return s.VariableMeasured_
}

type DatasetSlice []Dataset

func (s *DatasetSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DatasetSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Dataset)
	}
	return nil
}

var _ Dataset = &datasetStruct{}

// A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
type Date interface {
	Value() string
	// Unions
	Date_DateTime_Integer_Union
	Date_DateTime_Time_Union
	Date_DateTime_Union
	Date_Text_Union
}
type dateStruct struct {
	value string
}

func (s *dateStruct) implementsDate_DateTime_Integer_Union() {}
func (s *dateStruct) implementsDate_DateTime_Time_Union()    {}
func (s *dateStruct) implementsDate_DateTime_Union()         {}
func (s *dateStruct) implementsDate_Text_Union()             {}

func (s *dateStruct) Value() string {
	return s.value
}
func (s *dateStruct) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &s.value)
}
func (s *dateStruct) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.value)
}

type DateSlice []Date

func (s *DateSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{ExpectDate: true})
	if err != nil {
		return err
	}
	*s = make(DateSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Date)
	}
	return nil
}

var _ Date = &dateStruct{}

// A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm] (see Chapter 5.4 of ISO 8601).
type DateTime interface {
	Value() string
	// Unions
	DateTime_Text_URL_Union
	DateTime_Text_Union
	DateTime_Time_Union
	Date_DateTime_Integer_Union
	Date_DateTime_Time_Union
	Date_DateTime_Union
}
type dateTimeStruct struct {
	value string
}

func (s *dateTimeStruct) implementsDateTime_Text_URL_Union()     {}
func (s *dateTimeStruct) implementsDateTime_Text_Union()         {}
func (s *dateTimeStruct) implementsDateTime_Time_Union()         {}
func (s *dateTimeStruct) implementsDate_DateTime_Integer_Union() {}
func (s *dateTimeStruct) implementsDate_DateTime_Time_Union()    {}
func (s *dateTimeStruct) implementsDate_DateTime_Union()         {}

func (s *dateTimeStruct) Value() string {
	return s.value
}
func (s *dateTimeStruct) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &s.value)
}
func (s *dateTimeStruct) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.value)
}

type DateTimeSlice []DateTime

func (s *DateTimeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{ExpectDateTime: true})
	if err != nil {
		return err
	}
	*s = make(DateTimeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DateTime)
	}
	return nil
}

var _ DateTime = &dateTimeStruct{}

// A DatedMoneySpecification represents monetary values with optional start and end dates. For example, this could represent an employee's salary over a specific period of time. __Note:__ This type has been superseded by [[MonetaryAmount]] use of that type is recommended
type DatedMoneySpecification interface {
	// Parents
	StructuredValue
	// Accessors
	Amount() []MonetaryAmount_Number_Union // The amount of money.
	Currency() []Text                      // The currency in which the monetary amount is expressed.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	EndDate() []Date_DateTime_Union        // The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	StartDate() []Date_DateTime_Union      // The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
}
type datedMoneySpecificationStruct struct {
	structuredValueStruct

	Amount_    MonetaryAmount_Number_UnionSlice `json:"amount,omitempty"`
	Currency_  TextSlice                        `json:"currency,omitempty"`
	EndDate_   Date_DateTime_UnionSlice         `json:"endDate,omitempty"`
	StartDate_ Date_DateTime_UnionSlice         `json:"startDate,omitempty"`
}

func (s *datedMoneySpecificationStruct) Amount() []MonetaryAmount_Number_Union {
	return s.Amount_
}
func (s *datedMoneySpecificationStruct) Currency() []Text {
	return s.Currency_
}
func (s *datedMoneySpecificationStruct) EndDate() []Date_DateTime_Union {
	return s.EndDate_
}
func (s *datedMoneySpecificationStruct) StartDate() []Date_DateTime_Union {
	return s.StartDate_
}

type DatedMoneySpecificationSlice []DatedMoneySpecification

func (s *DatedMoneySpecificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DatedMoneySpecificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DatedMoneySpecification)
	}
	return nil
}

var _ DatedMoneySpecification = &datedMoneySpecificationStruct{}

/*
The day of the week, e.g. used to specify to which day the opening hours of an OpeningHoursSpecification refer.

Originally, URLs from [GoodRelations](http://purl.org/goodrelations/v1) were used (for [[Monday]], [[Tuesday]], [[Wednesday]], [[Thursday]], [[Friday]], [[Saturday]], [[Sunday]] plus a special entry for [[PublicHolidays]]); these have now been integrated directly into schema.org.

*/
type DayOfWeek interface {
	// Parents
	Enumeration
	// Unions
	DayOfWeek_Text_Union
}
type dayOfWeekStruct struct {
	enumerationStruct
}

func (s *dayOfWeekStruct) implementsDayOfWeek_Text_Union() {}

type DayOfWeekSlice []DayOfWeek

func (s *DayOfWeekSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DayOfWeekSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DayOfWeek)
	}
	return nil
}

var _ DayOfWeek = &dayOfWeekStruct{}

// A day spa.
type DaySpa interface {
	// Parents
	HealthAndBeautyBusiness
}
type daySpaStruct struct {
	healthAndBeautyBusinessStruct
}
type DaySpaSlice []DaySpa

func (s *DaySpaSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DaySpaSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DaySpa)
	}
	return nil
}

var _ DaySpa = &daySpaStruct{}

// The act of stopping or deactivating a device or application (e.g. stopping a timer or turning off a flashlight).
type DeactivateAction interface {
	// Parents
	ControlAction
}
type deactivateActionStruct struct {
	controlActionStruct
}
type DeactivateActionSlice []DeactivateAction

func (s *DeactivateActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DeactivateActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DeactivateAction)
	}
	return nil
}

var _ DeactivateAction = &deactivateActionStruct{}

// A defence establishment, such as an army or navy base.
type DefenceEstablishment interface {
	// Parents
	GovernmentBuilding
}
type defenceEstablishmentStruct struct {
	governmentBuildingStruct
}
type DefenceEstablishmentSlice []DefenceEstablishment

func (s *DefenceEstablishmentSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DefenceEstablishmentSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DefenceEstablishment)
	}
	return nil
}

var _ DefenceEstablishment = &defenceEstablishmentStruct{}

/*
A DefinedRegion is a geographic area defined by potentially arbitrary (rather than political, administrative or natural geographical) criteria. Properties are provided for defining a region by reference to sets of postal codes.

Examples: a delivery destination when shopping. Region where regional pricing is configured.

Requirement 1:
Country: US
States: "NY", "CA"

Requirement 2:
Country: US
PostalCode Set: { [94000-94585], [97000, 97999], [13000, 13599]}
{ [12345, 12345], [78945, 78945], }
Region = state, canton, prefecture, autonomous community...
*/
type DefinedRegion interface {
	// Parents
	StructuredValue
	// Accessors
	AddressCountry() []Country_Text_Union            // The country. For example, USA. You can also provide the two-letter [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1).
	AddressRegion() []Text                           // The region in which the locality is, and which is in the country. For example, California or another appropriate first-level [Administrative division](https://en.wikipedia.org/wiki/List_of_administrative_divisions_by_country)
	PostalCode() []Text                              // The postal code. For example, 94043.
	PostalCodePrefix() []Text                        // A defined range of postal codes indicated by a common textual prefix. Used for non-numeric systems such as UK.
	PostalCodeRange() []PostalCodeRangeSpecification // A defined range of postal codes.
}
type definedRegionStruct struct {
	structuredValueStruct

	AddressCountry_   Country_Text_UnionSlice           `json:"addressCountry,omitempty"`
	AddressRegion_    TextSlice                         `json:"addressRegion,omitempty"`
	PostalCode_       TextSlice                         `json:"postalCode,omitempty"`
	PostalCodePrefix_ TextSlice                         `json:"postalCodePrefix,omitempty"`
	PostalCodeRange_  PostalCodeRangeSpecificationSlice `json:"postalCodeRange,omitempty"`
}

func (s *definedRegionStruct) AddressCountry() []Country_Text_Union {
	return s.AddressCountry_
}
func (s *definedRegionStruct) AddressRegion() []Text {
	return s.AddressRegion_
}
func (s *definedRegionStruct) PostalCode() []Text {
	return s.PostalCode_
}
func (s *definedRegionStruct) PostalCodePrefix() []Text {
	return s.PostalCodePrefix_
}
func (s *definedRegionStruct) PostalCodeRange() []PostalCodeRangeSpecification {
	return s.PostalCodeRange_
}

type DefinedRegionSlice []DefinedRegion

func (s *DefinedRegionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DefinedRegionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DefinedRegion)
	}
	return nil
}

var _ DefinedRegion = &definedRegionStruct{}

// A word, name, acronym, phrase, etc. with a formal definition. Often used in the context of category or subject classification, glossaries or dictionaries, product or creative work types, etc. Use the name property for the term being defined, use termCode if the term has an alpha-numeric code allocated, use description to provide the definition of the term.
type DefinedTerm interface {
	// Parents
	Intangible
	// Unions
	AnatomicalStructure_AnatomicalSystem_BioChemEntity_DefinedTerm_Union
	DefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union
	DefinedTerm_PropertyValue_URL_Union
	DefinedTerm_QuantitativeValue_SizeSpecification_Text_Union
	DefinedTerm_Taxon_Text_URL_Union
	DefinedTerm_Text_URL_Union
	DefinedTerm_Text_Union
	// Accessors
	InDefinedTermSet() []DefinedTermSet_URL_Union // A [[DefinedTermSet]] that contains this term.
	TermCode() []Text                             // A code that identifies this [[DefinedTerm]] within a [[DefinedTermSet]]
}
type definedTermStruct struct {
	intangibleStruct

	InDefinedTermSet_ DefinedTermSet_URL_UnionSlice `json:"inDefinedTermSet,omitempty"`
	TermCode_         TextSlice                     `json:"termCode,omitempty"`
}

func (s *definedTermStruct) implementsAnatomicalStructure_AnatomicalSystem_BioChemEntity_DefinedTerm_Union() {
}
func (s *definedTermStruct) implementsDefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union() {
}
func (s *definedTermStruct) implementsDefinedTerm_PropertyValue_URL_Union()                        {}
func (s *definedTermStruct) implementsDefinedTerm_QuantitativeValue_SizeSpecification_Text_Union() {}
func (s *definedTermStruct) implementsDefinedTerm_Taxon_Text_URL_Union()                           {}
func (s *definedTermStruct) implementsDefinedTerm_Text_URL_Union()                                 {}
func (s *definedTermStruct) implementsDefinedTerm_Text_Union()                                     {}

func (s *definedTermStruct) InDefinedTermSet() []DefinedTermSet_URL_Union {
	return s.InDefinedTermSet_
}
func (s *definedTermStruct) TermCode() []Text {
	return s.TermCode_
}

type DefinedTermSlice []DefinedTerm

func (s *DefinedTermSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DefinedTermSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DefinedTerm)
	}
	return nil
}

var _ DefinedTerm = &definedTermStruct{}

// A set of defined terms for example a set of categories or a classification scheme, a glossary, dictionary or enumeration.
type DefinedTermSet interface {
	// Parents
	CreativeWork
	// Unions
	DefinedTermSet_URL_Union
	// Accessors
	HasDefinedTerm() []DefinedTerm // A Defined Term contained in this term set.
}
type definedTermSetStruct struct {
	creativeWorkStruct

	HasDefinedTerm_ DefinedTermSlice `json:"hasDefinedTerm,omitempty"`
}

func (s *definedTermSetStruct) implementsDefinedTermSet_URL_Union() {}

func (s *definedTermSetStruct) HasDefinedTerm() []DefinedTerm {
	return s.HasDefinedTerm_
}

type DefinedTermSetSlice []DefinedTermSet

func (s *DefinedTermSetSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DefinedTermSetSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DefinedTermSet)
	}
	return nil
}

var _ DefinedTermSet = &definedTermSetStruct{}

// The act of editing a recipient by removing one of its objects.
type DeleteAction interface {
	// Parents
	UpdateAction
}
type deleteActionStruct struct {
	updateActionStruct
}
type DeleteActionSlice []DeleteAction

func (s *DeleteActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DeleteActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DeleteAction)
	}
	return nil
}

var _ DeleteAction = &deleteActionStruct{}

// The price for the delivery of an offer using a particular delivery method.
type DeliveryChargeSpecification interface {
	// Parents
	PriceSpecification
	// Unions
	DeliveryChargeSpecification_MonetaryAmount_Union
	// Accessors
	AppliesToDeliveryMethod() []DeliveryMethod                  // The delivery method(s) to which the delivery charge or payment charge specification applies.
	AreaServed() []AdministrativeArea_GeoShape_Place_Text_Union // The geographic area where a service or offered item is provided.
	EligibleRegion() []GeoShape_Place_Text_Union                /*
	The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.\n\nSee also [[ineligibleRegion]].

	*/
	IneligibleRegion() []GeoShape_Place_Text_Union /*
	The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.\n\nSee also [[eligibleRegion]].

	*/
}
type deliveryChargeSpecificationStruct struct {
	priceSpecificationStruct

	AppliesToDeliveryMethod_ DeliveryMethodSlice                               `json:"appliesToDeliveryMethod,omitempty"`
	AreaServed_              AdministrativeArea_GeoShape_Place_Text_UnionSlice `json:"areaServed,omitempty"`
	EligibleRegion_          GeoShape_Place_Text_UnionSlice                    `json:"eligibleRegion,omitempty"`
	IneligibleRegion_        GeoShape_Place_Text_UnionSlice                    `json:"ineligibleRegion,omitempty"`
}

func (s *deliveryChargeSpecificationStruct) implementsDeliveryChargeSpecification_MonetaryAmount_Union() {
}

func (s *deliveryChargeSpecificationStruct) AppliesToDeliveryMethod() []DeliveryMethod {
	return s.AppliesToDeliveryMethod_
}
func (s *deliveryChargeSpecificationStruct) AreaServed() []AdministrativeArea_GeoShape_Place_Text_Union {
	return s.AreaServed_
}
func (s *deliveryChargeSpecificationStruct) EligibleRegion() []GeoShape_Place_Text_Union {
	return s.EligibleRegion_
}
func (s *deliveryChargeSpecificationStruct) IneligibleRegion() []GeoShape_Place_Text_Union {
	return s.IneligibleRegion_
}

type DeliveryChargeSpecificationSlice []DeliveryChargeSpecification

func (s *DeliveryChargeSpecificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DeliveryChargeSpecificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DeliveryChargeSpecification)
	}
	return nil
}

var _ DeliveryChargeSpecification = &deliveryChargeSpecificationStruct{}

// An event involving the delivery of an item.
type DeliveryEvent interface {
	// Parents
	Event
	// Accessors
	AccessCode() []Text                  // Password, PIN, or access code needed for delivery (e.g. from a locker).
	AvailableFrom() []DateTime           // When the item is available for pickup from the store, locker, etc.
	AvailableThrough() []DateTime        // After this date, the item will no longer be available for pickup.
	HasDeliveryMethod() []DeliveryMethod // Method used for delivery or shipping.
}
type deliveryEventStruct struct {
	eventStruct

	AccessCode_        TextSlice           `json:"accessCode,omitempty"`
	AvailableFrom_     DateTimeSlice       `json:"availableFrom,omitempty"`
	AvailableThrough_  DateTimeSlice       `json:"availableThrough,omitempty"`
	HasDeliveryMethod_ DeliveryMethodSlice `json:"hasDeliveryMethod,omitempty"`
}

func (s *deliveryEventStruct) AccessCode() []Text {
	return s.AccessCode_
}
func (s *deliveryEventStruct) AvailableFrom() []DateTime {
	return s.AvailableFrom_
}
func (s *deliveryEventStruct) AvailableThrough() []DateTime {
	return s.AvailableThrough_
}
func (s *deliveryEventStruct) HasDeliveryMethod() []DeliveryMethod {
	return s.HasDeliveryMethod_
}

type DeliveryEventSlice []DeliveryEvent

func (s *DeliveryEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DeliveryEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DeliveryEvent)
	}
	return nil
}

var _ DeliveryEvent = &deliveryEventStruct{}

/*
A delivery method is a standardized procedure for transferring the product or service to the destination of fulfillment chosen by the customer. Delivery methods are characterized by the means of transportation used, and by the organization or group that is the contracting party for the sending organization or person.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#DeliveryModeDirectDownload\n* http://purl.org/goodrelations/v1#DeliveryModeFreight\n* http://purl.org/goodrelations/v1#DeliveryModeMail\n* http://purl.org/goodrelations/v1#DeliveryModeOwnFleet\n* http://purl.org/goodrelations/v1#DeliveryModePickUp\n* http://purl.org/goodrelations/v1#DHL\n* http://purl.org/goodrelations/v1#FederalExpress\n* http://purl.org/goodrelations/v1#UPS

*/
type DeliveryMethod interface {
	// Parents
	Enumeration
}
type deliveryMethodStruct struct {
	enumerationStruct
}
type DeliveryMethodSlice []DeliveryMethod

func (s *DeliveryMethodSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DeliveryMethodSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DeliveryMethod)
	}
	return nil
}

var _ DeliveryMethod = &deliveryMethodStruct{}

// A DeliveryTimeSettings represents re-usable pieces of shipping information, relating to timing. It is designed for publication on an URL that may be referenced via the [[shippingSettingsLink]] property of a [[OfferShippingDetails]]. Several occurrences can be published, distinguished (and identified/referenced) by their different values for [[transitTimeLabel]].
type DeliveryTimeSettings interface {
	// Parents
	StructuredValue
	// Accessors
	DeliveryTime() []ShippingDeliveryTime // The total delay between the receipt of the order and the goods reaching the final customer.
	IsUnlabelledFallback() []Boolean      // This can be marked 'true' to indicate that some published [[DeliveryTimeSettings]] or [[ShippingRateSettings]] are intended to apply to all [[OfferShippingDetails]] published by the same merchant, when referenced by a [[shippingSettingsLink]] in those settings. It is not meaningful to use a 'true' value for this property alongside a transitTimeLabel (for [[DeliveryTimeSettings]]) or shippingLabel (for [[ShippingRateSettings]]), since this property is for use with unlabelled settings.
	ShippingDestination() []DefinedRegion // indicates (possibly multiple) shipping destinations. These can be defined in several ways e.g. postalCode ranges.
	TransitTimeLabel() []Text             // Label to match an [[OfferShippingDetails]] with a [[DeliveryTimeSettings]] (within the context of a [[shippingSettingsLink]] cross-reference).
}
type deliveryTimeSettingsStruct struct {
	structuredValueStruct

	DeliveryTime_         ShippingDeliveryTimeSlice `json:"deliveryTime,omitempty"`
	IsUnlabelledFallback_ BooleanSlice              `json:"isUnlabelledFallback,omitempty"`
	ShippingDestination_  DefinedRegionSlice        `json:"shippingDestination,omitempty"`
	TransitTimeLabel_     TextSlice                 `json:"transitTimeLabel,omitempty"`
}

func (s *deliveryTimeSettingsStruct) DeliveryTime() []ShippingDeliveryTime {
	return s.DeliveryTime_
}
func (s *deliveryTimeSettingsStruct) IsUnlabelledFallback() []Boolean {
	return s.IsUnlabelledFallback_
}
func (s *deliveryTimeSettingsStruct) ShippingDestination() []DefinedRegion {
	return s.ShippingDestination_
}
func (s *deliveryTimeSettingsStruct) TransitTimeLabel() []Text {
	return s.TransitTimeLabel_
}

type DeliveryTimeSettingsSlice []DeliveryTimeSettings

func (s *DeliveryTimeSettingsSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DeliveryTimeSettingsSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DeliveryTimeSettings)
	}
	return nil
}

var _ DeliveryTimeSettings = &deliveryTimeSettingsStruct{}

// A demand entity represents the public, not necessarily binding, not necessarily exclusive, announcement by an organization or person to seek a certain type of goods or services. For describing demand using this type, the very same properties used for Offer apply.
type Demand interface {
	// Parents
	Intangible
	// Unions
	Demand_Offer_Union
	// Accessors
	AcceptedPaymentMethod() []LoanOrCredit_PaymentMethod_Union  // The payment method(s) accepted by seller for this offer.
	AdvanceBookingRequirement() []QuantitativeValue             // The amount of time that is required between accepting the offer and the actual usage of the resource or service.
	AreaServed() []AdministrativeArea_GeoShape_Place_Text_Union // The geographic area where a service or offered item is provided.
	Availability() []ItemAvailability                           // The availability of this item&#x2014;for example In stock, Out of stock, Pre-order, etc.
	AvailabilityEnds() []Date_DateTime_Time_Union               // The end of the availability of the product or service included in the offer.
	AvailabilityStarts() []Date_DateTime_Time_Union             // The beginning of the availability of the product or service included in the offer.
	AvailableAtOrFrom() []Place                                 // The place(s) from which the offer can be obtained (e.g. store locations).
	AvailableDeliveryMethod() []DeliveryMethod                  // The delivery method(s) available for this offer.
	BusinessFunction() []BusinessFunction                       // The business function (e.g. sell, lease, repair, dispose) of the offer or component of a bundle (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell.
	DeliveryLeadTime() []QuantitativeValue                      // The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup.
	EligibleCustomerType() []BusinessEntityType                 // The type(s) of customers for which the given offer is valid.
	EligibleDuration() []QuantitativeValue                      // The duration for which the given offer is valid.
	EligibleQuantity() []QuantitativeValue                      // The interval and unit of measurement of ordering quantities for which the offer or price specification is valid. This allows e.g. specifying that a certain freight charge is valid only for a certain quantity.
	EligibleRegion() []GeoShape_Place_Text_Union                /*
	The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.\n\nSee also [[ineligibleRegion]].

	*/
	EligibleTransactionVolume() []PriceSpecification // The transaction volume, in a monetary unit, for which the offer or price specification is valid, e.g. for indicating a minimal purchasing volume, to express free shipping above a certain order volume, or to limit the acceptance of credit cards to purchases to a certain minimal amount.
	Gtin() []Text                                    /*
	A Global Trade Item Number ([GTIN](https://www.gs1.org/standards/id-keys/gtin)). GTINs identify trade items, including products and services, using numeric identification codes. The [[gtin]] property generalizes the earlier [[gtin8]], [[gtin12]], [[gtin13]], and [[gtin14]] properties. The GS1 [digital link specifications](https://www.gs1.org/standards/Digital-Link/) express GTINs as URLs. A correct [[gtin]] value should be a valid GTIN, which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or a "GS1 Digital Link" URL based on such a string. The numeric component should also have a [valid GS1 check digit](https://www.gs1.org/services/check-digit-calculator) and meet the other rules for valid GTINs. See also [GS1's GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) and [Wikipedia](https://en.wikipedia.org/wiki/Global_Trade_Item_Number) for more details. Left-padding of the gtin values is not required or encouraged.

	*/
	Gtin12() []Text                                // The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin13() []Text                                // The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceding zero. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin14() []Text                                // The GTIN-14 code of the product, or the product to which the offer refers. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin8() []Text                                 // The GTIN-8 code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	IncludesObject() []TypeAndQuantityNode         // This links to a node or nodes indicating the exact quantity of the products included in  an [[Offer]] or [[ProductCollection]].
	IneligibleRegion() []GeoShape_Place_Text_Union /*
	The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.\n\nSee also [[eligibleRegion]].

	*/
	InventoryLevel() []QuantitativeValue                                                  // The current approximate inventory level for the item or items.
	ItemCondition() []OfferItemCondition                                                  // A predefined value from OfferItemCondition specifying the condition of the product or service, or the products or services included in the offer. Also used for product return policies to specify the condition of products accepted for returns.
	ItemOffered() []AggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union // An item being offered (or demanded). The transactional nature of the offer or demand is documented using [[businessFunction]], e.g. sell, lease etc. While several common expected types are listed explicitly in this definition, others can be used. Using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
	Mpn() []Text                                                                          // The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers.
	PriceSpecification() []PriceSpecification                                             // One or more detailed price specifications, indicating the unit price and delivery or payment charges.
	Seller() []Organization_Person_Union                                                  // An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
	SerialNumber() []Text                                                                 // The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a shortcut for the serial number of the product included in the offer.
	Sku() []Text                                                                          // The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers.
	ValidFrom() []Date_DateTime_Union                                                     // The date when the item becomes valid.
	ValidThrough() []Date_DateTime_Union                                                  // The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
	Warranty() []WarrantyPromise                                                          // The warranty promise(s) included in the offer.
}
type demandStruct struct {
	intangibleStruct

	AcceptedPaymentMethod_     LoanOrCredit_PaymentMethod_UnionSlice                                      `json:"acceptedPaymentMethod,omitempty"`
	AdvanceBookingRequirement_ QuantitativeValueSlice                                                     `json:"advanceBookingRequirement,omitempty"`
	AreaServed_                AdministrativeArea_GeoShape_Place_Text_UnionSlice                          `json:"areaServed,omitempty"`
	Availability_              ItemAvailabilitySlice                                                      `json:"availability,omitempty"`
	AvailabilityEnds_          Date_DateTime_Time_UnionSlice                                              `json:"availabilityEnds,omitempty"`
	AvailabilityStarts_        Date_DateTime_Time_UnionSlice                                              `json:"availabilityStarts,omitempty"`
	AvailableAtOrFrom_         PlaceSlice                                                                 `json:"availableAtOrFrom,omitempty"`
	AvailableDeliveryMethod_   DeliveryMethodSlice                                                        `json:"availableDeliveryMethod,omitempty"`
	BusinessFunction_          BusinessFunctionSlice                                                      `json:"businessFunction,omitempty"`
	DeliveryLeadTime_          QuantitativeValueSlice                                                     `json:"deliveryLeadTime,omitempty"`
	EligibleCustomerType_      BusinessEntityTypeSlice                                                    `json:"eligibleCustomerType,omitempty"`
	EligibleDuration_          QuantitativeValueSlice                                                     `json:"eligibleDuration,omitempty"`
	EligibleQuantity_          QuantitativeValueSlice                                                     `json:"eligibleQuantity,omitempty"`
	EligibleRegion_            GeoShape_Place_Text_UnionSlice                                             `json:"eligibleRegion,omitempty"`
	EligibleTransactionVolume_ PriceSpecificationSlice                                                    `json:"eligibleTransactionVolume,omitempty"`
	Gtin_                      TextSlice                                                                  `json:"gtin,omitempty"`
	Gtin12_                    TextSlice                                                                  `json:"gtin12,omitempty"`
	Gtin13_                    TextSlice                                                                  `json:"gtin13,omitempty"`
	Gtin14_                    TextSlice                                                                  `json:"gtin14,omitempty"`
	Gtin8_                     TextSlice                                                                  `json:"gtin8,omitempty"`
	IncludesObject_            TypeAndQuantityNodeSlice                                                   `json:"includesObject,omitempty"`
	IneligibleRegion_          GeoShape_Place_Text_UnionSlice                                             `json:"ineligibleRegion,omitempty"`
	InventoryLevel_            QuantitativeValueSlice                                                     `json:"inventoryLevel,omitempty"`
	ItemCondition_             OfferItemConditionSlice                                                    `json:"itemCondition,omitempty"`
	ItemOffered_               AggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_UnionSlice `json:"itemOffered,omitempty"`
	Mpn_                       TextSlice                                                                  `json:"mpn,omitempty"`
	PriceSpecification_        PriceSpecificationSlice                                                    `json:"priceSpecification,omitempty"`
	Seller_                    Organization_Person_UnionSlice                                             `json:"seller,omitempty"`
	SerialNumber_              TextSlice                                                                  `json:"serialNumber,omitempty"`
	Sku_                       TextSlice                                                                  `json:"sku,omitempty"`
	ValidFrom_                 Date_DateTime_UnionSlice                                                   `json:"validFrom,omitempty"`
	ValidThrough_              Date_DateTime_UnionSlice                                                   `json:"validThrough,omitempty"`
	Warranty_                  WarrantyPromiseSlice                                                       `json:"warranty,omitempty"`
}

func (s *demandStruct) implementsDemand_Offer_Union() {}

func (s *demandStruct) AcceptedPaymentMethod() []LoanOrCredit_PaymentMethod_Union {
	return s.AcceptedPaymentMethod_
}
func (s *demandStruct) AdvanceBookingRequirement() []QuantitativeValue {
	return s.AdvanceBookingRequirement_
}
func (s *demandStruct) AreaServed() []AdministrativeArea_GeoShape_Place_Text_Union {
	return s.AreaServed_
}
func (s *demandStruct) Availability() []ItemAvailability {
	return s.Availability_
}
func (s *demandStruct) AvailabilityEnds() []Date_DateTime_Time_Union {
	return s.AvailabilityEnds_
}
func (s *demandStruct) AvailabilityStarts() []Date_DateTime_Time_Union {
	return s.AvailabilityStarts_
}
func (s *demandStruct) AvailableAtOrFrom() []Place {
	return s.AvailableAtOrFrom_
}
func (s *demandStruct) AvailableDeliveryMethod() []DeliveryMethod {
	return s.AvailableDeliveryMethod_
}
func (s *demandStruct) BusinessFunction() []BusinessFunction {
	return s.BusinessFunction_
}
func (s *demandStruct) DeliveryLeadTime() []QuantitativeValue {
	return s.DeliveryLeadTime_
}
func (s *demandStruct) EligibleCustomerType() []BusinessEntityType {
	return s.EligibleCustomerType_
}
func (s *demandStruct) EligibleDuration() []QuantitativeValue {
	return s.EligibleDuration_
}
func (s *demandStruct) EligibleQuantity() []QuantitativeValue {
	return s.EligibleQuantity_
}
func (s *demandStruct) EligibleRegion() []GeoShape_Place_Text_Union {
	return s.EligibleRegion_
}
func (s *demandStruct) EligibleTransactionVolume() []PriceSpecification {
	return s.EligibleTransactionVolume_
}
func (s *demandStruct) Gtin() []Text {
	return s.Gtin_
}
func (s *demandStruct) Gtin12() []Text {
	return s.Gtin12_
}
func (s *demandStruct) Gtin13() []Text {
	return s.Gtin13_
}
func (s *demandStruct) Gtin14() []Text {
	return s.Gtin14_
}
func (s *demandStruct) Gtin8() []Text {
	return s.Gtin8_
}
func (s *demandStruct) IncludesObject() []TypeAndQuantityNode {
	return s.IncludesObject_
}
func (s *demandStruct) IneligibleRegion() []GeoShape_Place_Text_Union {
	return s.IneligibleRegion_
}
func (s *demandStruct) InventoryLevel() []QuantitativeValue {
	return s.InventoryLevel_
}
func (s *demandStruct) ItemCondition() []OfferItemCondition {
	return s.ItemCondition_
}
func (s *demandStruct) ItemOffered() []AggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union {
	return s.ItemOffered_
}
func (s *demandStruct) Mpn() []Text {
	return s.Mpn_
}
func (s *demandStruct) PriceSpecification() []PriceSpecification {
	return s.PriceSpecification_
}
func (s *demandStruct) Seller() []Organization_Person_Union {
	return s.Seller_
}
func (s *demandStruct) SerialNumber() []Text {
	return s.SerialNumber_
}
func (s *demandStruct) Sku() []Text {
	return s.Sku_
}
func (s *demandStruct) ValidFrom() []Date_DateTime_Union {
	return s.ValidFrom_
}
func (s *demandStruct) ValidThrough() []Date_DateTime_Union {
	return s.ValidThrough_
}
func (s *demandStruct) Warranty() []WarrantyPromise {
	return s.Warranty_
}

type DemandSlice []Demand

func (s *DemandSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DemandSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Demand)
	}
	return nil
}

var _ Demand = &demandStruct{}

// A dentist.
type Dentist interface {
	// Parents
	LocalBusiness
	MedicalBusiness
	MedicalOrganization
}
type dentistStruct struct {
	localBusinessStruct
	medicalBusinessStruct_
	medicalOrganizationStruct____
}

func (s *dentistStruct) implementsAdministrativeArea_GeoShape_Place_Text_Union()    {} // re
func (s *dentistStruct) implementsAdministrativeArea_GeoShape_Place_Union()         {} // re
func (s *dentistStruct) implementsAudience_ContactPoint_Organization_Person_Union() {} // re
func (s *dentistStruct) implementsAudience_Organization_Person_Union()              {} // re
func (s *dentistStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}                                                                                              // re
func (s *dentistStruct) implementsBrand_Organization_Union()                                   {} // re
func (s *dentistStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *dentistStruct) implementsCivicStructure_LocalBusiness_Union()                         {} // re
func (s *dentistStruct) implementsContactPoint_Organization_Person_Union()                     {} // re
func (s *dentistStruct) implementsContactPoint_Place_Union()                                   {} // re
func (s *dentistStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *dentistStruct) implementsEducationalOrganization_Organization_Union()                 {} // re
func (s *dentistStruct) implementsFoodEstablishment_Place_Union()                              {} // re
func (s *dentistStruct) implementsGeoShape_Place_Text_Union()                                  {} // re
func (s *dentistStruct) implementsGeospatialGeometry_Place_Union()                             {} // re
func (s *dentistStruct) implementsItemList_Place_Union()                                       {} // re
func (s *dentistStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *dentistStruct) implementsOrganization_Person_Union()                                  {} // re
func (s *dentistStruct) implementsOrganization_ProgramMembership_Union()                       {} // re
func (s *dentistStruct) implementsPlace_PostalAddress_Text_Union()                             {} // re
func (s *dentistStruct) implementsPlace_PostalAddress_Text_VirtualLocation_Union()             {} // re
func (s *dentistStruct) implementsPlace_PostalAddress_URL_Union()                              {} // re
func (s *dentistStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *dentistStruct) implementsText_Thing_Union()                                           {} // re
type DentistSlice []Dentist

func (s *DentistSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DentistSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Dentist)
	}
	return nil
}

var _ Dentist = &dentistStruct{}

// The act of  departing from a place. An agent departs from an fromLocation for a destination, optionally with participants.
type DepartAction interface {
	// Parents
	MoveAction
}
type departActionStruct struct {
	moveActionStruct
}
type DepartActionSlice []DepartAction

func (s *DepartActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DepartActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DepartAction)
	}
	return nil
}

var _ DepartAction = &departActionStruct{}

// A department store.
type DepartmentStore interface {
	// Parents
	Store
}
type departmentStoreStruct struct {
	storeStruct
}
type DepartmentStoreSlice []DepartmentStore

func (s *DepartmentStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DepartmentStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DepartmentStore)
	}
	return nil
}

var _ DepartmentStore = &departmentStoreStruct{}

// A type of Bank Account with a main purpose of depositing funds to gain interest or other benefits.
type DepositAccount interface {
	// Parents
	BankAccount
	InvestmentOrDeposit
}
type depositAccountStruct struct {
	bankAccountStruct
	investmentOrDepositStruct_
}

func (s *depositAccountStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
} // re
func (s *depositAccountStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {
}                                                                          // re
func (s *depositAccountStruct) implementsDataFeedItem_Text_Thing_Union()   {} // re
func (s *depositAccountStruct) implementsListItem_Text_Thing_Union()       {} // re
func (s *depositAccountStruct) implementsOrderItem_Product_Service_Union() {} // re
func (s *depositAccountStruct) implementsProduct_Service_Union()           {} // re
func (s *depositAccountStruct) implementsText_Thing_URL_Union()            {} // re
func (s *depositAccountStruct) implementsText_Thing_Union()                {} // re
type DepositAccountSlice []DepositAccount

func (s *DepositAccountSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DepositAccountSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DepositAccount)
	}
	return nil
}

var _ DepositAccount = &depositAccountStruct{}

// A medical laboratory that offers on-site or off-site diagnostic services.
type DiagnosticLab interface {
	// Parents
	MedicalOrganization
	// Accessors
	AvailableTest() []MedicalTest // A diagnostic test or procedure offered by this lab.
}
type diagnosticLabStruct struct {
	medicalOrganizationStruct

	AvailableTest_ MedicalTestSlice `json:"availableTest,omitempty"`
}

func (s *diagnosticLabStruct) AvailableTest() []MedicalTest {
	return s.AvailableTest_
}

type DiagnosticLabSlice []DiagnosticLab

func (s *DiagnosticLabSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DiagnosticLabSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DiagnosticLab)
	}
	return nil
}

var _ DiagnosticLab = &diagnosticLabStruct{}

// A medical procedure intended primarily for diagnostic, as opposed to therapeutic, purposes.
type DiagnosticProcedure interface {
	// Parents
	MedicalProcedure
}
type diagnosticProcedureStruct struct {
	medicalProcedureStruct
}
type DiagnosticProcedureSlice []DiagnosticProcedure

func (s *DiagnosticProcedureSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DiagnosticProcedureSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DiagnosticProcedure)
	}
	return nil
}

var _ DiagnosticProcedure = &diagnosticProcedureStruct{}

// A strategy of regulating the intake of food to achieve or maintain a specific health-related goal.
type Diet interface {
	// Parents
	CreativeWork
	LifestyleModification
	// Accessors
	DietFeatures() []Text                   // Nutritional information specific to the dietary plan. May include dietary recommendations on what foods to avoid, what foods to consume, and specific alterations/deviations from the USDA or other regulatory body's approved dietary guidelines.
	Endorsers() []Organization_Person_Union // People or organizations that endorse the plan.
	ExpertConsiderations() []Text           // Medical expert advice related to the plan.
	PhysiologicalBenefits() []Text          // Specific physiologic benefits associated to the plan.
	Risks() []Text                          // Specific physiologic risks associated to the diet plan.
}
type dietStruct struct {
	creativeWorkStruct
	lifestyleModificationStruct

	DietFeatures_          TextSlice                      `json:"dietFeatures,omitempty"`
	Endorsers_             Organization_Person_UnionSlice `json:"endorsers,omitempty"`
	ExpertConsiderations_  TextSlice                      `json:"expertConsiderations,omitempty"`
	PhysiologicalBenefits_ TextSlice                      `json:"physiologicalBenefits,omitempty"`
	Risks_                 TextSlice                      `json:"risks,omitempty"`
}

func (s *dietStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}                                                                                           // re
func (s *dietStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *dietStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *dietStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *dietStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *dietStruct) implementsText_Thing_Union()                                           {} // re
func (s *dietStruct) DietFeatures() []Text {
	return s.DietFeatures_
}
func (s *dietStruct) Endorsers() []Organization_Person_Union {
	return s.Endorsers_
}
func (s *dietStruct) ExpertConsiderations() []Text {
	return s.ExpertConsiderations_
}
func (s *dietStruct) PhysiologicalBenefits() []Text {
	return s.PhysiologicalBenefits_
}
func (s *dietStruct) Risks() []Text {
	return s.Risks_
}

type DietSlice []Diet

func (s *DietSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DietSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Diet)
	}
	return nil
}

var _ Diet = &dietStruct{}

// A product taken by mouth that contains a dietary ingredient intended to supplement the diet. Dietary ingredients may include vitamins, minerals, herbs or other botanicals, amino acids, and substances such as enzymes, organ tissues, glandulars and metabolites.
type DietarySupplement interface {
	// Parents
	Substance
	// Accessors
	ActiveIngredient() []Text                                     // An active ingredient, typically chemical compounds and/or biologic substances.
	IsProprietary() []Boolean                                     // True if this item's name is a proprietary/brand name (vs. generic name).
	LegalStatus() []DrugLegalStatus_MedicalEnumeration_Text_Union // The drug or supplement's legal status, including any controlled substance schedules that apply.
	Manufacturer() []Organization                                 // The manufacturer of the product.
	MaximumIntake() []MaximumDoseSchedule                         // Recommended intake of this supplement for a given population as defined by a specific recommending authority.
	MechanismOfAction() []Text                                    // The specific biochemical interaction through which this drug or supplement produces its pharmacological effect.
	NonProprietaryName() []Text                                   // The generic name of this drug or supplement.
	ProprietaryName() []Text                                      // Proprietary name given to the diet plan, typically by its originator or creator.
	RecommendedIntake() []RecommendedDoseSchedule                 // Recommended intake of this supplement for a given population as defined by a specific recommending authority.
	SafetyConsideration() []Text                                  // Any potential safety concern associated with the supplement. May include interactions with other drugs and foods, pregnancy, breastfeeding, known adverse reactions, and documented efficacy of the supplement.
	TargetPopulation() []Text                                     // Characteristics of the population for which this is intended, or which typically uses it, e.g. 'adults'.
}
type dietarySupplementStruct struct {
	substanceStruct

	ActiveIngredient_    TextSlice                                          `json:"activeIngredient,omitempty"`
	IsProprietary_       BooleanSlice                                       `json:"isProprietary,omitempty"`
	LegalStatus_         DrugLegalStatus_MedicalEnumeration_Text_UnionSlice `json:"legalStatus,omitempty"`
	Manufacturer_        OrganizationSlice                                  `json:"manufacturer,omitempty"`
	MaximumIntake_       MaximumDoseScheduleSlice                           `json:"maximumIntake,omitempty"`
	MechanismOfAction_   TextSlice                                          `json:"mechanismOfAction,omitempty"`
	NonProprietaryName_  TextSlice                                          `json:"nonProprietaryName,omitempty"`
	ProprietaryName_     TextSlice                                          `json:"proprietaryName,omitempty"`
	RecommendedIntake_   RecommendedDoseScheduleSlice                       `json:"recommendedIntake,omitempty"`
	SafetyConsideration_ TextSlice                                          `json:"safetyConsideration,omitempty"`
	TargetPopulation_    TextSlice                                          `json:"targetPopulation,omitempty"`
}

func (s *dietarySupplementStruct) ActiveIngredient() []Text {
	return s.ActiveIngredient_
}
func (s *dietarySupplementStruct) IsProprietary() []Boolean {
	return s.IsProprietary_
}
func (s *dietarySupplementStruct) LegalStatus() []DrugLegalStatus_MedicalEnumeration_Text_Union {
	return s.LegalStatus_
}
func (s *dietarySupplementStruct) Manufacturer() []Organization {
	return s.Manufacturer_
}
func (s *dietarySupplementStruct) MaximumIntake() []MaximumDoseSchedule {
	return s.MaximumIntake_
}
func (s *dietarySupplementStruct) MechanismOfAction() []Text {
	return s.MechanismOfAction_
}
func (s *dietarySupplementStruct) NonProprietaryName() []Text {
	return s.NonProprietaryName_
}
func (s *dietarySupplementStruct) ProprietaryName() []Text {
	return s.ProprietaryName_
}
func (s *dietarySupplementStruct) RecommendedIntake() []RecommendedDoseSchedule {
	return s.RecommendedIntake_
}
func (s *dietarySupplementStruct) SafetyConsideration() []Text {
	return s.SafetyConsideration_
}
func (s *dietarySupplementStruct) TargetPopulation() []Text {
	return s.TargetPopulation_
}

type DietarySupplementSlice []DietarySupplement

func (s *DietarySupplementSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DietarySupplementSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DietarySupplement)
	}
	return nil
}

var _ DietarySupplement = &dietarySupplementStruct{}

// An electronic file or document.
type DigitalDocument interface {
	// Parents
	CreativeWork
	// Accessors
	HasDigitalDocumentPermission() []DigitalDocumentPermission // A permission related to the access to this document (e.g. permission to read or write an electronic document). For a public document, specify a grantee with an Audience with audienceType equal to "public".
}
type digitalDocumentStruct struct {
	creativeWorkStruct

	HasDigitalDocumentPermission_ DigitalDocumentPermissionSlice `json:"hasDigitalDocumentPermission,omitempty"`
}

func (s *digitalDocumentStruct) HasDigitalDocumentPermission() []DigitalDocumentPermission {
	return s.HasDigitalDocumentPermission_
}

type DigitalDocumentSlice []DigitalDocument

func (s *DigitalDocumentSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DigitalDocumentSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DigitalDocument)
	}
	return nil
}

var _ DigitalDocument = &digitalDocumentStruct{}

// A permission for a particular person or group to access a particular file.
type DigitalDocumentPermission interface {
	// Parents
	Intangible
	// Accessors
	Grantee() []Audience_ContactPoint_Organization_Person_Union // The person, organization, contact point, or audience that has been granted this permission.
	PermissionType() []DigitalDocumentPermissionType            // The type of permission granted the person, organization, or audience.
}
type digitalDocumentPermissionStruct struct {
	intangibleStruct

	Grantee_        Audience_ContactPoint_Organization_Person_UnionSlice `json:"grantee,omitempty"`
	PermissionType_ DigitalDocumentPermissionTypeSlice                   `json:"permissionType,omitempty"`
}

func (s *digitalDocumentPermissionStruct) Grantee() []Audience_ContactPoint_Organization_Person_Union {
	return s.Grantee_
}
func (s *digitalDocumentPermissionStruct) PermissionType() []DigitalDocumentPermissionType {
	return s.PermissionType_
}

type DigitalDocumentPermissionSlice []DigitalDocumentPermission

func (s *DigitalDocumentPermissionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DigitalDocumentPermissionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DigitalDocumentPermission)
	}
	return nil
}

var _ DigitalDocumentPermission = &digitalDocumentPermissionStruct{}

// A type of permission which can be granted for accessing a digital document.
type DigitalDocumentPermissionType interface {
	// Parents
	Enumeration
}
type digitalDocumentPermissionTypeStruct struct {
	enumerationStruct
}
type DigitalDocumentPermissionTypeSlice []DigitalDocumentPermissionType

func (s *DigitalDocumentPermissionTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DigitalDocumentPermissionTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DigitalDocumentPermissionType)
	}
	return nil
}

var _ DigitalDocumentPermissionType = &digitalDocumentPermissionTypeStruct{}

// Enumerates some common technology platforms, for use with properties such as [[actionPlatform]]. It is not supposed to be comprehensive - when a suitable code is not enumerated here, textual or URL values can be used instead. These codes are at a fairly high level and do not deal with versioning and other nuance. Additional codes can be suggested [in github](https://github.com/schemaorg/schemaorg/issues/3057).
type DigitalPlatformEnumeration interface {
	// Parents
	Enumeration
	// Unions
	DigitalPlatformEnumeration_Text_URL_Union
}
type digitalPlatformEnumerationStruct struct {
	enumerationStruct
}

func (s *digitalPlatformEnumerationStruct) implementsDigitalPlatformEnumeration_Text_URL_Union() {}

type DigitalPlatformEnumerationSlice []DigitalPlatformEnumeration

func (s *DigitalPlatformEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DigitalPlatformEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DigitalPlatformEnumeration)
	}
	return nil
}

var _ DigitalPlatformEnumeration = &digitalPlatformEnumerationStruct{}

// The act of expressing a difference of opinion with the object. An agent disagrees to/about an object (a proposition, topic or theme) with participants.
type DisagreeAction interface {
	// Parents
	ReactAction
}
type disagreeActionStruct struct {
	reactActionStruct
}
type DisagreeActionSlice []DisagreeAction

func (s *DisagreeActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DisagreeActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DisagreeAction)
	}
	return nil
}

var _ DisagreeAction = &disagreeActionStruct{}

// The act of discovering/finding an object.
type DiscoverAction interface {
	// Parents
	FindAction
}
type discoverActionStruct struct {
	findActionStruct
}
type DiscoverActionSlice []DiscoverAction

func (s *DiscoverActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DiscoverActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DiscoverAction)
	}
	return nil
}

var _ DiscoverAction = &discoverActionStruct{}

// A posting to a discussion forum.
type DiscussionForumPosting interface {
	// Parents
	SocialMediaPosting
}
type discussionForumPostingStruct struct {
	socialMediaPostingStruct
}
type DiscussionForumPostingSlice []DiscussionForumPosting

func (s *DiscussionForumPostingSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DiscussionForumPostingSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DiscussionForumPosting)
	}
	return nil
}

var _ DiscussionForumPosting = &discussionForumPostingStruct{}

// The act of expressing a negative sentiment about the object. An agent dislikes an object (a proposition, topic or theme) with participants.
type DislikeAction interface {
	// Parents
	ReactAction
}
type dislikeActionStruct struct {
	reactActionStruct
}
type DislikeActionSlice []DislikeAction

func (s *DislikeActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DislikeActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DislikeAction)
	}
	return nil
}

var _ DislikeAction = &dislikeActionStruct{}

// Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length unit of measure&gt;'. E.g., '7 ft'.
type Distance interface {
	// Parents
	Quantity
	// Unions
	Distance_Number_Text_Union
	Distance_QuantitativeValue_Union
	Distance_Text_Union
}
type distanceStruct struct {
	quantityStruct
}

func (s *distanceStruct) implementsDistance_Number_Text_Union()       {}
func (s *distanceStruct) implementsDistance_QuantitativeValue_Union() {}
func (s *distanceStruct) implementsDistance_Text_Union()              {}

type DistanceSlice []Distance

func (s *DistanceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DistanceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Distance)
	}
	return nil
}

var _ Distance = &distanceStruct{}

// A distillery.
type Distillery interface {
	// Parents
	FoodEstablishment
}
type distilleryStruct struct {
	foodEstablishmentStruct
}
type DistillerySlice []Distillery

func (s *DistillerySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DistillerySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Distillery)
	}
	return nil
}

var _ Distillery = &distilleryStruct{}

// The act of providing goods, services, or money without compensation, often for philanthropic reasons.
type DonateAction interface {
	// Parents
	TradeAction
	// Accessors
	Recipient() []Audience_ContactPoint_Organization_Person_Union // A sub property of participant. The participant who is at the receiving end of the action.
}
type donateActionStruct struct {
	tradeActionStruct

	Recipient_ Audience_ContactPoint_Organization_Person_UnionSlice `json:"recipient,omitempty"`
}

func (s *donateActionStruct) Recipient() []Audience_ContactPoint_Organization_Person_Union {
	return s.Recipient_
}

type DonateActionSlice []DonateAction

func (s *DonateActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DonateActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DonateAction)
	}
	return nil
}

var _ DonateAction = &donateActionStruct{}

// A specific dosing schedule for a drug or supplement.
type DoseSchedule interface {
	// Parents
	MedicalIntangible
	// Accessors
	DoseUnit() []Text                           // The unit of the dose, e.g. 'mg'.
	DoseValue() []Number_QualitativeValue_Union // The value of the dose, e.g. 500.
	Frequency() []Text                          // How often the dose is taken, e.g. 'daily'.
	TargetPopulation() []Text                   // Characteristics of the population for which this is intended, or which typically uses it, e.g. 'adults'.
}
type doseScheduleStruct struct {
	medicalIntangibleStruct

	DoseUnit_         TextSlice                          `json:"doseUnit,omitempty"`
	DoseValue_        Number_QualitativeValue_UnionSlice `json:"doseValue,omitempty"`
	Frequency_        TextSlice                          `json:"frequency,omitempty"`
	TargetPopulation_ TextSlice                          `json:"targetPopulation,omitempty"`
}

func (s *doseScheduleStruct) DoseUnit() []Text {
	return s.DoseUnit_
}
func (s *doseScheduleStruct) DoseValue() []Number_QualitativeValue_Union {
	return s.DoseValue_
}
func (s *doseScheduleStruct) Frequency() []Text {
	return s.Frequency_
}
func (s *doseScheduleStruct) TargetPopulation() []Text {
	return s.TargetPopulation_
}

type DoseScheduleSlice []DoseSchedule

func (s *DoseScheduleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DoseScheduleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DoseSchedule)
	}
	return nil
}

var _ DoseSchedule = &doseScheduleStruct{}

// The act of downloading an object.
type DownloadAction interface {
	// Parents
	TransferAction
}
type downloadActionStruct struct {
	transferActionStruct
}
type DownloadActionSlice []DownloadAction

func (s *DownloadActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DownloadActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DownloadAction)
	}
	return nil
}

var _ DownloadAction = &downloadActionStruct{}

// The act of producing a visual/graphical representation of an object, typically with a pen/pencil and paper as instruments.
type DrawAction interface {
	// Parents
	CreateAction
}
type drawActionStruct struct {
	createActionStruct
}
type DrawActionSlice []DrawAction

func (s *DrawActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DrawActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DrawAction)
	}
	return nil
}

var _ DrawAction = &drawActionStruct{}

// A picture or diagram made with a pencil, pen, or crayon rather than paint.
type Drawing interface {
	// Parents
	CreativeWork
}
type drawingStruct struct {
	creativeWorkStruct
}
type DrawingSlice []Drawing

func (s *DrawingSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DrawingSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Drawing)
	}
	return nil
}

var _ Drawing = &drawingStruct{}

// The act of swallowing liquids.
type DrinkAction interface {
	// Parents
	ConsumeAction
}
type drinkActionStruct struct {
	consumeActionStruct
}
type DrinkActionSlice []DrinkAction

func (s *DrinkActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DrinkActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DrinkAction)
	}
	return nil
}

var _ DrinkAction = &drinkActionStruct{}

// A value indicating which roadwheels will receive torque.
type DriveWheelConfigurationValue interface {
	// Parents
	QualitativeValue
	// Unions
	DriveWheelConfigurationValue_Text_Union
}
type driveWheelConfigurationValueStruct struct {
	qualitativeValueStruct
}

func (s *driveWheelConfigurationValueStruct) implementsDriveWheelConfigurationValue_Text_Union() {}

type DriveWheelConfigurationValueSlice []DriveWheelConfigurationValue

func (s *DriveWheelConfigurationValueSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DriveWheelConfigurationValueSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DriveWheelConfigurationValue)
	}
	return nil
}

var _ DriveWheelConfigurationValue = &driveWheelConfigurationValueStruct{}

// A chemical or biologic substance, used as a medical therapy, that has a physiological effect on an organism. Here the term drug is used interchangeably with the term medicine although clinical knowledge make a clear difference between them.
type Drug interface {
	// Parents
	Substance
	// Accessors
	ActiveIngredient() []Text                                     // An active ingredient, typically chemical compounds and/or biologic substances.
	AdministrationRoute() []Text                                  // A route by which this drug may be administered, e.g. 'oral'.
	AlcoholWarning() []Text                                       // Any precaution, guidance, contraindication, etc. related to consumption of alcohol while taking this drug.
	AvailableStrength() []DrugStrength                            // An available dosage strength for the drug.
	BreastfeedingWarning() []Text                                 // Any precaution, guidance, contraindication, etc. related to this drug's use by breastfeeding mothers.
	ClincalPharmacology() []Text                                  // Description of the absorption and elimination of drugs, including their concentration (pharmacokinetics, pK) and biological effects (pharmacodynamics, pD).
	ClinicalPharmacology() []Text                                 // Description of the absorption and elimination of drugs, including their concentration (pharmacokinetics, pK) and biological effects (pharmacodynamics, pD).
	DosageForm() []Text                                           // A dosage form in which this drug/supplement is available, e.g. 'tablet', 'suspension', 'injection'.
	DoseSchedule() []DoseSchedule                                 // A dosing schedule for the drug for a given population, either observed, recommended, or maximum dose based on the type used.
	DrugClass() []DrugClass                                       // The class of drug this belongs to (e.g., statins).
	DrugUnit() []Text                                             // The unit in which the drug is measured, e.g. '5 mg tablet'.
	FoodWarning() []Text                                          // Any precaution, guidance, contraindication, etc. related to consumption of specific foods while taking this drug.
	IncludedInHealthInsurancePlan() []HealthInsurancePlan         // The insurance plans that cover this drug.
	InteractingDrug() []Drug                                      // Another drug that is known to interact with this drug in a way that impacts the effect of this drug or causes a risk to the patient. Note: disease interactions are typically captured as contraindications.
	IsAvailableGenerically() []Boolean                            // True if the drug is available in a generic form (regardless of name).
	IsProprietary() []Boolean                                     // True if this item's name is a proprietary/brand name (vs. generic name).
	LabelDetails() []URL                                          // Link to the drug's label details.
	LegalStatus() []DrugLegalStatus_MedicalEnumeration_Text_Union // The drug or supplement's legal status, including any controlled substance schedules that apply.
	Manufacturer() []Organization                                 // The manufacturer of the product.
	MaximumIntake() []MaximumDoseSchedule                         // Recommended intake of this supplement for a given population as defined by a specific recommending authority.
	MechanismOfAction() []Text                                    // The specific biochemical interaction through which this drug or supplement produces its pharmacological effect.
	NonProprietaryName() []Text                                   // The generic name of this drug or supplement.
	Overdosage() []Text                                           // Any information related to overdose on a drug, including signs or symptoms, treatments, contact information for emergency response.
	PregnancyCategory() []DrugPregnancyCategory                   // Pregnancy category of this drug.
	PregnancyWarning() []Text                                     // Any precaution, guidance, contraindication, etc. related to this drug's use during pregnancy.
	PrescribingInfo() []URL                                       // Link to prescribing information for the drug.
	PrescriptionStatus() []DrugPrescriptionStatus_Text_Union      // Indicates the status of drug prescription eg. local catalogs classifications or whether the drug is available by prescription or over-the-counter, etc.
	ProprietaryName() []Text                                      // Proprietary name given to the diet plan, typically by its originator or creator.
	RelatedDrug() []Drug                                          // Any other drug related to this one, for example commonly-prescribed alternatives.
	Rxcui() []Text                                                // The RxCUI drug identifier from RXNORM.
	Warning() []Text_URL_Union                                    // Any FDA or other warnings about the drug (text or URL).
}
type drugStruct struct {
	substanceStruct

	ActiveIngredient_              TextSlice                                          `json:"activeIngredient,omitempty"`
	AdministrationRoute_           TextSlice                                          `json:"administrationRoute,omitempty"`
	AlcoholWarning_                TextSlice                                          `json:"alcoholWarning,omitempty"`
	AvailableStrength_             DrugStrengthSlice                                  `json:"availableStrength,omitempty"`
	BreastfeedingWarning_          TextSlice                                          `json:"breastfeedingWarning,omitempty"`
	ClincalPharmacology_           TextSlice                                          `json:"clincalPharmacology,omitempty"`
	ClinicalPharmacology_          TextSlice                                          `json:"clinicalPharmacology,omitempty"`
	DosageForm_                    TextSlice                                          `json:"dosageForm,omitempty"`
	DoseSchedule_                  DoseScheduleSlice                                  `json:"doseSchedule,omitempty"`
	DrugClass_                     DrugClassSlice                                     `json:"drugClass,omitempty"`
	DrugUnit_                      TextSlice                                          `json:"drugUnit,omitempty"`
	FoodWarning_                   TextSlice                                          `json:"foodWarning,omitempty"`
	IncludedInHealthInsurancePlan_ HealthInsurancePlanSlice                           `json:"includedInHealthInsurancePlan,omitempty"`
	InteractingDrug_               DrugSlice                                          `json:"interactingDrug,omitempty"`
	IsAvailableGenerically_        BooleanSlice                                       `json:"isAvailableGenerically,omitempty"`
	IsProprietary_                 BooleanSlice                                       `json:"isProprietary,omitempty"`
	LabelDetails_                  URLSlice                                           `json:"labelDetails,omitempty"`
	LegalStatus_                   DrugLegalStatus_MedicalEnumeration_Text_UnionSlice `json:"legalStatus,omitempty"`
	Manufacturer_                  OrganizationSlice                                  `json:"manufacturer,omitempty"`
	MaximumIntake_                 MaximumDoseScheduleSlice                           `json:"maximumIntake,omitempty"`
	MechanismOfAction_             TextSlice                                          `json:"mechanismOfAction,omitempty"`
	NonProprietaryName_            TextSlice                                          `json:"nonProprietaryName,omitempty"`
	Overdosage_                    TextSlice                                          `json:"overdosage,omitempty"`
	PregnancyCategory_             DrugPregnancyCategorySlice                         `json:"pregnancyCategory,omitempty"`
	PregnancyWarning_              TextSlice                                          `json:"pregnancyWarning,omitempty"`
	PrescribingInfo_               URLSlice                                           `json:"prescribingInfo,omitempty"`
	PrescriptionStatus_            DrugPrescriptionStatus_Text_UnionSlice             `json:"prescriptionStatus,omitempty"`
	ProprietaryName_               TextSlice                                          `json:"proprietaryName,omitempty"`
	RelatedDrug_                   DrugSlice                                          `json:"relatedDrug,omitempty"`
	Rxcui_                         TextSlice                                          `json:"rxcui,omitempty"`
	Warning_                       Text_URL_UnionSlice                                `json:"warning,omitempty"`
}

func (s *drugStruct) ActiveIngredient() []Text {
	return s.ActiveIngredient_
}
func (s *drugStruct) AdministrationRoute() []Text {
	return s.AdministrationRoute_
}
func (s *drugStruct) AlcoholWarning() []Text {
	return s.AlcoholWarning_
}
func (s *drugStruct) AvailableStrength() []DrugStrength {
	return s.AvailableStrength_
}
func (s *drugStruct) BreastfeedingWarning() []Text {
	return s.BreastfeedingWarning_
}
func (s *drugStruct) ClincalPharmacology() []Text {
	return s.ClincalPharmacology_
}
func (s *drugStruct) ClinicalPharmacology() []Text {
	return s.ClinicalPharmacology_
}
func (s *drugStruct) DosageForm() []Text {
	return s.DosageForm_
}
func (s *drugStruct) DoseSchedule() []DoseSchedule {
	return s.DoseSchedule_
}
func (s *drugStruct) DrugClass() []DrugClass {
	return s.DrugClass_
}
func (s *drugStruct) DrugUnit() []Text {
	return s.DrugUnit_
}
func (s *drugStruct) FoodWarning() []Text {
	return s.FoodWarning_
}
func (s *drugStruct) IncludedInHealthInsurancePlan() []HealthInsurancePlan {
	return s.IncludedInHealthInsurancePlan_
}
func (s *drugStruct) InteractingDrug() []Drug {
	return s.InteractingDrug_
}
func (s *drugStruct) IsAvailableGenerically() []Boolean {
	return s.IsAvailableGenerically_
}
func (s *drugStruct) IsProprietary() []Boolean {
	return s.IsProprietary_
}
func (s *drugStruct) LabelDetails() []URL {
	return s.LabelDetails_
}
func (s *drugStruct) LegalStatus() []DrugLegalStatus_MedicalEnumeration_Text_Union {
	return s.LegalStatus_
}
func (s *drugStruct) Manufacturer() []Organization {
	return s.Manufacturer_
}
func (s *drugStruct) MaximumIntake() []MaximumDoseSchedule {
	return s.MaximumIntake_
}
func (s *drugStruct) MechanismOfAction() []Text {
	return s.MechanismOfAction_
}
func (s *drugStruct) NonProprietaryName() []Text {
	return s.NonProprietaryName_
}
func (s *drugStruct) Overdosage() []Text {
	return s.Overdosage_
}
func (s *drugStruct) PregnancyCategory() []DrugPregnancyCategory {
	return s.PregnancyCategory_
}
func (s *drugStruct) PregnancyWarning() []Text {
	return s.PregnancyWarning_
}
func (s *drugStruct) PrescribingInfo() []URL {
	return s.PrescribingInfo_
}
func (s *drugStruct) PrescriptionStatus() []DrugPrescriptionStatus_Text_Union {
	return s.PrescriptionStatus_
}
func (s *drugStruct) ProprietaryName() []Text {
	return s.ProprietaryName_
}
func (s *drugStruct) RelatedDrug() []Drug {
	return s.RelatedDrug_
}
func (s *drugStruct) Rxcui() []Text {
	return s.Rxcui_
}
func (s *drugStruct) Warning() []Text_URL_Union {
	return s.Warning_
}

type DrugSlice []Drug

func (s *DrugSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DrugSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Drug)
	}
	return nil
}

var _ Drug = &drugStruct{}

// A class of medical drugs, e.g., statins. Classes can represent general pharmacological class, common mechanisms of action, common physiological effects, etc.
type DrugClass interface {
	// Parents
	MedicalEntity
	// Accessors
	Drug() []Drug // Specifying a drug or medicine used in a medication procedure.
}
type drugClassStruct struct {
	medicalEntityStruct

	Drug_ DrugSlice `json:"drug,omitempty"`
}

func (s *drugClassStruct) Drug() []Drug {
	return s.Drug_
}

type DrugClassSlice []DrugClass

func (s *DrugClassSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DrugClassSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DrugClass)
	}
	return nil
}

var _ DrugClass = &drugClassStruct{}

// The cost per unit of a medical drug. Note that this type is not meant to represent the price in an offer of a drug for sale; see the Offer type for that. This type will typically be used to tag wholesale or average retail cost of a drug, or maximum reimbursable cost. Costs of medical drugs vary widely depending on how and where they are paid for, so while this type captures some of the variables, costs should be used with caution by consumers of this schema's markup.
type DrugCost interface {
	// Parents
	MedicalEntity
	// Accessors
	ApplicableLocation() []AdministrativeArea          // The location in which the status applies.
	CostCategory() []DrugCostCategory                  // The category of cost, such as wholesale, retail, reimbursement cap, etc.
	CostCurrency() []Text                              // The currency (in 3-letter of the drug cost. See: http://en.wikipedia.org/wiki/ISO_4217.
	CostOrigin() []Text                                // Additional details to capture the origin of the cost data. For example, 'Medicare Part B'.
	CostPerUnit() []Number_QualitativeValue_Text_Union // The cost per unit of the drug.
	DrugUnit() []Text                                  // The unit in which the drug is measured, e.g. '5 mg tablet'.
}
type drugCostStruct struct {
	medicalEntityStruct

	ApplicableLocation_ AdministrativeAreaSlice                 `json:"applicableLocation,omitempty"`
	CostCategory_       DrugCostCategorySlice                   `json:"costCategory,omitempty"`
	CostCurrency_       TextSlice                               `json:"costCurrency,omitempty"`
	CostOrigin_         TextSlice                               `json:"costOrigin,omitempty"`
	CostPerUnit_        Number_QualitativeValue_Text_UnionSlice `json:"costPerUnit,omitempty"`
	DrugUnit_           TextSlice                               `json:"drugUnit,omitempty"`
}

func (s *drugCostStruct) ApplicableLocation() []AdministrativeArea {
	return s.ApplicableLocation_
}
func (s *drugCostStruct) CostCategory() []DrugCostCategory {
	return s.CostCategory_
}
func (s *drugCostStruct) CostCurrency() []Text {
	return s.CostCurrency_
}
func (s *drugCostStruct) CostOrigin() []Text {
	return s.CostOrigin_
}
func (s *drugCostStruct) CostPerUnit() []Number_QualitativeValue_Text_Union {
	return s.CostPerUnit_
}
func (s *drugCostStruct) DrugUnit() []Text {
	return s.DrugUnit_
}

type DrugCostSlice []DrugCost

func (s *DrugCostSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DrugCostSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DrugCost)
	}
	return nil
}

var _ DrugCost = &drugCostStruct{}

// Enumerated categories of medical drug costs.
type DrugCostCategory interface {
	// Parents
	MedicalEnumeration
}
type drugCostCategoryStruct struct {
	medicalEnumerationStruct
}
type DrugCostCategorySlice []DrugCostCategory

func (s *DrugCostCategorySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DrugCostCategorySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DrugCostCategory)
	}
	return nil
}

var _ DrugCostCategory = &drugCostCategoryStruct{}

// The legal availability status of a medical drug.
type DrugLegalStatus interface {
	// Parents
	MedicalIntangible
	// Unions
	DrugLegalStatus_MedicalEnumeration_Text_Union
	// Accessors
	ApplicableLocation() []AdministrativeArea // The location in which the status applies.
}
type drugLegalStatusStruct struct {
	medicalIntangibleStruct

	ApplicableLocation_ AdministrativeAreaSlice `json:"applicableLocation,omitempty"`
}

func (s *drugLegalStatusStruct) implementsDrugLegalStatus_MedicalEnumeration_Text_Union() {}

func (s *drugLegalStatusStruct) ApplicableLocation() []AdministrativeArea {
	return s.ApplicableLocation_
}

type DrugLegalStatusSlice []DrugLegalStatus

func (s *DrugLegalStatusSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DrugLegalStatusSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DrugLegalStatus)
	}
	return nil
}

var _ DrugLegalStatus = &drugLegalStatusStruct{}

// Categories that represent an assessment of the risk of fetal injury due to a drug or pharmaceutical used as directed by the mother during pregnancy.
type DrugPregnancyCategory interface {
	// Parents
	MedicalEnumeration
}
type drugPregnancyCategoryStruct struct {
	medicalEnumerationStruct
}
type DrugPregnancyCategorySlice []DrugPregnancyCategory

func (s *DrugPregnancyCategorySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DrugPregnancyCategorySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DrugPregnancyCategory)
	}
	return nil
}

var _ DrugPregnancyCategory = &drugPregnancyCategoryStruct{}

// Indicates whether this drug is available by prescription or over-the-counter.
type DrugPrescriptionStatus interface {
	// Parents
	MedicalEnumeration
	// Unions
	DrugPrescriptionStatus_Text_Union
}
type drugPrescriptionStatusStruct struct {
	medicalEnumerationStruct
}

func (s *drugPrescriptionStatusStruct) implementsDrugPrescriptionStatus_Text_Union() {}

type DrugPrescriptionStatusSlice []DrugPrescriptionStatus

func (s *DrugPrescriptionStatusSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DrugPrescriptionStatusSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DrugPrescriptionStatus)
	}
	return nil
}

var _ DrugPrescriptionStatus = &drugPrescriptionStatusStruct{}

// A specific strength in which a medical drug is available in a specific country.
type DrugStrength interface {
	// Parents
	MedicalIntangible
	// Accessors
	ActiveIngredient() []Text             // An active ingredient, typically chemical compounds and/or biologic substances.
	AvailableIn() []AdministrativeArea    // The location in which the strength is available.
	MaximumIntake() []MaximumDoseSchedule // Recommended intake of this supplement for a given population as defined by a specific recommending authority.
	StrengthUnit() []Text                 // The units of an active ingredient's strength, e.g. mg.
	StrengthValue() []Number              // The value of an active ingredient's strength, e.g. 325.
}
type drugStrengthStruct struct {
	medicalIntangibleStruct

	ActiveIngredient_ TextSlice                `json:"activeIngredient,omitempty"`
	AvailableIn_      AdministrativeAreaSlice  `json:"availableIn,omitempty"`
	MaximumIntake_    MaximumDoseScheduleSlice `json:"maximumIntake,omitempty"`
	StrengthUnit_     TextSlice                `json:"strengthUnit,omitempty"`
	StrengthValue_    NumberSlice              `json:"strengthValue,omitempty"`
}

func (s *drugStrengthStruct) ActiveIngredient() []Text {
	return s.ActiveIngredient_
}
func (s *drugStrengthStruct) AvailableIn() []AdministrativeArea {
	return s.AvailableIn_
}
func (s *drugStrengthStruct) MaximumIntake() []MaximumDoseSchedule {
	return s.MaximumIntake_
}
func (s *drugStrengthStruct) StrengthUnit() []Text {
	return s.StrengthUnit_
}
func (s *drugStrengthStruct) StrengthValue() []Number {
	return s.StrengthValue_
}

type DrugStrengthSlice []DrugStrength

func (s *DrugStrengthSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DrugStrengthSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DrugStrength)
	}
	return nil
}

var _ DrugStrength = &drugStrengthStruct{}

// A dry-cleaning business.
type DryCleaningOrLaundry interface {
	// Parents
	LocalBusiness
}
type dryCleaningOrLaundryStruct struct {
	localBusinessStruct
}
type DryCleaningOrLaundrySlice []DryCleaningOrLaundry

func (s *DryCleaningOrLaundrySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DryCleaningOrLaundrySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(DryCleaningOrLaundry)
	}
	return nil
}

var _ DryCleaningOrLaundry = &dryCleaningOrLaundryStruct{}

// Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).
type Duration interface {
	// Parents
	Quantity
	// Unions
	Duration_Number_QuantitativeValue_Union
	Duration_QuantitativeValue_Union
	Duration_Text_Union
}
type durationStruct struct {
	quantityStruct
}

func (s *durationStruct) implementsDuration_Number_QuantitativeValue_Union() {}
func (s *durationStruct) implementsDuration_QuantitativeValue_Union()        {}
func (s *durationStruct) implementsDuration_Text_Union()                     {}

type DurationSlice []Duration

func (s *DurationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(DurationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Duration)
	}
	return nil
}

var _ Duration = &durationStruct{}

// Enumerates the EU energy efficiency classes A-G as well as A+, A++, and A+++ as defined in EU directive 2017/1369.
type EUEnergyEfficiencyEnumeration interface {
	// Parents
	EnergyEfficiencyEnumeration
}
type eUEnergyEfficiencyEnumerationStruct struct {
	energyEfficiencyEnumerationStruct
}
type EUEnergyEfficiencyEnumerationSlice []EUEnergyEfficiencyEnumeration

func (s *EUEnergyEfficiencyEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EUEnergyEfficiencyEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EUEnergyEfficiencyEnumeration)
	}
	return nil
}

var _ EUEnergyEfficiencyEnumeration = &eUEnergyEfficiencyEnumerationStruct{}

// The act of swallowing solid objects.
type EatAction interface {
	// Parents
	ConsumeAction
}
type eatActionStruct struct {
	consumeActionStruct
}
type EatActionSlice []EatAction

func (s *EatActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EatActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EatAction)
	}
	return nil
}

var _ EatAction = &eatActionStruct{}

// Event type: Education event.
type EducationEvent interface {
	// Parents
	Event
	// Accessors
	Assesses() []DefinedTerm_Text_Union             // The item being described is intended to assess the competency or learning outcome defined by the referenced term.
	EducationalLevel() []DefinedTerm_Text_URL_Union // The level in terms of progression through an educational or training context. Examples of educational levels include 'beginner', 'intermediate' or 'advanced', and formal sets of level indicators.
	Teaches() []DefinedTerm_Text_Union              // The item being described is intended to help a person learn the competency or learning outcome defined by the referenced term.
}
type educationEventStruct struct {
	eventStruct

	Assesses_         DefinedTerm_Text_UnionSlice     `json:"assesses,omitempty"`
	EducationalLevel_ DefinedTerm_Text_URL_UnionSlice `json:"educationalLevel,omitempty"`
	Teaches_          DefinedTerm_Text_UnionSlice     `json:"teaches,omitempty"`
}

func (s *educationEventStruct) Assesses() []DefinedTerm_Text_Union {
	return s.Assesses_
}
func (s *educationEventStruct) EducationalLevel() []DefinedTerm_Text_URL_Union {
	return s.EducationalLevel_
}
func (s *educationEventStruct) Teaches() []DefinedTerm_Text_Union {
	return s.Teaches_
}

type EducationEventSlice []EducationEvent

func (s *EducationEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EducationEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EducationEvent)
	}
	return nil
}

var _ EducationEvent = &educationEventStruct{}

// An EducationalAudience.
type EducationalAudience interface {
	// Parents
	Audience
	// Accessors
	EducationalRole() []Text // An educationalRole of an EducationalAudience.
}
type educationalAudienceStruct struct {
	audienceStruct

	EducationalRole_ TextSlice `json:"educationalRole,omitempty"`
}

func (s *educationalAudienceStruct) EducationalRole() []Text {
	return s.EducationalRole_
}

type EducationalAudienceSlice []EducationalAudience

func (s *EducationalAudienceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EducationalAudienceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EducationalAudience)
	}
	return nil
}

var _ EducationalAudience = &educationalAudienceStruct{}

// An educational or occupational credential. A diploma, academic degree, certification, qualification, badge, etc., that may be awarded to a person or other entity that meets the requirements defined by the credentialer.
type EducationalOccupationalCredential interface {
	// Parents
	CreativeWork
	// Unions
	AlignmentObject_Course_EducationalOccupationalCredential_Text_Union
	EducationalOccupationalCredential_Text_URL_Union
	EducationalOccupationalCredential_Text_Union
	// Accessors
	CompetencyRequired() []DefinedTerm_Text_URL_Union // Knowledge, skill, ability or personal attribute that must be demonstrated by a person or other entity in order to do something such as earn an Educational Occupational Credential or understand a LearningResource.
	CredentialCategory() []DefinedTerm_Text_URL_Union // The category or type of credential being described, for example "degree”, “certificate”, “badge”, or more specific term.
	EducationalLevel() []DefinedTerm_Text_URL_Union   // The level in terms of progression through an educational or training context. Examples of educational levels include 'beginner', 'intermediate' or 'advanced', and formal sets of level indicators.
	RecognizedBy() []Organization                     // An organization that acknowledges the validity, value or utility of a credential. Note: recognition may include a process of quality assurance or accreditation.
	ValidFor() []Duration                             // The duration of validity of a permit or similar thing.
	ValidIn() []AdministrativeArea                    // The geographic area where a permit or similar thing is valid.
}
type educationalOccupationalCredentialStruct struct {
	creativeWorkStruct

	CompetencyRequired_ DefinedTerm_Text_URL_UnionSlice `json:"competencyRequired,omitempty"`
	CredentialCategory_ DefinedTerm_Text_URL_UnionSlice `json:"credentialCategory,omitempty"`
	EducationalLevel_   DefinedTerm_Text_URL_UnionSlice `json:"educationalLevel,omitempty"`
	RecognizedBy_       OrganizationSlice               `json:"recognizedBy,omitempty"`
	ValidFor_           DurationSlice                   `json:"validFor,omitempty"`
	ValidIn_            AdministrativeAreaSlice         `json:"validIn,omitempty"`
}

func (s *educationalOccupationalCredentialStruct) implementsAlignmentObject_Course_EducationalOccupationalCredential_Text_Union() {
}
func (s *educationalOccupationalCredentialStruct) implementsEducationalOccupationalCredential_Text_URL_Union() {
}
func (s *educationalOccupationalCredentialStruct) implementsEducationalOccupationalCredential_Text_Union() {
}

func (s *educationalOccupationalCredentialStruct) CompetencyRequired() []DefinedTerm_Text_URL_Union {
	return s.CompetencyRequired_
}
func (s *educationalOccupationalCredentialStruct) CredentialCategory() []DefinedTerm_Text_URL_Union {
	return s.CredentialCategory_
}
func (s *educationalOccupationalCredentialStruct) EducationalLevel() []DefinedTerm_Text_URL_Union {
	return s.EducationalLevel_
}
func (s *educationalOccupationalCredentialStruct) RecognizedBy() []Organization {
	return s.RecognizedBy_
}
func (s *educationalOccupationalCredentialStruct) ValidFor() []Duration {
	return s.ValidFor_
}
func (s *educationalOccupationalCredentialStruct) ValidIn() []AdministrativeArea {
	return s.ValidIn_
}

type EducationalOccupationalCredentialSlice []EducationalOccupationalCredential

func (s *EducationalOccupationalCredentialSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EducationalOccupationalCredentialSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EducationalOccupationalCredential)
	}
	return nil
}

var _ EducationalOccupationalCredential = &educationalOccupationalCredentialStruct{}

// A program offered by an institution which determines the learning progress to achieve an outcome, usually a credential like a degree or certificate. This would define a discrete set of opportunities (e.g., job, courses) that together constitute a program with a clear start, end, set of requirements, and transition to a new occupational opportunity (e.g., a job), or sometimes a higher educational opportunity (e.g., an advanced degree).
type EducationalOccupationalProgram interface {
	// Parents
	Intangible
	// Accessors
	ApplicationDeadline() []Date                                                      // The date at which the program stops collecting applications for the next enrollment cycle.
	ApplicationStartDate() []Date                                                     // The date at which the program begins collecting applications for the next enrollment cycle.
	DayOfWeek() []DayOfWeek                                                           // The day of the week for which these opening hours are valid.
	EducationalCredentialAwarded() []EducationalOccupationalCredential_Text_URL_Union // A description of the qualification, award, certificate, diploma or other educational credential awarded as a consequence of successful completion of this course or program.
	EducationalProgramMode() []Text_URL_Union                                         // Similar to courseMode, The medium or means of delivery of the program as a whole. The value may either be a text label (e.g. "online", "onsite" or "blended"; "synchronous" or "asynchronous"; "full-time" or "part-time") or a URL reference to a term from a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous ).
	EndDate() []Date_DateTime_Union                                                   // The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	FinancialAidEligible() []DefinedTerm_Text_Union                                   // A financial aid type or program which students may use to pay for tuition or fees associated with the program.
	HasCourse() []Course                                                              // A course or class that is one of the learning opportunities that constitute an educational / occupational program. No information is implied about whether the course is mandatory or optional; no guarantee is implied about whether the course will be available to everyone on the program.
	MaximumEnrollment() []Integer                                                     // The maximum number of students who may be enrolled in the program.
	NumberOfCredits() []Integer_StructuredValue_Union                                 // The number of credits or units awarded by a Course or required to complete an EducationalOccupationalProgram.
	OccupationalCategory() []CategoryCode_Text_Union                                  /*
	A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.\n
	Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
	*/
	OccupationalCredentialAwarded() []EducationalOccupationalCredential_Text_URL_Union // A description of the qualification, award, certificate, diploma or other occupational credential awarded as a consequence of successful completion of this course or program.
	Offers() []Demand_Offer_Union                                                      /*
	An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.

	*/
	ProgramPrerequisites() []AlignmentObject_Course_EducationalOccupationalCredential_Text_Union // Prerequisites for enrolling in the program.
	ProgramType() []DefinedTerm_Text_Union                                                       // The type of educational or occupational program. For example, classroom, internship, alternance, etc..
	Provider() []Organization_Person_Union                                                       // The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
	SalaryUponCompletion() []MonetaryAmountDistribution                                          // The expected salary upon completing the training.
	StartDate() []Date_DateTime_Union                                                            // The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	TermDuration() []Duration                                                                    // The amount of time in a term as defined by the institution. A term is a length of time where students take one or more classes. Semesters and quarters are common units for term.
	TermsPerYear() []Number                                                                      // The number of times terms of study are offered per year. Semesters and quarters are common units for term. For example, if the student can only take 2 semesters for the program in one year, then termsPerYear should be 2.
	TimeOfDay() []Text                                                                           // The time of day the program normally runs. For example, "evenings".
	TimeToComplete() []Duration                                                                  // The expected length of time to complete the program if attending full-time.
	TrainingSalary() []MonetaryAmountDistribution                                                // The estimated salary earned while in the program.
	TypicalCreditsPerTerm() []Integer_StructuredValue_Union                                      // The number of credits or units a full-time student would be expected to take in 1 term however 'term' is defined by the institution.
}
type educationalOccupationalProgramStruct struct {
	intangibleStruct

	ApplicationDeadline_           DateSlice                                                                `json:"applicationDeadline,omitempty"`
	ApplicationStartDate_          DateSlice                                                                `json:"applicationStartDate,omitempty"`
	DayOfWeek_                     DayOfWeekSlice                                                           `json:"dayOfWeek,omitempty"`
	EducationalCredentialAwarded_  EducationalOccupationalCredential_Text_URL_UnionSlice                    `json:"educationalCredentialAwarded,omitempty"`
	EducationalProgramMode_        Text_URL_UnionSlice                                                      `json:"educationalProgramMode,omitempty"`
	EndDate_                       Date_DateTime_UnionSlice                                                 `json:"endDate,omitempty"`
	FinancialAidEligible_          DefinedTerm_Text_UnionSlice                                              `json:"financialAidEligible,omitempty"`
	HasCourse_                     CourseSlice                                                              `json:"hasCourse,omitempty"`
	MaximumEnrollment_             IntegerSlice                                                             `json:"maximumEnrollment,omitempty"`
	NumberOfCredits_               Integer_StructuredValue_UnionSlice                                       `json:"numberOfCredits,omitempty"`
	OccupationalCategory_          CategoryCode_Text_UnionSlice                                             `json:"occupationalCategory,omitempty"`
	OccupationalCredentialAwarded_ EducationalOccupationalCredential_Text_URL_UnionSlice                    `json:"occupationalCredentialAwarded,omitempty"`
	Offers_                        Demand_Offer_UnionSlice                                                  `json:"offers,omitempty"`
	ProgramPrerequisites_          AlignmentObject_Course_EducationalOccupationalCredential_Text_UnionSlice `json:"programPrerequisites,omitempty"`
	ProgramType_                   DefinedTerm_Text_UnionSlice                                              `json:"programType,omitempty"`
	Provider_                      Organization_Person_UnionSlice                                           `json:"provider,omitempty"`
	SalaryUponCompletion_          MonetaryAmountDistributionSlice                                          `json:"salaryUponCompletion,omitempty"`
	StartDate_                     Date_DateTime_UnionSlice                                                 `json:"startDate,omitempty"`
	TermDuration_                  DurationSlice                                                            `json:"termDuration,omitempty"`
	TermsPerYear_                  NumberSlice                                                              `json:"termsPerYear,omitempty"`
	TimeOfDay_                     TextSlice                                                                `json:"timeOfDay,omitempty"`
	TimeToComplete_                DurationSlice                                                            `json:"timeToComplete,omitempty"`
	TrainingSalary_                MonetaryAmountDistributionSlice                                          `json:"trainingSalary,omitempty"`
	TypicalCreditsPerTerm_         Integer_StructuredValue_UnionSlice                                       `json:"typicalCreditsPerTerm,omitempty"`
}

func (s *educationalOccupationalProgramStruct) ApplicationDeadline() []Date {
	return s.ApplicationDeadline_
}
func (s *educationalOccupationalProgramStruct) ApplicationStartDate() []Date {
	return s.ApplicationStartDate_
}
func (s *educationalOccupationalProgramStruct) DayOfWeek() []DayOfWeek {
	return s.DayOfWeek_
}
func (s *educationalOccupationalProgramStruct) EducationalCredentialAwarded() []EducationalOccupationalCredential_Text_URL_Union {
	return s.EducationalCredentialAwarded_
}
func (s *educationalOccupationalProgramStruct) EducationalProgramMode() []Text_URL_Union {
	return s.EducationalProgramMode_
}
func (s *educationalOccupationalProgramStruct) EndDate() []Date_DateTime_Union {
	return s.EndDate_
}
func (s *educationalOccupationalProgramStruct) FinancialAidEligible() []DefinedTerm_Text_Union {
	return s.FinancialAidEligible_
}
func (s *educationalOccupationalProgramStruct) HasCourse() []Course {
	return s.HasCourse_
}
func (s *educationalOccupationalProgramStruct) MaximumEnrollment() []Integer {
	return s.MaximumEnrollment_
}
func (s *educationalOccupationalProgramStruct) NumberOfCredits() []Integer_StructuredValue_Union {
	return s.NumberOfCredits_
}
func (s *educationalOccupationalProgramStruct) OccupationalCategory() []CategoryCode_Text_Union {
	return s.OccupationalCategory_
}
func (s *educationalOccupationalProgramStruct) OccupationalCredentialAwarded() []EducationalOccupationalCredential_Text_URL_Union {
	return s.OccupationalCredentialAwarded_
}
func (s *educationalOccupationalProgramStruct) Offers() []Demand_Offer_Union {
	return s.Offers_
}
func (s *educationalOccupationalProgramStruct) ProgramPrerequisites() []AlignmentObject_Course_EducationalOccupationalCredential_Text_Union {
	return s.ProgramPrerequisites_
}
func (s *educationalOccupationalProgramStruct) ProgramType() []DefinedTerm_Text_Union {
	return s.ProgramType_
}
func (s *educationalOccupationalProgramStruct) Provider() []Organization_Person_Union {
	return s.Provider_
}
func (s *educationalOccupationalProgramStruct) SalaryUponCompletion() []MonetaryAmountDistribution {
	return s.SalaryUponCompletion_
}
func (s *educationalOccupationalProgramStruct) StartDate() []Date_DateTime_Union {
	return s.StartDate_
}
func (s *educationalOccupationalProgramStruct) TermDuration() []Duration {
	return s.TermDuration_
}
func (s *educationalOccupationalProgramStruct) TermsPerYear() []Number {
	return s.TermsPerYear_
}
func (s *educationalOccupationalProgramStruct) TimeOfDay() []Text {
	return s.TimeOfDay_
}
func (s *educationalOccupationalProgramStruct) TimeToComplete() []Duration {
	return s.TimeToComplete_
}
func (s *educationalOccupationalProgramStruct) TrainingSalary() []MonetaryAmountDistribution {
	return s.TrainingSalary_
}
func (s *educationalOccupationalProgramStruct) TypicalCreditsPerTerm() []Integer_StructuredValue_Union {
	return s.TypicalCreditsPerTerm_
}

type EducationalOccupationalProgramSlice []EducationalOccupationalProgram

func (s *EducationalOccupationalProgramSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EducationalOccupationalProgramSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EducationalOccupationalProgram)
	}
	return nil
}

var _ EducationalOccupationalProgram = &educationalOccupationalProgramStruct{}

// An educational organization.
type EducationalOrganization interface {
	// Parents
	CivicStructure
	Organization
	// Unions
	EducationalOrganization_Organization_Union
	// Accessors
	Alumni() []Person // Alumni of an organization.
}
type educationalOrganizationStruct struct {
	civicStructureStruct
	organizationStruct

	Alumni_ PersonSlice `json:"alumni,omitempty"`
}

func (s *educationalOrganizationStruct) implementsEducationalOrganization_Organization_Union() {}

func (s *educationalOrganizationStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {
}                                                                                 // re
func (s *educationalOrganizationStruct) implementsDataFeedItem_Text_Thing_Union() {} // re
func (s *educationalOrganizationStruct) implementsListItem_Text_Thing_Union()     {} // re
func (s *educationalOrganizationStruct) implementsText_Thing_URL_Union()          {} // re
func (s *educationalOrganizationStruct) implementsText_Thing_Union()              {} // re
func (s *educationalOrganizationStruct) Alumni() []Person {
	return s.Alumni_
}

type EducationalOrganizationSlice []EducationalOrganization

func (s *EducationalOrganizationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EducationalOrganizationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EducationalOrganization)
	}
	return nil
}

var _ EducationalOrganization = &educationalOrganizationStruct{}

// An electrician.
type Electrician interface {
	// Parents
	HomeAndConstructionBusiness
}
type electricianStruct struct {
	homeAndConstructionBusinessStruct
}
type ElectricianSlice []Electrician

func (s *ElectricianSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ElectricianSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Electrician)
	}
	return nil
}

var _ Electrician = &electricianStruct{}

// An electronics store.
type ElectronicsStore interface {
	// Parents
	Store
}
type electronicsStoreStruct struct {
	storeStruct
}
type ElectronicsStoreSlice []ElectronicsStore

func (s *ElectronicsStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ElectronicsStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ElectronicsStore)
	}
	return nil
}

var _ ElectronicsStore = &electronicsStoreStruct{}

// An elementary school.
type ElementarySchool interface {
	// Parents
	EducationalOrganization
}
type elementarySchoolStruct struct {
	educationalOrganizationStruct
}
type ElementarySchoolSlice []ElementarySchool

func (s *ElementarySchoolSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ElementarySchoolSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ElementarySchool)
	}
	return nil
}

var _ ElementarySchool = &elementarySchoolStruct{}

// An email message.
type EmailMessage interface {
	// Parents
	Message
}
type emailMessageStruct struct {
	messageStruct
}
type EmailMessageSlice []EmailMessage

func (s *EmailMessageSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EmailMessageSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EmailMessage)
	}
	return nil
}

var _ EmailMessage = &emailMessageStruct{}

// An embassy.
type Embassy interface {
	// Parents
	GovernmentBuilding
}
type embassyStruct struct {
	governmentBuildingStruct
}
type EmbassySlice []Embassy

func (s *EmbassySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EmbassySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Embassy)
	}
	return nil
}

var _ Embassy = &embassyStruct{}

// An emergency service, such as a fire station or ER.
type EmergencyService interface {
	// Parents
	LocalBusiness
}
type emergencyServiceStruct struct {
	localBusinessStruct
}
type EmergencyServiceSlice []EmergencyService

func (s *EmergencyServiceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EmergencyServiceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EmergencyService)
	}
	return nil
}

var _ EmergencyService = &emergencyServiceStruct{}

// A subclass of OrganizationRole used to describe employee relationships.
type EmployeeRole interface {
	// Parents
	OrganizationRole
	// Accessors
	BaseSalary() []MonetaryAmount_Number_PriceSpecification_Union // The base salary of the job or of an employee in an EmployeeRole.
	SalaryCurrency() []Text                                       // The currency (coded using [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) ) used for the main salary information in this job posting or for this employee.
}
type employeeRoleStruct struct {
	organizationRoleStruct

	BaseSalary_     MonetaryAmount_Number_PriceSpecification_UnionSlice `json:"baseSalary,omitempty"`
	SalaryCurrency_ TextSlice                                           `json:"salaryCurrency,omitempty"`
}

func (s *employeeRoleStruct) BaseSalary() []MonetaryAmount_Number_PriceSpecification_Union {
	return s.BaseSalary_
}
func (s *employeeRoleStruct) SalaryCurrency() []Text {
	return s.SalaryCurrency_
}

type EmployeeRoleSlice []EmployeeRole

func (s *EmployeeRoleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EmployeeRoleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EmployeeRole)
	}
	return nil
}

var _ EmployeeRole = &employeeRoleStruct{}

// An aggregate rating of an Organization related to its role as an employer.
type EmployerAggregateRating interface {
	// Parents
	AggregateRating
}
type employerAggregateRatingStruct struct {
	aggregateRatingStruct
}
type EmployerAggregateRatingSlice []EmployerAggregateRating

func (s *EmployerAggregateRatingSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EmployerAggregateRatingSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EmployerAggregateRating)
	}
	return nil
}

var _ EmployerAggregateRating = &employerAggregateRatingStruct{}

// An [[EmployerReview]] is a review of an [[Organization]] regarding its role as an employer, written by a current or former employee of that organization.
type EmployerReview interface {
	// Parents
	Review
}
type employerReviewStruct struct {
	reviewStruct
}
type EmployerReviewSlice []EmployerReview

func (s *EmployerReviewSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EmployerReviewSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EmployerReview)
	}
	return nil
}

var _ EmployerReview = &employerReviewStruct{}

// An employment agency.
type EmploymentAgency interface {
	// Parents
	LocalBusiness
}
type employmentAgencyStruct struct {
	localBusinessStruct
}
type EmploymentAgencySlice []EmploymentAgency

func (s *EmploymentAgencySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EmploymentAgencySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EmploymentAgency)
	}
	return nil
}

var _ EmploymentAgency = &employmentAgencyStruct{}

// An agent approves/certifies/likes/supports/sanction an object.
type EndorseAction interface {
	// Parents
	ReactAction
	// Accessors
	Endorsee() []Organization_Person_Union // A sub property of participant. The person/organization being supported.
}
type endorseActionStruct struct {
	reactActionStruct

	Endorsee_ Organization_Person_UnionSlice `json:"endorsee,omitempty"`
}

func (s *endorseActionStruct) Endorsee() []Organization_Person_Union {
	return s.Endorsee_
}

type EndorseActionSlice []EndorseAction

func (s *EndorseActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EndorseActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EndorseAction)
	}
	return nil
}

var _ EndorseAction = &endorseActionStruct{}

/*
An EndorsementRating is a rating that expresses some level of endorsement, for example inclusion in a "critic's pick" blog, a
"Like" or "+1" on a social network. It can be considered the [[result]] of an [[EndorseAction]] in which the [[object]] of the action is rated positively by
some [[agent]]. As is common elsewhere in schema.org, it is sometimes more useful to describe the results of such an action without explicitly describing the [[Action]].

An [[EndorsementRating]] may be part of a numeric scale or organized system, but this is not required: having an explicit type for indicating a positive,
endorsement rating is particularly useful in the absence of numeric scales as it helps consumers understand that the rating is broadly positive.
*/
type EndorsementRating interface {
	// Parents
	Rating
}
type endorsementRatingStruct struct {
	ratingStruct
}
type EndorsementRatingSlice []EndorsementRating

func (s *EndorsementRatingSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EndorsementRatingSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EndorsementRating)
	}
	return nil
}

var _ EndorsementRating = &endorsementRatingStruct{}

// Properties that take Energy as values are of the form '&lt;Number&gt; &lt;Energy unit of measure&gt;'.
type Energy interface {
	// Parents
	Quantity
	// Unions
	Energy_QuantitativeValue_Union
}
type energyStruct struct {
	quantityStruct
}

func (s *energyStruct) implementsEnergy_QuantitativeValue_Union() {}

type EnergySlice []Energy

func (s *EnergySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EnergySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Energy)
	}
	return nil
}

var _ Energy = &energyStruct{}

// EnergyConsumptionDetails represents information related to the energy efficiency of a product that consumes energy. The information that can be provided is based on international regulations such as for example [EU directive 2017/1369](https://eur-lex.europa.eu/eli/reg/2017/1369/oj) for energy labeling and the [Energy labeling rule](https://www.ftc.gov/enforcement/rules/rulemaking-regulatory-reform-proceedings/energy-water-use-labeling-consumer) under the Energy Policy and Conservation Act (EPCA) in the US.
type EnergyConsumptionDetails interface {
	// Parents
	Intangible
	// Accessors
	EnergyEfficiencyScaleMax() []EUEnergyEfficiencyEnumeration  // Specifies the most energy efficient class on the regulated EU energy consumption scale for the product category a product belongs to. For example, energy consumption for televisions placed on the market after January 1, 2020 is scaled from D to A+++.
	EnergyEfficiencyScaleMin() []EUEnergyEfficiencyEnumeration  // Specifies the least energy efficient class on the regulated EU energy consumption scale for the product category a product belongs to. For example, energy consumption for televisions placed on the market after January 1, 2020 is scaled from D to A+++.
	HasEnergyEfficiencyCategory() []EnergyEfficiencyEnumeration // Defines the energy efficiency Category (which could be either a rating out of range of values or a yes/no certification) for a product according to an international energy efficiency standard.
}
type energyConsumptionDetailsStruct struct {
	intangibleStruct

	EnergyEfficiencyScaleMax_    EUEnergyEfficiencyEnumerationSlice `json:"energyEfficiencyScaleMax,omitempty"`
	EnergyEfficiencyScaleMin_    EUEnergyEfficiencyEnumerationSlice `json:"energyEfficiencyScaleMin,omitempty"`
	HasEnergyEfficiencyCategory_ EnergyEfficiencyEnumerationSlice   `json:"hasEnergyEfficiencyCategory,omitempty"`
}

func (s *energyConsumptionDetailsStruct) EnergyEfficiencyScaleMax() []EUEnergyEfficiencyEnumeration {
	return s.EnergyEfficiencyScaleMax_
}
func (s *energyConsumptionDetailsStruct) EnergyEfficiencyScaleMin() []EUEnergyEfficiencyEnumeration {
	return s.EnergyEfficiencyScaleMin_
}
func (s *energyConsumptionDetailsStruct) HasEnergyEfficiencyCategory() []EnergyEfficiencyEnumeration {
	return s.HasEnergyEfficiencyCategory_
}

type EnergyConsumptionDetailsSlice []EnergyConsumptionDetails

func (s *EnergyConsumptionDetailsSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EnergyConsumptionDetailsSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EnergyConsumptionDetails)
	}
	return nil
}

var _ EnergyConsumptionDetails = &energyConsumptionDetailsStruct{}

// Enumerates energy efficiency levels (also known as "classes" or "ratings") and certifications that are part of several international energy efficiency standards.
type EnergyEfficiencyEnumeration interface {
	// Parents
	Enumeration
}
type energyEfficiencyEnumerationStruct struct {
	enumerationStruct
}
type EnergyEfficiencyEnumerationSlice []EnergyEfficiencyEnumeration

func (s *EnergyEfficiencyEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EnergyEfficiencyEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EnergyEfficiencyEnumeration)
	}
	return nil
}

var _ EnergyEfficiencyEnumeration = &energyEfficiencyEnumerationStruct{}

// Used to indicate whether a product is EnergyStar certified.
type EnergyStarEnergyEfficiencyEnumeration interface {
	// Parents
	EnergyEfficiencyEnumeration
}
type energyStarEnergyEfficiencyEnumerationStruct struct {
	energyEfficiencyEnumerationStruct
}
type EnergyStarEnergyEfficiencyEnumerationSlice []EnergyStarEnergyEfficiencyEnumeration

func (s *EnergyStarEnergyEfficiencyEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EnergyStarEnergyEfficiencyEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EnergyStarEnergyEfficiencyEnumeration)
	}
	return nil
}

var _ EnergyStarEnergyEfficiencyEnumeration = &energyStarEnergyEfficiencyEnumerationStruct{}

// Information about the engine of the vehicle. A vehicle can have multiple engines represented by multiple engine specification entities.
type EngineSpecification interface {
	// Parents
	StructuredValue
	// Accessors
	EngineDisplacement() []QuantitativeValue // The volume swept by all of the pistons inside the cylinders of an internal combustion engine in a single movement. \n\nTypical unit code(s): CMQ for cubic centimeter, LTR for liters, INQ for cubic inches\n* Note 1: You can link to information about how the given value has been determined using the [[valueReference]] property.\n* Note 2: You can use [[minValue]] and [[maxValue]] to indicate ranges.
	EnginePower() []QuantitativeValue        /*
	The power of the vehicle's engine.
	    Typical unit code(s): KWT for kilowatt, BHP for brake horsepower, N12 for metric horsepower (PS, with 1 PS = 735,49875 W)\n\n* Note 1: There are many different ways of measuring an engine's power. For an overview, see  [http://en.wikipedia.org/wiki/Horsepower#Engine_power_test_codes](http://en.wikipedia.org/wiki/Horsepower#Engine_power_test_codes).\n* Note 2: You can link to information about how the given value has been determined using the [[valueReference]] property.\n* Note 3: You can use [[minValue]] and [[maxValue]] to indicate ranges.
	*/
	EngineType() []QualitativeValue_Text_URL_Union // The type of engine or engines powering the vehicle.
	FuelType() []QualitativeValue_Text_URL_Union   // The type of fuel suitable for the engine or engines of the vehicle. If the vehicle has only one engine, this property can be attached directly to the vehicle.
	Torque() []QuantitativeValue                   // The torque (turning force) of the vehicle's engine.\n\nTypical unit code(s): NU for newton metre (N m), F17 for pound-force per foot, or F48 for pound-force per inch\n\n* Note 1: You can link to information about how the given value has been determined (e.g. reference RPM) using the [[valueReference]] property.\n* Note 2: You can use [[minValue]] and [[maxValue]] to indicate ranges.
}
type engineSpecificationStruct struct {
	structuredValueStruct

	EngineDisplacement_ QuantitativeValueSlice               `json:"engineDisplacement,omitempty"`
	EnginePower_        QuantitativeValueSlice               `json:"enginePower,omitempty"`
	EngineType_         QualitativeValue_Text_URL_UnionSlice `json:"engineType,omitempty"`
	FuelType_           QualitativeValue_Text_URL_UnionSlice `json:"fuelType,omitempty"`
	Torque_             QuantitativeValueSlice               `json:"torque,omitempty"`
}

func (s *engineSpecificationStruct) EngineDisplacement() []QuantitativeValue {
	return s.EngineDisplacement_
}
func (s *engineSpecificationStruct) EnginePower() []QuantitativeValue {
	return s.EnginePower_
}
func (s *engineSpecificationStruct) EngineType() []QualitativeValue_Text_URL_Union {
	return s.EngineType_
}
func (s *engineSpecificationStruct) FuelType() []QualitativeValue_Text_URL_Union {
	return s.FuelType_
}
func (s *engineSpecificationStruct) Torque() []QuantitativeValue {
	return s.Torque_
}

type EngineSpecificationSlice []EngineSpecification

func (s *EngineSpecificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EngineSpecificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EngineSpecification)
	}
	return nil
}

var _ EngineSpecification = &engineSpecificationStruct{}

// A business providing entertainment.
type EntertainmentBusiness interface {
	// Parents
	LocalBusiness
}
type entertainmentBusinessStruct struct {
	localBusinessStruct
}
type EntertainmentBusinessSlice []EntertainmentBusiness

func (s *EntertainmentBusinessSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EntertainmentBusinessSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EntertainmentBusiness)
	}
	return nil
}

var _ EntertainmentBusiness = &entertainmentBusinessStruct{}

// An entry point, within some Web-based protocol.
type EntryPoint interface {
	// Parents
	Intangible
	// Accessors
	ActionApplication() []SoftwareApplication                    // An application that can complete the request.
	ActionPlatform() []DigitalPlatformEnumeration_Text_URL_Union // The high level platform(s) where the Action can be performed for the given URL. To specify a specific application or operating system instance, use actionApplication.
	Application() []SoftwareApplication                          // An application that can complete the request.
	ContentType() []Text                                         // The supported content type(s) for an EntryPoint response.
	EncodingType() []Text                                        // The supported encoding type(s) for an EntryPoint request.
	HttpMethod() []Text                                          // An HTTP method that specifies the appropriate HTTP method for a request to an HTTP EntryPoint. Values are capitalized strings as used in HTTP.
	UrlTemplate() []Text                                         // An url template (RFC6570) that will be used to construct the target of the execution of the action.
}
type entryPointStruct struct {
	intangibleStruct

	ActionApplication_ SoftwareApplicationSlice                       `json:"actionApplication,omitempty"`
	ActionPlatform_    DigitalPlatformEnumeration_Text_URL_UnionSlice `json:"actionPlatform,omitempty"`
	Application_       SoftwareApplicationSlice                       `json:"application,omitempty"`
	ContentType_       TextSlice                                      `json:"contentType,omitempty"`
	EncodingType_      TextSlice                                      `json:"encodingType,omitempty"`
	HttpMethod_        TextSlice                                      `json:"httpMethod,omitempty"`
	UrlTemplate_       TextSlice                                      `json:"urlTemplate,omitempty"`
}

func (s *entryPointStruct) ActionApplication() []SoftwareApplication {
	return s.ActionApplication_
}
func (s *entryPointStruct) ActionPlatform() []DigitalPlatformEnumeration_Text_URL_Union {
	return s.ActionPlatform_
}
func (s *entryPointStruct) Application() []SoftwareApplication {
	return s.Application_
}
func (s *entryPointStruct) ContentType() []Text {
	return s.ContentType_
}
func (s *entryPointStruct) EncodingType() []Text {
	return s.EncodingType_
}
func (s *entryPointStruct) HttpMethod() []Text {
	return s.HttpMethod_
}
func (s *entryPointStruct) UrlTemplate() []Text {
	return s.UrlTemplate_
}

type EntryPointSlice []EntryPoint

func (s *EntryPointSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EntryPointSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EntryPoint)
	}
	return nil
}

var _ EntryPoint = &entryPointStruct{}

// Lists or enumerations—for example, a list of cuisines or music genres, etc.
type Enumeration interface {
	// Parents
	Intangible
	// Unions
	Class_Enumeration_Property_Union
	DefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union
	// Accessors
	SupersededBy() []Class_Enumeration_Property_Union // Relates a term (i.e. a property, class or enumeration) to one that supersedes it.
}
type enumerationStruct struct {
	intangibleStruct

	SupersededBy_ Class_Enumeration_Property_UnionSlice `json:"supersededBy,omitempty"`
}

func (s *enumerationStruct) implementsClass_Enumeration_Property_Union() {}
func (s *enumerationStruct) implementsDefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union() {
}

func (s *enumerationStruct) SupersededBy() []Class_Enumeration_Property_Union {
	return s.SupersededBy_
}

type EnumerationSlice []Enumeration

func (s *EnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Enumeration)
	}
	return nil
}

var _ Enumeration = &enumerationStruct{}

// A media episode (e.g. TV, radio, video game) which can be part of a series or season.
type Episode interface {
	// Parents
	CreativeWork
	// Accessors
	Actor() []Person                     // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Actors() []Person                    // An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
	Director() []Person                  // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	Directors() []Person                 // A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
	Duration() []Duration                // The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	EpisodeNumber() []Integer_Text_Union // Position of the episode within an ordered group of episodes.
	MusicBy() []MusicGroup_Person_Union  // The composer of the soundtrack.
	PartOfSeason() []CreativeWorkSeason  // The season to which this episode belongs.
	PartOfSeries() []CreativeWorkSeries  // The series to which this episode or season belongs.
	ProductionCompany() []Organization   // The production company or studio responsible for the item e.g. series, video game, episode etc.
	Trailer() []VideoObject              // The trailer of a movie or tv/radio series, season, episode, etc.
}
type episodeStruct struct {
	creativeWorkStruct

	Actor_             PersonSlice                  `json:"actor,omitempty"`
	Actors_            PersonSlice                  `json:"actors,omitempty"`
	Director_          PersonSlice                  `json:"director,omitempty"`
	Directors_         PersonSlice                  `json:"directors,omitempty"`
	Duration_          DurationSlice                `json:"duration,omitempty"`
	EpisodeNumber_     Integer_Text_UnionSlice      `json:"episodeNumber,omitempty"`
	MusicBy_           MusicGroup_Person_UnionSlice `json:"musicBy,omitempty"`
	PartOfSeason_      CreativeWorkSeasonSlice      `json:"partOfSeason,omitempty"`
	PartOfSeries_      CreativeWorkSeriesSlice      `json:"partOfSeries,omitempty"`
	ProductionCompany_ OrganizationSlice            `json:"productionCompany,omitempty"`
	Trailer_           VideoObjectSlice             `json:"trailer,omitempty"`
}

func (s *episodeStruct) Actor() []Person {
	return s.Actor_
}
func (s *episodeStruct) Actors() []Person {
	return s.Actors_
}
func (s *episodeStruct) Director() []Person {
	return s.Director_
}
func (s *episodeStruct) Directors() []Person {
	return s.Directors_
}
func (s *episodeStruct) Duration() []Duration {
	return s.Duration_
}
func (s *episodeStruct) EpisodeNumber() []Integer_Text_Union {
	return s.EpisodeNumber_
}
func (s *episodeStruct) MusicBy() []MusicGroup_Person_Union {
	return s.MusicBy_
}
func (s *episodeStruct) PartOfSeason() []CreativeWorkSeason {
	return s.PartOfSeason_
}
func (s *episodeStruct) PartOfSeries() []CreativeWorkSeries {
	return s.PartOfSeries_
}
func (s *episodeStruct) ProductionCompany() []Organization {
	return s.ProductionCompany_
}
func (s *episodeStruct) Trailer() []VideoObject {
	return s.Trailer_
}

type EpisodeSlice []Episode

func (s *EpisodeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EpisodeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Episode)
	}
	return nil
}

var _ Episode = &episodeStruct{}

// An event happening at a certain time and location, such as a concert, lecture, or festival. Ticketing information may be added via the [[offers]] property. Repeated events may be structured as separate Event objects.
type Event interface {
	// Parents
	Thing
	// Unions
	AggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union
	BioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union
	CreativeWork_Event_Union
	// Accessors
	About() []Thing                                        // The subject matter of the content.
	Actor() []Person                                       // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	AggregateRating() []AggregateRating                    // The overall rating, based on a collection of reviews or ratings, of the item.
	Attendee() []Organization_Person_Union                 // A person or organization attending the event.
	Attendees() []Organization_Person_Union                // A person attending the event.
	Audience() []Audience                                  // An intended audience, i.e. a group for whom something was created.
	Composer() []Organization_Person_Union                 // The person or organization who wrote a composition, or who is the composer of a work performed at some event.
	Contributor() []Organization_Person_Union              // A secondary contributor to the CreativeWork or Event.
	Director() []Person                                    // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	DoorTime() []DateTime_Time_Union                       // The time admission will commence.
	Duration() []Duration                                  // The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	EndDate() []Date_DateTime_Union                        // The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	EventAttendanceMode() []EventAttendanceModeEnumeration // The eventAttendanceMode of an event indicates whether it occurs online, offline, or a mix.
	EventSchedule() []Schedule                             /*
	Associates an [[Event]] with a [[Schedule]]. There are circumstances where it is preferable to share a schedule for a series of
	      repeating events rather than data on the individual events themselves. For example, a website or application might prefer to publish a schedule for a weekly
	      gym class rather than provide data on every event. A schedule could be processed by applications to add forthcoming events to a calendar. An [[Event]] that
	      is associated with a [[Schedule]] using this property should not have [[startDate]] or [[endDate]] properties. These are instead defined within the associated
	      [[Schedule]], this avoids any ambiguity for clients using the data. The property might have repeated values to specify different schedules, e.g. for different months
	      or seasons.
	*/
	EventStatus() []EventStatusType                             // An eventStatus of an event represents its status; particularly useful when an event is cancelled or rescheduled.
	Funder() []Organization_Person_Union                        // A person or organization that supports (sponsors) something through some kind of financial contribution.
	Funding() []Grant                                           // A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
	InLanguage() []Language_Text_Union                          // The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
	IsAccessibleForFree() []Boolean                             // A flag to signal that the item, event, or place is accessible for free.
	Keywords() []DefinedTerm_Text_URL_Union                     // Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
	Location() []Place_PostalAddress_Text_VirtualLocation_Union // The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
	MaximumAttendeeCapacity() []Integer                         // The total number of individuals that may attend an event or venue.
	MaximumPhysicalAttendeeCapacity() []Integer                 // The maximum physical attendee capacity of an [[Event]] whose [[eventAttendanceMode]] is [[OfflineEventAttendanceMode]] (or the offline aspects, in the case of a [[MixedEventAttendanceMode]]).
	MaximumVirtualAttendeeCapacity() []Integer                  // The maximum physical attendee capacity of an [[Event]] whose [[eventAttendanceMode]] is [[OnlineEventAttendanceMode]] (or the online aspects, in the case of a [[MixedEventAttendanceMode]]).
	Offers() []Demand_Offer_Union                               /*
	An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.

	*/
	Organizer() []Organization_Person_Union  // An organizer of an Event.
	Performer() []Organization_Person_Union  // A performer at the event&#x2014;for example, a presenter, musician, musical group or actor.
	Performers() []Organization_Person_Union // The main performer or performers of the event&#x2014;for example, a presenter, musician, or actor.
	PreviousStartDate() []Date               // Used in conjunction with eventStatus for rescheduled or cancelled events. This property contains the previously scheduled start date. For rescheduled events, the startDate property should be used for the newly scheduled start date. In the (rare) case of an event that has been postponed and rescheduled multiple times, this field may be repeated.
	RecordedIn() []CreativeWork              // The CreativeWork that captured all or part of this Event.
	RemainingAttendeeCapacity() []Integer    // The number of attendee places for an event that remain unallocated.
	Review() []Review                        // A review of the item.
	Sponsor() []Organization_Person_Union    // A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
	StartDate() []Date_DateTime_Union        // The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	SubEvent() []Event                       // An Event that is part of this event. For example, a conference event includes many presentations, each of which is a subEvent of the conference.
	SubEvents() []Event                      // Events that are a part of this event. For example, a conference event includes many presentations, each subEvents of the conference.
	SuperEvent() []Event                     // An event that this event is a part of. For example, a collection of individual music performances might each have a music festival as their superEvent.
	Translator() []Organization_Person_Union // Organization or person who adapts a creative work to different languages, regional differences and technical requirements of a target market, or that translates during some event.
	TypicalAgeRange() []Text                 // The typical expected age range, e.g. '7-9', '11-'.
	WorkFeatured() []CreativeWork            /*
	A work featured in some event, e.g. exhibited in an ExhibitionEvent.
	       Specific subproperties are available for workPerformed (e.g. a play), or a workPresented (a Movie at a ScreeningEvent).
	*/
	WorkPerformed() []CreativeWork // A work performed in some event, for example a play performed in a TheaterEvent.
}
type eventStruct struct {
	thingStruct

	About_                           ThingSlice                                          `json:"about,omitempty"`
	Actor_                           PersonSlice                                         `json:"actor,omitempty"`
	AggregateRating_                 AggregateRatingSlice                                `json:"aggregateRating,omitempty"`
	Attendee_                        Organization_Person_UnionSlice                      `json:"attendee,omitempty"`
	Attendees_                       Organization_Person_UnionSlice                      `json:"attendees,omitempty"`
	Audience_                        AudienceSlice                                       `json:"audience,omitempty"`
	Composer_                        Organization_Person_UnionSlice                      `json:"composer,omitempty"`
	Contributor_                     Organization_Person_UnionSlice                      `json:"contributor,omitempty"`
	Director_                        PersonSlice                                         `json:"director,omitempty"`
	DoorTime_                        DateTime_Time_UnionSlice                            `json:"doorTime,omitempty"`
	Duration_                        DurationSlice                                       `json:"duration,omitempty"`
	EndDate_                         Date_DateTime_UnionSlice                            `json:"endDate,omitempty"`
	EventAttendanceMode_             EventAttendanceModeEnumerationSlice                 `json:"eventAttendanceMode,omitempty"`
	EventSchedule_                   ScheduleSlice                                       `json:"eventSchedule,omitempty"`
	EventStatus_                     EventStatusTypeSlice                                `json:"eventStatus,omitempty"`
	Funder_                          Organization_Person_UnionSlice                      `json:"funder,omitempty"`
	Funding_                         GrantSlice                                          `json:"funding,omitempty"`
	InLanguage_                      Language_Text_UnionSlice                            `json:"inLanguage,omitempty"`
	IsAccessibleForFree_             BooleanSlice                                        `json:"isAccessibleForFree,omitempty"`
	Keywords_                        DefinedTerm_Text_URL_UnionSlice                     `json:"keywords,omitempty"`
	Location_                        Place_PostalAddress_Text_VirtualLocation_UnionSlice `json:"location,omitempty"`
	MaximumAttendeeCapacity_         IntegerSlice                                        `json:"maximumAttendeeCapacity,omitempty"`
	MaximumPhysicalAttendeeCapacity_ IntegerSlice                                        `json:"maximumPhysicalAttendeeCapacity,omitempty"`
	MaximumVirtualAttendeeCapacity_  IntegerSlice                                        `json:"maximumVirtualAttendeeCapacity,omitempty"`
	Offers_                          Demand_Offer_UnionSlice                             `json:"offers,omitempty"`
	Organizer_                       Organization_Person_UnionSlice                      `json:"organizer,omitempty"`
	Performer_                       Organization_Person_UnionSlice                      `json:"performer,omitempty"`
	Performers_                      Organization_Person_UnionSlice                      `json:"performers,omitempty"`
	PreviousStartDate_               DateSlice                                           `json:"previousStartDate,omitempty"`
	RecordedIn_                      CreativeWorkSlice                                   `json:"recordedIn,omitempty"`
	RemainingAttendeeCapacity_       IntegerSlice                                        `json:"remainingAttendeeCapacity,omitempty"`
	Review_                          ReviewSlice                                         `json:"review,omitempty"`
	Sponsor_                         Organization_Person_UnionSlice                      `json:"sponsor,omitempty"`
	StartDate_                       Date_DateTime_UnionSlice                            `json:"startDate,omitempty"`
	SubEvent_                        EventSlice                                          `json:"subEvent,omitempty"`
	SubEvents_                       EventSlice                                          `json:"subEvents,omitempty"`
	SuperEvent_                      EventSlice                                          `json:"superEvent,omitempty"`
	Translator_                      Organization_Person_UnionSlice                      `json:"translator,omitempty"`
	TypicalAgeRange_                 TextSlice                                           `json:"typicalAgeRange,omitempty"`
	WorkFeatured_                    CreativeWorkSlice                                   `json:"workFeatured,omitempty"`
	WorkPerformed_                   CreativeWorkSlice                                   `json:"workPerformed,omitempty"`
}

func (s *eventStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
}
func (s *eventStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}
func (s *eventStruct) implementsCreativeWork_Event_Union() {}

func (s *eventStruct) About() []Thing {
	return s.About_
}
func (s *eventStruct) Actor() []Person {
	return s.Actor_
}
func (s *eventStruct) AggregateRating() []AggregateRating {
	return s.AggregateRating_
}
func (s *eventStruct) Attendee() []Organization_Person_Union {
	return s.Attendee_
}
func (s *eventStruct) Attendees() []Organization_Person_Union {
	return s.Attendees_
}
func (s *eventStruct) Audience() []Audience {
	return s.Audience_
}
func (s *eventStruct) Composer() []Organization_Person_Union {
	return s.Composer_
}
func (s *eventStruct) Contributor() []Organization_Person_Union {
	return s.Contributor_
}
func (s *eventStruct) Director() []Person {
	return s.Director_
}
func (s *eventStruct) DoorTime() []DateTime_Time_Union {
	return s.DoorTime_
}
func (s *eventStruct) Duration() []Duration {
	return s.Duration_
}
func (s *eventStruct) EndDate() []Date_DateTime_Union {
	return s.EndDate_
}
func (s *eventStruct) EventAttendanceMode() []EventAttendanceModeEnumeration {
	return s.EventAttendanceMode_
}
func (s *eventStruct) EventSchedule() []Schedule {
	return s.EventSchedule_
}
func (s *eventStruct) EventStatus() []EventStatusType {
	return s.EventStatus_
}
func (s *eventStruct) Funder() []Organization_Person_Union {
	return s.Funder_
}
func (s *eventStruct) Funding() []Grant {
	return s.Funding_
}
func (s *eventStruct) InLanguage() []Language_Text_Union {
	return s.InLanguage_
}
func (s *eventStruct) IsAccessibleForFree() []Boolean {
	return s.IsAccessibleForFree_
}
func (s *eventStruct) Keywords() []DefinedTerm_Text_URL_Union {
	return s.Keywords_
}
func (s *eventStruct) Location() []Place_PostalAddress_Text_VirtualLocation_Union {
	return s.Location_
}
func (s *eventStruct) MaximumAttendeeCapacity() []Integer {
	return s.MaximumAttendeeCapacity_
}
func (s *eventStruct) MaximumPhysicalAttendeeCapacity() []Integer {
	return s.MaximumPhysicalAttendeeCapacity_
}
func (s *eventStruct) MaximumVirtualAttendeeCapacity() []Integer {
	return s.MaximumVirtualAttendeeCapacity_
}
func (s *eventStruct) Offers() []Demand_Offer_Union {
	return s.Offers_
}
func (s *eventStruct) Organizer() []Organization_Person_Union {
	return s.Organizer_
}
func (s *eventStruct) Performer() []Organization_Person_Union {
	return s.Performer_
}
func (s *eventStruct) Performers() []Organization_Person_Union {
	return s.Performers_
}
func (s *eventStruct) PreviousStartDate() []Date {
	return s.PreviousStartDate_
}
func (s *eventStruct) RecordedIn() []CreativeWork {
	return s.RecordedIn_
}
func (s *eventStruct) RemainingAttendeeCapacity() []Integer {
	return s.RemainingAttendeeCapacity_
}
func (s *eventStruct) Review() []Review {
	return s.Review_
}
func (s *eventStruct) Sponsor() []Organization_Person_Union {
	return s.Sponsor_
}
func (s *eventStruct) StartDate() []Date_DateTime_Union {
	return s.StartDate_
}
func (s *eventStruct) SubEvent() []Event {
	return s.SubEvent_
}
func (s *eventStruct) SubEvents() []Event {
	return s.SubEvents_
}
func (s *eventStruct) SuperEvent() []Event {
	return s.SuperEvent_
}
func (s *eventStruct) Translator() []Organization_Person_Union {
	return s.Translator_
}
func (s *eventStruct) TypicalAgeRange() []Text {
	return s.TypicalAgeRange_
}
func (s *eventStruct) WorkFeatured() []CreativeWork {
	return s.WorkFeatured_
}
func (s *eventStruct) WorkPerformed() []CreativeWork {
	return s.WorkPerformed_
}

type EventSlice []Event

func (s *EventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Event)
	}
	return nil
}

var _ Event = &eventStruct{}

// An EventAttendanceModeEnumeration value is one of potentially several modes of organising an event, relating to whether it is online or offline.
type EventAttendanceModeEnumeration interface {
	// Parents
	Enumeration
}
type eventAttendanceModeEnumerationStruct struct {
	enumerationStruct
}
type EventAttendanceModeEnumerationSlice []EventAttendanceModeEnumeration

func (s *EventAttendanceModeEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EventAttendanceModeEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EventAttendanceModeEnumeration)
	}
	return nil
}

var _ EventAttendanceModeEnumeration = &eventAttendanceModeEnumerationStruct{}

// A reservation for an event like a concert, sporting event, or lecture.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
type EventReservation interface {
	// Parents
	Reservation
}
type eventReservationStruct struct {
	reservationStruct
}
type EventReservationSlice []EventReservation

func (s *EventReservationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EventReservationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EventReservation)
	}
	return nil
}

var _ EventReservation = &eventReservationStruct{}

/*
A series of [[Event]]s. Included events can relate with the series using the [[superEvent]] property.

An EventSeries is a collection of events that share some unifying characteristic. For example, "The Olympic Games" is a series, which
is repeated regularly. The "2012 London Olympics" can be presented both as an [[Event]] in the series "Olympic Games", and as an
[[EventSeries]] that included a number of sporting competitions as Events.

The nature of the association between the events in an [[EventSeries]] can vary, but typical examples could
include a thematic event series (e.g. topical meetups or classes), or a series of regular events that share a location, attendee group and/or organizers.

EventSeries has been defined as a kind of Event to make it easy for publishers to use it in an Event context without
worrying about which kinds of series are really event-like enough to call an Event. In general an EventSeries
may seem more Event-like when the period of time is compact and when aspects such as location are fixed, but
it may also sometimes prove useful to describe a longer-term series as an Event.

*/
type EventSeries interface {
	// Parents
	Event
	Series
}
type eventSeriesStruct struct {
	eventStruct
	seriesStruct
}

func (s *eventSeriesStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *eventSeriesStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *eventSeriesStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *eventSeriesStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *eventSeriesStruct) implementsText_Thing_Union()                                           {} // re
type EventSeriesSlice []EventSeries

func (s *EventSeriesSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EventSeriesSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EventSeries)
	}
	return nil
}

var _ EventSeries = &eventSeriesStruct{}

// EventStatusType is an enumeration type whose instances represent several states that an Event may be in.
type EventStatusType interface {
	// Parents
	StatusEnumeration
	// Unions
	EventStatusType_MedicalStudyStatus_Text_Union
}
type eventStatusTypeStruct struct {
	statusEnumerationStruct
}

func (s *eventStatusTypeStruct) implementsEventStatusType_MedicalStudyStatus_Text_Union() {}

type EventStatusTypeSlice []EventStatusType

func (s *EventStatusTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EventStatusTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EventStatusType)
	}
	return nil
}

var _ EventStatusType = &eventStatusTypeStruct{}

// An event venue.
type EventVenue interface {
	// Parents
	CivicStructure
}
type eventVenueStruct struct {
	civicStructureStruct
}
type EventVenueSlice []EventVenue

func (s *EventVenueSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(EventVenueSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(EventVenue)
	}
	return nil
}

var _ EventVenue = &eventVenueStruct{}

// A structured value representing exchange rate.
type ExchangeRateSpecification interface {
	// Parents
	StructuredValue
	// Accessors
	Currency() []Text                                  // The currency in which the monetary amount is expressed.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	CurrentExchangeRate() []UnitPriceSpecification     // The current price of a currency.
	ExchangeRateSpread() []MonetaryAmount_Number_Union // The difference between the price at which a broker or other intermediary buys and sells foreign currency.
}
type exchangeRateSpecificationStruct struct {
	structuredValueStruct

	Currency_            TextSlice                        `json:"currency,omitempty"`
	CurrentExchangeRate_ UnitPriceSpecificationSlice      `json:"currentExchangeRate,omitempty"`
	ExchangeRateSpread_  MonetaryAmount_Number_UnionSlice `json:"exchangeRateSpread,omitempty"`
}

func (s *exchangeRateSpecificationStruct) Currency() []Text {
	return s.Currency_
}
func (s *exchangeRateSpecificationStruct) CurrentExchangeRate() []UnitPriceSpecification {
	return s.CurrentExchangeRate_
}
func (s *exchangeRateSpecificationStruct) ExchangeRateSpread() []MonetaryAmount_Number_Union {
	return s.ExchangeRateSpread_
}

type ExchangeRateSpecificationSlice []ExchangeRateSpecification

func (s *ExchangeRateSpecificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ExchangeRateSpecificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ExchangeRateSpecification)
	}
	return nil
}

var _ ExchangeRateSpecification = &exchangeRateSpecificationStruct{}

// The act of participating in exertive activity for the purposes of improving health and fitness.
type ExerciseAction interface {
	// Parents
	PlayAction
	// Accessors
	Course() []Place                                  // A sub property of location. The course where this action was taken.
	Diet() []Diet                                     // A sub property of instrument. The diet used in this action.
	Distance() []Distance                             // The distance travelled, e.g. exercising or travelling.
	ExerciseCourse() []Place                          // A sub property of location. The course where this action was taken.
	ExercisePlan() []ExercisePlan                     // A sub property of instrument. The exercise plan used on this action.
	ExerciseRelatedDiet() []Diet                      // A sub property of instrument. The diet used in this action.
	ExerciseType() []Text                             // Type(s) of exercise or activity, such as strength training, flexibility training, aerobics, cardiac rehabilitation, etc.
	FromLocation() []Place                            // A sub property of location. The original location of the object or the agent before the action.
	Opponent() []Person                               // A sub property of participant. The opponent on this action.
	SportsActivityLocation() []SportsActivityLocation // A sub property of location. The sports activity location where this action occurred.
	SportsEvent() []SportsEvent                       // A sub property of location. The sports event where this action occurred.
	SportsTeam() []SportsTeam                         // A sub property of participant. The sports team that participated on this action.
	ToLocation() []Place                              // A sub property of location. The final location of the object or the agent after the action.
}
type exerciseActionStruct struct {
	playActionStruct

	Course_                 PlaceSlice                  `json:"course,omitempty"`
	Diet_                   DietSlice                   `json:"diet,omitempty"`
	Distance_               DistanceSlice               `json:"distance,omitempty"`
	ExerciseCourse_         PlaceSlice                  `json:"exerciseCourse,omitempty"`
	ExercisePlan_           ExercisePlanSlice           `json:"exercisePlan,omitempty"`
	ExerciseRelatedDiet_    DietSlice                   `json:"exerciseRelatedDiet,omitempty"`
	ExerciseType_           TextSlice                   `json:"exerciseType,omitempty"`
	FromLocation_           PlaceSlice                  `json:"fromLocation,omitempty"`
	Opponent_               PersonSlice                 `json:"opponent,omitempty"`
	SportsActivityLocation_ SportsActivityLocationSlice `json:"sportsActivityLocation,omitempty"`
	SportsEvent_            SportsEventSlice            `json:"sportsEvent,omitempty"`
	SportsTeam_             SportsTeamSlice             `json:"sportsTeam,omitempty"`
	ToLocation_             PlaceSlice                  `json:"toLocation,omitempty"`
}

func (s *exerciseActionStruct) Course() []Place {
	return s.Course_
}
func (s *exerciseActionStruct) Diet() []Diet {
	return s.Diet_
}
func (s *exerciseActionStruct) Distance() []Distance {
	return s.Distance_
}
func (s *exerciseActionStruct) ExerciseCourse() []Place {
	return s.ExerciseCourse_
}
func (s *exerciseActionStruct) ExercisePlan() []ExercisePlan {
	return s.ExercisePlan_
}
func (s *exerciseActionStruct) ExerciseRelatedDiet() []Diet {
	return s.ExerciseRelatedDiet_
}
func (s *exerciseActionStruct) ExerciseType() []Text {
	return s.ExerciseType_
}
func (s *exerciseActionStruct) FromLocation() []Place {
	return s.FromLocation_
}
func (s *exerciseActionStruct) Opponent() []Person {
	return s.Opponent_
}
func (s *exerciseActionStruct) SportsActivityLocation() []SportsActivityLocation {
	return s.SportsActivityLocation_
}
func (s *exerciseActionStruct) SportsEvent() []SportsEvent {
	return s.SportsEvent_
}
func (s *exerciseActionStruct) SportsTeam() []SportsTeam {
	return s.SportsTeam_
}
func (s *exerciseActionStruct) ToLocation() []Place {
	return s.ToLocation_
}

type ExerciseActionSlice []ExerciseAction

func (s *ExerciseActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ExerciseActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ExerciseAction)
	}
	return nil
}

var _ ExerciseAction = &exerciseActionStruct{}

// A gym.
type ExerciseGym interface {
	// Parents
	SportsActivityLocation
}
type exerciseGymStruct struct {
	sportsActivityLocationStruct
}
type ExerciseGymSlice []ExerciseGym

func (s *ExerciseGymSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ExerciseGymSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ExerciseGym)
	}
	return nil
}

var _ ExerciseGym = &exerciseGymStruct{}

// Fitness-related activity designed for a specific health-related purpose, including defined exercise routines as well as activity prescribed by a clinician.
type ExercisePlan interface {
	// Parents
	CreativeWork
	PhysicalActivity
	// Accessors
	ActivityDuration() []Duration_QuantitativeValue_Union // Length of time to engage in the activity.
	ActivityFrequency() []QuantitativeValue_Text_Union    // How often one should engage in the activity.
	AdditionalVariable() []Text                           // Any additional component of the exercise prescription that may need to be articulated to the patient. This may include the order of exercises, the number of repetitions of movement, quantitative distance, progressions over time, etc.
	ExerciseType() []Text                                 // Type(s) of exercise or activity, such as strength training, flexibility training, aerobics, cardiac rehabilitation, etc.
	Intensity() []QuantitativeValue_Text_Union            // Quantitative measure gauging the degree of force involved in the exercise, for example, heartbeats per minute. May include the velocity of the movement.
	Repetitions() []Number_QuantitativeValue_Union        // Number of times one should repeat the activity.
	RestPeriods() []QuantitativeValue_Text_Union          // How often one should break from the activity.
	Workload() []Energy_QuantitativeValue_Union           // Quantitative measure of the physiologic output of the exercise; also referred to as energy expenditure.
}
type exercisePlanStruct struct {
	creativeWorkStruct
	physicalActivityStruct

	ActivityDuration_   Duration_QuantitativeValue_UnionSlice `json:"activityDuration,omitempty"`
	ActivityFrequency_  QuantitativeValue_Text_UnionSlice     `json:"activityFrequency,omitempty"`
	AdditionalVariable_ TextSlice                             `json:"additionalVariable,omitempty"`
	ExerciseType_       TextSlice                             `json:"exerciseType,omitempty"`
	Intensity_          QuantitativeValue_Text_UnionSlice     `json:"intensity,omitempty"`
	Repetitions_        Number_QuantitativeValue_UnionSlice   `json:"repetitions,omitempty"`
	RestPeriods_        QuantitativeValue_Text_UnionSlice     `json:"restPeriods,omitempty"`
	Workload_           Energy_QuantitativeValue_UnionSlice   `json:"workload,omitempty"`
}

func (s *exercisePlanStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}                                                                                                   // re
func (s *exercisePlanStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *exercisePlanStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *exercisePlanStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *exercisePlanStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *exercisePlanStruct) implementsText_Thing_Union()                                           {} // re
func (s *exercisePlanStruct) ActivityDuration() []Duration_QuantitativeValue_Union {
	return s.ActivityDuration_
}
func (s *exercisePlanStruct) ActivityFrequency() []QuantitativeValue_Text_Union {
	return s.ActivityFrequency_
}
func (s *exercisePlanStruct) AdditionalVariable() []Text {
	return s.AdditionalVariable_
}
func (s *exercisePlanStruct) ExerciseType() []Text {
	return s.ExerciseType_
}
func (s *exercisePlanStruct) Intensity() []QuantitativeValue_Text_Union {
	return s.Intensity_
}
func (s *exercisePlanStruct) Repetitions() []Number_QuantitativeValue_Union {
	return s.Repetitions_
}
func (s *exercisePlanStruct) RestPeriods() []QuantitativeValue_Text_Union {
	return s.RestPeriods_
}
func (s *exercisePlanStruct) Workload() []Energy_QuantitativeValue_Union {
	return s.Workload_
}

type ExercisePlanSlice []ExercisePlan

func (s *ExercisePlanSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ExercisePlanSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ExercisePlan)
	}
	return nil
}

var _ ExercisePlan = &exercisePlanStruct{}

// Event type: Exhibition event, e.g. at a museum, library, archive, tradeshow, ...
type ExhibitionEvent interface {
	// Parents
	Event
}
type exhibitionEventStruct struct {
	eventStruct
}
type ExhibitionEventSlice []ExhibitionEvent

func (s *ExhibitionEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ExhibitionEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ExhibitionEvent)
	}
	return nil
}

var _ ExhibitionEvent = &exhibitionEventStruct{}

// A [[FAQPage]] is a [[WebPage]] presenting one or more "[Frequently asked questions](https://en.wikipedia.org/wiki/FAQ)" (see also [[QAPage]]).
type FAQPage interface {
	// Parents
	WebPage
}
type fAQPageStruct struct {
	webPageStruct
}
type FAQPageSlice []FAQPage

func (s *FAQPageSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FAQPageSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(FAQPage)
	}
	return nil
}

var _ FAQPage = &fAQPageStruct{}

// A radio channel that uses FM.
type FMRadioChannel interface {
	// Parents
	RadioChannel
}
type fMRadioChannelStruct struct {
	radioChannelStruct
}
type FMRadioChannelSlice []FMRadioChannel

func (s *FMRadioChannelSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FMRadioChannelSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(FMRadioChannel)
	}
	return nil
}

var _ FMRadioChannel = &fMRadioChannelStruct{}

// A fast-food restaurant.
type FastFoodRestaurant interface {
	// Parents
	FoodEstablishment
}
type fastFoodRestaurantStruct struct {
	foodEstablishmentStruct
}
type FastFoodRestaurantSlice []FastFoodRestaurant

func (s *FastFoodRestaurantSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FastFoodRestaurantSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(FastFoodRestaurant)
	}
	return nil
}

var _ FastFoodRestaurant = &fastFoodRestaurantStruct{}

// Event type: Festival.
type Festival interface {
	// Parents
	Event
}
type festivalStruct struct {
	eventStruct
}
type FestivalSlice []Festival

func (s *FestivalSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FestivalSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Festival)
	}
	return nil
}

var _ Festival = &festivalStruct{}

// The act of capturing sound and moving images on film, video, or digitally.
type FilmAction interface {
	// Parents
	CreateAction
}
type filmActionStruct struct {
	createActionStruct
}
type FilmActionSlice []FilmAction

func (s *FilmActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FilmActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(FilmAction)
	}
	return nil
}

var _ FilmAction = &filmActionStruct{}

// A product provided to consumers and businesses by financial institutions such as banks, insurance companies, brokerage firms, consumer finance companies, and investment companies which comprise the financial services industry.
type FinancialProduct interface {
	// Parents
	Service
	// Accessors
	AnnualPercentageRate() []Number_QuantitativeValue_Union // The annual rate that is charged for borrowing (or made by investing), expressed as a single percentage number that represents the actual yearly cost of funds over the term of a loan. This includes any fees or additional costs associated with the transaction.
	FeesAndCommissionsSpecification() []Text_URL_Union      // Description of fees, commissions, and other terms applied either to a class of financial product, or by a financial service organization.
	InterestRate() []Number_QuantitativeValue_Union         // The interest rate, charged or paid, applicable to the financial product. Note: This is different from the calculated annualPercentageRate.
}
type financialProductStruct struct {
	serviceStruct

	AnnualPercentageRate_            Number_QuantitativeValue_UnionSlice `json:"annualPercentageRate,omitempty"`
	FeesAndCommissionsSpecification_ Text_URL_UnionSlice                 `json:"feesAndCommissionsSpecification,omitempty"`
	InterestRate_                    Number_QuantitativeValue_UnionSlice `json:"interestRate,omitempty"`
}

func (s *financialProductStruct) AnnualPercentageRate() []Number_QuantitativeValue_Union {
	return s.AnnualPercentageRate_
}
func (s *financialProductStruct) FeesAndCommissionsSpecification() []Text_URL_Union {
	return s.FeesAndCommissionsSpecification_
}
func (s *financialProductStruct) InterestRate() []Number_QuantitativeValue_Union {
	return s.InterestRate_
}

type FinancialProductSlice []FinancialProduct

func (s *FinancialProductSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FinancialProductSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(FinancialProduct)
	}
	return nil
}

var _ FinancialProduct = &financialProductStruct{}

// Financial services business.
type FinancialService interface {
	// Parents
	LocalBusiness
	// Accessors
	FeesAndCommissionsSpecification() []Text_URL_Union // Description of fees, commissions, and other terms applied either to a class of financial product, or by a financial service organization.
}
type financialServiceStruct struct {
	localBusinessStruct

	FeesAndCommissionsSpecification_ Text_URL_UnionSlice `json:"feesAndCommissionsSpecification,omitempty"`
}

func (s *financialServiceStruct) FeesAndCommissionsSpecification() []Text_URL_Union {
	return s.FeesAndCommissionsSpecification_
}

type FinancialServiceSlice []FinancialService

func (s *FinancialServiceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FinancialServiceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(FinancialService)
	}
	return nil
}

var _ FinancialService = &financialServiceStruct{}

// The act of finding an object.\n\nRelated actions:\n\n* [[SearchAction]]: FindAction is generally lead by a SearchAction, but not necessarily.
type FindAction interface {
	// Parents
	Action
}
type findActionStruct struct {
	actionStruct
}
type FindActionSlice []FindAction

func (s *FindActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FindActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(FindAction)
	}
	return nil
}

var _ FindAction = &findActionStruct{}

// A fire station. With firemen.
type FireStation interface {
	// Parents
	CivicStructure
	EmergencyService
}
type fireStationStruct struct {
	civicStructureStruct
	emergencyServiceStruct
}

func (s *fireStationStruct) implementsAdministrativeArea_GeoShape_Place_Text_Union()               {} // re
func (s *fireStationStruct) implementsAdministrativeArea_GeoShape_Place_Union()                    {} // re
func (s *fireStationStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *fireStationStruct) implementsCivicStructure_LocalBusiness_Union()                         {} // re
func (s *fireStationStruct) implementsContactPoint_Place_Union()                                   {} // re
func (s *fireStationStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *fireStationStruct) implementsFoodEstablishment_Place_Union()                              {} // re
func (s *fireStationStruct) implementsGeoShape_Place_Text_Union()                                  {} // re
func (s *fireStationStruct) implementsGeospatialGeometry_Place_Union()                             {} // re
func (s *fireStationStruct) implementsItemList_Place_Union()                                       {} // re
func (s *fireStationStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *fireStationStruct) implementsPlace_PostalAddress_Text_Union()                             {} // re
func (s *fireStationStruct) implementsPlace_PostalAddress_Text_VirtualLocation_Union()             {} // re
func (s *fireStationStruct) implementsPlace_PostalAddress_URL_Union()                              {} // re
func (s *fireStationStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *fireStationStruct) implementsText_Thing_Union()                                           {} // re
type FireStationSlice []FireStation

func (s *FireStationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FireStationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(FireStation)
	}
	return nil
}

var _ FireStation = &fireStationStruct{}

// An airline flight.
type Flight interface {
	// Parents
	Trip
	// Accessors
	Aircraft() []Text_Vehicle_Union                 // The kind of aircraft (e.g., "Boeing 747").
	ArrivalAirport() []Airport                      // The airport where the flight terminates.
	ArrivalGate() []Text                            // Identifier of the flight's arrival gate.
	ArrivalTerminal() []Text                        // Identifier of the flight's arrival terminal.
	BoardingPolicy() []BoardingPolicyType           // The type of boarding policy used by the airline (e.g. zone-based or group-based).
	Carrier() []Organization                        // 'carrier' is an out-dated term indicating the 'provider' for parcel delivery and flights.
	DepartureAirport() []Airport                    // The airport where the flight originates.
	DepartureGate() []Text                          // Identifier of the flight's departure gate.
	DepartureTerminal() []Text                      // Identifier of the flight's departure terminal.
	EstimatedFlightDuration() []Duration_Text_Union // The estimated time the flight will take.
	FlightDistance() []Distance_Text_Union          // The distance of the flight.
	FlightNumber() []Text                           // The unique identifier for a flight including the airline IATA code. For example, if describing United flight 110, where the IATA code for United is 'UA', the flightNumber is 'UA110'.
	MealService() []Text                            // Description of the meals that will be provided or available for purchase.
	Seller() []Organization_Person_Union            // An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
	WebCheckinTime() []DateTime                     // The time when a passenger can check into the flight online.
}
type flightStruct struct {
	tripStruct

	Aircraft_                Text_Vehicle_UnionSlice        `json:"aircraft,omitempty"`
	ArrivalAirport_          AirportSlice                   `json:"arrivalAirport,omitempty"`
	ArrivalGate_             TextSlice                      `json:"arrivalGate,omitempty"`
	ArrivalTerminal_         TextSlice                      `json:"arrivalTerminal,omitempty"`
	BoardingPolicy_          BoardingPolicyTypeSlice        `json:"boardingPolicy,omitempty"`
	Carrier_                 OrganizationSlice              `json:"carrier,omitempty"`
	DepartureAirport_        AirportSlice                   `json:"departureAirport,omitempty"`
	DepartureGate_           TextSlice                      `json:"departureGate,omitempty"`
	DepartureTerminal_       TextSlice                      `json:"departureTerminal,omitempty"`
	EstimatedFlightDuration_ Duration_Text_UnionSlice       `json:"estimatedFlightDuration,omitempty"`
	FlightDistance_          Distance_Text_UnionSlice       `json:"flightDistance,omitempty"`
	FlightNumber_            TextSlice                      `json:"flightNumber,omitempty"`
	MealService_             TextSlice                      `json:"mealService,omitempty"`
	Seller_                  Organization_Person_UnionSlice `json:"seller,omitempty"`
	WebCheckinTime_          DateTimeSlice                  `json:"webCheckinTime,omitempty"`
}

func (s *flightStruct) Aircraft() []Text_Vehicle_Union {
	return s.Aircraft_
}
func (s *flightStruct) ArrivalAirport() []Airport {
	return s.ArrivalAirport_
}
func (s *flightStruct) ArrivalGate() []Text {
	return s.ArrivalGate_
}
func (s *flightStruct) ArrivalTerminal() []Text {
	return s.ArrivalTerminal_
}
func (s *flightStruct) BoardingPolicy() []BoardingPolicyType {
	return s.BoardingPolicy_
}
func (s *flightStruct) Carrier() []Organization {
	return s.Carrier_
}
func (s *flightStruct) DepartureAirport() []Airport {
	return s.DepartureAirport_
}
func (s *flightStruct) DepartureGate() []Text {
	return s.DepartureGate_
}
func (s *flightStruct) DepartureTerminal() []Text {
	return s.DepartureTerminal_
}
func (s *flightStruct) EstimatedFlightDuration() []Duration_Text_Union {
	return s.EstimatedFlightDuration_
}
func (s *flightStruct) FlightDistance() []Distance_Text_Union {
	return s.FlightDistance_
}
func (s *flightStruct) FlightNumber() []Text {
	return s.FlightNumber_
}
func (s *flightStruct) MealService() []Text {
	return s.MealService_
}
func (s *flightStruct) Seller() []Organization_Person_Union {
	return s.Seller_
}
func (s *flightStruct) WebCheckinTime() []DateTime {
	return s.WebCheckinTime_
}

type FlightSlice []Flight

func (s *FlightSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FlightSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Flight)
	}
	return nil
}

var _ Flight = &flightStruct{}

// A reservation for air travel.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
type FlightReservation interface {
	// Parents
	Reservation
	// Accessors
	BoardingGroup() []Text                                  // The airline-specific indicator of boarding order / preference.
	PassengerPriorityStatus() []QualitativeValue_Text_Union // The priority status assigned to a passenger for security or boarding (e.g. FastTrack or Priority).
	PassengerSequenceNumber() []Text                        // The passenger's sequence number as assigned by the airline.
	SecurityScreening() []Text                              // The type of security screening the passenger is subject to.
}
type flightReservationStruct struct {
	reservationStruct

	BoardingGroup_           TextSlice                        `json:"boardingGroup,omitempty"`
	PassengerPriorityStatus_ QualitativeValue_Text_UnionSlice `json:"passengerPriorityStatus,omitempty"`
	PassengerSequenceNumber_ TextSlice                        `json:"passengerSequenceNumber,omitempty"`
	SecurityScreening_       TextSlice                        `json:"securityScreening,omitempty"`
}

func (s *flightReservationStruct) BoardingGroup() []Text {
	return s.BoardingGroup_
}
func (s *flightReservationStruct) PassengerPriorityStatus() []QualitativeValue_Text_Union {
	return s.PassengerPriorityStatus_
}
func (s *flightReservationStruct) PassengerSequenceNumber() []Text {
	return s.PassengerSequenceNumber_
}
func (s *flightReservationStruct) SecurityScreening() []Text {
	return s.SecurityScreening_
}

type FlightReservationSlice []FlightReservation

func (s *FlightReservationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FlightReservationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(FlightReservation)
	}
	return nil
}

var _ FlightReservation = &flightReservationStruct{}

// Data type: Floating number.
type Float interface {
	// Parents
	Number
}
type floatStruct struct {
	numberStruct
}
type FloatSlice []Float

func (s *FloatSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FloatSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Float)
	}
	return nil
}

var _ Float = &floatStruct{}

// A FloorPlan is an explicit representation of a collection of similar accommodations, allowing the provision of common information (room counts, sizes, layout diagrams) and offers for rental or sale. In typical use, some [[ApartmentComplex]] has an [[accommodationFloorPlan]] which is a [[FloorPlan]].  A FloorPlan is always in the context of a particular place, either a larger [[ApartmentComplex]] or a single [[Apartment]]. The visual/spatial aspects of a floor plan (i.e. room layout, [see wikipedia](https://en.wikipedia.org/wiki/Floor_plan)) can be indicated using [[image]].
type FloorPlan interface {
	// Parents
	Intangible
	// Accessors
	AmenityFeature() []LocationFeatureSpecification // An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs.
	FloorSize() []QuantitativeValue                 /*
	The size of the accommodation, e.g. in square meter or squarefoot.
	Typical unit code(s): MTK for square meter, FTK for square foot, or YDK for square yard
	*/
	IsPlanForApartment() []Accommodation                      // Indicates some accommodation that this floor plan describes.
	LayoutImage() []ImageObject_URL_Union                     // A schematic image showing the floorplan layout.
	NumberOfAccommodationUnits() []QuantitativeValue          // Indicates the total (available plus unavailable) number of accommodation units in an [[ApartmentComplex]], or the number of accommodation units for a specific [[FloorPlan]] (within its specific [[ApartmentComplex]]). See also [[numberOfAvailableAccommodationUnits]].
	NumberOfAvailableAccommodationUnits() []QuantitativeValue // Indicates the number of available accommodation units in an [[ApartmentComplex]], or the number of accommodation units for a specific [[FloorPlan]] (within its specific [[ApartmentComplex]]). See also [[numberOfAccommodationUnits]].
	NumberOfBathroomsTotal() []Integer                        // The total integer number of bathrooms in a some [[Accommodation]], following real estate conventions as [documented in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsTotalInteger+Field): "The simple sum of the number of bathrooms. For example for a property with two Full Bathrooms and one Half Bathroom, the Bathrooms Total Integer will be 3.". See also [[numberOfRooms]].
	NumberOfBedrooms() []Number_QuantitativeValue_Union       // The total integer number of bedrooms in a some [[Accommodation]], [[ApartmentComplex]] or [[FloorPlan]].
	NumberOfFullBathrooms() []Number                          // Number of full bathrooms - The total number of full and ¾ bathrooms in an [[Accommodation]]. This corresponds to the [BathroomsFull field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsFull+Field).
	NumberOfPartialBathrooms() []Number                       // Number of partial bathrooms - The total number of half and ¼ bathrooms in an [[Accommodation]]. This corresponds to the [BathroomsPartial field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsPartial+Field).
	NumberOfRooms() []Number_QuantitativeValue_Union          /*
	The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.
	Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.
	*/
	PetsAllowed() []Boolean_Text_Union // Indicates whether pets are allowed to enter the accommodation or lodging business. More detailed information can be put in a text value.
}
type floorPlanStruct struct {
	intangibleStruct

	AmenityFeature_                      LocationFeatureSpecificationSlice   `json:"amenityFeature,omitempty"`
	FloorSize_                           QuantitativeValueSlice              `json:"floorSize,omitempty"`
	IsPlanForApartment_                  AccommodationSlice                  `json:"isPlanForApartment,omitempty"`
	LayoutImage_                         ImageObject_URL_UnionSlice          `json:"layoutImage,omitempty"`
	NumberOfAccommodationUnits_          QuantitativeValueSlice              `json:"numberOfAccommodationUnits,omitempty"`
	NumberOfAvailableAccommodationUnits_ QuantitativeValueSlice              `json:"numberOfAvailableAccommodationUnits,omitempty"`
	NumberOfBathroomsTotal_              IntegerSlice                        `json:"numberOfBathroomsTotal,omitempty"`
	NumberOfBedrooms_                    Number_QuantitativeValue_UnionSlice `json:"numberOfBedrooms,omitempty"`
	NumberOfFullBathrooms_               NumberSlice                         `json:"numberOfFullBathrooms,omitempty"`
	NumberOfPartialBathrooms_            NumberSlice                         `json:"numberOfPartialBathrooms,omitempty"`
	NumberOfRooms_                       Number_QuantitativeValue_UnionSlice `json:"numberOfRooms,omitempty"`
	PetsAllowed_                         Boolean_Text_UnionSlice             `json:"petsAllowed,omitempty"`
}

func (s *floorPlanStruct) AmenityFeature() []LocationFeatureSpecification {
	return s.AmenityFeature_
}
func (s *floorPlanStruct) FloorSize() []QuantitativeValue {
	return s.FloorSize_
}
func (s *floorPlanStruct) IsPlanForApartment() []Accommodation {
	return s.IsPlanForApartment_
}
func (s *floorPlanStruct) LayoutImage() []ImageObject_URL_Union {
	return s.LayoutImage_
}
func (s *floorPlanStruct) NumberOfAccommodationUnits() []QuantitativeValue {
	return s.NumberOfAccommodationUnits_
}
func (s *floorPlanStruct) NumberOfAvailableAccommodationUnits() []QuantitativeValue {
	return s.NumberOfAvailableAccommodationUnits_
}
func (s *floorPlanStruct) NumberOfBathroomsTotal() []Integer {
	return s.NumberOfBathroomsTotal_
}
func (s *floorPlanStruct) NumberOfBedrooms() []Number_QuantitativeValue_Union {
	return s.NumberOfBedrooms_
}
func (s *floorPlanStruct) NumberOfFullBathrooms() []Number {
	return s.NumberOfFullBathrooms_
}
func (s *floorPlanStruct) NumberOfPartialBathrooms() []Number {
	return s.NumberOfPartialBathrooms_
}
func (s *floorPlanStruct) NumberOfRooms() []Number_QuantitativeValue_Union {
	return s.NumberOfRooms_
}
func (s *floorPlanStruct) PetsAllowed() []Boolean_Text_Union {
	return s.PetsAllowed_
}

type FloorPlanSlice []FloorPlan

func (s *FloorPlanSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FloorPlanSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(FloorPlan)
	}
	return nil
}

var _ FloorPlan = &floorPlanStruct{}

// A florist.
type Florist interface {
	// Parents
	Store
}
type floristStruct struct {
	storeStruct
}
type FloristSlice []Florist

func (s *FloristSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FloristSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Florist)
	}
	return nil
}

var _ Florist = &floristStruct{}

// The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically to get updates polled from.\n\nRelated actions:\n\n* [[BefriendAction]]: Unlike BefriendAction, FollowAction implies that the connection is *not* necessarily reciprocal.\n* [[SubscribeAction]]: Unlike SubscribeAction, FollowAction implies that the follower acts as an active agent constantly/actively polling for updates.\n* [[RegisterAction]]: Unlike RegisterAction, FollowAction implies that the agent is interested in continuing receiving updates from the object.\n* [[JoinAction]]: Unlike JoinAction, FollowAction implies that the agent is interested in getting updates from the object.\n* [[TrackAction]]: Unlike TrackAction, FollowAction refers to the polling of updates of all aspects of animate objects rather than the location of inanimate objects (e.g. you track a package, but you don't follow it).
type FollowAction interface {
	// Parents
	InteractAction
	// Accessors
	Followee() []Organization_Person_Union // A sub property of object. The person or organization being followed.
}
type followActionStruct struct {
	interactActionStruct

	Followee_ Organization_Person_UnionSlice `json:"followee,omitempty"`
}

func (s *followActionStruct) Followee() []Organization_Person_Union {
	return s.Followee_
}

type FollowActionSlice []FollowAction

func (s *FollowActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FollowActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(FollowAction)
	}
	return nil
}

var _ FollowAction = &followActionStruct{}

// A food-related business.
type FoodEstablishment interface {
	// Parents
	LocalBusiness
	// Unions
	FoodEstablishment_Place_Union
	// Accessors
	AcceptsReservations() []Boolean_Text_URL_Union // Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean, an URL at which reservations can be made or (for backwards compatibility) the strings ```Yes``` or ```No```.
	HasMenu() []Menu_Text_URL_Union                // Either the actual menu as a structured representation, as text, or a URL of the menu.
	Menu() []Menu_Text_URL_Union                   // Either the actual menu as a structured representation, as text, or a URL of the menu.
	ServesCuisine() []Text                         // The cuisine of the restaurant.
	StarRating() []Rating                          // An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
}
type foodEstablishmentStruct struct {
	localBusinessStruct

	AcceptsReservations_ Boolean_Text_URL_UnionSlice `json:"acceptsReservations,omitempty"`
	HasMenu_             Menu_Text_URL_UnionSlice    `json:"hasMenu,omitempty"`
	Menu_                Menu_Text_URL_UnionSlice    `json:"menu,omitempty"`
	ServesCuisine_       TextSlice                   `json:"servesCuisine,omitempty"`
	StarRating_          RatingSlice                 `json:"starRating,omitempty"`
}

func (s *foodEstablishmentStruct) implementsFoodEstablishment_Place_Union() {}

func (s *foodEstablishmentStruct) AcceptsReservations() []Boolean_Text_URL_Union {
	return s.AcceptsReservations_
}
func (s *foodEstablishmentStruct) HasMenu() []Menu_Text_URL_Union {
	return s.HasMenu_
}
func (s *foodEstablishmentStruct) Menu() []Menu_Text_URL_Union {
	return s.Menu_
}
func (s *foodEstablishmentStruct) ServesCuisine() []Text {
	return s.ServesCuisine_
}
func (s *foodEstablishmentStruct) StarRating() []Rating {
	return s.StarRating_
}

type FoodEstablishmentSlice []FoodEstablishment

func (s *FoodEstablishmentSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FoodEstablishmentSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(FoodEstablishment)
	}
	return nil
}

var _ FoodEstablishment = &foodEstablishmentStruct{}

// A reservation to dine at a food-related business.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
type FoodEstablishmentReservation interface {
	// Parents
	Reservation
	// Accessors
	EndTime() []DateTime_Time_Union               // The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
	PartySize() []Integer_QuantitativeValue_Union // Number of people the reservation should accommodate.
	StartTime() []DateTime_Time_Union             // The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
}
type foodEstablishmentReservationStruct struct {
	reservationStruct

	EndTime_   DateTime_Time_UnionSlice             `json:"endTime,omitempty"`
	PartySize_ Integer_QuantitativeValue_UnionSlice `json:"partySize,omitempty"`
	StartTime_ DateTime_Time_UnionSlice             `json:"startTime,omitempty"`
}

func (s *foodEstablishmentReservationStruct) EndTime() []DateTime_Time_Union {
	return s.EndTime_
}
func (s *foodEstablishmentReservationStruct) PartySize() []Integer_QuantitativeValue_Union {
	return s.PartySize_
}
func (s *foodEstablishmentReservationStruct) StartTime() []DateTime_Time_Union {
	return s.StartTime_
}

type FoodEstablishmentReservationSlice []FoodEstablishmentReservation

func (s *FoodEstablishmentReservationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FoodEstablishmentReservationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(FoodEstablishmentReservation)
	}
	return nil
}

var _ FoodEstablishmentReservation = &foodEstablishmentReservationStruct{}

// Event type: Food event.
type FoodEvent interface {
	// Parents
	Event
}
type foodEventStruct struct {
	eventStruct
}
type FoodEventSlice []FoodEvent

func (s *FoodEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FoodEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(FoodEvent)
	}
	return nil
}

var _ FoodEvent = &foodEventStruct{}

// A food service, like breakfast, lunch, or dinner.
type FoodService interface {
	// Parents
	Service
}
type foodServiceStruct struct {
	serviceStruct
}
type FoodServiceSlice []FoodService

func (s *FoodServiceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FoodServiceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(FoodService)
	}
	return nil
}

var _ FoodService = &foodServiceStruct{}

/*
A FundingAgency is an organization that implements one or more [[FundingScheme]]s and manages
    the granting process (via [[Grant]]s, typically [[MonetaryGrant]]s).
    A funding agency is not always required for grant funding, e.g. philanthropic giving, corporate sponsorship etc.

Examples of funding agencies include ERC, REA, NIH, Bill and Melinda Gates Foundation...

*/
type FundingAgency interface {
	// Parents
	Project
}
type fundingAgencyStruct struct {
	projectStruct
}
type FundingAgencySlice []FundingAgency

func (s *FundingAgencySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FundingAgencySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(FundingAgency)
	}
	return nil
}

var _ FundingAgency = &fundingAgencyStruct{}

/*
A FundingScheme combines organizational, project and policy aspects of grant-based funding
    that sets guidelines, principles and mechanisms to support other kinds of projects and activities.
    Funding is typically organized via [[Grant]] funding. Examples of funding schemes: Swiss Priority Programmes (SPPs); EU Framework 7 (FP7); Horizon 2020; the NIH-R01 Grant Program; Wellcome institutional strategic support fund. For large scale public sector funding, the management and administration of grant awards is often handled by other, dedicated, organizations - [[FundingAgency]]s such as ERC, REA, ...
*/
type FundingScheme interface {
	// Parents
	Organization
}
type fundingSchemeStruct struct {
	organizationStruct
}
type FundingSchemeSlice []FundingScheme

func (s *FundingSchemeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FundingSchemeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(FundingScheme)
	}
	return nil
}

var _ FundingScheme = &fundingSchemeStruct{}

// A furniture store.
type FurnitureStore interface {
	// Parents
	Store
}
type furnitureStoreStruct struct {
	storeStruct
}
type FurnitureStoreSlice []FurnitureStore

func (s *FurnitureStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(FurnitureStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(FurnitureStore)
	}
	return nil
}

var _ FurnitureStore = &furnitureStoreStruct{}

// The Game type represents things which are games. These are typically rule-governed recreational activities, e.g. role-playing games in which players assume the role of characters in a fictional setting.
type Game interface {
	// Parents
	CreativeWork
	// Accessors
	CharacterAttribute() []Thing                   // A piece of data that represents a particular aspect of a fictional character (skill, power, character points, advantage, disadvantage).
	GameItem() []Thing                             // An item is an object within the game world that can be collected by a player or, occasionally, a non-player character.
	GameLocation() []Place_PostalAddress_URL_Union // Real or fictional location of the game (or part of game).
	NumberOfPlayers() []QuantitativeValue          // Indicate how many people can play this game (minimum, maximum, or range).
	Quest() []Thing                                // The task that a player-controlled character, or group of characters may complete in order to gain a reward.
}
type gameStruct struct {
	creativeWorkStruct

	CharacterAttribute_ ThingSlice                         `json:"characterAttribute,omitempty"`
	GameItem_           ThingSlice                         `json:"gameItem,omitempty"`
	GameLocation_       Place_PostalAddress_URL_UnionSlice `json:"gameLocation,omitempty"`
	NumberOfPlayers_    QuantitativeValueSlice             `json:"numberOfPlayers,omitempty"`
	Quest_              ThingSlice                         `json:"quest,omitempty"`
}

func (s *gameStruct) CharacterAttribute() []Thing {
	return s.CharacterAttribute_
}
func (s *gameStruct) GameItem() []Thing {
	return s.GameItem_
}
func (s *gameStruct) GameLocation() []Place_PostalAddress_URL_Union {
	return s.GameLocation_
}
func (s *gameStruct) NumberOfPlayers() []QuantitativeValue {
	return s.NumberOfPlayers_
}
func (s *gameStruct) Quest() []Thing {
	return s.Quest_
}

type GameSlice []Game

func (s *GameSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GameSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Game)
	}
	return nil
}

var _ Game = &gameStruct{}

// For a [[VideoGame]], such as used with a [[PlayGameAction]], an enumeration of the kind of game availability offered.
type GameAvailabilityEnumeration interface {
	// Parents
	Enumeration
	// Unions
	GameAvailabilityEnumeration_Text_Union
}
type gameAvailabilityEnumerationStruct struct {
	enumerationStruct
}

func (s *gameAvailabilityEnumerationStruct) implementsGameAvailabilityEnumeration_Text_Union() {}

type GameAvailabilityEnumerationSlice []GameAvailabilityEnumeration

func (s *GameAvailabilityEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GameAvailabilityEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GameAvailabilityEnumeration)
	}
	return nil
}

var _ GameAvailabilityEnumeration = &gameAvailabilityEnumerationStruct{}

// Indicates whether this game is multi-player, co-op or single-player.
type GamePlayMode interface {
	// Parents
	Enumeration
}
type gamePlayModeStruct struct {
	enumerationStruct
}
type GamePlayModeSlice []GamePlayMode

func (s *GamePlayModeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GamePlayModeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GamePlayMode)
	}
	return nil
}

var _ GamePlayMode = &gamePlayModeStruct{}

// Server that provides game interaction in a multiplayer game.
type GameServer interface {
	// Parents
	Intangible
	// Accessors
	Game() []VideoGame                // Video game which is played on this server.
	PlayersOnline() []Integer         // Number of players on the server.
	ServerStatus() []GameServerStatus // Status of a game server.
}
type gameServerStruct struct {
	intangibleStruct

	Game_          VideoGameSlice        `json:"game,omitempty"`
	PlayersOnline_ IntegerSlice          `json:"playersOnline,omitempty"`
	ServerStatus_  GameServerStatusSlice `json:"serverStatus,omitempty"`
}

func (s *gameServerStruct) Game() []VideoGame {
	return s.Game_
}
func (s *gameServerStruct) PlayersOnline() []Integer {
	return s.PlayersOnline_
}
func (s *gameServerStruct) ServerStatus() []GameServerStatus {
	return s.ServerStatus_
}

type GameServerSlice []GameServer

func (s *GameServerSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GameServerSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GameServer)
	}
	return nil
}

var _ GameServer = &gameServerStruct{}

// Status of a game server.
type GameServerStatus interface {
	// Parents
	StatusEnumeration
}
type gameServerStatusStruct struct {
	statusEnumerationStruct
}
type GameServerStatusSlice []GameServerStatus

func (s *GameServerStatusSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GameServerStatusSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GameServerStatus)
	}
	return nil
}

var _ GameServerStatus = &gameServerStatusStruct{}

// A garden store.
type GardenStore interface {
	// Parents
	Store
}
type gardenStoreStruct struct {
	storeStruct
}
type GardenStoreSlice []GardenStore

func (s *GardenStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GardenStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GardenStore)
	}
	return nil
}

var _ GardenStore = &gardenStoreStruct{}

// A gas station.
type GasStation interface {
	// Parents
	AutomotiveBusiness
}
type gasStationStruct struct {
	automotiveBusinessStruct
}
type GasStationSlice []GasStation

func (s *GasStationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GasStationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GasStation)
	}
	return nil
}

var _ GasStation = &gasStationStruct{}

// Residence type: Gated community.
type GatedResidenceCommunity interface {
	// Parents
	Residence
}
type gatedResidenceCommunityStruct struct {
	residenceStruct
}
type GatedResidenceCommunitySlice []GatedResidenceCommunity

func (s *GatedResidenceCommunitySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GatedResidenceCommunitySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GatedResidenceCommunity)
	}
	return nil
}

var _ GatedResidenceCommunity = &gatedResidenceCommunityStruct{}

// An enumeration of genders.
type GenderType interface {
	// Parents
	Enumeration
	// Unions
	GenderType_Text_Union
}
type genderTypeStruct struct {
	enumerationStruct
}

func (s *genderTypeStruct) implementsGenderType_Text_Union() {}

type GenderTypeSlice []GenderType

func (s *GenderTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GenderTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GenderType)
	}
	return nil
}

var _ GenderType = &genderTypeStruct{}

// A discrete unit of inheritance which affects one or more biological traits (Source: [https://en.wikipedia.org/wiki/Gene](https://en.wikipedia.org/wiki/Gene)). Examples include FOXP2 (Forkhead box protein P2), SCARNA21 (small Cajal body-specific RNA 21), A- (agouti genotype).
type Gene interface {
	// Parents
	BioChemEntity
	// Accessors
	AlternativeOf() []Gene                                                               // Another gene which is a variation of this one.
	EncodesBioChemEntity() []BioChemEntity                                               // Another BioChemEntity encoded by this one.
	ExpressedIn() []AnatomicalStructure_AnatomicalSystem_BioChemEntity_DefinedTerm_Union // Tissue, organ, biological sample, etc in which activity of this gene has been observed experimentally. For example brain, digestive system.
	HasBioPolymerSequence() []Text                                                       // A symbolic representation of a BioChemEnity. For example, a nucleotide sequence of a Gene or an amino acid sequence of a Protein.
}
type geneStruct struct {
	bioChemEntityStruct

	AlternativeOf_         GeneSlice                                                                 `json:"alternativeOf,omitempty"`
	EncodesBioChemEntity_  BioChemEntitySlice                                                        `json:"encodesBioChemEntity,omitempty"`
	ExpressedIn_           AnatomicalStructure_AnatomicalSystem_BioChemEntity_DefinedTerm_UnionSlice `json:"expressedIn,omitempty"`
	HasBioPolymerSequence_ TextSlice                                                                 `json:"hasBioPolymerSequence,omitempty"`
}

func (s *geneStruct) AlternativeOf() []Gene {
	return s.AlternativeOf_
}
func (s *geneStruct) EncodesBioChemEntity() []BioChemEntity {
	return s.EncodesBioChemEntity_
}
func (s *geneStruct) ExpressedIn() []AnatomicalStructure_AnatomicalSystem_BioChemEntity_DefinedTerm_Union {
	return s.ExpressedIn_
}
func (s *geneStruct) HasBioPolymerSequence() []Text {
	return s.HasBioPolymerSequence_
}

type GeneSlice []Gene

func (s *GeneSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GeneSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Gene)
	}
	return nil
}

var _ Gene = &geneStruct{}

// A general contractor.
type GeneralContractor interface {
	// Parents
	HomeAndConstructionBusiness
}
type generalContractorStruct struct {
	homeAndConstructionBusinessStruct
}
type GeneralContractorSlice []GeneralContractor

func (s *GeneralContractorSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GeneralContractorSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GeneralContractor)
	}
	return nil
}

var _ GeneralContractor = &generalContractorStruct{}

/*
A GeoCircle is a GeoShape representing a circular geographic area. As it is a GeoShape
          it provides the simple textual property 'circle', but also allows the combination of postalCode alongside geoRadius.
          The center of the circle can be indicated via the 'geoMidpoint' property, or more approximately using 'address', 'postalCode'.

*/
type GeoCircle interface {
	// Parents
	GeoShape
	// Accessors
	GeoMidpoint() []GeoCoordinates           // Indicates the GeoCoordinates at the centre of a GeoShape e.g. GeoCircle.
	GeoRadius() []Distance_Number_Text_Union // Indicates the approximate radius of a GeoCircle (metres unless indicated otherwise via Distance notation).
}
type geoCircleStruct struct {
	geoShapeStruct

	GeoMidpoint_ GeoCoordinatesSlice             `json:"geoMidpoint,omitempty"`
	GeoRadius_   Distance_Number_Text_UnionSlice `json:"geoRadius,omitempty"`
}

func (s *geoCircleStruct) GeoMidpoint() []GeoCoordinates {
	return s.GeoMidpoint_
}
func (s *geoCircleStruct) GeoRadius() []Distance_Number_Text_Union {
	return s.GeoRadius_
}

type GeoCircleSlice []GeoCircle

func (s *GeoCircleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GeoCircleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GeoCircle)
	}
	return nil
}

var _ GeoCircle = &geoCircleStruct{}

// The geographic coordinates of a place or event.
type GeoCoordinates interface {
	// Parents
	StructuredValue
	// Unions
	GeoCoordinates_GeoShape_Union
	// Accessors
	Address() []PostalAddress_Text_Union  // Physical address of the item.
	AddressCountry() []Country_Text_Union // The country. For example, USA. You can also provide the two-letter [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1).
	Elevation() []Number_Text_Union       // The elevation of a location ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)). Values may be of the form 'NUMBER UNIT_OF_MEASUREMENT' (e.g., '1,000 m', '3,200 ft') while numbers alone should be assumed to be a value in meters.
	Latitude() []Number_Text_Union        // The latitude of a location. For example ```37.42242``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
	Longitude() []Number_Text_Union       // The longitude of a location. For example ```-122.08585``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
	PostalCode() []Text                   // The postal code. For example, 94043.
}
type geoCoordinatesStruct struct {
	structuredValueStruct

	Address_        PostalAddress_Text_UnionSlice `json:"address,omitempty"`
	AddressCountry_ Country_Text_UnionSlice       `json:"addressCountry,omitempty"`
	Elevation_      Number_Text_UnionSlice        `json:"elevation,omitempty"`
	Latitude_       Number_Text_UnionSlice        `json:"latitude,omitempty"`
	Longitude_      Number_Text_UnionSlice        `json:"longitude,omitempty"`
	PostalCode_     TextSlice                     `json:"postalCode,omitempty"`
}

func (s *geoCoordinatesStruct) implementsGeoCoordinates_GeoShape_Union() {}

func (s *geoCoordinatesStruct) Address() []PostalAddress_Text_Union {
	return s.Address_
}
func (s *geoCoordinatesStruct) AddressCountry() []Country_Text_Union {
	return s.AddressCountry_
}
func (s *geoCoordinatesStruct) Elevation() []Number_Text_Union {
	return s.Elevation_
}
func (s *geoCoordinatesStruct) Latitude() []Number_Text_Union {
	return s.Latitude_
}
func (s *geoCoordinatesStruct) Longitude() []Number_Text_Union {
	return s.Longitude_
}
func (s *geoCoordinatesStruct) PostalCode() []Text {
	return s.PostalCode_
}

type GeoCoordinatesSlice []GeoCoordinates

func (s *GeoCoordinatesSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GeoCoordinatesSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GeoCoordinates)
	}
	return nil
}

var _ GeoCoordinates = &geoCoordinatesStruct{}

// The geographic shape of a place. A GeoShape can be described using several properties whose values are based on latitude/longitude pairs. Either whitespace or commas can be used to separate latitude and longitude; whitespace should be used when writing a list of several such points.
type GeoShape interface {
	// Parents
	StructuredValue
	// Unions
	AdministrativeArea_GeoShape_Place_Text_Union
	AdministrativeArea_GeoShape_Place_Union
	GeoCoordinates_GeoShape_Union
	GeoShape_Place_Text_Union
	// Accessors
	Address() []PostalAddress_Text_Union  // Physical address of the item.
	AddressCountry() []Country_Text_Union // The country. For example, USA. You can also provide the two-letter [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1).
	Box() []Text                          // A box is the area enclosed by the rectangle formed by two points. The first point is the lower corner, the second point is the upper corner. A box is expressed as two points separated by a space character.
	Circle() []Text                       // A circle is the circular region of a specified radius centered at a specified latitude and longitude. A circle is expressed as a pair followed by a radius in meters.
	Elevation() []Number_Text_Union       // The elevation of a location ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)). Values may be of the form 'NUMBER UNIT_OF_MEASUREMENT' (e.g., '1,000 m', '3,200 ft') while numbers alone should be assumed to be a value in meters.
	Line() []Text                         // A line is a point-to-point path consisting of two or more points. A line is expressed as a series of two or more point objects separated by space.
	Polygon() []Text                      // A polygon is the area enclosed by a point-to-point path for which the starting and ending points are the same. A polygon is expressed as a series of four or more space delimited points where the first and final points are identical.
	PostalCode() []Text                   // The postal code. For example, 94043.
}
type geoShapeStruct struct {
	structuredValueStruct

	Address_        PostalAddress_Text_UnionSlice `json:"address,omitempty"`
	AddressCountry_ Country_Text_UnionSlice       `json:"addressCountry,omitempty"`
	Box_            TextSlice                     `json:"box,omitempty"`
	Circle_         TextSlice                     `json:"circle,omitempty"`
	Elevation_      Number_Text_UnionSlice        `json:"elevation,omitempty"`
	Line_           TextSlice                     `json:"line,omitempty"`
	Polygon_        TextSlice                     `json:"polygon,omitempty"`
	PostalCode_     TextSlice                     `json:"postalCode,omitempty"`
}

func (s *geoShapeStruct) implementsAdministrativeArea_GeoShape_Place_Text_Union() {}
func (s *geoShapeStruct) implementsAdministrativeArea_GeoShape_Place_Union()      {}
func (s *geoShapeStruct) implementsGeoCoordinates_GeoShape_Union()                {}
func (s *geoShapeStruct) implementsGeoShape_Place_Text_Union()                    {}

func (s *geoShapeStruct) Address() []PostalAddress_Text_Union {
	return s.Address_
}
func (s *geoShapeStruct) AddressCountry() []Country_Text_Union {
	return s.AddressCountry_
}
func (s *geoShapeStruct) Box() []Text {
	return s.Box_
}
func (s *geoShapeStruct) Circle() []Text {
	return s.Circle_
}
func (s *geoShapeStruct) Elevation() []Number_Text_Union {
	return s.Elevation_
}
func (s *geoShapeStruct) Line() []Text {
	return s.Line_
}
func (s *geoShapeStruct) Polygon() []Text {
	return s.Polygon_
}
func (s *geoShapeStruct) PostalCode() []Text {
	return s.PostalCode_
}

type GeoShapeSlice []GeoShape

func (s *GeoShapeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GeoShapeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GeoShape)
	}
	return nil
}

var _ GeoShape = &geoShapeStruct{}

// (Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions from Geo-Spatial best practices.
type GeospatialGeometry interface {
	// Parents
	Intangible
	// Unions
	GeospatialGeometry_Place_Union
	// Accessors
	GeoContains() []GeospatialGeometry_Place_Union   // Represents a relationship between two geometries (or the places they represent), relating a containing geometry to a contained geometry. "a contains b iff no points of b lie in the exterior of a, and at least one point of the interior of b lies in the interior of a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoCoveredBy() []GeospatialGeometry_Place_Union  // Represents a relationship between two geometries (or the places they represent), relating a geometry to another that covers it. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoCovers() []GeospatialGeometry_Place_Union     // Represents a relationship between two geometries (or the places they represent), relating a covering geometry to a covered geometry. "Every point of b is a point of (the interior or boundary of) a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoCrosses() []GeospatialGeometry_Place_Union    // Represents a relationship between two geometries (or the places they represent), relating a geometry to another that crosses it: "a crosses b: they have some but not all interior points in common, and the dimension of the intersection is less than that of at least one of them". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoDisjoint() []GeospatialGeometry_Place_Union   // Represents spatial relations in which two geometries (or the places they represent) are topologically disjoint: they have no point in common. They form a set of disconnected geometries." (a symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM))
	GeoEquals() []GeospatialGeometry_Place_Union     // Represents spatial relations in which two geometries (or the places they represent) are topologically equal, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM). "Two geometries are topologically equal if their interiors intersect and no part of the interior or boundary of one geometry intersects the exterior of the other" (a symmetric relationship)
	GeoIntersects() []GeospatialGeometry_Place_Union // Represents spatial relations in which two geometries (or the places they represent) have at least one point in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoOverlaps() []GeospatialGeometry_Place_Union   // Represents a relationship between two geometries (or the places they represent), relating a geometry to another that geospatially overlaps it, i.e. they have some but not all points in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoTouches() []GeospatialGeometry_Place_Union    // Represents spatial relations in which two geometries (or the places they represent) touch: they have at least one boundary point in common, but no interior points." (a symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM) )
	GeoWithin() []GeospatialGeometry_Place_Union     // Represents a relationship between two geometries (or the places they represent), relating a geometry to one that contains it, i.e. it is inside (i.e. within) its interior. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
}
type geospatialGeometryStruct struct {
	intangibleStruct

	GeoContains_   GeospatialGeometry_Place_UnionSlice `json:"geoContains,omitempty"`
	GeoCoveredBy_  GeospatialGeometry_Place_UnionSlice `json:"geoCoveredBy,omitempty"`
	GeoCovers_     GeospatialGeometry_Place_UnionSlice `json:"geoCovers,omitempty"`
	GeoCrosses_    GeospatialGeometry_Place_UnionSlice `json:"geoCrosses,omitempty"`
	GeoDisjoint_   GeospatialGeometry_Place_UnionSlice `json:"geoDisjoint,omitempty"`
	GeoEquals_     GeospatialGeometry_Place_UnionSlice `json:"geoEquals,omitempty"`
	GeoIntersects_ GeospatialGeometry_Place_UnionSlice `json:"geoIntersects,omitempty"`
	GeoOverlaps_   GeospatialGeometry_Place_UnionSlice `json:"geoOverlaps,omitempty"`
	GeoTouches_    GeospatialGeometry_Place_UnionSlice `json:"geoTouches,omitempty"`
	GeoWithin_     GeospatialGeometry_Place_UnionSlice `json:"geoWithin,omitempty"`
}

func (s *geospatialGeometryStruct) implementsGeospatialGeometry_Place_Union() {}

func (s *geospatialGeometryStruct) GeoContains() []GeospatialGeometry_Place_Union {
	return s.GeoContains_
}
func (s *geospatialGeometryStruct) GeoCoveredBy() []GeospatialGeometry_Place_Union {
	return s.GeoCoveredBy_
}
func (s *geospatialGeometryStruct) GeoCovers() []GeospatialGeometry_Place_Union {
	return s.GeoCovers_
}
func (s *geospatialGeometryStruct) GeoCrosses() []GeospatialGeometry_Place_Union {
	return s.GeoCrosses_
}
func (s *geospatialGeometryStruct) GeoDisjoint() []GeospatialGeometry_Place_Union {
	return s.GeoDisjoint_
}
func (s *geospatialGeometryStruct) GeoEquals() []GeospatialGeometry_Place_Union {
	return s.GeoEquals_
}
func (s *geospatialGeometryStruct) GeoIntersects() []GeospatialGeometry_Place_Union {
	return s.GeoIntersects_
}
func (s *geospatialGeometryStruct) GeoOverlaps() []GeospatialGeometry_Place_Union {
	return s.GeoOverlaps_
}
func (s *geospatialGeometryStruct) GeoTouches() []GeospatialGeometry_Place_Union {
	return s.GeoTouches_
}
func (s *geospatialGeometryStruct) GeoWithin() []GeospatialGeometry_Place_Union {
	return s.GeoWithin_
}

type GeospatialGeometrySlice []GeospatialGeometry

func (s *GeospatialGeometrySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GeospatialGeometrySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GeospatialGeometry)
	}
	return nil
}

var _ GeospatialGeometry = &geospatialGeometryStruct{}

// The act of transferring ownership of an object to a destination. Reciprocal of TakeAction.\n\nRelated actions:\n\n* [[TakeAction]]: Reciprocal of GiveAction.\n* [[SendAction]]: Unlike SendAction, GiveAction implies that ownership is being transferred (e.g. I may send my laptop to you, but that doesn't mean I'm giving it to you).
type GiveAction interface {
	// Parents
	TransferAction
	// Accessors
	Recipient() []Audience_ContactPoint_Organization_Person_Union // A sub property of participant. The participant who is at the receiving end of the action.
}
type giveActionStruct struct {
	transferActionStruct

	Recipient_ Audience_ContactPoint_Organization_Person_UnionSlice `json:"recipient,omitempty"`
}

func (s *giveActionStruct) Recipient() []Audience_ContactPoint_Organization_Person_Union {
	return s.Recipient_
}

type GiveActionSlice []GiveAction

func (s *GiveActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GiveActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GiveAction)
	}
	return nil
}

var _ GiveAction = &giveActionStruct{}

// A golf course.
type GolfCourse interface {
	// Parents
	SportsActivityLocation
}
type golfCourseStruct struct {
	sportsActivityLocationStruct
}
type GolfCourseSlice []GolfCourse

func (s *GolfCourseSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GolfCourseSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GolfCourse)
	}
	return nil
}

var _ GolfCourse = &golfCourseStruct{}

// GovernmentBenefitsType enumerates several kinds of government benefits to support the COVID-19 situation. Note that this structure may not capture all benefits offered.
type GovernmentBenefitsType interface {
	// Parents
	Enumeration
	// Unions
	GovernmentBenefitsType_Text_Union
}
type governmentBenefitsTypeStruct struct {
	enumerationStruct
}

func (s *governmentBenefitsTypeStruct) implementsGovernmentBenefitsType_Text_Union() {}

type GovernmentBenefitsTypeSlice []GovernmentBenefitsType

func (s *GovernmentBenefitsTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GovernmentBenefitsTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GovernmentBenefitsType)
	}
	return nil
}

var _ GovernmentBenefitsType = &governmentBenefitsTypeStruct{}

// A government building.
type GovernmentBuilding interface {
	// Parents
	CivicStructure
}
type governmentBuildingStruct struct {
	civicStructureStruct
}
type GovernmentBuildingSlice []GovernmentBuilding

func (s *GovernmentBuildingSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GovernmentBuildingSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GovernmentBuilding)
	}
	return nil
}

var _ GovernmentBuilding = &governmentBuildingStruct{}

// A government office&#x2014;for example, an IRS or DMV office.
type GovernmentOffice interface {
	// Parents
	LocalBusiness
}
type governmentOfficeStruct struct {
	localBusinessStruct
}
type GovernmentOfficeSlice []GovernmentOffice

func (s *GovernmentOfficeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GovernmentOfficeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GovernmentOffice)
	}
	return nil
}

var _ GovernmentOffice = &governmentOfficeStruct{}

// A governmental organization or agency.
type GovernmentOrganization interface {
	// Parents
	Organization
}
type governmentOrganizationStruct struct {
	organizationStruct
}
type GovernmentOrganizationSlice []GovernmentOrganization

func (s *GovernmentOrganizationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GovernmentOrganizationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GovernmentOrganization)
	}
	return nil
}

var _ GovernmentOrganization = &governmentOrganizationStruct{}

// A permit issued by a government agency.
type GovernmentPermit interface {
	// Parents
	Permit
}
type governmentPermitStruct struct {
	permitStruct
}
type GovernmentPermitSlice []GovernmentPermit

func (s *GovernmentPermitSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GovernmentPermitSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GovernmentPermit)
	}
	return nil
}

var _ GovernmentPermit = &governmentPermitStruct{}

// A service provided by a government organization, e.g. food stamps, veterans benefits, etc.
type GovernmentService interface {
	// Parents
	Service
	// Accessors
	Jurisdiction() []AdministrativeArea_Text_Union // Indicates a legal jurisdiction, e.g. of some legislation, or where some government service is based.
	ServiceOperator() []Organization               // The operating organization, if different from the provider.  This enables the representation of services that are provided by an organization, but operated by another organization like a subcontractor.
}
type governmentServiceStruct struct {
	serviceStruct

	Jurisdiction_    AdministrativeArea_Text_UnionSlice `json:"jurisdiction,omitempty"`
	ServiceOperator_ OrganizationSlice                  `json:"serviceOperator,omitempty"`
}

func (s *governmentServiceStruct) Jurisdiction() []AdministrativeArea_Text_Union {
	return s.Jurisdiction_
}
func (s *governmentServiceStruct) ServiceOperator() []Organization {
	return s.ServiceOperator_
}

type GovernmentServiceSlice []GovernmentService

func (s *GovernmentServiceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GovernmentServiceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GovernmentService)
	}
	return nil
}

var _ GovernmentService = &governmentServiceStruct{}

/*
A grant, typically financial or otherwise quantifiable, of resources. Typically a [[funder]] sponsors some [[MonetaryAmount]] to an [[Organization]] or [[Person]],
    sometimes not necessarily via a dedicated or long-lived [[Project]], resulting in one or more outputs, or [[fundedItem]]s. For financial sponsorship, indicate the [[funder]] of a [[MonetaryGrant]]. For non-financial support, indicate [[sponsor]] of [[Grant]]s of resources (e.g. office space).

Grants support  activities directed towards some agreed collective goals, often but not always organized as [[Project]]s. Long-lived projects are sometimes sponsored by a variety of grants over time, but it is also common for a project to be associated with a single grant.

The amount of a [[Grant]] is represented using [[amount]] as a [[MonetaryAmount]].

*/
type Grant interface {
	// Parents
	Intangible
	// Accessors
	FundedItem() []BioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union // Indicates something directly or indirectly funded or sponsored through a [[Grant]]. See also [[ownershipFundingInfo]].
	Funder() []Organization_Person_Union                                                            // A person or organization that supports (sponsors) something through some kind of financial contribution.
	Sponsor() []Organization_Person_Union                                                           // A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
}
type grantStruct struct {
	intangibleStruct

	FundedItem_ BioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_UnionSlice `json:"fundedItem,omitempty"`
	Funder_     Organization_Person_UnionSlice                                                        `json:"funder,omitempty"`
	Sponsor_    Organization_Person_UnionSlice                                                        `json:"sponsor,omitempty"`
}

func (s *grantStruct) FundedItem() []BioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union {
	return s.FundedItem_
}
func (s *grantStruct) Funder() []Organization_Person_Union {
	return s.Funder_
}
func (s *grantStruct) Sponsor() []Organization_Person_Union {
	return s.Sponsor_
}

type GrantSlice []Grant

func (s *GrantSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GrantSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Grant)
	}
	return nil
}

var _ Grant = &grantStruct{}

// A grocery store.
type GroceryStore interface {
	// Parents
	Store
}
type groceryStoreStruct struct {
	storeStruct
}
type GroceryStoreSlice []GroceryStore

func (s *GroceryStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GroceryStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(GroceryStore)
	}
	return nil
}

var _ GroceryStore = &groceryStoreStruct{}

// [[Guide]] is a page or article that recommend specific products or services, or aspects of a thing for a user to consider. A [[Guide]] may represent a Buying Guide and detail aspects of products or services for a user to consider. A [[Guide]] may represent a Product Guide and recommend specific products or services. A [[Guide]] may represent a Ranked List and recommend specific products or services with ranking.
type Guide interface {
	// Parents
	CreativeWork
	// Accessors
	ReviewAspect() []Text // This Review or Rating is relevant to this part or facet of the itemReviewed.
}
type guideStruct struct {
	creativeWorkStruct

	ReviewAspect_ TextSlice `json:"reviewAspect,omitempty"`
}

func (s *guideStruct) ReviewAspect() []Text {
	return s.ReviewAspect_
}

type GuideSlice []Guide

func (s *GuideSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(GuideSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Guide)
	}
	return nil
}

var _ Guide = &guideStruct{}

// A business that provide Heating, Ventilation and Air Conditioning services.
type HVACBusiness interface {
	// Parents
	HomeAndConstructionBusiness
}
type hVACBusinessStruct struct {
	homeAndConstructionBusinessStruct
}
type HVACBusinessSlice []HVACBusiness

func (s *HVACBusinessSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HVACBusinessSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HVACBusiness)
	}
	return nil
}

var _ HVACBusiness = &hVACBusinessStruct{}

// A [hackathon](https://en.wikipedia.org/wiki/Hackathon) event.
type Hackathon interface {
	// Parents
	Event
}
type hackathonStruct struct {
	eventStruct
}
type HackathonSlice []Hackathon

func (s *HackathonSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HackathonSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Hackathon)
	}
	return nil
}

var _ Hackathon = &hackathonStruct{}

// A hair salon.
type HairSalon interface {
	// Parents
	HealthAndBeautyBusiness
}
type hairSalonStruct struct {
	healthAndBeautyBusinessStruct
}
type HairSalonSlice []HairSalon

func (s *HairSalonSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HairSalonSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HairSalon)
	}
	return nil
}

var _ HairSalon = &hairSalonStruct{}

// A hardware store.
type HardwareStore interface {
	// Parents
	Store
}
type hardwareStoreStruct struct {
	storeStruct
}
type HardwareStoreSlice []HardwareStore

func (s *HardwareStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HardwareStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HardwareStore)
	}
	return nil
}

var _ HardwareStore = &hardwareStoreStruct{}

// Health and beauty.
type HealthAndBeautyBusiness interface {
	// Parents
	LocalBusiness
}
type healthAndBeautyBusinessStruct struct {
	localBusinessStruct
}
type HealthAndBeautyBusinessSlice []HealthAndBeautyBusiness

func (s *HealthAndBeautyBusinessSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HealthAndBeautyBusinessSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HealthAndBeautyBusiness)
	}
	return nil
}

var _ HealthAndBeautyBusiness = &healthAndBeautyBusinessStruct{}

// HealthAspectEnumeration enumerates several aspects of health content online, each of which might be described using [[hasHealthAspect]] and [[HealthTopicContent]].
type HealthAspectEnumeration interface {
	// Parents
	Enumeration
}
type healthAspectEnumerationStruct struct {
	enumerationStruct
}
type HealthAspectEnumerationSlice []HealthAspectEnumeration

func (s *HealthAspectEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HealthAspectEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HealthAspectEnumeration)
	}
	return nil
}

var _ HealthAspectEnumeration = &healthAspectEnumerationStruct{}

// A health club.
type HealthClub interface {
	// Parents
	HealthAndBeautyBusiness
	SportsActivityLocation
}
type healthClubStruct struct {
	healthAndBeautyBusinessStruct
	sportsActivityLocationStruct__
}

func (s *healthClubStruct) implementsAdministrativeArea_GeoShape_Place_Text_Union()    {} // re
func (s *healthClubStruct) implementsAdministrativeArea_GeoShape_Place_Union()         {} // re
func (s *healthClubStruct) implementsAudience_ContactPoint_Organization_Person_Union() {} // re
func (s *healthClubStruct) implementsAudience_Organization_Person_Union()              {} // re
func (s *healthClubStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}                                                                                                 // re
func (s *healthClubStruct) implementsBrand_Organization_Union()                                   {} // re
func (s *healthClubStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *healthClubStruct) implementsCivicStructure_LocalBusiness_Union()                         {} // re
func (s *healthClubStruct) implementsContactPoint_Organization_Person_Union()                     {} // re
func (s *healthClubStruct) implementsContactPoint_Place_Union()                                   {} // re
func (s *healthClubStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *healthClubStruct) implementsEducationalOrganization_Organization_Union()                 {} // re
func (s *healthClubStruct) implementsFoodEstablishment_Place_Union()                              {} // re
func (s *healthClubStruct) implementsGeoShape_Place_Text_Union()                                  {} // re
func (s *healthClubStruct) implementsGeospatialGeometry_Place_Union()                             {} // re
func (s *healthClubStruct) implementsItemList_Place_Union()                                       {} // re
func (s *healthClubStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *healthClubStruct) implementsOrganization_Person_Union()                                  {} // re
func (s *healthClubStruct) implementsOrganization_ProgramMembership_Union()                       {} // re
func (s *healthClubStruct) implementsPlace_PostalAddress_Text_Union()                             {} // re
func (s *healthClubStruct) implementsPlace_PostalAddress_Text_VirtualLocation_Union()             {} // re
func (s *healthClubStruct) implementsPlace_PostalAddress_URL_Union()                              {} // re
func (s *healthClubStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *healthClubStruct) implementsText_Thing_Union()                                           {} // re
type HealthClubSlice []HealthClub

func (s *HealthClubSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HealthClubSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HealthClub)
	}
	return nil
}

var _ HealthClub = &healthClubStruct{}

// A US-style health insurance plan, including PPOs, EPOs, and HMOs.
type HealthInsurancePlan interface {
	// Parents
	Intangible
	// Accessors
	BenefitsSummaryUrl() []URL                          // The URL that goes directly to the summary of benefits and coverage for the specific standard plan or plan variation.
	ContactPoint() []ContactPoint                       // A contact point for a person or organization.
	HealthPlanDrugOption() []Text                       // TODO.
	HealthPlanDrugTier() []Text                         // The tier(s) of drugs offered by this formulary or insurance plan.
	HealthPlanId() []Text                               // The 14-character, HIOS-generated Plan ID number. (Plan IDs must be unique, even across different markets.)
	HealthPlanMarketingUrl() []URL                      // The URL that goes directly to the plan brochure for the specific standard plan or plan variation.
	IncludesHealthPlanFormulary() []HealthPlanFormulary // Formularies covered by this plan.
	IncludesHealthPlanNetwork() []HealthPlanNetwork     // Networks covered by this plan.
	UsesHealthPlanIdStandard() []Text_URL_Union         // The standard for interpreting thePlan ID. The preferred is "HIOS". See the Centers for Medicare & Medicaid Services for more details.
}
type healthInsurancePlanStruct struct {
	intangibleStruct

	BenefitsSummaryUrl_          URLSlice                 `json:"benefitsSummaryUrl,omitempty"`
	ContactPoint_                ContactPointSlice        `json:"contactPoint,omitempty"`
	HealthPlanDrugOption_        TextSlice                `json:"healthPlanDrugOption,omitempty"`
	HealthPlanDrugTier_          TextSlice                `json:"healthPlanDrugTier,omitempty"`
	HealthPlanId_                TextSlice                `json:"healthPlanId,omitempty"`
	HealthPlanMarketingUrl_      URLSlice                 `json:"healthPlanMarketingUrl,omitempty"`
	IncludesHealthPlanFormulary_ HealthPlanFormularySlice `json:"includesHealthPlanFormulary,omitempty"`
	IncludesHealthPlanNetwork_   HealthPlanNetworkSlice   `json:"includesHealthPlanNetwork,omitempty"`
	UsesHealthPlanIdStandard_    Text_URL_UnionSlice      `json:"usesHealthPlanIdStandard,omitempty"`
}

func (s *healthInsurancePlanStruct) BenefitsSummaryUrl() []URL {
	return s.BenefitsSummaryUrl_
}
func (s *healthInsurancePlanStruct) ContactPoint() []ContactPoint {
	return s.ContactPoint_
}
func (s *healthInsurancePlanStruct) HealthPlanDrugOption() []Text {
	return s.HealthPlanDrugOption_
}
func (s *healthInsurancePlanStruct) HealthPlanDrugTier() []Text {
	return s.HealthPlanDrugTier_
}
func (s *healthInsurancePlanStruct) HealthPlanId() []Text {
	return s.HealthPlanId_
}
func (s *healthInsurancePlanStruct) HealthPlanMarketingUrl() []URL {
	return s.HealthPlanMarketingUrl_
}
func (s *healthInsurancePlanStruct) IncludesHealthPlanFormulary() []HealthPlanFormulary {
	return s.IncludesHealthPlanFormulary_
}
func (s *healthInsurancePlanStruct) IncludesHealthPlanNetwork() []HealthPlanNetwork {
	return s.IncludesHealthPlanNetwork_
}
func (s *healthInsurancePlanStruct) UsesHealthPlanIdStandard() []Text_URL_Union {
	return s.UsesHealthPlanIdStandard_
}

type HealthInsurancePlanSlice []HealthInsurancePlan

func (s *HealthInsurancePlanSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HealthInsurancePlanSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HealthInsurancePlan)
	}
	return nil
}

var _ HealthInsurancePlan = &healthInsurancePlanStruct{}

// A description of costs to the patient under a given network or formulary.
type HealthPlanCostSharingSpecification interface {
	// Parents
	Intangible
	// Accessors
	HealthPlanCoinsuranceOption() []Text   // Whether the coinsurance applies before or after deductible, etc. TODO: Is this a closed set?
	HealthPlanCoinsuranceRate() []Number   // Whether The rate of coinsurance expressed as a number between 0.0 and 1.0.
	HealthPlanCopay() []PriceSpecification // Whether The copay amount.
	HealthPlanCopayOption() []Text         // Whether the copay is before or after deductible, etc. TODO: Is this a closed set?
	HealthPlanPharmacyCategory() []Text    // The category or type of pharmacy associated with this cost sharing.
}
type healthPlanCostSharingSpecificationStruct struct {
	intangibleStruct

	HealthPlanCoinsuranceOption_ TextSlice               `json:"healthPlanCoinsuranceOption,omitempty"`
	HealthPlanCoinsuranceRate_   NumberSlice             `json:"healthPlanCoinsuranceRate,omitempty"`
	HealthPlanCopay_             PriceSpecificationSlice `json:"healthPlanCopay,omitempty"`
	HealthPlanCopayOption_       TextSlice               `json:"healthPlanCopayOption,omitempty"`
	HealthPlanPharmacyCategory_  TextSlice               `json:"healthPlanPharmacyCategory,omitempty"`
}

func (s *healthPlanCostSharingSpecificationStruct) HealthPlanCoinsuranceOption() []Text {
	return s.HealthPlanCoinsuranceOption_
}
func (s *healthPlanCostSharingSpecificationStruct) HealthPlanCoinsuranceRate() []Number {
	return s.HealthPlanCoinsuranceRate_
}
func (s *healthPlanCostSharingSpecificationStruct) HealthPlanCopay() []PriceSpecification {
	return s.HealthPlanCopay_
}
func (s *healthPlanCostSharingSpecificationStruct) HealthPlanCopayOption() []Text {
	return s.HealthPlanCopayOption_
}
func (s *healthPlanCostSharingSpecificationStruct) HealthPlanPharmacyCategory() []Text {
	return s.HealthPlanPharmacyCategory_
}

type HealthPlanCostSharingSpecificationSlice []HealthPlanCostSharingSpecification

func (s *HealthPlanCostSharingSpecificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HealthPlanCostSharingSpecificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HealthPlanCostSharingSpecification)
	}
	return nil
}

var _ HealthPlanCostSharingSpecification = &healthPlanCostSharingSpecificationStruct{}

// For a given health insurance plan, the specification for costs and coverage of prescription drugs.
type HealthPlanFormulary interface {
	// Parents
	Intangible
	// Accessors
	HealthPlanCostSharing() []Boolean    // Whether The costs to the patient for services under this network or formulary.
	HealthPlanDrugTier() []Text          // The tier(s) of drugs offered by this formulary or insurance plan.
	OffersPrescriptionByMail() []Boolean // Whether prescriptions can be delivered by mail.
}
type healthPlanFormularyStruct struct {
	intangibleStruct

	HealthPlanCostSharing_    BooleanSlice `json:"healthPlanCostSharing,omitempty"`
	HealthPlanDrugTier_       TextSlice    `json:"healthPlanDrugTier,omitempty"`
	OffersPrescriptionByMail_ BooleanSlice `json:"offersPrescriptionByMail,omitempty"`
}

func (s *healthPlanFormularyStruct) HealthPlanCostSharing() []Boolean {
	return s.HealthPlanCostSharing_
}
func (s *healthPlanFormularyStruct) HealthPlanDrugTier() []Text {
	return s.HealthPlanDrugTier_
}
func (s *healthPlanFormularyStruct) OffersPrescriptionByMail() []Boolean {
	return s.OffersPrescriptionByMail_
}

type HealthPlanFormularySlice []HealthPlanFormulary

func (s *HealthPlanFormularySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HealthPlanFormularySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HealthPlanFormulary)
	}
	return nil
}

var _ HealthPlanFormulary = &healthPlanFormularyStruct{}

// A US-style health insurance plan network.
type HealthPlanNetwork interface {
	// Parents
	Intangible
	// Accessors
	HealthPlanCostSharing() []Boolean // Whether The costs to the patient for services under this network or formulary.
	HealthPlanNetworkId() []Text      // Name or unique ID of network. (Networks are often reused across different insurance plans).
	HealthPlanNetworkTier() []Text    // The tier(s) for this network.
}
type healthPlanNetworkStruct struct {
	intangibleStruct

	HealthPlanCostSharing_ BooleanSlice `json:"healthPlanCostSharing,omitempty"`
	HealthPlanNetworkId_   TextSlice    `json:"healthPlanNetworkId,omitempty"`
	HealthPlanNetworkTier_ TextSlice    `json:"healthPlanNetworkTier,omitempty"`
}

func (s *healthPlanNetworkStruct) HealthPlanCostSharing() []Boolean {
	return s.HealthPlanCostSharing_
}
func (s *healthPlanNetworkStruct) HealthPlanNetworkId() []Text {
	return s.HealthPlanNetworkId_
}
func (s *healthPlanNetworkStruct) HealthPlanNetworkTier() []Text {
	return s.HealthPlanNetworkTier_
}

type HealthPlanNetworkSlice []HealthPlanNetwork

func (s *HealthPlanNetworkSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HealthPlanNetworkSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HealthPlanNetwork)
	}
	return nil
}

var _ HealthPlanNetwork = &healthPlanNetworkStruct{}

/*
[[HealthTopicContent]] is [[WebContent]] that is about some aspect of a health topic, e.g. a condition, its symptoms or treatments. Such content may be comprised of several parts or sections and use different types of media. Multiple instances of [[WebContent]] (and hence [[HealthTopicContent]]) can be related using [[hasPart]] / [[isPartOf]] where there is some kind of content hierarchy, and their content described with [[about]] and [[mentions]] e.g. building upon the existing [[MedicalCondition]] vocabulary.

*/
type HealthTopicContent interface {
	// Parents
	WebContent
	// Accessors
	HasHealthAspect() []HealthAspectEnumeration // Indicates the aspect or aspects specifically addressed in some [[HealthTopicContent]]. For example, that the content is an overview, or that it talks about treatment, self-care, treatments or their side-effects.
}
type healthTopicContentStruct struct {
	webContentStruct

	HasHealthAspect_ HealthAspectEnumerationSlice `json:"hasHealthAspect,omitempty"`
}

func (s *healthTopicContentStruct) HasHealthAspect() []HealthAspectEnumeration {
	return s.HasHealthAspect_
}

type HealthTopicContentSlice []HealthTopicContent

func (s *HealthTopicContentSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HealthTopicContentSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HealthTopicContent)
	}
	return nil
}

var _ HealthTopicContent = &healthTopicContentStruct{}

// A high school.
type HighSchool interface {
	// Parents
	EducationalOrganization
}
type highSchoolStruct struct {
	educationalOrganizationStruct
}
type HighSchoolSlice []HighSchool

func (s *HighSchoolSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HighSchoolSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HighSchool)
	}
	return nil
}

var _ HighSchool = &highSchoolStruct{}

// A Hindu temple.
type HinduTemple interface {
	// Parents
	PlaceOfWorship
}
type hinduTempleStruct struct {
	placeOfWorshipStruct
}
type HinduTempleSlice []HinduTemple

func (s *HinduTempleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HinduTempleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HinduTemple)
	}
	return nil
}

var _ HinduTemple = &hinduTempleStruct{}

// A store that sells materials useful or necessary for various hobbies.
type HobbyShop interface {
	// Parents
	Store
}
type hobbyShopStruct struct {
	storeStruct
}
type HobbyShopSlice []HobbyShop

func (s *HobbyShopSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HobbyShopSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HobbyShop)
	}
	return nil
}

var _ HobbyShop = &hobbyShopStruct{}

// A construction business.\n\nA HomeAndConstructionBusiness is a [[LocalBusiness]] that provides services around homes and buildings.\n\nAs a [[LocalBusiness]] it can be described as a [[provider]] of one or more [[Service]]\(s).
type HomeAndConstructionBusiness interface {
	// Parents
	LocalBusiness
}
type homeAndConstructionBusinessStruct struct {
	localBusinessStruct
}
type HomeAndConstructionBusinessSlice []HomeAndConstructionBusiness

func (s *HomeAndConstructionBusinessSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HomeAndConstructionBusinessSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HomeAndConstructionBusiness)
	}
	return nil
}

var _ HomeAndConstructionBusiness = &homeAndConstructionBusinessStruct{}

// A home goods store.
type HomeGoodsStore interface {
	// Parents
	Store
}
type homeGoodsStoreStruct struct {
	storeStruct
}
type HomeGoodsStoreSlice []HomeGoodsStore

func (s *HomeGoodsStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HomeGoodsStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HomeGoodsStore)
	}
	return nil
}

var _ HomeGoodsStore = &homeGoodsStoreStruct{}

// A hospital.
type Hospital interface {
	// Parents
	CivicStructure
	EmergencyService
	MedicalOrganization
	// Accessors
	AvailableService() []MedicalProcedure_MedicalTest_MedicalTherapy_Union // A medical service available from this provider.
	HealthcareReportingData() []CDCPMDRecord_Dataset_Union                 // Indicates data describing a hospital, e.g. a CDC [[CDCPMDRecord]] or as some kind of [[Dataset]].
	MedicalSpecialty() []MedicalSpecialty                                  // A medical specialty of the provider.
}
type hospitalStruct struct {
	civicStructureStruct
	emergencyServiceStruct
	medicalOrganizationStruct___

	AvailableService_        MedicalProcedure_MedicalTest_MedicalTherapy_UnionSlice `json:"availableService,omitempty"`
	HealthcareReportingData_ CDCPMDRecord_Dataset_UnionSlice                        `json:"healthcareReportingData,omitempty"`
	MedicalSpecialty_        MedicalSpecialtySlice                                  `json:"medicalSpecialty,omitempty"`
}

func (s *hospitalStruct) implementsAdministrativeArea_GeoShape_Place_Text_Union()    {} // re
func (s *hospitalStruct) implementsAdministrativeArea_GeoShape_Place_Union()         {} // re
func (s *hospitalStruct) implementsAudience_ContactPoint_Organization_Person_Union() {} // re
func (s *hospitalStruct) implementsAudience_Organization_Person_Union()              {} // re
func (s *hospitalStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}                                                                                               // re
func (s *hospitalStruct) implementsBrand_Organization_Union()                                   {} // re
func (s *hospitalStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *hospitalStruct) implementsCivicStructure_LocalBusiness_Union()                         {} // re
func (s *hospitalStruct) implementsContactPoint_Organization_Person_Union()                     {} // re
func (s *hospitalStruct) implementsContactPoint_Place_Union()                                   {} // re
func (s *hospitalStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *hospitalStruct) implementsEducationalOrganization_Organization_Union()                 {} // re
func (s *hospitalStruct) implementsFoodEstablishment_Place_Union()                              {} // re
func (s *hospitalStruct) implementsGeoShape_Place_Text_Union()                                  {} // re
func (s *hospitalStruct) implementsGeospatialGeometry_Place_Union()                             {} // re
func (s *hospitalStruct) implementsItemList_Place_Union()                                       {} // re
func (s *hospitalStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *hospitalStruct) implementsOrganization_Person_Union()                                  {} // re
func (s *hospitalStruct) implementsOrganization_ProgramMembership_Union()                       {} // re
func (s *hospitalStruct) implementsPlace_PostalAddress_Text_Union()                             {} // re
func (s *hospitalStruct) implementsPlace_PostalAddress_Text_VirtualLocation_Union()             {} // re
func (s *hospitalStruct) implementsPlace_PostalAddress_URL_Union()                              {} // re
func (s *hospitalStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *hospitalStruct) implementsText_Thing_Union()                                           {} // re
func (s *hospitalStruct) AvailableService() []MedicalProcedure_MedicalTest_MedicalTherapy_Union {
	return s.AvailableService_
}
func (s *hospitalStruct) HealthcareReportingData() []CDCPMDRecord_Dataset_Union {
	return s.HealthcareReportingData_
}
func (s *hospitalStruct) MedicalSpecialty() []MedicalSpecialty {
	return s.MedicalSpecialty_
}

type HospitalSlice []Hospital

func (s *HospitalSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HospitalSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Hospital)
	}
	return nil
}

var _ Hospital = &hospitalStruct{}

/*
A hostel - cheap accommodation, often in shared dormitories.
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type Hostel interface {
	// Parents
	LodgingBusiness
}
type hostelStruct struct {
	lodgingBusinessStruct
}
type HostelSlice []Hostel

func (s *HostelSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HostelSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Hostel)
	}
	return nil
}

var _ Hostel = &hostelStruct{}

/*
A hotel is an establishment that provides lodging paid on a short-term basis (Source: Wikipedia, the free encyclopedia, see http://en.wikipedia.org/wiki/Hotel).
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type Hotel interface {
	// Parents
	LodgingBusiness
}
type hotelStruct struct {
	lodgingBusinessStruct
}
type HotelSlice []Hotel

func (s *HotelSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HotelSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Hotel)
	}
	return nil
}

var _ Hotel = &hotelStruct{}

/*
A hotel room is a single room in a hotel.
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type HotelRoom interface {
	// Parents
	Room
	// Accessors
	Bed() []BedDetails_BedType_Text_Union /*
	The type of bed or beds included in the accommodation. For the single case of just one bed of a certain type, you use bed directly with a text.
	      If you want to indicate the quantity of a certain kind of bed, use an instance of BedDetails. For more detailed information, use the amenityFeature property.
	*/
	Occupancy() []QuantitativeValue /*
	The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).
	Typical unit code(s): C62 for person
	*/
}
type hotelRoomStruct struct {
	roomStruct

	Bed_       BedDetails_BedType_Text_UnionSlice `json:"bed,omitempty"`
	Occupancy_ QuantitativeValueSlice             `json:"occupancy,omitempty"`
}

func (s *hotelRoomStruct) Bed() []BedDetails_BedType_Text_Union {
	return s.Bed_
}
func (s *hotelRoomStruct) Occupancy() []QuantitativeValue {
	return s.Occupancy_
}

type HotelRoomSlice []HotelRoom

func (s *HotelRoomSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HotelRoomSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HotelRoom)
	}
	return nil
}

var _ HotelRoom = &hotelRoomStruct{}

// A house is a building or structure that has the ability to be occupied for habitation by humans or other creatures (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/House">http://en.wikipedia.org/wiki/House</a>).
type House interface {
	// Parents
	Accommodation
	// Accessors
	NumberOfRooms() []Number_QuantitativeValue_Union /*
	The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.
	Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.
	*/
}
type houseStruct struct {
	accommodationStruct

	NumberOfRooms_ Number_QuantitativeValue_UnionSlice `json:"numberOfRooms,omitempty"`
}

func (s *houseStruct) NumberOfRooms() []Number_QuantitativeValue_Union {
	return s.NumberOfRooms_
}

type HouseSlice []House

func (s *HouseSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HouseSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(House)
	}
	return nil
}

var _ House = &houseStruct{}

// A house painting service.
type HousePainter interface {
	// Parents
	HomeAndConstructionBusiness
}
type housePainterStruct struct {
	homeAndConstructionBusinessStruct
}
type HousePainterSlice []HousePainter

func (s *HousePainterSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HousePainterSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HousePainter)
	}
	return nil
}

var _ HousePainter = &housePainterStruct{}

// Instructions that explain how to achieve a result by performing a sequence of steps.
type HowTo interface {
	// Parents
	CreativeWork
	// Accessors
	EstimatedCost() []MonetaryAmount_Text_Union             // The estimated cost of the supply or supplies consumed when performing instructions.
	PerformTime() []Duration                                // The length of time it takes to perform instructions or a direction (not including time to prepare the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
	PrepTime() []Duration                                   // The length of time it takes to prepare the items to be used in instructions or a direction, in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
	Step() []CreativeWork_HowToSection_HowToStep_Text_Union // A single step item (as HowToStep, text, document, video, etc.) or a HowToSection.
	Steps() []CreativeWork_ItemList_Text_Union              // A single step item (as HowToStep, text, document, video, etc.) or a HowToSection (originally misnamed 'steps'; 'step' is preferred).
	Supply() []HowToSupply_Text_Union                       // A sub-property of instrument. A supply consumed when performing instructions or a direction.
	Tool() []HowToTool_Text_Union                           // A sub property of instrument. An object used (but not consumed) when performing instructions or a direction.
	TotalTime() []Duration                                  // The total time required to perform instructions or a direction (including time to prepare the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
	Yield() []QuantitativeValue_Text_Union                  // The quantity that results by performing instructions. For example, a paper airplane, 10 personalized candles.
}
type howToStruct struct {
	creativeWorkStruct

	EstimatedCost_ MonetaryAmount_Text_UnionSlice                      `json:"estimatedCost,omitempty"`
	PerformTime_   DurationSlice                                       `json:"performTime,omitempty"`
	PrepTime_      DurationSlice                                       `json:"prepTime,omitempty"`
	Step_          CreativeWork_HowToSection_HowToStep_Text_UnionSlice `json:"step,omitempty"`
	Steps_         CreativeWork_ItemList_Text_UnionSlice               `json:"steps,omitempty"`
	Supply_        HowToSupply_Text_UnionSlice                         `json:"supply,omitempty"`
	Tool_          HowToTool_Text_UnionSlice                           `json:"tool,omitempty"`
	TotalTime_     DurationSlice                                       `json:"totalTime,omitempty"`
	Yield_         QuantitativeValue_Text_UnionSlice                   `json:"yield,omitempty"`
}

func (s *howToStruct) EstimatedCost() []MonetaryAmount_Text_Union {
	return s.EstimatedCost_
}
func (s *howToStruct) PerformTime() []Duration {
	return s.PerformTime_
}
func (s *howToStruct) PrepTime() []Duration {
	return s.PrepTime_
}
func (s *howToStruct) Step() []CreativeWork_HowToSection_HowToStep_Text_Union {
	return s.Step_
}
func (s *howToStruct) Steps() []CreativeWork_ItemList_Text_Union {
	return s.Steps_
}
func (s *howToStruct) Supply() []HowToSupply_Text_Union {
	return s.Supply_
}
func (s *howToStruct) Tool() []HowToTool_Text_Union {
	return s.Tool_
}
func (s *howToStruct) TotalTime() []Duration {
	return s.TotalTime_
}
func (s *howToStruct) Yield() []QuantitativeValue_Text_Union {
	return s.Yield_
}

type HowToSlice []HowTo

func (s *HowToSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HowToSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HowTo)
	}
	return nil
}

var _ HowTo = &howToStruct{}

// A direction indicating a single action to do in the instructions for how to achieve a result.
type HowToDirection interface {
	// Parents
	CreativeWork
	ListItem
	// Accessors
	AfterMedia() []MediaObject_URL_Union  // A media object representing the circumstances after performing this direction.
	BeforeMedia() []MediaObject_URL_Union // A media object representing the circumstances before performing this direction.
	DuringMedia() []MediaObject_URL_Union // A media object representing the circumstances while performing this direction.
	PerformTime() []Duration              // The length of time it takes to perform instructions or a direction (not including time to prepare the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
	PrepTime() []Duration                 // The length of time it takes to prepare the items to be used in instructions or a direction, in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
	Supply() []HowToSupply_Text_Union     // A sub-property of instrument. A supply consumed when performing instructions or a direction.
	Tool() []HowToTool_Text_Union         // A sub property of instrument. An object used (but not consumed) when performing instructions or a direction.
	TotalTime() []Duration                // The total time required to perform instructions or a direction (including time to prepare the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
}
type howToDirectionStruct struct {
	creativeWorkStruct
	listItemStruct_

	AfterMedia_  MediaObject_URL_UnionSlice  `json:"afterMedia,omitempty"`
	BeforeMedia_ MediaObject_URL_UnionSlice  `json:"beforeMedia,omitempty"`
	DuringMedia_ MediaObject_URL_UnionSlice  `json:"duringMedia,omitempty"`
	PerformTime_ DurationSlice               `json:"performTime,omitempty"`
	PrepTime_    DurationSlice               `json:"prepTime,omitempty"`
	Supply_      HowToSupply_Text_UnionSlice `json:"supply,omitempty"`
	Tool_        HowToTool_Text_UnionSlice   `json:"tool,omitempty"`
	TotalTime_   DurationSlice               `json:"totalTime,omitempty"`
}

func (s *howToDirectionStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {
}                                                                        // re
func (s *howToDirectionStruct) implementsDataFeedItem_Text_Thing_Union() {} // re
func (s *howToDirectionStruct) implementsListItem_Text_Thing_Union()     {} // re
func (s *howToDirectionStruct) implementsText_Thing_URL_Union()          {} // re
func (s *howToDirectionStruct) implementsText_Thing_Union()              {} // re
func (s *howToDirectionStruct) AfterMedia() []MediaObject_URL_Union {
	return s.AfterMedia_
}
func (s *howToDirectionStruct) BeforeMedia() []MediaObject_URL_Union {
	return s.BeforeMedia_
}
func (s *howToDirectionStruct) DuringMedia() []MediaObject_URL_Union {
	return s.DuringMedia_
}
func (s *howToDirectionStruct) PerformTime() []Duration {
	return s.PerformTime_
}
func (s *howToDirectionStruct) PrepTime() []Duration {
	return s.PrepTime_
}
func (s *howToDirectionStruct) Supply() []HowToSupply_Text_Union {
	return s.Supply_
}
func (s *howToDirectionStruct) Tool() []HowToTool_Text_Union {
	return s.Tool_
}
func (s *howToDirectionStruct) TotalTime() []Duration {
	return s.TotalTime_
}

type HowToDirectionSlice []HowToDirection

func (s *HowToDirectionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HowToDirectionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HowToDirection)
	}
	return nil
}

var _ HowToDirection = &howToDirectionStruct{}

// An item used as either a tool or supply when performing the instructions for how to to achieve a result.
type HowToItem interface {
	// Parents
	ListItem
	// Accessors
	RequiredQuantity() []Number_QuantitativeValue_Text_Union // The required quantity of the item(s).
}
type howToItemStruct struct {
	listItemStruct

	RequiredQuantity_ Number_QuantitativeValue_Text_UnionSlice `json:"requiredQuantity,omitempty"`
}

func (s *howToItemStruct) RequiredQuantity() []Number_QuantitativeValue_Text_Union {
	return s.RequiredQuantity_
}

type HowToItemSlice []HowToItem

func (s *HowToItemSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HowToItemSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HowToItem)
	}
	return nil
}

var _ HowToItem = &howToItemStruct{}

// A sub-grouping of steps in the instructions for how to achieve a result (e.g. steps for making a pie crust within a pie recipe).
type HowToSection interface {
	// Parents
	CreativeWork
	ItemList
	ListItem
	// Unions
	CreativeWork_HowToSection_HowToStep_Text_Union
	// Accessors
	Steps() []CreativeWork_ItemList_Text_Union // A single step item (as HowToStep, text, document, video, etc.) or a HowToSection (originally misnamed 'steps'; 'step' is preferred).
}
type howToSectionStruct struct {
	creativeWorkStruct
	itemListStruct
	listItemStruct_

	Steps_ CreativeWork_ItemList_Text_UnionSlice `json:"steps,omitempty"`
}

func (s *howToSectionStruct) implementsCreativeWork_HowToSection_HowToStep_Text_Union() {}

func (s *howToSectionStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *howToSectionStruct) implementsCreativeWork_ItemList_Text_Union()                           {} // re
func (s *howToSectionStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *howToSectionStruct) implementsItemList_ListItem_Text_WebContent_Union()                    {} // re
func (s *howToSectionStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *howToSectionStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *howToSectionStruct) implementsText_Thing_Union()                                           {} // re
func (s *howToSectionStruct) Steps() []CreativeWork_ItemList_Text_Union {
	return s.Steps_
}

type HowToSectionSlice []HowToSection

func (s *HowToSectionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HowToSectionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HowToSection)
	}
	return nil
}

var _ HowToSection = &howToSectionStruct{}

// A step in the instructions for how to achieve a result. It is an ordered list with HowToDirection and/or HowToTip items.
type HowToStep interface {
	// Parents
	CreativeWork
	ItemList
	ListItem
	// Unions
	CreativeWork_HowToSection_HowToStep_Text_Union
}
type howToStepStruct struct {
	creativeWorkStruct
	itemListStruct
	listItemStruct_
}

func (s *howToStepStruct) implementsCreativeWork_HowToSection_HowToStep_Text_Union() {}

func (s *howToStepStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *howToStepStruct) implementsCreativeWork_ItemList_Text_Union()                           {} // re
func (s *howToStepStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *howToStepStruct) implementsItemList_ListItem_Text_WebContent_Union()                    {} // re
func (s *howToStepStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *howToStepStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *howToStepStruct) implementsText_Thing_Union()                                           {} // re
type HowToStepSlice []HowToStep

func (s *HowToStepSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HowToStepSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HowToStep)
	}
	return nil
}

var _ HowToStep = &howToStepStruct{}

// A supply consumed when performing the instructions for how to achieve a result.
type HowToSupply interface {
	// Parents
	HowToItem
	// Unions
	HowToSupply_Text_Union
	// Accessors
	EstimatedCost() []MonetaryAmount_Text_Union // The estimated cost of the supply or supplies consumed when performing instructions.
}
type howToSupplyStruct struct {
	howToItemStruct

	EstimatedCost_ MonetaryAmount_Text_UnionSlice `json:"estimatedCost,omitempty"`
}

func (s *howToSupplyStruct) implementsHowToSupply_Text_Union() {}

func (s *howToSupplyStruct) EstimatedCost() []MonetaryAmount_Text_Union {
	return s.EstimatedCost_
}

type HowToSupplySlice []HowToSupply

func (s *HowToSupplySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HowToSupplySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HowToSupply)
	}
	return nil
}

var _ HowToSupply = &howToSupplyStruct{}

// An explanation in the instructions for how to achieve a result. It provides supplementary information about a technique, supply, author's preference, etc. It can explain what could be done, or what should not be done, but doesn't specify what should be done (see HowToDirection).
type HowToTip interface {
	// Parents
	CreativeWork
	ListItem
}
type howToTipStruct struct {
	creativeWorkStruct
	listItemStruct_
}

func (s *howToTipStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *howToTipStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *howToTipStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *howToTipStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *howToTipStruct) implementsText_Thing_Union()                                           {} // re
type HowToTipSlice []HowToTip

func (s *HowToTipSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HowToTipSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HowToTip)
	}
	return nil
}

var _ HowToTip = &howToTipStruct{}

// A tool used (but not consumed) when performing instructions for how to achieve a result.
type HowToTool interface {
	// Parents
	HowToItem
	// Unions
	HowToTool_Text_Union
}
type howToToolStruct struct {
	howToItemStruct
}

func (s *howToToolStruct) implementsHowToTool_Text_Union() {}

type HowToToolSlice []HowToTool

func (s *HowToToolSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HowToToolSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HowToTool)
	}
	return nil
}

var _ HowToTool = &howToToolStruct{}

// A HyperToc represents a hypertext table of contents for complex media objects, such as [[VideoObject]], [[AudioObject]]. Items in the table of contents are indicated using the [[tocEntry]] property, and typed [[HyperTocEntry]]. For cases where the same larger work is split into multiple files, [[associatedMedia]] can be used on individual [[HyperTocEntry]] items.
type HyperToc interface {
	// Parents
	CreativeWork
	// Accessors
	AssociatedMedia() []MediaObject // A media object that encodes this CreativeWork. This property is a synonym for encoding.
	TocEntry() []HyperTocEntry      // Indicates a [[HyperTocEntry]] in a [[HyperToc]].
}
type hyperTocStruct struct {
	creativeWorkStruct

	AssociatedMedia_ MediaObjectSlice   `json:"associatedMedia,omitempty"`
	TocEntry_        HyperTocEntrySlice `json:"tocEntry,omitempty"`
}

func (s *hyperTocStruct) AssociatedMedia() []MediaObject {
	return s.AssociatedMedia_
}
func (s *hyperTocStruct) TocEntry() []HyperTocEntry {
	return s.TocEntry_
}

type HyperTocSlice []HyperToc

func (s *HyperTocSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HyperTocSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HyperToc)
	}
	return nil
}

var _ HyperToc = &hyperTocStruct{}

// A HyperToEntry is an item within a [[HyperToc]], which represents a hypertext table of contents for complex media objects, such as [[VideoObject]], [[AudioObject]]. The media object itself is indicated using [[associatedMedia]]. Each section of interest within that content can be described with a [[HyperTocEntry]], with associated [[startOffset]] and [[endOffset]]. When several entries are all from the same file, [[associatedMedia]] is used on the overarching [[HyperTocEntry]]; if the content has been split into multiple files, they can be referenced using [[associatedMedia]] on each [[HyperTocEntry]].
type HyperTocEntry interface {
	// Parents
	CreativeWork
	// Unions
	HyperTocEntry_Number_Union
	// Accessors
	AssociatedMedia() []MediaObject   // A media object that encodes this CreativeWork. This property is a synonym for encoding.
	TocContinuation() []HyperTocEntry // A [[HyperTocEntry]] can have a [[tocContinuation]] indicated, which is another [[HyperTocEntry]] that would be the default next item to play or render.
	Utterances() []Text               // Text of an utterances (spoken words, lyrics etc.) that occurs at a certain section of a media object, represented as a [[HyperTocEntry]].
}
type hyperTocEntryStruct struct {
	creativeWorkStruct

	AssociatedMedia_ MediaObjectSlice   `json:"associatedMedia,omitempty"`
	TocContinuation_ HyperTocEntrySlice `json:"tocContinuation,omitempty"`
	Utterances_      TextSlice          `json:"utterances,omitempty"`
}

func (s *hyperTocEntryStruct) implementsHyperTocEntry_Number_Union() {}

func (s *hyperTocEntryStruct) AssociatedMedia() []MediaObject {
	return s.AssociatedMedia_
}
func (s *hyperTocEntryStruct) TocContinuation() []HyperTocEntry {
	return s.TocContinuation_
}
func (s *hyperTocEntryStruct) Utterances() []Text {
	return s.Utterances_
}

type HyperTocEntrySlice []HyperTocEntry

func (s *HyperTocEntrySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(HyperTocEntrySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(HyperTocEntry)
	}
	return nil
}

var _ HyperTocEntry = &hyperTocEntryStruct{}

// An ice cream shop.
type IceCreamShop interface {
	// Parents
	FoodEstablishment
}
type iceCreamShopStruct struct {
	foodEstablishmentStruct
}
type IceCreamShopSlice []IceCreamShop

func (s *IceCreamShopSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(IceCreamShopSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(IceCreamShop)
	}
	return nil
}

var _ IceCreamShop = &iceCreamShopStruct{}

// The act of intentionally disregarding the object. An agent ignores an object.
type IgnoreAction interface {
	// Parents
	AssessAction
}
type ignoreActionStruct struct {
	assessActionStruct
}
type IgnoreActionSlice []IgnoreAction

func (s *IgnoreActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(IgnoreActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(IgnoreAction)
	}
	return nil
}

var _ IgnoreAction = &ignoreActionStruct{}

// Web page type: Image gallery page.
type ImageGallery interface {
	// Parents
	MediaGallery
}
type imageGalleryStruct struct {
	mediaGalleryStruct
}
type ImageGallerySlice []ImageGallery

func (s *ImageGallerySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ImageGallerySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ImageGallery)
	}
	return nil
}

var _ ImageGallery = &imageGalleryStruct{}

// An image file.
type ImageObject interface {
	// Parents
	MediaObject
	// Unions
	ImageObject_Photograph_Union
	ImageObject_URL_Union
	// Accessors
	Caption() []MediaObject_Text_Union    // The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the [[encodingFormat]].
	EmbeddedTextCaption() []Text          // Represents textual captioning from a [[MediaObject]], e.g. text of a 'meme'.
	ExifData() []PropertyValue_Text_Union // exif data for this object.
	RepresentativeOfPage() []Boolean      // Indicates whether this image is representative of the content of the page.
	Thumbnail() []ImageObject             // Thumbnail image for an image or video.
}
type imageObjectStruct struct {
	mediaObjectStruct

	Caption_              MediaObject_Text_UnionSlice   `json:"caption,omitempty"`
	EmbeddedTextCaption_  TextSlice                     `json:"embeddedTextCaption,omitempty"`
	ExifData_             PropertyValue_Text_UnionSlice `json:"exifData,omitempty"`
	RepresentativeOfPage_ BooleanSlice                  `json:"representativeOfPage,omitempty"`
	Thumbnail_            ImageObjectSlice              `json:"thumbnail,omitempty"`
}

func (s *imageObjectStruct) implementsImageObject_Photograph_Union() {}
func (s *imageObjectStruct) implementsImageObject_URL_Union()        {}

func (s *imageObjectStruct) Caption() []MediaObject_Text_Union {
	return s.Caption_
}
func (s *imageObjectStruct) EmbeddedTextCaption() []Text {
	return s.EmbeddedTextCaption_
}
func (s *imageObjectStruct) ExifData() []PropertyValue_Text_Union {
	return s.ExifData_
}
func (s *imageObjectStruct) RepresentativeOfPage() []Boolean {
	return s.RepresentativeOfPage_
}
func (s *imageObjectStruct) Thumbnail() []ImageObject {
	return s.Thumbnail_
}

type ImageObjectSlice []ImageObject

func (s *ImageObjectSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ImageObjectSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ImageObject)
	}
	return nil
}

var _ ImageObject = &imageObjectStruct{}

// A specific and exact (byte-for-byte) version of an [[ImageObject]]. Two byte-for-byte identical files, for the purposes of this type, considered identical. If they have different embedded metadata (e.g. XMP, EXIF) the files will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual content, do not affect this notion of identity.
type ImageObjectSnapshot interface {
	// Parents
	ImageObject
}
type imageObjectSnapshotStruct struct {
	imageObjectStruct
}
type ImageObjectSnapshotSlice []ImageObjectSnapshot

func (s *ImageObjectSnapshotSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ImageObjectSnapshotSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ImageObjectSnapshot)
	}
	return nil
}

var _ ImageObjectSnapshot = &imageObjectSnapshotStruct{}

// Any medical imaging modality typically used for diagnostic purposes.
type ImagingTest interface {
	// Parents
	MedicalTest
	// Accessors
	ImagingTechnique() []MedicalImagingTechnique // Imaging technique used.
}
type imagingTestStruct struct {
	medicalTestStruct

	ImagingTechnique_ MedicalImagingTechniqueSlice `json:"imagingTechnique,omitempty"`
}

func (s *imagingTestStruct) ImagingTechnique() []MedicalImagingTechnique {
	return s.ImagingTechnique_
}

type ImagingTestSlice []ImagingTest

func (s *ImagingTestSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ImagingTestSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ImagingTest)
	}
	return nil
}

var _ ImagingTest = &imagingTestStruct{}

// A single, identifiable product instance (e.g. a laptop with a particular serial number).
type IndividualProduct interface {
	// Parents
	Product
	// Accessors
	SerialNumber() []Text // The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a shortcut for the serial number of the product included in the offer.
}
type individualProductStruct struct {
	productStruct

	SerialNumber_ TextSlice `json:"serialNumber,omitempty"`
}

func (s *individualProductStruct) SerialNumber() []Text {
	return s.SerialNumber_
}

type IndividualProductSlice []IndividualProduct

func (s *IndividualProductSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(IndividualProductSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(IndividualProduct)
	}
	return nil
}

var _ IndividualProduct = &individualProductStruct{}

// Classes of agents or pathogens that transmit infectious diseases. Enumerated type.
type InfectiousAgentClass interface {
	// Parents
	MedicalEnumeration
}
type infectiousAgentClassStruct struct {
	medicalEnumerationStruct
}
type InfectiousAgentClassSlice []InfectiousAgentClass

func (s *InfectiousAgentClassSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(InfectiousAgentClassSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(InfectiousAgentClass)
	}
	return nil
}

var _ InfectiousAgentClass = &infectiousAgentClassStruct{}

// An infectious disease is a clinically evident human disease resulting from the presence of pathogenic microbial agents, like pathogenic viruses, pathogenic bacteria, fungi, protozoa, multicellular parasites, and prions. To be considered an infectious disease, such pathogens are known to be able to cause this disease.
type InfectiousDisease interface {
	// Parents
	MedicalCondition
	// Accessors
	InfectiousAgent() []Text                      // The actual infectious agent, such as a specific bacterium.
	InfectiousAgentClass() []InfectiousAgentClass // The class of infectious agent (bacteria, prion, etc.) that causes the disease.
	TransmissionMethod() []Text                   // How the disease spreads, either as a route or vector, for example 'direct contact', 'Aedes aegypti', etc.
}
type infectiousDiseaseStruct struct {
	medicalConditionStruct

	InfectiousAgent_      TextSlice                 `json:"infectiousAgent,omitempty"`
	InfectiousAgentClass_ InfectiousAgentClassSlice `json:"infectiousAgentClass,omitempty"`
	TransmissionMethod_   TextSlice                 `json:"transmissionMethod,omitempty"`
}

func (s *infectiousDiseaseStruct) InfectiousAgent() []Text {
	return s.InfectiousAgent_
}
func (s *infectiousDiseaseStruct) InfectiousAgentClass() []InfectiousAgentClass {
	return s.InfectiousAgentClass_
}
func (s *infectiousDiseaseStruct) TransmissionMethod() []Text {
	return s.TransmissionMethod_
}

type InfectiousDiseaseSlice []InfectiousDisease

func (s *InfectiousDiseaseSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(InfectiousDiseaseSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(InfectiousDisease)
	}
	return nil
}

var _ InfectiousDisease = &infectiousDiseaseStruct{}

// The act of notifying someone of information pertinent to them, with no expectation of a response.
type InformAction interface {
	// Parents
	CommunicateAction
	// Accessors
	Event() []Event // Upcoming or past event associated with this place, organization, or action.
}
type informActionStruct struct {
	communicateActionStruct

	Event_ EventSlice `json:"event,omitempty"`
}

func (s *informActionStruct) Event() []Event {
	return s.Event_
}

type InformActionSlice []InformAction

func (s *InformActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(InformActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(InformAction)
	}
	return nil
}

var _ InformAction = &informActionStruct{}

// The act of adding at a specific location in an ordered collection.
type InsertAction interface {
	// Parents
	AddAction
	// Accessors
	ToLocation() []Place // A sub property of location. The final location of the object or the agent after the action.
}
type insertActionStruct struct {
	addActionStruct

	ToLocation_ PlaceSlice `json:"toLocation,omitempty"`
}

func (s *insertActionStruct) ToLocation() []Place {
	return s.ToLocation_
}

type InsertActionSlice []InsertAction

func (s *InsertActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(InsertActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(InsertAction)
	}
	return nil
}

var _ InsertAction = &insertActionStruct{}

// The act of installing an application.
type InstallAction interface {
	// Parents
	ConsumeAction
}
type installActionStruct struct {
	consumeActionStruct
}
type InstallActionSlice []InstallAction

func (s *InstallActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(InstallActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(InstallAction)
	}
	return nil
}

var _ InstallAction = &installActionStruct{}

// An Insurance agency.
type InsuranceAgency interface {
	// Parents
	FinancialService
}
type insuranceAgencyStruct struct {
	financialServiceStruct
}
type InsuranceAgencySlice []InsuranceAgency

func (s *InsuranceAgencySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(InsuranceAgencySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(InsuranceAgency)
	}
	return nil
}

var _ InsuranceAgency = &insuranceAgencyStruct{}

// A utility class that serves as the umbrella for a number of 'intangible' things such as quantities, structured values, etc.
type Intangible interface {
	// Parents
	Thing
}
type intangibleStruct struct {
	thingStruct
}
type IntangibleSlice []Intangible

func (s *IntangibleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(IntangibleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Intangible)
	}
	return nil
}

var _ Intangible = &intangibleStruct{}

// Data type: Integer.
type Integer interface {
	// Parents
	Number
	// Unions
	Date_DateTime_Integer_Union
	Integer_QuantitativeValue_Union
	Integer_StructuredValue_Union
	Integer_Text_Union
}
type integerStruct struct {
	numberStruct
}

func (s *integerStruct) implementsDate_DateTime_Integer_Union()     {}
func (s *integerStruct) implementsInteger_QuantitativeValue_Union() {}
func (s *integerStruct) implementsInteger_StructuredValue_Union()   {}
func (s *integerStruct) implementsInteger_Text_Union()              {}

type IntegerSlice []Integer

func (s *IntegerSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(IntegerSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Integer)
	}
	return nil
}

var _ Integer = &integerStruct{}

// The act of interacting with another person or organization.
type InteractAction interface {
	// Parents
	Action
}
type interactActionStruct struct {
	actionStruct
}
type InteractActionSlice []InteractAction

func (s *InteractActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(InteractActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(InteractAction)
	}
	return nil
}

var _ InteractAction = &interactActionStruct{}

// A summary of how users have interacted with this CreativeWork. In most cases, authors will use a subtype to specify the specific type of interaction.
type InteractionCounter interface {
	// Parents
	StructuredValue
	// Accessors
	EndTime() []DateTime_Time_Union                             // The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
	InteractionService() []SoftwareApplication_WebSite_Union    // The WebSite or SoftwareApplication where the interactions took place.
	InteractionType() []Action                                  // The Action representing the type of interaction. For up votes, +1s, etc. use [[LikeAction]]. For down votes use [[DislikeAction]]. Otherwise, use the most specific Action.
	Location() []Place_PostalAddress_Text_VirtualLocation_Union // The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
	StartTime() []DateTime_Time_Union                           // The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
	UserInteractionCount() []Integer                            // The number of interactions for the CreativeWork using the WebSite or SoftwareApplication.
}
type interactionCounterStruct struct {
	structuredValueStruct

	EndTime_              DateTime_Time_UnionSlice                            `json:"endTime,omitempty"`
	InteractionService_   SoftwareApplication_WebSite_UnionSlice              `json:"interactionService,omitempty"`
	InteractionType_      ActionSlice                                         `json:"interactionType,omitempty"`
	Location_             Place_PostalAddress_Text_VirtualLocation_UnionSlice `json:"location,omitempty"`
	StartTime_            DateTime_Time_UnionSlice                            `json:"startTime,omitempty"`
	UserInteractionCount_ IntegerSlice                                        `json:"userInteractionCount,omitempty"`
}

func (s *interactionCounterStruct) EndTime() []DateTime_Time_Union {
	return s.EndTime_
}
func (s *interactionCounterStruct) InteractionService() []SoftwareApplication_WebSite_Union {
	return s.InteractionService_
}
func (s *interactionCounterStruct) InteractionType() []Action {
	return s.InteractionType_
}
func (s *interactionCounterStruct) Location() []Place_PostalAddress_Text_VirtualLocation_Union {
	return s.Location_
}
func (s *interactionCounterStruct) StartTime() []DateTime_Time_Union {
	return s.StartTime_
}
func (s *interactionCounterStruct) UserInteractionCount() []Integer {
	return s.UserInteractionCount_
}

type InteractionCounterSlice []InteractionCounter

func (s *InteractionCounterSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(InteractionCounterSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(InteractionCounter)
	}
	return nil
}

var _ InteractionCounter = &interactionCounterStruct{}

// An internet cafe.
type InternetCafe interface {
	// Parents
	LocalBusiness
}
type internetCafeStruct struct {
	localBusinessStruct
}
type InternetCafeSlice []InternetCafe

func (s *InternetCafeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(InternetCafeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(InternetCafe)
	}
	return nil
}

var _ InternetCafe = &internetCafeStruct{}

// A company or fund that gathers capital from a number of investors to create a pool of money that is then re-invested into stocks, bonds and other assets.
type InvestmentFund interface {
	// Parents
	InvestmentOrDeposit
}
type investmentFundStruct struct {
	investmentOrDepositStruct
}
type InvestmentFundSlice []InvestmentFund

func (s *InvestmentFundSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(InvestmentFundSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(InvestmentFund)
	}
	return nil
}

var _ InvestmentFund = &investmentFundStruct{}

// A type of financial product that typically requires the client to transfer funds to a financial service in return for potential beneficial financial return.
type InvestmentOrDeposit interface {
	// Parents
	FinancialProduct
	// Accessors
	Amount() []MonetaryAmount_Number_Union // The amount of money.
}
type investmentOrDepositStruct struct {
	financialProductStruct

	Amount_ MonetaryAmount_Number_UnionSlice `json:"amount,omitempty"`
}
type investmentOrDepositStruct_ struct {
	investmentOrDepositStruct
}

func (s *investmentOrDepositStruct) Amount() []MonetaryAmount_Number_Union {
	return s.Amount_
}

type InvestmentOrDepositSlice []InvestmentOrDeposit

func (s *InvestmentOrDepositSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(InvestmentOrDepositSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(InvestmentOrDeposit)
	}
	return nil
}

var _ InvestmentOrDeposit = &investmentOrDepositStruct{}

// The act of asking someone to attend an event. Reciprocal of RsvpAction.
type InviteAction interface {
	// Parents
	CommunicateAction
	// Accessors
	Event() []Event // Upcoming or past event associated with this place, organization, or action.
}
type inviteActionStruct struct {
	communicateActionStruct

	Event_ EventSlice `json:"event,omitempty"`
}

func (s *inviteActionStruct) Event() []Event {
	return s.Event_
}

type InviteActionSlice []InviteAction

func (s *InviteActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(InviteActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(InviteAction)
	}
	return nil
}

var _ InviteAction = &inviteActionStruct{}

// A statement of the money due for goods or services; a bill.
type Invoice interface {
	// Parents
	Intangible
	// Accessors
	AccountId() []Text                                                      // The identifier for the account the payment will be applied to.
	BillingPeriod() []Duration                                              // The time interval used to compute the invoice.
	Broker() []Organization_Person_Union                                    // An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
	Category() []CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union // A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
	ConfirmationNumber() []Text                                             // A number that confirms the given order or payment has been received.
	Customer() []Organization_Person_Union                                  // Party placing the order or paying the invoice.
	MinimumPaymentDue() []MonetaryAmount_PriceSpecification_Union           // The minimum payment required at this time.
	PaymentDue() []DateTime                                                 // The date that payment is due.
	PaymentDueDate() []Date_DateTime_Union                                  // The date that payment is due.
	PaymentMethod() []PaymentMethod                                         // The name of the credit card or other method of payment for the order.
	PaymentMethodId() []Text                                                // An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
	PaymentStatus() []PaymentStatusType_Text_Union                          // The status of payment; whether the invoice has been paid or not.
	Provider() []Organization_Person_Union                                  // The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
	ReferencesOrder() []Order                                               // The Order(s) related to this Invoice. One or more Orders may be combined into a single Invoice.
	ScheduledPaymentDate() []Date                                           // The date the invoice is scheduled to be paid.
	TotalPaymentDue() []MonetaryAmount_PriceSpecification_Union             // The total amount due.
}
type invoiceStruct struct {
	intangibleStruct

	AccountId_            TextSlice                                                       `json:"accountId,omitempty"`
	BillingPeriod_        DurationSlice                                                   `json:"billingPeriod,omitempty"`
	Broker_               Organization_Person_UnionSlice                                  `json:"broker,omitempty"`
	Category_             CategoryCode_PhysicalActivityCategory_Text_Thing_URL_UnionSlice `json:"category,omitempty"`
	ConfirmationNumber_   TextSlice                                                       `json:"confirmationNumber,omitempty"`
	Customer_             Organization_Person_UnionSlice                                  `json:"customer,omitempty"`
	MinimumPaymentDue_    MonetaryAmount_PriceSpecification_UnionSlice                    `json:"minimumPaymentDue,omitempty"`
	PaymentDue_           DateTimeSlice                                                   `json:"paymentDue,omitempty"`
	PaymentDueDate_       Date_DateTime_UnionSlice                                        `json:"paymentDueDate,omitempty"`
	PaymentMethod_        PaymentMethodSlice                                              `json:"paymentMethod,omitempty"`
	PaymentMethodId_      TextSlice                                                       `json:"paymentMethodId,omitempty"`
	PaymentStatus_        PaymentStatusType_Text_UnionSlice                               `json:"paymentStatus,omitempty"`
	Provider_             Organization_Person_UnionSlice                                  `json:"provider,omitempty"`
	ReferencesOrder_      OrderSlice                                                      `json:"referencesOrder,omitempty"`
	ScheduledPaymentDate_ DateSlice                                                       `json:"scheduledPaymentDate,omitempty"`
	TotalPaymentDue_      MonetaryAmount_PriceSpecification_UnionSlice                    `json:"totalPaymentDue,omitempty"`
}

func (s *invoiceStruct) AccountId() []Text {
	return s.AccountId_
}
func (s *invoiceStruct) BillingPeriod() []Duration {
	return s.BillingPeriod_
}
func (s *invoiceStruct) Broker() []Organization_Person_Union {
	return s.Broker_
}
func (s *invoiceStruct) Category() []CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union {
	return s.Category_
}
func (s *invoiceStruct) ConfirmationNumber() []Text {
	return s.ConfirmationNumber_
}
func (s *invoiceStruct) Customer() []Organization_Person_Union {
	return s.Customer_
}
func (s *invoiceStruct) MinimumPaymentDue() []MonetaryAmount_PriceSpecification_Union {
	return s.MinimumPaymentDue_
}
func (s *invoiceStruct) PaymentDue() []DateTime {
	return s.PaymentDue_
}
func (s *invoiceStruct) PaymentDueDate() []Date_DateTime_Union {
	return s.PaymentDueDate_
}
func (s *invoiceStruct) PaymentMethod() []PaymentMethod {
	return s.PaymentMethod_
}
func (s *invoiceStruct) PaymentMethodId() []Text {
	return s.PaymentMethodId_
}
func (s *invoiceStruct) PaymentStatus() []PaymentStatusType_Text_Union {
	return s.PaymentStatus_
}
func (s *invoiceStruct) Provider() []Organization_Person_Union {
	return s.Provider_
}
func (s *invoiceStruct) ReferencesOrder() []Order {
	return s.ReferencesOrder_
}
func (s *invoiceStruct) ScheduledPaymentDate() []Date {
	return s.ScheduledPaymentDate_
}
func (s *invoiceStruct) TotalPaymentDue() []MonetaryAmount_PriceSpecification_Union {
	return s.TotalPaymentDue_
}

type InvoiceSlice []Invoice

func (s *InvoiceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(InvoiceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Invoice)
	}
	return nil
}

var _ Invoice = &invoiceStruct{}

// A list of possible product availability options.
type ItemAvailability interface {
	// Parents
	Enumeration
}
type itemAvailabilityStruct struct {
	enumerationStruct
}
type ItemAvailabilitySlice []ItemAvailability

func (s *ItemAvailabilitySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ItemAvailabilitySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ItemAvailability)
	}
	return nil
}

var _ ItemAvailability = &itemAvailabilityStruct{}

// A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top 100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.
type ItemList interface {
	// Parents
	Intangible
	// Unions
	Answer_ItemList_Union
	CreativeWork_ItemList_Text_Union
	ItemList_ListItem_Text_WebContent_Union
	ItemList_MusicRecording_Union
	ItemList_Place_Union
	// Accessors
	ItemListElement() []ListItem_Text_Thing_Union  // For itemListElement values, you can use simple strings (e.g. "Peter", "Paul", "Mary"), existing entities, or use ListItem.\n\nText values are best if the elements in the list are plain strings. Existing entities are best for a simple, unordered list of existing things in your data. ListItem is used with ordered lists when you want to provide additional context about the element in that list or when the same item might be in different places in different lists.\n\nNote: The order of elements in your mark-up is not sufficient for indicating the order or elements.  Use ListItem with a 'position' property in such cases.
	ItemListOrder() []ItemListOrderType_Text_Union // Type of ordering (e.g. Ascending, Descending, Unordered).
	NumberOfItems() []Integer                      // The number of items in an ItemList. Note that some descriptions might not fully describe all items in a list (e.g., multi-page pagination); in such cases, the numberOfItems would be for the entire list.
}
type itemListStruct struct {
	intangibleStruct

	ItemListElement_ ListItem_Text_Thing_UnionSlice    `json:"itemListElement,omitempty"`
	ItemListOrder_   ItemListOrderType_Text_UnionSlice `json:"itemListOrder,omitempty"`
	NumberOfItems_   IntegerSlice                      `json:"numberOfItems,omitempty"`
}

func (s *itemListStruct) implementsAnswer_ItemList_Union()                   {}
func (s *itemListStruct) implementsCreativeWork_ItemList_Text_Union()        {}
func (s *itemListStruct) implementsItemList_ListItem_Text_WebContent_Union() {}
func (s *itemListStruct) implementsItemList_MusicRecording_Union()           {}
func (s *itemListStruct) implementsItemList_Place_Union()                    {}

func (s *itemListStruct) ItemListElement() []ListItem_Text_Thing_Union {
	return s.ItemListElement_
}
func (s *itemListStruct) ItemListOrder() []ItemListOrderType_Text_Union {
	return s.ItemListOrder_
}
func (s *itemListStruct) NumberOfItems() []Integer {
	return s.NumberOfItems_
}

type ItemListSlice []ItemList

func (s *ItemListSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ItemListSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ItemList)
	}
	return nil
}

var _ ItemList = &itemListStruct{}

// Enumerated for values for itemListOrder for indicating how an ordered ItemList is organized.
type ItemListOrderType interface {
	// Parents
	Enumeration
	// Unions
	ItemListOrderType_Text_Union
}
type itemListOrderTypeStruct struct {
	enumerationStruct
}

func (s *itemListOrderTypeStruct) implementsItemListOrderType_Text_Union() {}

type ItemListOrderTypeSlice []ItemListOrderType

func (s *ItemListOrderTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ItemListOrderTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ItemListOrderType)
	}
	return nil
}

var _ ItemListOrderType = &itemListOrderTypeStruct{}

// A page devoted to a single item, such as a particular product or hotel.
type ItemPage interface {
	// Parents
	WebPage
}
type itemPageStruct struct {
	webPageStruct
}
type ItemPageSlice []ItemPage

func (s *ItemPageSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ItemPageSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ItemPage)
	}
	return nil
}

var _ ItemPage = &itemPageStruct{}

// A jewelry store.
type JewelryStore interface {
	// Parents
	Store
}
type jewelryStoreStruct struct {
	storeStruct
}
type JewelryStoreSlice []JewelryStore

func (s *JewelryStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(JewelryStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(JewelryStore)
	}
	return nil
}

var _ JewelryStore = &jewelryStoreStruct{}

// A listing that describes a job opening in a certain organization.
type JobPosting interface {
	// Parents
	Intangible
	// Accessors
	ApplicantLocationRequirements() []AdministrativeArea                       // The location(s) applicants can apply from. This is usually used for telecommuting jobs where the applicant does not need to be in a physical office. Note: This should not be used for citizenship or work visa requirements.
	ApplicationContact() []ContactPoint                                        // Contact details for further information relevant to this job posting.
	BaseSalary() []MonetaryAmount_Number_PriceSpecification_Union              // The base salary of the job or of an employee in an EmployeeRole.
	Benefits() []Text                                                          // Description of benefits associated with the job.
	DatePosted() []Date_DateTime_Union                                         // Publication date of an online listing.
	DirectApply() []Boolean                                                    // Indicates whether an [[url]] that is associated with a [[JobPosting]] enables direct application for the job, via the posting website. A job posting is considered to have directApply of [[True]] if an application process for the specified job can be directly initiated via the url(s) given (noting that e.g. multiple internet domains might nevertheless be involved at an implementation level). A value of [[False]] is appropriate if there is no clear path to applying directly online for the specified job, navigating directly from the JobPosting url(s) supplied.
	EducationRequirements() []EducationalOccupationalCredential_Text_Union     // Educational background needed for the position or Occupation.
	EligibilityToWorkRequirement() []Text                                      // The legal requirements such as citizenship, visa and other documentation required for an applicant to this job.
	EmployerOverview() []Text                                                  // A description of the employer, career opportunities and work environment for this position.
	EmploymentType() []Text                                                    // Type of employment (e.g. full-time, part-time, contract, temporary, seasonal, internship).
	EmploymentUnit() []Organization                                            // Indicates the department, unit and/or facility where the employee reports and/or in which the job is to be performed.
	EstimatedSalary() []MonetaryAmount_MonetaryAmountDistribution_Number_Union // An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
	ExperienceInPlaceOfEducation() []Boolean                                   // Indicates whether a [[JobPosting]] will accept experience (as indicated by [[OccupationalExperienceRequirements]]) in place of its formal educational qualifications (as indicated by [[educationRequirements]]). If true, indicates that satisfying one of these requirements is sufficient.
	ExperienceRequirements() []OccupationalExperienceRequirements_Text_Union   // Description of skills and experience needed for the position or Occupation.
	HiringOrganization() []Organization                                        // Organization offering the job position.
	IncentiveCompensation() []Text                                             // Description of bonus and commission compensation aspects of the job.
	Incentives() []Text                                                        // Description of bonus and commission compensation aspects of the job.
	Industry() []DefinedTerm_Text_Union                                        // The industry associated with the job position.
	JobBenefits() []Text                                                       // Description of benefits associated with the job.
	JobImmediateStart() []Boolean                                              // An indicator as to whether a position is available for an immediate start.
	JobLocation() []Place                                                      // A (typically single) geographic location associated with the job position.
	JobLocationType() []Text                                                   // A description of the job location (e.g TELECOMMUTE for telecommute jobs).
	JobStartDate() []Date_Text_Union                                           // The date on which a successful applicant for this job would be expected to start work. Choose a specific date in the future or use the jobImmediateStart property to indicate the position is to be filled as soon as possible.
	OccupationalCategory() []CategoryCode_Text_Union                           /*
	A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.\n
	Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
	*/
	PhysicalRequirement() []DefinedTerm_Text_URL_Union              // A description of the types of physical activity associated with the job. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
	Qualifications() []EducationalOccupationalCredential_Text_Union // Specific qualifications required for this role or Occupation.
	RelevantOccupation() []Occupation                               // The Occupation for the JobPosting.
	Responsibilities() []Text                                       // Responsibilities associated with this role or Occupation.
	SalaryCurrency() []Text                                         // The currency (coded using [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217) ) used for the main salary information in this job posting or for this employee.
	SecurityClearanceRequirement() []Text_URL_Union                 // A description of any security clearance requirements of the job.
	SensoryRequirement() []DefinedTerm_Text_URL_Union               // A description of any sensory requirements and levels necessary to function on the job, including hearing and vision. Defined terms such as those in O*net may be used, but note that there is no way to specify the level of ability as well as its nature when using a defined term.
	Skills() []DefinedTerm_Text_Union                               // A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is desired or required to fulfill this role or to work in this occupation.
	SpecialCommitments() []Text                                     // Any special commitments associated with this job posting. Valid entries include VeteranCommit, MilitarySpouseCommit, etc.
	Title() []Text                                                  // The title of the job.
	TotalJobOpenings() []Integer                                    // The number of positions open for this job posting. Use a positive integer. Do not use if the number of positions is unclear or not known.
	ValidThrough() []Date_DateTime_Union                            // The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
	WorkHours() []Text                                              // The typical working hours for this job (e.g. 1st shift, night shift, 8am-5pm).
}
type jobPostingStruct struct {
	intangibleStruct

	ApplicantLocationRequirements_ AdministrativeAreaSlice                                     `json:"applicantLocationRequirements,omitempty"`
	ApplicationContact_            ContactPointSlice                                           `json:"applicationContact,omitempty"`
	BaseSalary_                    MonetaryAmount_Number_PriceSpecification_UnionSlice         `json:"baseSalary,omitempty"`
	Benefits_                      TextSlice                                                   `json:"benefits,omitempty"`
	DatePosted_                    Date_DateTime_UnionSlice                                    `json:"datePosted,omitempty"`
	DirectApply_                   BooleanSlice                                                `json:"directApply,omitempty"`
	EducationRequirements_         EducationalOccupationalCredential_Text_UnionSlice           `json:"educationRequirements,omitempty"`
	EligibilityToWorkRequirement_  TextSlice                                                   `json:"eligibilityToWorkRequirement,omitempty"`
	EmployerOverview_              TextSlice                                                   `json:"employerOverview,omitempty"`
	EmploymentType_                TextSlice                                                   `json:"employmentType,omitempty"`
	EmploymentUnit_                OrganizationSlice                                           `json:"employmentUnit,omitempty"`
	EstimatedSalary_               MonetaryAmount_MonetaryAmountDistribution_Number_UnionSlice `json:"estimatedSalary,omitempty"`
	ExperienceInPlaceOfEducation_  BooleanSlice                                                `json:"experienceInPlaceOfEducation,omitempty"`
	ExperienceRequirements_        OccupationalExperienceRequirements_Text_UnionSlice          `json:"experienceRequirements,omitempty"`
	HiringOrganization_            OrganizationSlice                                           `json:"hiringOrganization,omitempty"`
	IncentiveCompensation_         TextSlice                                                   `json:"incentiveCompensation,omitempty"`
	Incentives_                    TextSlice                                                   `json:"incentives,omitempty"`
	Industry_                      DefinedTerm_Text_UnionSlice                                 `json:"industry,omitempty"`
	JobBenefits_                   TextSlice                                                   `json:"jobBenefits,omitempty"`
	JobImmediateStart_             BooleanSlice                                                `json:"jobImmediateStart,omitempty"`
	JobLocation_                   PlaceSlice                                                  `json:"jobLocation,omitempty"`
	JobLocationType_               TextSlice                                                   `json:"jobLocationType,omitempty"`
	JobStartDate_                  Date_Text_UnionSlice                                        `json:"jobStartDate,omitempty"`
	OccupationalCategory_          CategoryCode_Text_UnionSlice                                `json:"occupationalCategory,omitempty"`
	PhysicalRequirement_           DefinedTerm_Text_URL_UnionSlice                             `json:"physicalRequirement,omitempty"`
	Qualifications_                EducationalOccupationalCredential_Text_UnionSlice           `json:"qualifications,omitempty"`
	RelevantOccupation_            OccupationSlice                                             `json:"relevantOccupation,omitempty"`
	Responsibilities_              TextSlice                                                   `json:"responsibilities,omitempty"`
	SalaryCurrency_                TextSlice                                                   `json:"salaryCurrency,omitempty"`
	SecurityClearanceRequirement_  Text_URL_UnionSlice                                         `json:"securityClearanceRequirement,omitempty"`
	SensoryRequirement_            DefinedTerm_Text_URL_UnionSlice                             `json:"sensoryRequirement,omitempty"`
	Skills_                        DefinedTerm_Text_UnionSlice                                 `json:"skills,omitempty"`
	SpecialCommitments_            TextSlice                                                   `json:"specialCommitments,omitempty"`
	Title_                         TextSlice                                                   `json:"title,omitempty"`
	TotalJobOpenings_              IntegerSlice                                                `json:"totalJobOpenings,omitempty"`
	ValidThrough_                  Date_DateTime_UnionSlice                                    `json:"validThrough,omitempty"`
	WorkHours_                     TextSlice                                                   `json:"workHours,omitempty"`
}

func (s *jobPostingStruct) ApplicantLocationRequirements() []AdministrativeArea {
	return s.ApplicantLocationRequirements_
}
func (s *jobPostingStruct) ApplicationContact() []ContactPoint {
	return s.ApplicationContact_
}
func (s *jobPostingStruct) BaseSalary() []MonetaryAmount_Number_PriceSpecification_Union {
	return s.BaseSalary_
}
func (s *jobPostingStruct) Benefits() []Text {
	return s.Benefits_
}
func (s *jobPostingStruct) DatePosted() []Date_DateTime_Union {
	return s.DatePosted_
}
func (s *jobPostingStruct) DirectApply() []Boolean {
	return s.DirectApply_
}
func (s *jobPostingStruct) EducationRequirements() []EducationalOccupationalCredential_Text_Union {
	return s.EducationRequirements_
}
func (s *jobPostingStruct) EligibilityToWorkRequirement() []Text {
	return s.EligibilityToWorkRequirement_
}
func (s *jobPostingStruct) EmployerOverview() []Text {
	return s.EmployerOverview_
}
func (s *jobPostingStruct) EmploymentType() []Text {
	return s.EmploymentType_
}
func (s *jobPostingStruct) EmploymentUnit() []Organization {
	return s.EmploymentUnit_
}
func (s *jobPostingStruct) EstimatedSalary() []MonetaryAmount_MonetaryAmountDistribution_Number_Union {
	return s.EstimatedSalary_
}
func (s *jobPostingStruct) ExperienceInPlaceOfEducation() []Boolean {
	return s.ExperienceInPlaceOfEducation_
}
func (s *jobPostingStruct) ExperienceRequirements() []OccupationalExperienceRequirements_Text_Union {
	return s.ExperienceRequirements_
}
func (s *jobPostingStruct) HiringOrganization() []Organization {
	return s.HiringOrganization_
}
func (s *jobPostingStruct) IncentiveCompensation() []Text {
	return s.IncentiveCompensation_
}
func (s *jobPostingStruct) Incentives() []Text {
	return s.Incentives_
}
func (s *jobPostingStruct) Industry() []DefinedTerm_Text_Union {
	return s.Industry_
}
func (s *jobPostingStruct) JobBenefits() []Text {
	return s.JobBenefits_
}
func (s *jobPostingStruct) JobImmediateStart() []Boolean {
	return s.JobImmediateStart_
}
func (s *jobPostingStruct) JobLocation() []Place {
	return s.JobLocation_
}
func (s *jobPostingStruct) JobLocationType() []Text {
	return s.JobLocationType_
}
func (s *jobPostingStruct) JobStartDate() []Date_Text_Union {
	return s.JobStartDate_
}
func (s *jobPostingStruct) OccupationalCategory() []CategoryCode_Text_Union {
	return s.OccupationalCategory_
}
func (s *jobPostingStruct) PhysicalRequirement() []DefinedTerm_Text_URL_Union {
	return s.PhysicalRequirement_
}
func (s *jobPostingStruct) Qualifications() []EducationalOccupationalCredential_Text_Union {
	return s.Qualifications_
}
func (s *jobPostingStruct) RelevantOccupation() []Occupation {
	return s.RelevantOccupation_
}
func (s *jobPostingStruct) Responsibilities() []Text {
	return s.Responsibilities_
}
func (s *jobPostingStruct) SalaryCurrency() []Text {
	return s.SalaryCurrency_
}
func (s *jobPostingStruct) SecurityClearanceRequirement() []Text_URL_Union {
	return s.SecurityClearanceRequirement_
}
func (s *jobPostingStruct) SensoryRequirement() []DefinedTerm_Text_URL_Union {
	return s.SensoryRequirement_
}
func (s *jobPostingStruct) Skills() []DefinedTerm_Text_Union {
	return s.Skills_
}
func (s *jobPostingStruct) SpecialCommitments() []Text {
	return s.SpecialCommitments_
}
func (s *jobPostingStruct) Title() []Text {
	return s.Title_
}
func (s *jobPostingStruct) TotalJobOpenings() []Integer {
	return s.TotalJobOpenings_
}
func (s *jobPostingStruct) ValidThrough() []Date_DateTime_Union {
	return s.ValidThrough_
}
func (s *jobPostingStruct) WorkHours() []Text {
	return s.WorkHours_
}

type JobPostingSlice []JobPosting

func (s *JobPostingSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(JobPostingSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(JobPosting)
	}
	return nil
}

var _ JobPosting = &jobPostingStruct{}

// An agent joins an event/group with participants/friends at a location.\n\nRelated actions:\n\n* [[RegisterAction]]: Unlike RegisterAction, JoinAction refers to joining a group/team of people.\n* [[SubscribeAction]]: Unlike SubscribeAction, JoinAction does not imply that you'll be receiving updates.\n* [[FollowAction]]: Unlike FollowAction, JoinAction does not imply that you'll be polling for updates.
type JoinAction interface {
	// Parents
	InteractAction
	// Accessors
	Event() []Event // Upcoming or past event associated with this place, organization, or action.
}
type joinActionStruct struct {
	interactActionStruct

	Event_ EventSlice `json:"event,omitempty"`
}

func (s *joinActionStruct) Event() []Event {
	return s.Event_
}

type JoinActionSlice []JoinAction

func (s *JoinActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(JoinActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(JoinAction)
	}
	return nil
}

var _ JoinAction = &joinActionStruct{}

// The anatomical location at which two or more bones make contact.
type Joint interface {
	// Parents
	AnatomicalStructure
	// Accessors
	BiomechnicalClass() []Text                   // The biomechanical properties of the bone.
	FunctionalClass() []MedicalEntity_Text_Union // The degree of mobility the joint allows.
	StructuralClass() []Text                     // The name given to how bone physically connects to each other.
}
type jointStruct struct {
	anatomicalStructureStruct

	BiomechnicalClass_ TextSlice                     `json:"biomechnicalClass,omitempty"`
	FunctionalClass_   MedicalEntity_Text_UnionSlice `json:"functionalClass,omitempty"`
	StructuralClass_   TextSlice                     `json:"structuralClass,omitempty"`
}

func (s *jointStruct) BiomechnicalClass() []Text {
	return s.BiomechnicalClass_
}
func (s *jointStruct) FunctionalClass() []MedicalEntity_Text_Union {
	return s.FunctionalClass_
}
func (s *jointStruct) StructuralClass() []Text {
	return s.StructuralClass_
}

type JointSlice []Joint

func (s *JointSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(JointSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Joint)
	}
	return nil
}

var _ Joint = &jointStruct{}

// A lake (for example, Lake Pontrachain).
type LakeBodyOfWater interface {
	// Parents
	BodyOfWater
}
type lakeBodyOfWaterStruct struct {
	bodyOfWaterStruct
}
type LakeBodyOfWaterSlice []LakeBodyOfWater

func (s *LakeBodyOfWaterSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LakeBodyOfWaterSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LakeBodyOfWater)
	}
	return nil
}

var _ LakeBodyOfWater = &lakeBodyOfWaterStruct{}

// A landform or physical feature.  Landform elements include mountains, plains, lakes, rivers, seascape and oceanic waterbody interface features such as bays, peninsulas, seas and so forth, including sub-aqueous terrain features such as submersed mountain ranges, volcanoes, and the great ocean basins.
type Landform interface {
	// Parents
	Place
}
type landformStruct struct {
	placeStruct
}
type LandformSlice []Landform

func (s *LandformSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LandformSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Landform)
	}
	return nil
}

var _ Landform = &landformStruct{}

// An historical landmark or building.
type LandmarksOrHistoricalBuildings interface {
	// Parents
	Place
}
type landmarksOrHistoricalBuildingsStruct struct {
	placeStruct
}
type LandmarksOrHistoricalBuildingsSlice []LandmarksOrHistoricalBuildings

func (s *LandmarksOrHistoricalBuildingsSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LandmarksOrHistoricalBuildingsSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LandmarksOrHistoricalBuildings)
	}
	return nil
}

var _ LandmarksOrHistoricalBuildings = &landmarksOrHistoricalBuildingsStruct{}

// Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag) can be used via the [[alternateName]] property. The Language type previously also covered programming languages such as Scheme and Lisp, which are now best represented using [[ComputerLanguage]].
type Language interface {
	// Parents
	Intangible
	// Unions
	Language_Text_Union
}
type languageStruct struct {
	intangibleStruct
}

func (s *languageStruct) implementsLanguage_Text_Union() {}

type LanguageSlice []Language

func (s *LanguageSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LanguageSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Language)
	}
	return nil
}

var _ Language = &languageStruct{}

/*
The LearningResource type can be used to indicate [[CreativeWork]]s (whether physical or digital) that have a particular and explicit orientation towards learning, education, skill acquisition, and other educational purposes.

[[LearningResource]] is expected to be used as an addition to a primary type such as [[Book]], [[VideoObject]], [[Product]] etc.

[[EducationEvent]] serves a similar purpose for event-like things (e.g. a [[Trip]]). A [[LearningResource]] may be created as a result of an [[EducationEvent]], for example by recording one.
*/
type LearningResource interface {
	// Parents
	CreativeWork
	// Accessors
	Assesses() []DefinedTerm_Text_Union               // The item being described is intended to assess the competency or learning outcome defined by the referenced term.
	CompetencyRequired() []DefinedTerm_Text_URL_Union // Knowledge, skill, ability or personal attribute that must be demonstrated by a person or other entity in order to do something such as earn an Educational Occupational Credential or understand a LearningResource.
	EducationalAlignment() []AlignmentObject          /*
	An alignment to an established educational framework.

	This property should not be used where the nature of the alignment can be described using a simple property, for example to express that a resource [[teaches]] or [[assesses]] a competency.
	*/
	EducationalLevel() []DefinedTerm_Text_URL_Union // The level in terms of progression through an educational or training context. Examples of educational levels include 'beginner', 'intermediate' or 'advanced', and formal sets of level indicators.
	EducationalUse() []DefinedTerm_Text_Union       // The purpose of a work in the context of education; for example, 'assignment', 'group work'.
	LearningResourceType() []DefinedTerm_Text_Union // The predominant type or kind characterizing the learning resource. For example, 'presentation', 'handout'.
	Teaches() []DefinedTerm_Text_Union              // The item being described is intended to help a person learn the competency or learning outcome defined by the referenced term.
}
type learningResourceStruct struct {
	creativeWorkStruct

	Assesses_             DefinedTerm_Text_UnionSlice     `json:"assesses,omitempty"`
	CompetencyRequired_   DefinedTerm_Text_URL_UnionSlice `json:"competencyRequired,omitempty"`
	EducationalAlignment_ AlignmentObjectSlice            `json:"educationalAlignment,omitempty"`
	EducationalLevel_     DefinedTerm_Text_URL_UnionSlice `json:"educationalLevel,omitempty"`
	EducationalUse_       DefinedTerm_Text_UnionSlice     `json:"educationalUse,omitempty"`
	LearningResourceType_ DefinedTerm_Text_UnionSlice     `json:"learningResourceType,omitempty"`
	Teaches_              DefinedTerm_Text_UnionSlice     `json:"teaches,omitempty"`
}
type learningResourceStruct_ struct {
	learningResourceStruct
}

func (s *learningResourceStruct) Assesses() []DefinedTerm_Text_Union {
	return s.Assesses_
}
func (s *learningResourceStruct) CompetencyRequired() []DefinedTerm_Text_URL_Union {
	return s.CompetencyRequired_
}
func (s *learningResourceStruct) EducationalAlignment() []AlignmentObject {
	return s.EducationalAlignment_
}
func (s *learningResourceStruct) EducationalLevel() []DefinedTerm_Text_URL_Union {
	return s.EducationalLevel_
}
func (s *learningResourceStruct) EducationalUse() []DefinedTerm_Text_Union {
	return s.EducationalUse_
}
func (s *learningResourceStruct) LearningResourceType() []DefinedTerm_Text_Union {
	return s.LearningResourceType_
}
func (s *learningResourceStruct) Teaches() []DefinedTerm_Text_Union {
	return s.Teaches_
}

type LearningResourceSlice []LearningResource

func (s *LearningResourceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LearningResourceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LearningResource)
	}
	return nil
}

var _ LearningResource = &learningResourceStruct{}

// An agent leaves an event / group with participants/friends at a location.\n\nRelated actions:\n\n* [[JoinAction]]: The antonym of LeaveAction.\n* [[UnRegisterAction]]: Unlike UnRegisterAction, LeaveAction implies leaving a group/team of people rather than a service.
type LeaveAction interface {
	// Parents
	InteractAction
	// Accessors
	Event() []Event // Upcoming or past event associated with this place, organization, or action.
}
type leaveActionStruct struct {
	interactActionStruct

	Event_ EventSlice `json:"event,omitempty"`
}

func (s *leaveActionStruct) Event() []Event {
	return s.Event_
}

type LeaveActionSlice []LeaveAction

func (s *LeaveActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LeaveActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LeaveAction)
	}
	return nil
}

var _ LeaveAction = &leaveActionStruct{}

// A list of possible statuses for the legal force of a legislation.
type LegalForceStatus interface {
	// Parents
	StatusEnumeration
}
type legalForceStatusStruct struct {
	statusEnumerationStruct
}
type LegalForceStatusSlice []LegalForceStatus

func (s *LegalForceStatusSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LegalForceStatusSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LegalForceStatus)
	}
	return nil
}

var _ LegalForceStatus = &legalForceStatusStruct{}

// A LegalService is a business that provides legally-oriented services, advice and representation, e.g. law firms.\n\nAs a [[LocalBusiness]] it can be described as a [[provider]] of one or more [[Service]]\(s).
type LegalService interface {
	// Parents
	LocalBusiness
}
type legalServiceStruct struct {
	localBusinessStruct
}
type LegalServiceSlice []LegalService

func (s *LegalServiceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LegalServiceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LegalService)
	}
	return nil
}

var _ LegalService = &legalServiceStruct{}

// A list of possible levels for the legal validity of a legislation.
type LegalValueLevel interface {
	// Parents
	Enumeration
}
type legalValueLevelStruct struct {
	enumerationStruct
}
type LegalValueLevelSlice []LegalValueLevel

func (s *LegalValueLevelSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LegalValueLevelSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LegalValueLevel)
	}
	return nil
}

var _ LegalValueLevel = &legalValueLevelStruct{}

// A legal document such as an act, decree, bill, etc. (enforceable or not) or a component of a legal act (like an article).
type Legislation interface {
	// Parents
	CreativeWork
	// Accessors
	Jurisdiction() []AdministrativeArea_Text_Union            // Indicates a legal jurisdiction, e.g. of some legislation, or where some government service is based.
	LegislationApplies() []Legislation                        // Indicates that this legislation (or part of a legislation) somehow transfers another legislation in a different legislative context. This is an informative link, and it has no legal value. For legally-binding links of transposition, use the <a href="/legislationTransposes">legislationTransposes</a> property. For example an informative consolidated law of a European Union's member state "applies" the consolidated version of the European Directive implemented in it.
	LegislationChanges() []Legislation                        // Another legislation that this legislation changes. This encompasses the notions of amendment, replacement, correction, repeal, or other types of change. This may be a direct change (textual or non-textual amendment) or a consequential or indirect change. The property is to be used to express the existence of a change relationship between two acts rather than the existence of a consolidated version of the text that shows the result of the change. For consolidation relationships, use the <a href="/legislationConsolidates">legislationConsolidates</a> property.
	LegislationConsolidates() []Legislation                   // Indicates another legislation taken into account in this consolidated legislation (which is usually the product of an editorial process that revises the legislation). This property should be used multiple times to refer to both the original version or the previous consolidated version, and to the legislations making the change.
	LegislationDate() []Date                                  // The date of adoption or signature of the legislation. This is the date at which the text is officially aknowledged to be a legislation, even though it might not even be published or in force.
	LegislationDateVersion() []Date                           // The point-in-time at which the provided description of the legislation is valid (e.g. : when looking at the law on the 2016-04-07 (= dateVersion), I get the consolidation of 2015-04-12 of the "National Insurance Contributions Act 2015")
	LegislationIdentifier() []Text_URL_Union                  // An identifier for the legislation. This can be either a string-based identifier, like the CELEX at EU level or the NOR in France, or a web-based, URL/URI identifier, like an ELI (European Legislation Identifier) or an URN-Lex.
	LegislationJurisdiction() []AdministrativeArea_Text_Union // The jurisdiction from which the legislation originates.
	LegislationLegalForce() []LegalForceStatus                // Whether the legislation is currently in force, not in force, or partially in force.
	LegislationPassedBy() []Organization_Person_Union         // The person or organization that originally passed or made the law : typically parliament (for primary legislation) or government (for secondary legislation). This indicates the "legal author" of the law, as opposed to its physical author.
	LegislationResponsible() []Organization_Person_Union      // An individual or organization that has some kind of responsibility for the legislation. Typically the ministry who is/was in charge of elaborating the legislation, or the adressee for potential questions about the legislation once it is published.
	LegislationTransposes() []Legislation                     // Indicates that this legislation (or part of legislation) fulfills the objectives set by another legislation, by passing appropriate implementation measures. Typically, some legislations of European Union's member states or regions transpose European Directives. This indicates a legally binding link between the 2 legislations.
	LegislationType() []CategoryCode_Text_Union               // The type of the legislation. Examples of values are "law", "act", "directive", "decree", "regulation", "statutory instrument", "loi organique", "règlement grand-ducal", etc., depending on the country.
}
type legislationStruct struct {
	creativeWorkStruct

	Jurisdiction_            AdministrativeArea_Text_UnionSlice `json:"jurisdiction,omitempty"`
	LegislationApplies_      LegislationSlice                   `json:"legislationApplies,omitempty"`
	LegislationChanges_      LegislationSlice                   `json:"legislationChanges,omitempty"`
	LegislationConsolidates_ LegislationSlice                   `json:"legislationConsolidates,omitempty"`
	LegislationDate_         DateSlice                          `json:"legislationDate,omitempty"`
	LegislationDateVersion_  DateSlice                          `json:"legislationDateVersion,omitempty"`
	LegislationIdentifier_   Text_URL_UnionSlice                `json:"legislationIdentifier,omitempty"`
	LegislationJurisdiction_ AdministrativeArea_Text_UnionSlice `json:"legislationJurisdiction,omitempty"`
	LegislationLegalForce_   LegalForceStatusSlice              `json:"legislationLegalForce,omitempty"`
	LegislationPassedBy_     Organization_Person_UnionSlice     `json:"legislationPassedBy,omitempty"`
	LegislationResponsible_  Organization_Person_UnionSlice     `json:"legislationResponsible,omitempty"`
	LegislationTransposes_   LegislationSlice                   `json:"legislationTransposes,omitempty"`
	LegislationType_         CategoryCode_Text_UnionSlice       `json:"legislationType,omitempty"`
}

func (s *legislationStruct) Jurisdiction() []AdministrativeArea_Text_Union {
	return s.Jurisdiction_
}
func (s *legislationStruct) LegislationApplies() []Legislation {
	return s.LegislationApplies_
}
func (s *legislationStruct) LegislationChanges() []Legislation {
	return s.LegislationChanges_
}
func (s *legislationStruct) LegislationConsolidates() []Legislation {
	return s.LegislationConsolidates_
}
func (s *legislationStruct) LegislationDate() []Date {
	return s.LegislationDate_
}
func (s *legislationStruct) LegislationDateVersion() []Date {
	return s.LegislationDateVersion_
}
func (s *legislationStruct) LegislationIdentifier() []Text_URL_Union {
	return s.LegislationIdentifier_
}
func (s *legislationStruct) LegislationJurisdiction() []AdministrativeArea_Text_Union {
	return s.LegislationJurisdiction_
}
func (s *legislationStruct) LegislationLegalForce() []LegalForceStatus {
	return s.LegislationLegalForce_
}
func (s *legislationStruct) LegislationPassedBy() []Organization_Person_Union {
	return s.LegislationPassedBy_
}
func (s *legislationStruct) LegislationResponsible() []Organization_Person_Union {
	return s.LegislationResponsible_
}
func (s *legislationStruct) LegislationTransposes() []Legislation {
	return s.LegislationTransposes_
}
func (s *legislationStruct) LegislationType() []CategoryCode_Text_Union {
	return s.LegislationType_
}

type LegislationSlice []Legislation

func (s *LegislationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LegislationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Legislation)
	}
	return nil
}

var _ Legislation = &legislationStruct{}

// A specific object or file containing a Legislation. Note that the same Legislation can be published in multiple files. For example, a digitally signed PDF, a plain PDF and an HTML version.
type LegislationObject interface {
	// Parents
	Legislation
	MediaObject
	// Accessors
	LegislationLegalValue() []LegalValueLevel // The legal value of this legislation file. The same legislation can be written in multiple files with different legal values. Typically a digitally signed PDF have a "stronger" legal value than the HTML file of the same act.
}
type legislationObjectStruct struct {
	legislationStruct
	mediaObjectStruct__

	LegislationLegalValue_ LegalValueLevelSlice `json:"legislationLegalValue,omitempty"`
}

func (s *legislationObjectStruct) implementsAboutPage_CreativeWork_Text_URL_Union() {} // re
func (s *legislationObjectStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
} // re
func (s *legislationObjectStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
} // re
func (s *legislationObjectStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {
}                                                                                            // re
func (s *legislationObjectStruct) implementsCreativeWork_Event_Union()                       {} // re
func (s *legislationObjectStruct) implementsCreativeWork_HowToSection_HowToStep_Text_Union() {} // re
func (s *legislationObjectStruct) implementsCreativeWork_ItemList_Text_Union()               {} // re
func (s *legislationObjectStruct) implementsCreativeWork_Product_URL_Union()                 {} // re
func (s *legislationObjectStruct) implementsCreativeWork_Text_Union()                        {} // re
func (s *legislationObjectStruct) implementsCreativeWork_URL_Union()                         {} // re
func (s *legislationObjectStruct) implementsDataFeedItem_Text_Thing_Union()                  {} // re
func (s *legislationObjectStruct) implementsListItem_Text_Thing_Union()                      {} // re
func (s *legislationObjectStruct) implementsText_Thing_URL_Union()                           {} // re
func (s *legislationObjectStruct) implementsText_Thing_Union()                               {} // re
func (s *legislationObjectStruct) LegislationLegalValue() []LegalValueLevel {
	return s.LegislationLegalValue_
}

type LegislationObjectSlice []LegislationObject

func (s *LegislationObjectSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LegislationObjectSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LegislationObject)
	}
	return nil
}

var _ LegislationObject = &legislationObjectStruct{}

// A legislative building&#x2014;for example, the state capitol.
type LegislativeBuilding interface {
	// Parents
	GovernmentBuilding
}
type legislativeBuildingStruct struct {
	governmentBuildingStruct
}
type LegislativeBuildingSlice []LegislativeBuilding

func (s *LegislativeBuildingSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LegislativeBuildingSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LegislativeBuilding)
	}
	return nil
}

var _ LegislativeBuilding = &legislativeBuildingStruct{}

// The act of providing an object under an agreement that it will be returned at a later date. Reciprocal of BorrowAction.\n\nRelated actions:\n\n* [[BorrowAction]]: Reciprocal of LendAction.
type LendAction interface {
	// Parents
	TransferAction
	// Accessors
	Borrower() []Person // A sub property of participant. The person that borrows the object being lent.
}
type lendActionStruct struct {
	transferActionStruct

	Borrower_ PersonSlice `json:"borrower,omitempty"`
}

func (s *lendActionStruct) Borrower() []Person {
	return s.Borrower_
}

type LendActionSlice []LendAction

func (s *LendActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LendActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LendAction)
	}
	return nil
}

var _ LendAction = &lendActionStruct{}

// A library.
type Library interface {
	// Parents
	LocalBusiness
}
type libraryStruct struct {
	localBusinessStruct
}
type LibrarySlice []Library

func (s *LibrarySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LibrarySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Library)
	}
	return nil
}

var _ Library = &libraryStruct{}

// A [[LibrarySystem]] is a collaborative system amongst several libraries.
type LibrarySystem interface {
	// Parents
	Organization
}
type librarySystemStruct struct {
	organizationStruct
}
type LibrarySystemSlice []LibrarySystem

func (s *LibrarySystemSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LibrarySystemSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LibrarySystem)
	}
	return nil
}

var _ LibrarySystem = &librarySystemStruct{}

// A process of care involving exercise, changes to diet, fitness routines, and other lifestyle changes aimed at improving a health condition.
type LifestyleModification interface {
	// Parents
	MedicalEntity
}
type lifestyleModificationStruct struct {
	medicalEntityStruct
}
type LifestyleModificationSlice []LifestyleModification

func (s *LifestyleModificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LifestyleModificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LifestyleModification)
	}
	return nil
}

var _ LifestyleModification = &lifestyleModificationStruct{}

// A short band of tough, flexible, fibrous connective tissue that functions to connect multiple bones, cartilages, and structurally support joints.
type Ligament interface {
	// Parents
	AnatomicalStructure
}
type ligamentStruct struct {
	anatomicalStructureStruct
}
type LigamentSlice []Ligament

func (s *LigamentSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LigamentSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Ligament)
	}
	return nil
}

var _ Ligament = &ligamentStruct{}

// The act of expressing a positive sentiment about the object. An agent likes an object (a proposition, topic or theme) with participants.
type LikeAction interface {
	// Parents
	ReactAction
}
type likeActionStruct struct {
	reactActionStruct
}
type LikeActionSlice []LikeAction

func (s *LikeActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LikeActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LikeAction)
	}
	return nil
}

var _ LikeAction = &likeActionStruct{}

// A Role that represents a Web link e.g. as expressed via the 'url' property. Its linkRelationship property can indicate URL-based and plain textual link types e.g. those in IANA link registry or others such as 'amphtml'. This structure provides a placeholder where details from HTML's link element can be represented outside of HTML, e.g. in JSON-LD feeds.
type LinkRole interface {
	// Parents
	Role
	// Accessors
	InLanguage() []Language_Text_Union // The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
	LinkRelationship() []Text          // Indicates the relationship type of a Web link.
}
type linkRoleStruct struct {
	roleStruct

	InLanguage_       Language_Text_UnionSlice `json:"inLanguage,omitempty"`
	LinkRelationship_ TextSlice                `json:"linkRelationship,omitempty"`
}

func (s *linkRoleStruct) InLanguage() []Language_Text_Union {
	return s.InLanguage_
}
func (s *linkRoleStruct) LinkRelationship() []Text {
	return s.LinkRelationship_
}

type LinkRoleSlice []LinkRole

func (s *LinkRoleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LinkRoleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LinkRole)
	}
	return nil
}

var _ LinkRole = &linkRoleStruct{}

// A shop that sells alcoholic drinks such as wine, beer, whisky and other spirits.
type LiquorStore interface {
	// Parents
	Store
}
type liquorStoreStruct struct {
	storeStruct
}
type LiquorStoreSlice []LiquorStore

func (s *LiquorStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LiquorStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LiquorStore)
	}
	return nil
}

var _ LiquorStore = &liquorStoreStruct{}

// An list item, e.g. a step in a checklist or how-to description.
type ListItem interface {
	// Parents
	Intangible
	// Unions
	ItemList_ListItem_Text_WebContent_Union
	ListItem_Text_Thing_Union
	// Accessors
	Item() []Thing                  // An entity represented by an entry in a list or data feed (e.g. an 'artist' in a list of 'artists')’.
	NextItem() []ListItem           // A link to the ListItem that follows the current one.
	Position() []Integer_Text_Union // The position of an item in a series or sequence of items.
	PreviousItem() []ListItem       // A link to the ListItem that preceeds the current one.
}
type listItemStruct struct {
	intangibleStruct

	Item_         ThingSlice              `json:"item,omitempty"`
	NextItem_     ListItemSlice           `json:"nextItem,omitempty"`
	Position_     Integer_Text_UnionSlice `json:"position,omitempty"`
	PreviousItem_ ListItemSlice           `json:"previousItem,omitempty"`
}
type listItemStruct_ struct {
	listItemStruct
}

func (s *listItemStruct) implementsItemList_ListItem_Text_WebContent_Union() {}
func (s *listItemStruct) implementsListItem_Text_Thing_Union()               {}

func (s *listItemStruct) Item() []Thing {
	return s.Item_
}
func (s *listItemStruct) NextItem() []ListItem {
	return s.NextItem_
}
func (s *listItemStruct) Position() []Integer_Text_Union {
	return s.Position_
}
func (s *listItemStruct) PreviousItem() []ListItem {
	return s.PreviousItem_
}

type ListItemSlice []ListItem

func (s *ListItemSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ListItemSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ListItem)
	}
	return nil
}

var _ ListItem = &listItemStruct{}

// The act of consuming audio content.
type ListenAction interface {
	// Parents
	ConsumeAction
}
type listenActionStruct struct {
	consumeActionStruct
}
type ListenActionSlice []ListenAction

func (s *ListenActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ListenActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ListenAction)
	}
	return nil
}

var _ ListenAction = &listenActionStruct{}

// Event type: Literary event.
type LiteraryEvent interface {
	// Parents
	Event
}
type literaryEventStruct struct {
	eventStruct
}
type LiteraryEventSlice []LiteraryEvent

func (s *LiteraryEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LiteraryEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LiteraryEvent)
	}
	return nil
}

var _ LiteraryEvent = &literaryEventStruct{}

// A [[LiveBlogPosting]] is a [[BlogPosting]] intended to provide a rolling textual coverage of an ongoing event through continuous updates.
type LiveBlogPosting interface {
	// Parents
	BlogPosting
	// Accessors
	CoverageEndTime() []DateTime   // The time when the live blog will stop covering the Event. Note that coverage may continue after the Event concludes.
	CoverageStartTime() []DateTime // The time when the live blog will begin covering the Event. Note that coverage may begin before the Event's start time. The LiveBlogPosting may also be created before coverage begins.
	LiveBlogUpdate() []BlogPosting // An update to the LiveBlog.
}
type liveBlogPostingStruct struct {
	blogPostingStruct

	CoverageEndTime_   DateTimeSlice    `json:"coverageEndTime,omitempty"`
	CoverageStartTime_ DateTimeSlice    `json:"coverageStartTime,omitempty"`
	LiveBlogUpdate_    BlogPostingSlice `json:"liveBlogUpdate,omitempty"`
}

func (s *liveBlogPostingStruct) CoverageEndTime() []DateTime {
	return s.CoverageEndTime_
}
func (s *liveBlogPostingStruct) CoverageStartTime() []DateTime {
	return s.CoverageStartTime_
}
func (s *liveBlogPostingStruct) LiveBlogUpdate() []BlogPosting {
	return s.LiveBlogUpdate_
}

type LiveBlogPostingSlice []LiveBlogPosting

func (s *LiveBlogPostingSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LiveBlogPostingSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LiveBlogPosting)
	}
	return nil
}

var _ LiveBlogPosting = &liveBlogPostingStruct{}

// A financial product for the loaning of an amount of money, or line of credit, under agreed terms and charges.
type LoanOrCredit interface {
	// Parents
	FinancialProduct
	// Unions
	LoanOrCredit_PaymentMethod_Union
	// Accessors
	Amount() []MonetaryAmount_Number_Union       // The amount of money.
	Currency() []Text                            // The currency in which the monetary amount is expressed.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	GracePeriod() []Duration                     // The period of time after any due date that the borrower has to fulfil its obligations before a default (failure to pay) is deemed to have occurred.
	LoanRepaymentForm() []RepaymentSpecification // A form of paying back money previously borrowed from a lender. Repayment usually takes the form of periodic payments that normally include part principal plus interest in each payment.
	LoanTerm() []QuantitativeValue               // The duration of the loan or credit agreement.
	LoanType() []Text_URL_Union                  // The type of a loan or credit.
	RecourseLoan() []Boolean                     // The only way you get the money back in the event of default is the security. Recourse is where you still have the opportunity to go back to the borrower for the rest of the money.
	RenegotiableLoan() []Boolean                 // Whether the terms for payment of interest can be renegotiated during the life of the loan.
	RequiredCollateral() []Text_Thing_Union      // Assets required to secure loan or credit repayments. It may take form of third party pledge, goods, financial instruments (cash, securities, etc.)
}
type loanOrCreditStruct struct {
	financialProductStruct

	Amount_             MonetaryAmount_Number_UnionSlice `json:"amount,omitempty"`
	Currency_           TextSlice                        `json:"currency,omitempty"`
	GracePeriod_        DurationSlice                    `json:"gracePeriod,omitempty"`
	LoanRepaymentForm_  RepaymentSpecificationSlice      `json:"loanRepaymentForm,omitempty"`
	LoanTerm_           QuantitativeValueSlice           `json:"loanTerm,omitempty"`
	LoanType_           Text_URL_UnionSlice              `json:"loanType,omitempty"`
	RecourseLoan_       BooleanSlice                     `json:"recourseLoan,omitempty"`
	RenegotiableLoan_   BooleanSlice                     `json:"renegotiableLoan,omitempty"`
	RequiredCollateral_ Text_Thing_UnionSlice            `json:"requiredCollateral,omitempty"`
}

func (s *loanOrCreditStruct) implementsLoanOrCredit_PaymentMethod_Union() {}

func (s *loanOrCreditStruct) Amount() []MonetaryAmount_Number_Union {
	return s.Amount_
}
func (s *loanOrCreditStruct) Currency() []Text {
	return s.Currency_
}
func (s *loanOrCreditStruct) GracePeriod() []Duration {
	return s.GracePeriod_
}
func (s *loanOrCreditStruct) LoanRepaymentForm() []RepaymentSpecification {
	return s.LoanRepaymentForm_
}
func (s *loanOrCreditStruct) LoanTerm() []QuantitativeValue {
	return s.LoanTerm_
}
func (s *loanOrCreditStruct) LoanType() []Text_URL_Union {
	return s.LoanType_
}
func (s *loanOrCreditStruct) RecourseLoan() []Boolean {
	return s.RecourseLoan_
}
func (s *loanOrCreditStruct) RenegotiableLoan() []Boolean {
	return s.RenegotiableLoan_
}
func (s *loanOrCreditStruct) RequiredCollateral() []Text_Thing_Union {
	return s.RequiredCollateral_
}

type LoanOrCreditSlice []LoanOrCredit

func (s *LoanOrCreditSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LoanOrCreditSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LoanOrCredit)
	}
	return nil
}

var _ LoanOrCredit = &loanOrCreditStruct{}

// A particular physical business or branch of an organization. Examples of LocalBusiness include a restaurant, a particular branch of a restaurant chain, a branch of a bank, a medical practice, a club, a bowling alley, etc.
type LocalBusiness interface {
	// Parents
	Organization
	Place
	// Unions
	CivicStructure_LocalBusiness_Union
	// Accessors
	BranchOf() []Organization   // The larger organization that this local business is a branch of, if any. Not to be confused with (anatomical)[[branch]].
	CurrenciesAccepted() []Text // The currency accepted.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	OpeningHours() []Text       // The general opening hours for a business. Opening hours can be specified as a weekly time range, starting with days, then times per day. Multiple days can be listed with commas ',' separating each day. Day or time ranges are specified using a hyphen '-'.\n\n* Days are specified using the following two-letter combinations: ```Mo```, ```Tu```, ```We```, ```Th```, ```Fr```, ```Sa```, ```Su```.\n* Times are specified using 24:00 format. For example, 3pm is specified as ```15:00```, 10am as ```10:00```. \n* Here is an example: <code>&lt;time itemprop="openingHours" datetime=&quot;Tu,Th 16:00-20:00&quot;&gt;Tuesdays and Thursdays 4-8pm&lt;/time&gt;</code>.\n* If a business is open 7 days a week, then it can be specified as <code>&lt;time itemprop=&quot;openingHours&quot; datetime=&quot;Mo-Su&quot;&gt;Monday through Sunday, all day&lt;/time&gt;</code>.
	PaymentAccepted() []Text    // Cash, Credit Card, Cryptocurrency, Local Exchange Tradings System, etc.
	PriceRange() []Text         // The price range of the business, for example ```$$$```.
}
type localBusinessStruct struct {
	organizationStruct
	placeStruct_

	BranchOf_           OrganizationSlice `json:"branchOf,omitempty"`
	CurrenciesAccepted_ TextSlice         `json:"currenciesAccepted,omitempty"`
	OpeningHours_       TextSlice         `json:"openingHours,omitempty"`
	PaymentAccepted_    TextSlice         `json:"paymentAccepted,omitempty"`
	PriceRange_         TextSlice         `json:"priceRange,omitempty"`
}

func (s *localBusinessStruct) implementsCivicStructure_LocalBusiness_Union() {}

func (s *localBusinessStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {
}                                                                       // re
func (s *localBusinessStruct) implementsDataFeedItem_Text_Thing_Union() {} // re
func (s *localBusinessStruct) implementsListItem_Text_Thing_Union()     {} // re
func (s *localBusinessStruct) implementsText_Thing_URL_Union()          {} // re
func (s *localBusinessStruct) implementsText_Thing_Union()              {} // re
func (s *localBusinessStruct) BranchOf() []Organization {
	return s.BranchOf_
}
func (s *localBusinessStruct) CurrenciesAccepted() []Text {
	return s.CurrenciesAccepted_
}
func (s *localBusinessStruct) OpeningHours() []Text {
	return s.OpeningHours_
}
func (s *localBusinessStruct) PaymentAccepted() []Text {
	return s.PaymentAccepted_
}
func (s *localBusinessStruct) PriceRange() []Text {
	return s.PriceRange_
}

type LocalBusinessSlice []LocalBusiness

func (s *LocalBusinessSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LocalBusinessSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LocalBusiness)
	}
	return nil
}

var _ LocalBusiness = &localBusinessStruct{}

// Specifies a location feature by providing a structured value representing a feature of an accommodation as a property-value pair of varying degrees of formality.
type LocationFeatureSpecification interface {
	// Parents
	PropertyValue
	// Accessors
	HoursAvailable() []OpeningHoursSpecification // The hours during which this service or contact is available.
	ValidFrom() []Date_DateTime_Union            // The date when the item becomes valid.
	ValidThrough() []Date_DateTime_Union         // The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
}
type locationFeatureSpecificationStruct struct {
	propertyValueStruct

	HoursAvailable_ OpeningHoursSpecificationSlice `json:"hoursAvailable,omitempty"`
	ValidFrom_      Date_DateTime_UnionSlice       `json:"validFrom,omitempty"`
	ValidThrough_   Date_DateTime_UnionSlice       `json:"validThrough,omitempty"`
}

func (s *locationFeatureSpecificationStruct) HoursAvailable() []OpeningHoursSpecification {
	return s.HoursAvailable_
}
func (s *locationFeatureSpecificationStruct) ValidFrom() []Date_DateTime_Union {
	return s.ValidFrom_
}
func (s *locationFeatureSpecificationStruct) ValidThrough() []Date_DateTime_Union {
	return s.ValidThrough_
}

type LocationFeatureSpecificationSlice []LocationFeatureSpecification

func (s *LocationFeatureSpecificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LocationFeatureSpecificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LocationFeatureSpecification)
	}
	return nil
}

var _ LocationFeatureSpecification = &locationFeatureSpecificationStruct{}

// A locksmith.
type Locksmith interface {
	// Parents
	HomeAndConstructionBusiness
}
type locksmithStruct struct {
	homeAndConstructionBusinessStruct
}
type LocksmithSlice []Locksmith

func (s *LocksmithSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LocksmithSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Locksmith)
	}
	return nil
}

var _ Locksmith = &locksmithStruct{}

// A lodging business, such as a motel, hotel, or inn.
type LodgingBusiness interface {
	// Parents
	LocalBusiness
	// Accessors
	AmenityFeature() []LocationFeatureSpecification  // An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs.
	Audience() []Audience                            // An intended audience, i.e. a group for whom something was created.
	AvailableLanguage() []Language_Text_Union        // A language someone may use with or at the item, service or place. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[inLanguage]]
	CheckinTime() []DateTime_Time_Union              // The earliest someone may check into a lodging establishment.
	CheckoutTime() []DateTime_Time_Union             // The latest someone may check out of a lodging establishment.
	NumberOfRooms() []Number_QuantitativeValue_Union /*
	The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.
	Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.
	*/
	PetsAllowed() []Boolean_Text_Union // Indicates whether pets are allowed to enter the accommodation or lodging business. More detailed information can be put in a text value.
	StarRating() []Rating              // An official rating for a lodging business or food establishment, e.g. from national associations or standards bodies. Use the author property to indicate the rating organization, e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).
}
type lodgingBusinessStruct struct {
	localBusinessStruct

	AmenityFeature_    LocationFeatureSpecificationSlice   `json:"amenityFeature,omitempty"`
	Audience_          AudienceSlice                       `json:"audience,omitempty"`
	AvailableLanguage_ Language_Text_UnionSlice            `json:"availableLanguage,omitempty"`
	CheckinTime_       DateTime_Time_UnionSlice            `json:"checkinTime,omitempty"`
	CheckoutTime_      DateTime_Time_UnionSlice            `json:"checkoutTime,omitempty"`
	NumberOfRooms_     Number_QuantitativeValue_UnionSlice `json:"numberOfRooms,omitempty"`
	PetsAllowed_       Boolean_Text_UnionSlice             `json:"petsAllowed,omitempty"`
	StarRating_        RatingSlice                         `json:"starRating,omitempty"`
}

func (s *lodgingBusinessStruct) AmenityFeature() []LocationFeatureSpecification {
	return s.AmenityFeature_
}
func (s *lodgingBusinessStruct) Audience() []Audience {
	return s.Audience_
}
func (s *lodgingBusinessStruct) AvailableLanguage() []Language_Text_Union {
	return s.AvailableLanguage_
}
func (s *lodgingBusinessStruct) CheckinTime() []DateTime_Time_Union {
	return s.CheckinTime_
}
func (s *lodgingBusinessStruct) CheckoutTime() []DateTime_Time_Union {
	return s.CheckoutTime_
}
func (s *lodgingBusinessStruct) NumberOfRooms() []Number_QuantitativeValue_Union {
	return s.NumberOfRooms_
}
func (s *lodgingBusinessStruct) PetsAllowed() []Boolean_Text_Union {
	return s.PetsAllowed_
}
func (s *lodgingBusinessStruct) StarRating() []Rating {
	return s.StarRating_
}

type LodgingBusinessSlice []LodgingBusiness

func (s *LodgingBusinessSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LodgingBusinessSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LodgingBusiness)
	}
	return nil
}

var _ LodgingBusiness = &lodgingBusinessStruct{}

// A reservation for lodging at a hotel, motel, inn, etc.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
type LodgingReservation interface {
	// Parents
	Reservation
	// Accessors
	CheckinTime() []DateTime_Time_Union             // The earliest someone may check into a lodging establishment.
	CheckoutTime() []DateTime_Time_Union            // The latest someone may check out of a lodging establishment.
	LodgingUnitDescription() []Text                 // A full description of the lodging unit.
	LodgingUnitType() []QualitativeValue_Text_Union // Textual description of the unit type (including suite vs. room, size of bed, etc.).
	NumAdults() []Integer_QuantitativeValue_Union   // The number of adults staying in the unit.
	NumChildren() []Integer_QuantitativeValue_Union // The number of children staying in the unit.
}
type lodgingReservationStruct struct {
	reservationStruct

	CheckinTime_            DateTime_Time_UnionSlice             `json:"checkinTime,omitempty"`
	CheckoutTime_           DateTime_Time_UnionSlice             `json:"checkoutTime,omitempty"`
	LodgingUnitDescription_ TextSlice                            `json:"lodgingUnitDescription,omitempty"`
	LodgingUnitType_        QualitativeValue_Text_UnionSlice     `json:"lodgingUnitType,omitempty"`
	NumAdults_              Integer_QuantitativeValue_UnionSlice `json:"numAdults,omitempty"`
	NumChildren_            Integer_QuantitativeValue_UnionSlice `json:"numChildren,omitempty"`
}

func (s *lodgingReservationStruct) CheckinTime() []DateTime_Time_Union {
	return s.CheckinTime_
}
func (s *lodgingReservationStruct) CheckoutTime() []DateTime_Time_Union {
	return s.CheckoutTime_
}
func (s *lodgingReservationStruct) LodgingUnitDescription() []Text {
	return s.LodgingUnitDescription_
}
func (s *lodgingReservationStruct) LodgingUnitType() []QualitativeValue_Text_Union {
	return s.LodgingUnitType_
}
func (s *lodgingReservationStruct) NumAdults() []Integer_QuantitativeValue_Union {
	return s.NumAdults_
}
func (s *lodgingReservationStruct) NumChildren() []Integer_QuantitativeValue_Union {
	return s.NumChildren_
}

type LodgingReservationSlice []LodgingReservation

func (s *LodgingReservationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LodgingReservationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LodgingReservation)
	}
	return nil
}

var _ LodgingReservation = &lodgingReservationStruct{}

// The act of being defeated in a competitive activity.
type LoseAction interface {
	// Parents
	AchieveAction
	// Accessors
	Winner() []Person // A sub property of participant. The winner of the action.
}
type loseActionStruct struct {
	achieveActionStruct

	Winner_ PersonSlice `json:"winner,omitempty"`
}

func (s *loseActionStruct) Winner() []Person {
	return s.Winner_
}

type LoseActionSlice []LoseAction

func (s *LoseActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LoseActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LoseAction)
	}
	return nil
}

var _ LoseAction = &loseActionStruct{}

// A type of blood vessel that specifically carries lymph fluid unidirectionally toward the heart.
type LymphaticVessel interface {
	// Parents
	Vessel
	// Accessors
	OriginatesFrom() []Vessel                                    // The vasculature the lymphatic structure originates, or afferents, from.
	RegionDrained() []AnatomicalStructure_AnatomicalSystem_Union // The anatomical or organ system drained by this vessel; generally refers to a specific part of an organ.
	RunsTo() []Vessel                                            // The vasculature the lymphatic structure runs, or efferents, to.
}
type lymphaticVesselStruct struct {
	vesselStruct

	OriginatesFrom_ VesselSlice                                     `json:"originatesFrom,omitempty"`
	RegionDrained_  AnatomicalStructure_AnatomicalSystem_UnionSlice `json:"regionDrained,omitempty"`
	RunsTo_         VesselSlice                                     `json:"runsTo,omitempty"`
}

func (s *lymphaticVesselStruct) OriginatesFrom() []Vessel {
	return s.OriginatesFrom_
}
func (s *lymphaticVesselStruct) RegionDrained() []AnatomicalStructure_AnatomicalSystem_Union {
	return s.RegionDrained_
}
func (s *lymphaticVesselStruct) RunsTo() []Vessel {
	return s.RunsTo_
}

type LymphaticVesselSlice []LymphaticVessel

func (s *LymphaticVesselSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(LymphaticVesselSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(LymphaticVessel)
	}
	return nil
}

var _ LymphaticVessel = &lymphaticVesselStruct{}

// A book, document, or piece of music written by hand rather than typed or printed.
type Manuscript interface {
	// Parents
	CreativeWork
}
type manuscriptStruct struct {
	creativeWorkStruct
}
type ManuscriptSlice []Manuscript

func (s *ManuscriptSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ManuscriptSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Manuscript)
	}
	return nil
}

var _ Manuscript = &manuscriptStruct{}

// A map.
type Map interface {
	// Parents
	CreativeWork
	// Unions
	Map_URL_Union
	// Accessors
	MapType() []MapCategoryType // Indicates the kind of Map, from the MapCategoryType Enumeration.
}
type mapStruct struct {
	creativeWorkStruct

	MapType_ MapCategoryTypeSlice `json:"mapType,omitempty"`
}

func (s *mapStruct) implementsMap_URL_Union() {}

func (s *mapStruct) MapType() []MapCategoryType {
	return s.MapType_
}

type MapSlice []Map

func (s *MapSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MapSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Map)
	}
	return nil
}

var _ Map = &mapStruct{}

// An enumeration of several kinds of Map.
type MapCategoryType interface {
	// Parents
	Enumeration
}
type mapCategoryTypeStruct struct {
	enumerationStruct
}
type MapCategoryTypeSlice []MapCategoryType

func (s *MapCategoryTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MapCategoryTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MapCategoryType)
	}
	return nil
}

var _ MapCategoryType = &mapCategoryTypeStruct{}

// The act of marrying a person.
type MarryAction interface {
	// Parents
	InteractAction
}
type marryActionStruct struct {
	interactActionStruct
}
type MarryActionSlice []MarryAction

func (s *MarryActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MarryActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MarryAction)
	}
	return nil
}

var _ MarryAction = &marryActionStruct{}

// Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of measure&gt;'. E.g., '7 kg'.
type Mass interface {
	// Parents
	Quantity
}
type massStruct struct {
	quantityStruct
}
type MassSlice []Mass

func (s *MassSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MassSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Mass)
	}
	return nil
}

var _ Mass = &massStruct{}

// A math solver which is capable of solving a subset of mathematical problems.
type MathSolver interface {
	// Parents
	CreativeWork
	// Accessors
	MathExpression() []SolveMathAction_Text_Union // A mathematical expression (e.g. 'x^2-3x=0') that may be solved for a specific variable, simplified, or transformed. This can take many formats, e.g. LaTeX, Ascii-Math, or math as you would write with a keyboard.
}
type mathSolverStruct struct {
	creativeWorkStruct

	MathExpression_ SolveMathAction_Text_UnionSlice `json:"mathExpression,omitempty"`
}

func (s *mathSolverStruct) MathExpression() []SolveMathAction_Text_Union {
	return s.MathExpression_
}

type MathSolverSlice []MathSolver

func (s *MathSolverSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MathSolverSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MathSolver)
	}
	return nil
}

var _ MathSolver = &mathSolverStruct{}

// The maximum dosing schedule considered safe for a drug or supplement as recommended by an authority or by the drug/supplement's manufacturer. Capture the recommending authority in the recognizingAuthority property of MedicalEntity.
type MaximumDoseSchedule interface {
	// Parents
	DoseSchedule
}
type maximumDoseScheduleStruct struct {
	doseScheduleStruct
}
type MaximumDoseScheduleSlice []MaximumDoseSchedule

func (s *MaximumDoseScheduleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MaximumDoseScheduleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MaximumDoseSchedule)
	}
	return nil
}

var _ MaximumDoseSchedule = &maximumDoseScheduleStruct{}

// Enumeration of common measurement types (or dimensions), for example "chest" for a person, "inseam" for pants, "gauge" for screws, or "wheel" for bicycles.
type MeasurementTypeEnumeration interface {
	// Parents
	Enumeration
	// Unions
	DefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union
}
type measurementTypeEnumerationStruct struct {
	enumerationStruct
}

func (s *measurementTypeEnumerationStruct) implementsDefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union() {
}

type MeasurementTypeEnumerationSlice []MeasurementTypeEnumeration

func (s *MeasurementTypeEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MeasurementTypeEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MeasurementTypeEnumeration)
	}
	return nil
}

var _ MeasurementTypeEnumeration = &measurementTypeEnumerationStruct{}

// Web page type: Media gallery page. A mixed-media page that can contains media such as images, videos, and other multimedia.
type MediaGallery interface {
	// Parents
	CollectionPage
}
type mediaGalleryStruct struct {
	collectionPageStruct
}
type MediaGallerySlice []MediaGallery

func (s *MediaGallerySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MediaGallerySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MediaGallery)
	}
	return nil
}

var _ MediaGallery = &mediaGalleryStruct{}

//  Codes for use with the [[mediaAuthenticityCategory]] property, indicating the authenticity of a media object (in the context of how it was published or shared). In general these codes are not mutually exclusive, although some combinations (such as 'original' versus 'transformed', 'edited' and 'staged') would be contradictory if applied in the same [[MediaReview]]. Note that the application of these codes is with regard to a piece of media shared or published in a particular context.
type MediaManipulationRatingEnumeration interface {
	// Parents
	Enumeration
}
type mediaManipulationRatingEnumerationStruct struct {
	enumerationStruct
}
type MediaManipulationRatingEnumerationSlice []MediaManipulationRatingEnumeration

func (s *MediaManipulationRatingEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MediaManipulationRatingEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MediaManipulationRatingEnumeration)
	}
	return nil
}

var _ MediaManipulationRatingEnumeration = &mediaManipulationRatingEnumerationStruct{}

// A media object, such as an image, video, or audio object embedded in a web page or a downloadable dataset i.e. DataDownload. Note that a creative work may have many media objects associated with it on the same web page. For example, a page about a single song (MusicRecording) may have a music video (VideoObject), and a high and low bandwidth audio stream (2 AudioObject's).
type MediaObject interface {
	// Parents
	CreativeWork
	// Unions
	MediaObject_Text_Union
	MediaObject_URL_Union
	MediaObject_URL_WebPage_Union
	// Accessors
	AssociatedArticle() []NewsArticle    // A NewsArticle associated with the Media Object.
	Bitrate() []Text                     // The bitrate of the media object.
	ContentSize() []Text                 // File size in (mega/kilo) bytes.
	ContentUrl() []URL                   // Actual bytes of the media object, for example the image file or video file.
	Duration() []Duration                // The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	EmbedUrl() []URL                     // A URL pointing to a player for a specific video. In general, this is the information in the ```src``` element of an ```embed``` tag and should not be the same as the content of the ```loc``` tag.
	EncodesCreativeWork() []CreativeWork // The CreativeWork encoded by this media object.
	EncodingFormat() []Text_URL_Union    /*
	Media type typically expressed using a MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml) and [MDN reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)) e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc.).

	In cases where a [[CreativeWork]] has several media type representations, [[encoding]] can be used to indicate each [[MediaObject]] alongside particular [[encodingFormat]] information.

	Unregistered or niche encoding and file formats can be indicated instead via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.
	*/
	EndTime() []DateTime_Time_Union                // The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
	Height() []Distance_QuantitativeValue_Union    // The height of the item.
	IneligibleRegion() []GeoShape_Place_Text_Union /*
	The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.\n\nSee also [[eligibleRegion]].

	*/
	InterpretedAsClaim() []Claim                             // Used to indicate a specific claim contained, implied, translated or refined from the content of a [[MediaObject]] or other [[CreativeWork]]. The interpreting party can be indicated using [[claimInterpreter]].
	PlayerType() []Text                                      // Player type required&#x2014;for example, Flash or Silverlight.
	ProductionCompany() []Organization                       // The production company or studio responsible for the item e.g. series, video game, episode etc.
	RegionsAllowed() []Place                                 // The regions where the media is allowed. If not specified, then it's assumed to be allowed everywhere. Specify the countries in [ISO 3166 format](http://en.wikipedia.org/wiki/ISO_3166).
	RequiresSubscription() []Boolean_MediaSubscription_Union // Indicates if use of the media require a subscription  (either paid or free). Allowed values are ```true``` or ```false``` (note that an earlier version had 'yes', 'no').
	Sha256() []Text                                          // The [SHA-2](https://en.wikipedia.org/wiki/SHA-2) SHA256 hash of the content of the item. For example, a zero-length input has value 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'
	StartTime() []DateTime_Time_Union                        // The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
	UploadDate() []Date                                      // Date when this media object was uploaded to this site.
	Width() []Distance_QuantitativeValue_Union               // The width of the item.
}
type mediaObjectStruct struct {
	creativeWorkStruct

	AssociatedArticle_    NewsArticleSlice                      `json:"associatedArticle,omitempty"`
	Bitrate_              TextSlice                             `json:"bitrate,omitempty"`
	ContentSize_          TextSlice                             `json:"contentSize,omitempty"`
	ContentUrl_           URLSlice                              `json:"contentUrl,omitempty"`
	Duration_             DurationSlice                         `json:"duration,omitempty"`
	EmbedUrl_             URLSlice                              `json:"embedUrl,omitempty"`
	EncodesCreativeWork_  CreativeWorkSlice                     `json:"encodesCreativeWork,omitempty"`
	EncodingFormat_       Text_URL_UnionSlice                   `json:"encodingFormat,omitempty"`
	EndTime_              DateTime_Time_UnionSlice              `json:"endTime,omitempty"`
	Height_               Distance_QuantitativeValue_UnionSlice `json:"height,omitempty"`
	IneligibleRegion_     GeoShape_Place_Text_UnionSlice        `json:"ineligibleRegion,omitempty"`
	InterpretedAsClaim_   ClaimSlice                            `json:"interpretedAsClaim,omitempty"`
	PlayerType_           TextSlice                             `json:"playerType,omitempty"`
	ProductionCompany_    OrganizationSlice                     `json:"productionCompany,omitempty"`
	RegionsAllowed_       PlaceSlice                            `json:"regionsAllowed,omitempty"`
	RequiresSubscription_ Boolean_MediaSubscription_UnionSlice  `json:"requiresSubscription,omitempty"`
	Sha256_               TextSlice                             `json:"sha256,omitempty"`
	StartTime_            DateTime_Time_UnionSlice              `json:"startTime,omitempty"`
	UploadDate_           DateSlice                             `json:"uploadDate,omitempty"`
	Width_                Distance_QuantitativeValue_UnionSlice `json:"width,omitempty"`
}
type mediaObjectStruct_ struct {
	mediaObjectStruct
}
type mediaObjectStruct__ struct {
	mediaObjectStruct_
}

func (s *mediaObjectStruct) implementsMediaObject_Text_Union()        {}
func (s *mediaObjectStruct) implementsMediaObject_URL_Union()         {}
func (s *mediaObjectStruct) implementsMediaObject_URL_WebPage_Union() {}

func (s *mediaObjectStruct) AssociatedArticle() []NewsArticle {
	return s.AssociatedArticle_
}
func (s *mediaObjectStruct) Bitrate() []Text {
	return s.Bitrate_
}
func (s *mediaObjectStruct) ContentSize() []Text {
	return s.ContentSize_
}
func (s *mediaObjectStruct) ContentUrl() []URL {
	return s.ContentUrl_
}
func (s *mediaObjectStruct) Duration() []Duration {
	return s.Duration_
}
func (s *mediaObjectStruct) EmbedUrl() []URL {
	return s.EmbedUrl_
}
func (s *mediaObjectStruct) EncodesCreativeWork() []CreativeWork {
	return s.EncodesCreativeWork_
}
func (s *mediaObjectStruct) EncodingFormat() []Text_URL_Union {
	return s.EncodingFormat_
}
func (s *mediaObjectStruct) EndTime() []DateTime_Time_Union {
	return s.EndTime_
}
func (s *mediaObjectStruct) Height() []Distance_QuantitativeValue_Union {
	return s.Height_
}
func (s *mediaObjectStruct) IneligibleRegion() []GeoShape_Place_Text_Union {
	return s.IneligibleRegion_
}
func (s *mediaObjectStruct) InterpretedAsClaim() []Claim {
	return s.InterpretedAsClaim_
}
func (s *mediaObjectStruct) PlayerType() []Text {
	return s.PlayerType_
}
func (s *mediaObjectStruct) ProductionCompany() []Organization {
	return s.ProductionCompany_
}
func (s *mediaObjectStruct) RegionsAllowed() []Place {
	return s.RegionsAllowed_
}
func (s *mediaObjectStruct) RequiresSubscription() []Boolean_MediaSubscription_Union {
	return s.RequiresSubscription_
}
func (s *mediaObjectStruct) Sha256() []Text {
	return s.Sha256_
}
func (s *mediaObjectStruct) StartTime() []DateTime_Time_Union {
	return s.StartTime_
}
func (s *mediaObjectStruct) UploadDate() []Date {
	return s.UploadDate_
}
func (s *mediaObjectStruct) Width() []Distance_QuantitativeValue_Union {
	return s.Width_
}

type MediaObjectSlice []MediaObject

func (s *MediaObjectSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MediaObjectSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MediaObject)
	}
	return nil
}

var _ MediaObject = &mediaObjectStruct{}

/*
A [[MediaReview]] is a more specialized form of Review dedicated to the evaluation of media content online, typically in the context of fact-checking and misinformation.
    For more general reviews of media in the broader sense, use [[UserReview]], [[CriticReview]] or other [[Review]] types. This definition is
    a work in progress. While the [[MediaManipulationRatingEnumeration]] list reflects significant community review amongst fact-checkers and others working
    to combat misinformation, the specific structures for representing media objects, their versions and publication context, is still evolving. Similarly, best practices for the relationship between [[MediaReview]] and [[ClaimReview]] markup has not yet been finalized.
*/
type MediaReview interface {
	// Parents
	Review
	// Accessors
	MediaAuthenticityCategory() []MediaManipulationRatingEnumeration // Indicates a MediaManipulationRatingEnumeration classification of a media object (in the context of how it was published or shared).
	OriginalMediaContextDescription() []Text                         // Describes, in a [[MediaReview]] when dealing with [[DecontextualizedContent]], background information that can contribute to better interpretation of the [[MediaObject]].
	OriginalMediaLink() []MediaObject_URL_WebPage_Union              // Link to the page containing an original version of the content, or directly to an online copy of the original [[MediaObject]] content, e.g. video file.
}
type mediaReviewStruct struct {
	reviewStruct

	MediaAuthenticityCategory_       MediaManipulationRatingEnumerationSlice `json:"mediaAuthenticityCategory,omitempty"`
	OriginalMediaContextDescription_ TextSlice                               `json:"originalMediaContextDescription,omitempty"`
	OriginalMediaLink_               MediaObject_URL_WebPage_UnionSlice      `json:"originalMediaLink,omitempty"`
}

func (s *mediaReviewStruct) MediaAuthenticityCategory() []MediaManipulationRatingEnumeration {
	return s.MediaAuthenticityCategory_
}
func (s *mediaReviewStruct) OriginalMediaContextDescription() []Text {
	return s.OriginalMediaContextDescription_
}
func (s *mediaReviewStruct) OriginalMediaLink() []MediaObject_URL_WebPage_Union {
	return s.OriginalMediaLink_
}

type MediaReviewSlice []MediaReview

func (s *MediaReviewSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MediaReviewSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MediaReview)
	}
	return nil
}

var _ MediaReview = &mediaReviewStruct{}

// Represents an item or group of closely related items treated as a unit for the sake of evaluation in a [[MediaReview]]. Authorship etc. apply to the items rather than to the curation/grouping or reviewing party.
type MediaReviewItem interface {
	// Parents
	CreativeWork
	// Accessors
	MediaItemAppearance() []MediaObject // In the context of a [[MediaReview]], indicates specific media item(s) that are grouped using a [[MediaReviewItem]].
}
type mediaReviewItemStruct struct {
	creativeWorkStruct

	MediaItemAppearance_ MediaObjectSlice `json:"mediaItemAppearance,omitempty"`
}

func (s *mediaReviewItemStruct) MediaItemAppearance() []MediaObject {
	return s.MediaItemAppearance_
}

type MediaReviewItemSlice []MediaReviewItem

func (s *MediaReviewItemSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MediaReviewItemSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MediaReviewItem)
	}
	return nil
}

var _ MediaReviewItem = &mediaReviewItemStruct{}

// A subscription which allows a user to access media including audio, video, books, etc.
type MediaSubscription interface {
	// Parents
	Intangible
	// Unions
	Boolean_MediaSubscription_Union
	// Accessors
	Authenticator() []Organization // The Organization responsible for authenticating the user's subscription. For example, many media apps require a cable/satellite provider to authenticate your subscription before playing media.
	ExpectsAcceptanceOf() []Offer  // An Offer which must be accepted before the user can perform the Action. For example, the user may need to buy a movie before being able to watch it.
}
type mediaSubscriptionStruct struct {
	intangibleStruct

	Authenticator_       OrganizationSlice `json:"authenticator,omitempty"`
	ExpectsAcceptanceOf_ OfferSlice        `json:"expectsAcceptanceOf,omitempty"`
}

func (s *mediaSubscriptionStruct) implementsBoolean_MediaSubscription_Union() {}

func (s *mediaSubscriptionStruct) Authenticator() []Organization {
	return s.Authenticator_
}
func (s *mediaSubscriptionStruct) ExpectsAcceptanceOf() []Offer {
	return s.ExpectsAcceptanceOf_
}

type MediaSubscriptionSlice []MediaSubscription

func (s *MediaSubscriptionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MediaSubscriptionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MediaSubscription)
	}
	return nil
}

var _ MediaSubscription = &mediaSubscriptionStruct{}

// Target audiences for medical web pages.
type MedicalAudience interface {
	// Parents
	Audience
	PeopleAudience
	// Unions
	MedicalAudience_MedicalAudienceType_Union
}
type medicalAudienceStruct struct {
	audienceStruct
	peopleAudienceStruct
}

func (s *medicalAudienceStruct) implementsMedicalAudience_MedicalAudienceType_Union() {}

func (s *medicalAudienceStruct) implementsAudience_ContactPoint_Organization_Person_Union() {} // re
func (s *medicalAudienceStruct) implementsAudience_Organization_Person_Union()              {} // re
func (s *medicalAudienceStruct) implementsAudience_Text_Union()                             {} // re
func (s *medicalAudienceStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {
}                                                                         // re
func (s *medicalAudienceStruct) implementsDataFeedItem_Text_Thing_Union() {} // re
func (s *medicalAudienceStruct) implementsListItem_Text_Thing_Union()     {} // re
func (s *medicalAudienceStruct) implementsText_Thing_URL_Union()          {} // re
func (s *medicalAudienceStruct) implementsText_Thing_Union()              {} // re
type MedicalAudienceSlice []MedicalAudience

func (s *MedicalAudienceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalAudienceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalAudience)
	}
	return nil
}

var _ MedicalAudience = &medicalAudienceStruct{}

// Target audiences types for medical web pages. Enumerated type.
type MedicalAudienceType interface {
	// Parents
	MedicalEnumeration
	// Unions
	MedicalAudience_MedicalAudienceType_Union
}
type medicalAudienceTypeStruct struct {
	medicalEnumerationStruct
}

func (s *medicalAudienceTypeStruct) implementsMedicalAudience_MedicalAudienceType_Union() {}

type MedicalAudienceTypeSlice []MedicalAudienceType

func (s *MedicalAudienceTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalAudienceTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalAudienceType)
	}
	return nil
}

var _ MedicalAudienceType = &medicalAudienceTypeStruct{}

// A particular physical or virtual business of an organization for medical purposes. Examples of MedicalBusiness include differents business run by health professionals.
type MedicalBusiness interface {
	// Parents
	LocalBusiness
}
type medicalBusinessStruct struct {
	localBusinessStruct
}
type medicalBusinessStruct_ struct {
	medicalBusinessStruct
}
type MedicalBusinessSlice []MedicalBusiness

func (s *MedicalBusinessSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalBusinessSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalBusiness)
	}
	return nil
}

var _ MedicalBusiness = &medicalBusinessStruct{}

// The causative agent(s) that are responsible for the pathophysiologic process that eventually results in a medical condition, symptom or sign. In this schema, unless otherwise specified this is meant to be the proximate cause of the medical condition, symptom or sign. The proximate cause is defined as the causative agent that most directly results in the medical condition, symptom or sign. For example, the HIV virus could be considered a cause of AIDS. Or in a diagnostic context, if a patient fell and sustained a hip fracture and two days later sustained a pulmonary embolism which eventuated in a cardiac arrest, the cause of the cardiac arrest (the proximate cause) would be the pulmonary embolism and not the fall. Medical causes can include cardiovascular, chemical, dermatologic, endocrine, environmental, gastroenterologic, genetic, hematologic, gynecologic, iatrogenic, infectious, musculoskeletal, neurologic, nutritional, obstetric, oncologic, otolaryngologic, pharmacologic, psychiatric, pulmonary, renal, rheumatologic, toxic, traumatic, or urologic causes; medical conditions can be causes as well.
type MedicalCause interface {
	// Parents
	MedicalEntity
	// Accessors
	CauseOf() []MedicalEntity // The condition, complication, symptom, sign, etc. caused.
}
type medicalCauseStruct struct {
	medicalEntityStruct

	CauseOf_ MedicalEntitySlice `json:"causeOf,omitempty"`
}

func (s *medicalCauseStruct) CauseOf() []MedicalEntity {
	return s.CauseOf_
}

type MedicalCauseSlice []MedicalCause

func (s *MedicalCauseSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalCauseSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalCause)
	}
	return nil
}

var _ MedicalCause = &medicalCauseStruct{}

// A facility, often associated with a hospital or medical school, that is devoted to the specific diagnosis and/or healthcare. Previously limited to outpatients but with evolution it may be open to inpatients as well.
type MedicalClinic interface {
	// Parents
	MedicalBusiness
	MedicalOrganization
	// Accessors
	AvailableService() []MedicalProcedure_MedicalTest_MedicalTherapy_Union // A medical service available from this provider.
	MedicalSpecialty() []MedicalSpecialty                                  // A medical specialty of the provider.
}
type medicalClinicStruct struct {
	medicalBusinessStruct
	medicalOrganizationStruct

	AvailableService_ MedicalProcedure_MedicalTest_MedicalTherapy_UnionSlice `json:"availableService,omitempty"`
	MedicalSpecialty_ MedicalSpecialtySlice                                  `json:"medicalSpecialty,omitempty"`
}

func (s *medicalClinicStruct) implementsAudience_ContactPoint_Organization_Person_Union() {} // re
func (s *medicalClinicStruct) implementsAudience_Organization_Person_Union()              {} // re
func (s *medicalClinicStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}                                                                  // re
func (s *medicalClinicStruct) implementsBrand_Organization_Union() {} // re
func (s *medicalClinicStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {
}                                                                                    // re
func (s *medicalClinicStruct) implementsContactPoint_Organization_Person_Union()     {} // re
func (s *medicalClinicStruct) implementsDataFeedItem_Text_Thing_Union()              {} // re
func (s *medicalClinicStruct) implementsEducationalOrganization_Organization_Union() {} // re
func (s *medicalClinicStruct) implementsListItem_Text_Thing_Union()                  {} // re
func (s *medicalClinicStruct) implementsOrganization_Person_Union()                  {} // re
func (s *medicalClinicStruct) implementsOrganization_ProgramMembership_Union()       {} // re
func (s *medicalClinicStruct) implementsText_Thing_URL_Union()                       {} // re
func (s *medicalClinicStruct) implementsText_Thing_Union()                           {} // re
func (s *medicalClinicStruct) AvailableService() []MedicalProcedure_MedicalTest_MedicalTherapy_Union {
	return s.AvailableService_
}
func (s *medicalClinicStruct) MedicalSpecialty() []MedicalSpecialty {
	return s.MedicalSpecialty_
}

type MedicalClinicSlice []MedicalClinic

func (s *MedicalClinicSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalClinicSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalClinic)
	}
	return nil
}

var _ MedicalClinic = &medicalClinicStruct{}

// A code for a medical entity.
type MedicalCode interface {
	// Parents
	CategoryCode
	MedicalIntangible
	// Accessors
	CodeValue() []Text    // A short textual code that uniquely identifies the value.
	CodingSystem() []Text // The coding system, e.g. 'ICD-10'.
}
type medicalCodeStruct struct {
	categoryCodeStruct
	medicalIntangibleStruct

	CodeValue_    TextSlice `json:"codeValue,omitempty"`
	CodingSystem_ TextSlice `json:"codingSystem,omitempty"`
}

func (s *medicalCodeStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *medicalCodeStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *medicalCodeStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *medicalCodeStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *medicalCodeStruct) implementsText_Thing_Union()                                           {} // re
func (s *medicalCodeStruct) CodeValue() []Text {
	return s.CodeValue_
}
func (s *medicalCodeStruct) CodingSystem() []Text {
	return s.CodingSystem_
}

type MedicalCodeSlice []MedicalCode

func (s *MedicalCodeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalCodeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalCode)
	}
	return nil
}

var _ MedicalCode = &medicalCodeStruct{}

// Any condition of the human body that affects the normal functioning of a person, whether physically or mentally. Includes diseases, injuries, disabilities, disorders, syndromes, etc.
type MedicalCondition interface {
	// Parents
	MedicalEntity
	// Unions
	MedicalCondition_PropertyValue_URL_Union
	// Accessors
	AssociatedAnatomy() []AnatomicalStructure_AnatomicalSystem_SuperficialAnatomy_Union // The anatomy of the underlying organ system or structures associated with this entity.
	DifferentialDiagnosis() []DDxElement                                                // One of a set of differential diagnoses for the condition. Specifically, a closely-related or competing diagnosis typically considered later in the cognitive process whereby this medical condition is distinguished from others most likely responsible for a similar collection of signs and symptoms to reach the most parsimonious diagnosis or diagnoses in a patient.
	Drug() []Drug                                                                       // Specifying a drug or medicine used in a medication procedure.
	Epidemiology() []Text                                                               // The characteristics of associated patients, such as age, gender, race etc.
	ExpectedPrognosis() []Text                                                          // The likely outcome in either the short term or long term of the medical condition.
	NaturalProgression() []Text                                                         // The expected progression of the condition if it is not treated and allowed to progress naturally.
	Pathophysiology() []Text                                                            // Changes in the normal mechanical, physical, and biochemical functions that are associated with this activity or condition.
	PossibleComplication() []Text                                                       // A possible unexpected and unfavorable evolution of a medical condition. Complications may include worsening of the signs or symptoms of the disease, extension of the condition to other organ systems, etc.
	PossibleTreatment() []MedicalTherapy                                                // A possible treatment to address this condition, sign or symptom.
	PrimaryPrevention() []MedicalTherapy                                                // A preventative therapy used to prevent an initial occurrence of the medical condition, such as vaccination.
	RiskFactor() []MedicalRiskFactor                                                    // A modifiable or non-modifiable factor that increases the risk of a patient contracting this condition, e.g. age,  coexisting condition.
	SecondaryPrevention() []MedicalTherapy                                              // A preventative therapy used to prevent reoccurrence of the medical condition after an initial episode of the condition.
	SignOrSymptom() []MedicalSignOrSymptom                                              // A sign or symptom of this condition. Signs are objective or physically observable manifestations of the medical condition while symptoms are the subjective experience of the medical condition.
	Stage() []MedicalConditionStage                                                     // The stage of the condition, if applicable.
	Status() []EventStatusType_MedicalStudyStatus_Text_Union                            // The status of the study (enumerated).
	TypicalTest() []MedicalTest                                                         // A medical test typically performed given this condition.
}
type medicalConditionStruct struct {
	medicalEntityStruct

	AssociatedAnatomy_     AnatomicalStructure_AnatomicalSystem_SuperficialAnatomy_UnionSlice `json:"associatedAnatomy,omitempty"`
	DifferentialDiagnosis_ DDxElementSlice                                                    `json:"differentialDiagnosis,omitempty"`
	Drug_                  DrugSlice                                                          `json:"drug,omitempty"`
	Epidemiology_          TextSlice                                                          `json:"epidemiology,omitempty"`
	ExpectedPrognosis_     TextSlice                                                          `json:"expectedPrognosis,omitempty"`
	NaturalProgression_    TextSlice                                                          `json:"naturalProgression,omitempty"`
	Pathophysiology_       TextSlice                                                          `json:"pathophysiology,omitempty"`
	PossibleComplication_  TextSlice                                                          `json:"possibleComplication,omitempty"`
	PossibleTreatment_     MedicalTherapySlice                                                `json:"possibleTreatment,omitempty"`
	PrimaryPrevention_     MedicalTherapySlice                                                `json:"primaryPrevention,omitempty"`
	RiskFactor_            MedicalRiskFactorSlice                                             `json:"riskFactor,omitempty"`
	SecondaryPrevention_   MedicalTherapySlice                                                `json:"secondaryPrevention,omitempty"`
	SignOrSymptom_         MedicalSignOrSymptomSlice                                          `json:"signOrSymptom,omitempty"`
	Stage_                 MedicalConditionStageSlice                                         `json:"stage,omitempty"`
	Status_                EventStatusType_MedicalStudyStatus_Text_UnionSlice                 `json:"status,omitempty"`
	TypicalTest_           MedicalTestSlice                                                   `json:"typicalTest,omitempty"`
}

func (s *medicalConditionStruct) implementsMedicalCondition_PropertyValue_URL_Union() {}

func (s *medicalConditionStruct) AssociatedAnatomy() []AnatomicalStructure_AnatomicalSystem_SuperficialAnatomy_Union {
	return s.AssociatedAnatomy_
}
func (s *medicalConditionStruct) DifferentialDiagnosis() []DDxElement {
	return s.DifferentialDiagnosis_
}
func (s *medicalConditionStruct) Drug() []Drug {
	return s.Drug_
}
func (s *medicalConditionStruct) Epidemiology() []Text {
	return s.Epidemiology_
}
func (s *medicalConditionStruct) ExpectedPrognosis() []Text {
	return s.ExpectedPrognosis_
}
func (s *medicalConditionStruct) NaturalProgression() []Text {
	return s.NaturalProgression_
}
func (s *medicalConditionStruct) Pathophysiology() []Text {
	return s.Pathophysiology_
}
func (s *medicalConditionStruct) PossibleComplication() []Text {
	return s.PossibleComplication_
}
func (s *medicalConditionStruct) PossibleTreatment() []MedicalTherapy {
	return s.PossibleTreatment_
}
func (s *medicalConditionStruct) PrimaryPrevention() []MedicalTherapy {
	return s.PrimaryPrevention_
}
func (s *medicalConditionStruct) RiskFactor() []MedicalRiskFactor {
	return s.RiskFactor_
}
func (s *medicalConditionStruct) SecondaryPrevention() []MedicalTherapy {
	return s.SecondaryPrevention_
}
func (s *medicalConditionStruct) SignOrSymptom() []MedicalSignOrSymptom {
	return s.SignOrSymptom_
}
func (s *medicalConditionStruct) Stage() []MedicalConditionStage {
	return s.Stage_
}
func (s *medicalConditionStruct) Status() []EventStatusType_MedicalStudyStatus_Text_Union {
	return s.Status_
}
func (s *medicalConditionStruct) TypicalTest() []MedicalTest {
	return s.TypicalTest_
}

type MedicalConditionSlice []MedicalCondition

func (s *MedicalConditionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalConditionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalCondition)
	}
	return nil
}

var _ MedicalCondition = &medicalConditionStruct{}

// A stage of a medical condition, such as 'Stage IIIa'.
type MedicalConditionStage interface {
	// Parents
	MedicalIntangible
	// Accessors
	StageAsNumber() []Number // The stage represented as a number, e.g. 3.
	SubStageSuffix() []Text  // The substage, e.g. 'a' for Stage IIIa.
}
type medicalConditionStageStruct struct {
	medicalIntangibleStruct

	StageAsNumber_  NumberSlice `json:"stageAsNumber,omitempty"`
	SubStageSuffix_ TextSlice   `json:"subStageSuffix,omitempty"`
}

func (s *medicalConditionStageStruct) StageAsNumber() []Number {
	return s.StageAsNumber_
}
func (s *medicalConditionStageStruct) SubStageSuffix() []Text {
	return s.SubStageSuffix_
}

type MedicalConditionStageSlice []MedicalConditionStage

func (s *MedicalConditionStageSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalConditionStageSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalConditionStage)
	}
	return nil
}

var _ MedicalConditionStage = &medicalConditionStageStruct{}

// A condition or factor that serves as a reason to withhold a certain medical therapy. Contraindications can be absolute (there are no reasonable circumstances for undertaking a course of action) or relative (the patient is at higher risk of complications, but that these risks may be outweighed by other considerations or mitigated by other measures).
type MedicalContraindication interface {
	// Parents
	MedicalEntity
	// Unions
	MedicalContraindication_Text_Union
}
type medicalContraindicationStruct struct {
	medicalEntityStruct
}

func (s *medicalContraindicationStruct) implementsMedicalContraindication_Text_Union() {}

type MedicalContraindicationSlice []MedicalContraindication

func (s *MedicalContraindicationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalContraindicationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalContraindication)
	}
	return nil
}

var _ MedicalContraindication = &medicalContraindicationStruct{}

// Any object used in a medical capacity, such as to diagnose or treat a patient.
type MedicalDevice interface {
	// Parents
	MedicalEntity
	// Accessors
	AdverseOutcome() []MedicalEntity                        // A possible complication and/or side effect of this therapy. If it is known that an adverse outcome is serious (resulting in death, disability, or permanent damage; requiring hospitalization; or is otherwise life-threatening or requires immediate medical attention), tag it as a seriouseAdverseOutcome instead.
	Contraindication() []MedicalContraindication_Text_Union // A contraindication for this therapy.
	PostOp() []Text                                         // A description of the postoperative procedures, care, and/or followups for this device.
	PreOp() []Text                                          // A description of the workup, testing, and other preparations required before implanting this device.
	Procedure() []Text                                      // A description of the procedure involved in setting up, using, and/or installing the device.
	SeriousAdverseOutcome() []MedicalEntity                 // A possible serious complication and/or serious side effect of this therapy. Serious adverse outcomes include those that are life-threatening; result in death, disability, or permanent damage; require hospitalization or prolong existing hospitalization; cause congenital anomalies or birth defects; or jeopardize the patient and may require medical or surgical intervention to prevent one of the outcomes in this definition.
}
type medicalDeviceStruct struct {
	medicalEntityStruct

	AdverseOutcome_        MedicalEntitySlice                      `json:"adverseOutcome,omitempty"`
	Contraindication_      MedicalContraindication_Text_UnionSlice `json:"contraindication,omitempty"`
	PostOp_                TextSlice                               `json:"postOp,omitempty"`
	PreOp_                 TextSlice                               `json:"preOp,omitempty"`
	Procedure_             TextSlice                               `json:"procedure,omitempty"`
	SeriousAdverseOutcome_ MedicalEntitySlice                      `json:"seriousAdverseOutcome,omitempty"`
}

func (s *medicalDeviceStruct) AdverseOutcome() []MedicalEntity {
	return s.AdverseOutcome_
}
func (s *medicalDeviceStruct) Contraindication() []MedicalContraindication_Text_Union {
	return s.Contraindication_
}
func (s *medicalDeviceStruct) PostOp() []Text {
	return s.PostOp_
}
func (s *medicalDeviceStruct) PreOp() []Text {
	return s.PreOp_
}
func (s *medicalDeviceStruct) Procedure() []Text {
	return s.Procedure_
}
func (s *medicalDeviceStruct) SeriousAdverseOutcome() []MedicalEntity {
	return s.SeriousAdverseOutcome_
}

type MedicalDeviceSlice []MedicalDevice

func (s *MedicalDeviceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalDeviceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalDevice)
	}
	return nil
}

var _ MedicalDevice = &medicalDeviceStruct{}

// Categories of medical devices, organized by the purpose or intended use of the device.
type MedicalDevicePurpose interface {
	// Parents
	MedicalEnumeration
}
type medicalDevicePurposeStruct struct {
	medicalEnumerationStruct
}
type MedicalDevicePurposeSlice []MedicalDevicePurpose

func (s *MedicalDevicePurposeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalDevicePurposeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalDevicePurpose)
	}
	return nil
}

var _ MedicalDevicePurpose = &medicalDevicePurposeStruct{}

// The most generic type of entity related to health and the practice of medicine.
type MedicalEntity interface {
	// Parents
	Thing
	// Unions
	BioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union
	MedicalEntity_Text_Union
	// Accessors
	Code() []MedicalCode                                          // A medical code for the entity, taken from a controlled vocabulary or ontology such as ICD-9, DiseasesDB, MeSH, SNOMED-CT, RxNorm, etc.
	Funding() []Grant                                             // A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
	Guideline() []MedicalGuideline                                // A medical guideline related to this entity.
	LegalStatus() []DrugLegalStatus_MedicalEnumeration_Text_Union // The drug or supplement's legal status, including any controlled substance schedules that apply.
	MedicineSystem() []MedicineSystem                             // The system of medicine that includes this MedicalEntity, for example 'evidence-based', 'homeopathic', 'chiropractic', etc.
	RecognizingAuthority() []Organization                         // If applicable, the organization that officially recognizes this entity as part of its endorsed system of medicine.
	RelevantSpecialty() []MedicalSpecialty                        // If applicable, a medical specialty in which this entity is relevant.
	Study() []MedicalStudy                                        // A medical study or trial related to this entity.
}
type medicalEntityStruct struct {
	thingStruct

	Code_                 MedicalCodeSlice                                   `json:"code,omitempty"`
	Funding_              GrantSlice                                         `json:"funding,omitempty"`
	Guideline_            MedicalGuidelineSlice                              `json:"guideline,omitempty"`
	LegalStatus_          DrugLegalStatus_MedicalEnumeration_Text_UnionSlice `json:"legalStatus,omitempty"`
	MedicineSystem_       MedicineSystemSlice                                `json:"medicineSystem,omitempty"`
	RecognizingAuthority_ OrganizationSlice                                  `json:"recognizingAuthority,omitempty"`
	RelevantSpecialty_    MedicalSpecialtySlice                              `json:"relevantSpecialty,omitempty"`
	Study_                MedicalStudySlice                                  `json:"study,omitempty"`
}

func (s *medicalEntityStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}
func (s *medicalEntityStruct) implementsMedicalEntity_Text_Union() {}

func (s *medicalEntityStruct) Code() []MedicalCode {
	return s.Code_
}
func (s *medicalEntityStruct) Funding() []Grant {
	return s.Funding_
}
func (s *medicalEntityStruct) Guideline() []MedicalGuideline {
	return s.Guideline_
}
func (s *medicalEntityStruct) LegalStatus() []DrugLegalStatus_MedicalEnumeration_Text_Union {
	return s.LegalStatus_
}
func (s *medicalEntityStruct) MedicineSystem() []MedicineSystem {
	return s.MedicineSystem_
}
func (s *medicalEntityStruct) RecognizingAuthority() []Organization {
	return s.RecognizingAuthority_
}
func (s *medicalEntityStruct) RelevantSpecialty() []MedicalSpecialty {
	return s.RelevantSpecialty_
}
func (s *medicalEntityStruct) Study() []MedicalStudy {
	return s.Study_
}

type MedicalEntitySlice []MedicalEntity

func (s *MedicalEntitySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalEntitySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalEntity)
	}
	return nil
}

var _ MedicalEntity = &medicalEntityStruct{}

// Enumerations related to health and the practice of medicine: A concept that is used to attribute a quality to another concept, as a qualifier, a collection of items or a listing of all of the elements of a set in medicine practice.
type MedicalEnumeration interface {
	// Parents
	Enumeration
	// Unions
	DrugLegalStatus_MedicalEnumeration_Text_Union
	MedicalEnumeration_Text_Union
}
type medicalEnumerationStruct struct {
	enumerationStruct
}

func (s *medicalEnumerationStruct) implementsDrugLegalStatus_MedicalEnumeration_Text_Union() {}
func (s *medicalEnumerationStruct) implementsMedicalEnumeration_Text_Union()                 {}

type MedicalEnumerationSlice []MedicalEnumeration

func (s *MedicalEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalEnumeration)
	}
	return nil
}

var _ MedicalEnumeration = &medicalEnumerationStruct{}

// Level of evidence for a medical guideline. Enumerated type.
type MedicalEvidenceLevel interface {
	// Parents
	MedicalEnumeration
}
type medicalEvidenceLevelStruct struct {
	medicalEnumerationStruct
}
type MedicalEvidenceLevelSlice []MedicalEvidenceLevel

func (s *MedicalEvidenceLevelSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalEvidenceLevelSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalEvidenceLevel)
	}
	return nil
}

var _ MedicalEvidenceLevel = &medicalEvidenceLevelStruct{}

// Any recommendation made by a standard society (e.g. ACC/AHA) or consensus statement that denotes how to diagnose and treat a particular condition. Note: this type should be used to tag the actual guideline recommendation; if the guideline recommendation occurs in a larger scholarly article, use MedicalScholarlyArticle to tag the overall article, not this type. Note also: the organization making the recommendation should be captured in the recognizingAuthority base property of MedicalEntity.
type MedicalGuideline interface {
	// Parents
	MedicalEntity
	// Accessors
	EvidenceLevel() []MedicalEvidenceLevel // Strength of evidence of the data used to formulate the guideline (enumerated).
	EvidenceOrigin() []Text                // Source of the data used to formulate the guidance, e.g. RCT, consensus opinion, etc.
	GuidelineDate() []Date                 // Date on which this guideline's recommendation was made.
	GuidelineSubject() []MedicalEntity     // The medical conditions, treatments, etc. that are the subject of the guideline.
}
type medicalGuidelineStruct struct {
	medicalEntityStruct

	EvidenceLevel_    MedicalEvidenceLevelSlice `json:"evidenceLevel,omitempty"`
	EvidenceOrigin_   TextSlice                 `json:"evidenceOrigin,omitempty"`
	GuidelineDate_    DateSlice                 `json:"guidelineDate,omitempty"`
	GuidelineSubject_ MedicalEntitySlice        `json:"guidelineSubject,omitempty"`
}

func (s *medicalGuidelineStruct) EvidenceLevel() []MedicalEvidenceLevel {
	return s.EvidenceLevel_
}
func (s *medicalGuidelineStruct) EvidenceOrigin() []Text {
	return s.EvidenceOrigin_
}
func (s *medicalGuidelineStruct) GuidelineDate() []Date {
	return s.GuidelineDate_
}
func (s *medicalGuidelineStruct) GuidelineSubject() []MedicalEntity {
	return s.GuidelineSubject_
}

type MedicalGuidelineSlice []MedicalGuideline

func (s *MedicalGuidelineSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalGuidelineSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalGuideline)
	}
	return nil
}

var _ MedicalGuideline = &medicalGuidelineStruct{}

// A guideline contraindication that designates a process as harmful and where quality of the data supporting the contraindication is sound.
type MedicalGuidelineContraindication interface {
	// Parents
	MedicalGuideline
}
type medicalGuidelineContraindicationStruct struct {
	medicalGuidelineStruct
}
type MedicalGuidelineContraindicationSlice []MedicalGuidelineContraindication

func (s *MedicalGuidelineContraindicationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalGuidelineContraindicationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalGuidelineContraindication)
	}
	return nil
}

var _ MedicalGuidelineContraindication = &medicalGuidelineContraindicationStruct{}

// A guideline recommendation that is regarded as efficacious and where quality of the data supporting the recommendation is sound.
type MedicalGuidelineRecommendation interface {
	// Parents
	MedicalGuideline
	// Accessors
	RecommendationStrength() []Text // Strength of the guideline's recommendation (e.g. 'class I').
}
type medicalGuidelineRecommendationStruct struct {
	medicalGuidelineStruct

	RecommendationStrength_ TextSlice `json:"recommendationStrength,omitempty"`
}

func (s *medicalGuidelineRecommendationStruct) RecommendationStrength() []Text {
	return s.RecommendationStrength_
}

type MedicalGuidelineRecommendationSlice []MedicalGuidelineRecommendation

func (s *MedicalGuidelineRecommendationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalGuidelineRecommendationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalGuidelineRecommendation)
	}
	return nil
}

var _ MedicalGuidelineRecommendation = &medicalGuidelineRecommendationStruct{}

// Any medical imaging modality typically used for diagnostic purposes. Enumerated type.
type MedicalImagingTechnique interface {
	// Parents
	MedicalEnumeration
}
type medicalImagingTechniqueStruct struct {
	medicalEnumerationStruct
}
type MedicalImagingTechniqueSlice []MedicalImagingTechnique

func (s *MedicalImagingTechniqueSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalImagingTechniqueSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalImagingTechnique)
	}
	return nil
}

var _ MedicalImagingTechnique = &medicalImagingTechniqueStruct{}

// A condition or factor that indicates use of a medical therapy, including signs, symptoms, risk factors, anatomical states, etc.
type MedicalIndication interface {
	// Parents
	MedicalEntity
}
type medicalIndicationStruct struct {
	medicalEntityStruct
}
type MedicalIndicationSlice []MedicalIndication

func (s *MedicalIndicationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalIndicationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalIndication)
	}
	return nil
}

var _ MedicalIndication = &medicalIndicationStruct{}

// A utility class that serves as the umbrella for a number of 'intangible' things in the medical space.
type MedicalIntangible interface {
	// Parents
	MedicalEntity
}
type medicalIntangibleStruct struct {
	medicalEntityStruct
}
type MedicalIntangibleSlice []MedicalIntangible

func (s *MedicalIntangibleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalIntangibleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalIntangible)
	}
	return nil
}

var _ MedicalIntangible = &medicalIntangibleStruct{}

// An observational study is a type of medical study that attempts to infer the possible effect of a treatment through observation of a cohort of subjects over a period of time. In an observational study, the assignment of subjects into treatment groups versus control groups is outside the control of the investigator. This is in contrast with controlled studies, such as the randomized controlled trials represented by MedicalTrial, where each subject is randomly assigned to a treatment group or a control group before the start of the treatment.
type MedicalObservationalStudy interface {
	// Parents
	MedicalStudy
	// Accessors
	StudyDesign() []MedicalObservationalStudyDesign // Specifics about the observational study design (enumerated).
}
type medicalObservationalStudyStruct struct {
	medicalStudyStruct

	StudyDesign_ MedicalObservationalStudyDesignSlice `json:"studyDesign,omitempty"`
}

func (s *medicalObservationalStudyStruct) StudyDesign() []MedicalObservationalStudyDesign {
	return s.StudyDesign_
}

type MedicalObservationalStudySlice []MedicalObservationalStudy

func (s *MedicalObservationalStudySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalObservationalStudySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalObservationalStudy)
	}
	return nil
}

var _ MedicalObservationalStudy = &medicalObservationalStudyStruct{}

// Design models for observational medical studies. Enumerated type.
type MedicalObservationalStudyDesign interface {
	// Parents
	MedicalEnumeration
}
type medicalObservationalStudyDesignStruct struct {
	medicalEnumerationStruct
}
type MedicalObservationalStudyDesignSlice []MedicalObservationalStudyDesign

func (s *MedicalObservationalStudyDesignSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalObservationalStudyDesignSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalObservationalStudyDesign)
	}
	return nil
}

var _ MedicalObservationalStudyDesign = &medicalObservationalStudyDesignStruct{}

// A medical organization (physical or not), such as hospital, institution or clinic.
type MedicalOrganization interface {
	// Parents
	Organization
	// Accessors
	HealthPlanNetworkId() []Text          // Name or unique ID of network. (Networks are often reused across different insurance plans).
	IsAcceptingNewPatients() []Boolean    // Whether the provider is accepting new patients.
	MedicalSpecialty() []MedicalSpecialty // A medical specialty of the provider.
}
type medicalOrganizationStruct struct {
	organizationStruct

	HealthPlanNetworkId_    TextSlice             `json:"healthPlanNetworkId,omitempty"`
	IsAcceptingNewPatients_ BooleanSlice          `json:"isAcceptingNewPatients,omitempty"`
	MedicalSpecialty_       MedicalSpecialtySlice `json:"medicalSpecialty,omitempty"`
}
type medicalOrganizationStruct_ struct {
	medicalOrganizationStruct
}
type medicalOrganizationStruct__ struct {
	medicalOrganizationStruct_
}
type medicalOrganizationStruct___ struct {
	medicalOrganizationStruct__
}
type medicalOrganizationStruct____ struct {
	medicalOrganizationStruct___
}

func (s *medicalOrganizationStruct) HealthPlanNetworkId() []Text {
	return s.HealthPlanNetworkId_
}
func (s *medicalOrganizationStruct) IsAcceptingNewPatients() []Boolean {
	return s.IsAcceptingNewPatients_
}
func (s *medicalOrganizationStruct) MedicalSpecialty() []MedicalSpecialty {
	return s.MedicalSpecialty_
}

type MedicalOrganizationSlice []MedicalOrganization

func (s *MedicalOrganizationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalOrganizationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalOrganization)
	}
	return nil
}

var _ MedicalOrganization = &medicalOrganizationStruct{}

// A process of care used in either a diagnostic, therapeutic, preventive or palliative capacity that relies on invasive (surgical), non-invasive, or other techniques.
type MedicalProcedure interface {
	// Parents
	MedicalEntity
	// Unions
	MedicalProcedure_MedicalTest_MedicalTherapy_Union
	// Accessors
	BodyLocation() []Text                                    // Location in the body of the anatomical structure.
	Followup() []Text                                        // Typical or recommended followup care after the procedure is performed.
	HowPerformed() []Text                                    // How the procedure is performed.
	Preparation() []MedicalEntity_Text_Union                 // Typical preparation that a patient must undergo before having the procedure performed.
	ProcedureType() []MedicalProcedureType                   // The type of procedure, for example Surgical, Noninvasive, or Percutaneous.
	Status() []EventStatusType_MedicalStudyStatus_Text_Union // The status of the study (enumerated).
}
type medicalProcedureStruct struct {
	medicalEntityStruct

	BodyLocation_  TextSlice                                          `json:"bodyLocation,omitempty"`
	Followup_      TextSlice                                          `json:"followup,omitempty"`
	HowPerformed_  TextSlice                                          `json:"howPerformed,omitempty"`
	Preparation_   MedicalEntity_Text_UnionSlice                      `json:"preparation,omitempty"`
	ProcedureType_ MedicalProcedureTypeSlice                          `json:"procedureType,omitempty"`
	Status_        EventStatusType_MedicalStudyStatus_Text_UnionSlice `json:"status,omitempty"`
}

func (s *medicalProcedureStruct) implementsMedicalProcedure_MedicalTest_MedicalTherapy_Union() {}

func (s *medicalProcedureStruct) BodyLocation() []Text {
	return s.BodyLocation_
}
func (s *medicalProcedureStruct) Followup() []Text {
	return s.Followup_
}
func (s *medicalProcedureStruct) HowPerformed() []Text {
	return s.HowPerformed_
}
func (s *medicalProcedureStruct) Preparation() []MedicalEntity_Text_Union {
	return s.Preparation_
}
func (s *medicalProcedureStruct) ProcedureType() []MedicalProcedureType {
	return s.ProcedureType_
}
func (s *medicalProcedureStruct) Status() []EventStatusType_MedicalStudyStatus_Text_Union {
	return s.Status_
}

type MedicalProcedureSlice []MedicalProcedure

func (s *MedicalProcedureSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalProcedureSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalProcedure)
	}
	return nil
}

var _ MedicalProcedure = &medicalProcedureStruct{}

// An enumeration that describes different types of medical procedures.
type MedicalProcedureType interface {
	// Parents
	MedicalEnumeration
}
type medicalProcedureTypeStruct struct {
	medicalEnumerationStruct
}
type MedicalProcedureTypeSlice []MedicalProcedureType

func (s *MedicalProcedureTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalProcedureTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalProcedureType)
	}
	return nil
}

var _ MedicalProcedureType = &medicalProcedureTypeStruct{}

// A complex mathematical calculation requiring an online calculator, used to assess prognosis. Note: use the url property of Thing to record any URLs for online calculators.
type MedicalRiskCalculator interface {
	// Parents
	MedicalRiskEstimator
}
type medicalRiskCalculatorStruct struct {
	medicalRiskEstimatorStruct
}
type MedicalRiskCalculatorSlice []MedicalRiskCalculator

func (s *MedicalRiskCalculatorSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalRiskCalculatorSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalRiskCalculator)
	}
	return nil
}

var _ MedicalRiskCalculator = &medicalRiskCalculatorStruct{}

// Any rule set or interactive tool for estimating the risk of developing a complication or condition.
type MedicalRiskEstimator interface {
	// Parents
	MedicalEntity
	// Accessors
	EstimatesRiskOf() []MedicalEntity        // The condition, complication, or symptom whose risk is being estimated.
	IncludedRiskFactor() []MedicalRiskFactor // A modifiable or non-modifiable risk factor included in the calculation, e.g. age, coexisting condition.
}
type medicalRiskEstimatorStruct struct {
	medicalEntityStruct

	EstimatesRiskOf_    MedicalEntitySlice     `json:"estimatesRiskOf,omitempty"`
	IncludedRiskFactor_ MedicalRiskFactorSlice `json:"includedRiskFactor,omitempty"`
}

func (s *medicalRiskEstimatorStruct) EstimatesRiskOf() []MedicalEntity {
	return s.EstimatesRiskOf_
}
func (s *medicalRiskEstimatorStruct) IncludedRiskFactor() []MedicalRiskFactor {
	return s.IncludedRiskFactor_
}

type MedicalRiskEstimatorSlice []MedicalRiskEstimator

func (s *MedicalRiskEstimatorSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalRiskEstimatorSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalRiskEstimator)
	}
	return nil
}

var _ MedicalRiskEstimator = &medicalRiskEstimatorStruct{}

// A risk factor is anything that increases a person's likelihood of developing or contracting a disease, medical condition, or complication.
type MedicalRiskFactor interface {
	// Parents
	MedicalEntity
	// Accessors
	IncreasesRiskOf() []MedicalEntity // The condition, complication, etc. influenced by this factor.
}
type medicalRiskFactorStruct struct {
	medicalEntityStruct

	IncreasesRiskOf_ MedicalEntitySlice `json:"increasesRiskOf,omitempty"`
}

func (s *medicalRiskFactorStruct) IncreasesRiskOf() []MedicalEntity {
	return s.IncreasesRiskOf_
}

type MedicalRiskFactorSlice []MedicalRiskFactor

func (s *MedicalRiskFactorSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalRiskFactorSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalRiskFactor)
	}
	return nil
}

var _ MedicalRiskFactor = &medicalRiskFactorStruct{}

// A simple system that adds up the number of risk factors to yield a score that is associated with prognosis, e.g. CHAD score, TIMI risk score.
type MedicalRiskScore interface {
	// Parents
	MedicalRiskEstimator
	// Accessors
	Algorithm() []Text // The algorithm or rules to follow to compute the score.
}
type medicalRiskScoreStruct struct {
	medicalRiskEstimatorStruct

	Algorithm_ TextSlice `json:"algorithm,omitempty"`
}

func (s *medicalRiskScoreStruct) Algorithm() []Text {
	return s.Algorithm_
}

type MedicalRiskScoreSlice []MedicalRiskScore

func (s *MedicalRiskScoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalRiskScoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalRiskScore)
	}
	return nil
}

var _ MedicalRiskScore = &medicalRiskScoreStruct{}

// A scholarly article in the medical domain.
type MedicalScholarlyArticle interface {
	// Parents
	ScholarlyArticle
	// Accessors
	PublicationType() []Text // The type of the medical article, taken from the US NLM MeSH publication type catalog. See also [MeSH documentation](http://www.nlm.nih.gov/mesh/pubtypes.html).
}
type medicalScholarlyArticleStruct struct {
	scholarlyArticleStruct

	PublicationType_ TextSlice `json:"publicationType,omitempty"`
}

func (s *medicalScholarlyArticleStruct) PublicationType() []Text {
	return s.PublicationType_
}

type MedicalScholarlyArticleSlice []MedicalScholarlyArticle

func (s *MedicalScholarlyArticleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalScholarlyArticleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalScholarlyArticle)
	}
	return nil
}

var _ MedicalScholarlyArticle = &medicalScholarlyArticleStruct{}

// Any physical manifestation of a person's medical condition discoverable by objective diagnostic tests or physical examination.
type MedicalSign interface {
	// Parents
	MedicalSignOrSymptom
	// Accessors
	IdentifyingExam() []PhysicalExam // A physical examination that can identify this sign.
	IdentifyingTest() []MedicalTest  // A diagnostic test that can identify this sign.
}
type medicalSignStruct struct {
	medicalSignOrSymptomStruct

	IdentifyingExam_ PhysicalExamSlice `json:"identifyingExam,omitempty"`
	IdentifyingTest_ MedicalTestSlice  `json:"identifyingTest,omitempty"`
}

func (s *medicalSignStruct) IdentifyingExam() []PhysicalExam {
	return s.IdentifyingExam_
}
func (s *medicalSignStruct) IdentifyingTest() []MedicalTest {
	return s.IdentifyingTest_
}

type MedicalSignSlice []MedicalSign

func (s *MedicalSignSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalSignSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalSign)
	}
	return nil
}

var _ MedicalSign = &medicalSignStruct{}

// Any feature associated or not with a medical condition. In medicine a symptom is generally subjective while a sign is objective.
type MedicalSignOrSymptom interface {
	// Parents
	MedicalCondition
	// Accessors
	PossibleTreatment() []MedicalTherapy // A possible treatment to address this condition, sign or symptom.
}
type medicalSignOrSymptomStruct struct {
	medicalConditionStruct

	PossibleTreatment_ MedicalTherapySlice `json:"possibleTreatment,omitempty"`
}

func (s *medicalSignOrSymptomStruct) PossibleTreatment() []MedicalTherapy {
	return s.PossibleTreatment_
}

type MedicalSignOrSymptomSlice []MedicalSignOrSymptom

func (s *MedicalSignOrSymptomSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalSignOrSymptomSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalSignOrSymptom)
	}
	return nil
}

var _ MedicalSignOrSymptom = &medicalSignOrSymptomStruct{}

// Any specific branch of medical science or practice. Medical specialities include clinical specialties that pertain to particular organ systems and their respective disease states, as well as allied health specialties. Enumerated type.
type MedicalSpecialty interface {
	// Parents
	MedicalEnumeration
	Specialty
}
type medicalSpecialtyStruct struct {
	medicalEnumerationStruct
	specialtyStruct_
}

func (s *medicalSpecialtyStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {
}                                                                             // re
func (s *medicalSpecialtyStruct) implementsClass_Enumeration_Property_Union() {} // re
func (s *medicalSpecialtyStruct) implementsDataFeedItem_Text_Thing_Union()    {} // re
func (s *medicalSpecialtyStruct) implementsDefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union() {
}                                                                      // re
func (s *medicalSpecialtyStruct) implementsListItem_Text_Thing_Union() {} // re
func (s *medicalSpecialtyStruct) implementsText_Thing_URL_Union()      {} // re
func (s *medicalSpecialtyStruct) implementsText_Thing_Union()          {} // re
type MedicalSpecialtySlice []MedicalSpecialty

func (s *MedicalSpecialtySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalSpecialtySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalSpecialty)
	}
	return nil
}

var _ MedicalSpecialty = &medicalSpecialtyStruct{}

// A medical study is an umbrella type covering all kinds of research studies relating to human medicine or health, including observational studies and interventional trials and registries, randomized, controlled or not. When the specific type of study is known, use one of the extensions of this type, such as MedicalTrial or MedicalObservationalStudy. Also, note that this type should be used to mark up data that describes the study itself; to tag an article that publishes the results of a study, use MedicalScholarlyArticle. Note: use the code property of MedicalEntity to store study IDs, e.g. clinicaltrials.gov ID.
type MedicalStudy interface {
	// Parents
	MedicalEntity
	// Accessors
	HealthCondition() []MedicalCondition                     // Specifying the health condition(s) of a patient, medical study, or other target audience.
	Sponsor() []Organization_Person_Union                    // A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
	Status() []EventStatusType_MedicalStudyStatus_Text_Union // The status of the study (enumerated).
	StudyLocation() []AdministrativeArea                     // The location in which the study is taking/took place.
	StudySubject() []MedicalEntity                           // A subject of the study, i.e. one of the medical conditions, therapies, devices, drugs, etc. investigated by the study.
}
type medicalStudyStruct struct {
	medicalEntityStruct

	HealthCondition_ MedicalConditionSlice                              `json:"healthCondition,omitempty"`
	Sponsor_         Organization_Person_UnionSlice                     `json:"sponsor,omitempty"`
	Status_          EventStatusType_MedicalStudyStatus_Text_UnionSlice `json:"status,omitempty"`
	StudyLocation_   AdministrativeAreaSlice                            `json:"studyLocation,omitempty"`
	StudySubject_    MedicalEntitySlice                                 `json:"studySubject,omitempty"`
}

func (s *medicalStudyStruct) HealthCondition() []MedicalCondition {
	return s.HealthCondition_
}
func (s *medicalStudyStruct) Sponsor() []Organization_Person_Union {
	return s.Sponsor_
}
func (s *medicalStudyStruct) Status() []EventStatusType_MedicalStudyStatus_Text_Union {
	return s.Status_
}
func (s *medicalStudyStruct) StudyLocation() []AdministrativeArea {
	return s.StudyLocation_
}
func (s *medicalStudyStruct) StudySubject() []MedicalEntity {
	return s.StudySubject_
}

type MedicalStudySlice []MedicalStudy

func (s *MedicalStudySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalStudySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalStudy)
	}
	return nil
}

var _ MedicalStudy = &medicalStudyStruct{}

// The status of a medical study. Enumerated type.
type MedicalStudyStatus interface {
	// Parents
	MedicalEnumeration
	// Unions
	EventStatusType_MedicalStudyStatus_Text_Union
}
type medicalStudyStatusStruct struct {
	medicalEnumerationStruct
}

func (s *medicalStudyStatusStruct) implementsEventStatusType_MedicalStudyStatus_Text_Union() {}

type MedicalStudyStatusSlice []MedicalStudyStatus

func (s *MedicalStudyStatusSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalStudyStatusSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalStudyStatus)
	}
	return nil
}

var _ MedicalStudyStatus = &medicalStudyStatusStruct{}

// Any complaint sensed and expressed by the patient (therefore defined as subjective)  like stomachache, lower-back pain, or fatigue.
type MedicalSymptom interface {
	// Parents
	MedicalSignOrSymptom
}
type medicalSymptomStruct struct {
	medicalSignOrSymptomStruct
}
type MedicalSymptomSlice []MedicalSymptom

func (s *MedicalSymptomSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalSymptomSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalSymptom)
	}
	return nil
}

var _ MedicalSymptom = &medicalSymptomStruct{}

// Any medical test, typically performed for diagnostic purposes.
type MedicalTest interface {
	// Parents
	MedicalEntity
	// Unions
	MedicalProcedure_MedicalTest_MedicalTherapy_Union
	// Accessors
	AffectedBy() []Drug                           // Drugs that affect the test's results.
	NormalRange() []MedicalEnumeration_Text_Union // Range of acceptable values for a typical patient, when applicable.
	SignDetected() []MedicalSign                  // A sign detected by the test.
	UsedToDiagnose() []MedicalCondition           // A condition the test is used to diagnose.
	UsesDevice() []MedicalDevice                  // Device used to perform the test.
}
type medicalTestStruct struct {
	medicalEntityStruct

	AffectedBy_     DrugSlice                          `json:"affectedBy,omitempty"`
	NormalRange_    MedicalEnumeration_Text_UnionSlice `json:"normalRange,omitempty"`
	SignDetected_   MedicalSignSlice                   `json:"signDetected,omitempty"`
	UsedToDiagnose_ MedicalConditionSlice              `json:"usedToDiagnose,omitempty"`
	UsesDevice_     MedicalDeviceSlice                 `json:"usesDevice,omitempty"`
}

func (s *medicalTestStruct) implementsMedicalProcedure_MedicalTest_MedicalTherapy_Union() {}

func (s *medicalTestStruct) AffectedBy() []Drug {
	return s.AffectedBy_
}
func (s *medicalTestStruct) NormalRange() []MedicalEnumeration_Text_Union {
	return s.NormalRange_
}
func (s *medicalTestStruct) SignDetected() []MedicalSign {
	return s.SignDetected_
}
func (s *medicalTestStruct) UsedToDiagnose() []MedicalCondition {
	return s.UsedToDiagnose_
}
func (s *medicalTestStruct) UsesDevice() []MedicalDevice {
	return s.UsesDevice_
}

type MedicalTestSlice []MedicalTest

func (s *MedicalTestSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalTestSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalTest)
	}
	return nil
}

var _ MedicalTest = &medicalTestStruct{}

// Any collection of tests commonly ordered together.
type MedicalTestPanel interface {
	// Parents
	MedicalTest
	// Accessors
	SubTest() []MedicalTest // A component test of the panel.
}
type medicalTestPanelStruct struct {
	medicalTestStruct

	SubTest_ MedicalTestSlice `json:"subTest,omitempty"`
}

func (s *medicalTestPanelStruct) SubTest() []MedicalTest {
	return s.SubTest_
}

type MedicalTestPanelSlice []MedicalTestPanel

func (s *MedicalTestPanelSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalTestPanelSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalTestPanel)
	}
	return nil
}

var _ MedicalTestPanel = &medicalTestPanelStruct{}

// Any medical intervention designed to prevent, treat, and cure human diseases and medical conditions, including both curative and palliative therapies. Medical therapies are typically processes of care relying upon pharmacotherapy, behavioral therapy, supportive therapy (with fluid or nutrition for example), or detoxification (e.g. hemodialysis) aimed at improving or preventing a health condition.
type MedicalTherapy interface {
	// Parents
	TherapeuticProcedure
	// Unions
	MedicalProcedure_MedicalTest_MedicalTherapy_Union
	// Accessors
	Contraindication() []MedicalContraindication_Text_Union // A contraindication for this therapy.
	DuplicateTherapy() []MedicalTherapy                     // A therapy that duplicates or overlaps this one.
	SeriousAdverseOutcome() []MedicalEntity                 // A possible serious complication and/or serious side effect of this therapy. Serious adverse outcomes include those that are life-threatening; result in death, disability, or permanent damage; require hospitalization or prolong existing hospitalization; cause congenital anomalies or birth defects; or jeopardize the patient and may require medical or surgical intervention to prevent one of the outcomes in this definition.
}
type medicalTherapyStruct struct {
	therapeuticProcedureStruct

	Contraindication_      MedicalContraindication_Text_UnionSlice `json:"contraindication,omitempty"`
	DuplicateTherapy_      MedicalTherapySlice                     `json:"duplicateTherapy,omitempty"`
	SeriousAdverseOutcome_ MedicalEntitySlice                      `json:"seriousAdverseOutcome,omitempty"`
}

func (s *medicalTherapyStruct) implementsMedicalProcedure_MedicalTest_MedicalTherapy_Union() {}

func (s *medicalTherapyStruct) Contraindication() []MedicalContraindication_Text_Union {
	return s.Contraindication_
}
func (s *medicalTherapyStruct) DuplicateTherapy() []MedicalTherapy {
	return s.DuplicateTherapy_
}
func (s *medicalTherapyStruct) SeriousAdverseOutcome() []MedicalEntity {
	return s.SeriousAdverseOutcome_
}

type MedicalTherapySlice []MedicalTherapy

func (s *MedicalTherapySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalTherapySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalTherapy)
	}
	return nil
}

var _ MedicalTherapy = &medicalTherapyStruct{}

// A medical trial is a type of medical study that uses scientific process used to compare the safety and efficacy of medical therapies or medical procedures. In general, medical trials are controlled and subjects are allocated at random to the different treatment and/or control groups.
type MedicalTrial interface {
	// Parents
	MedicalStudy
	// Accessors
	TrialDesign() []MedicalTrialDesign // Specifics about the trial design (enumerated).
}
type medicalTrialStruct struct {
	medicalStudyStruct

	TrialDesign_ MedicalTrialDesignSlice `json:"trialDesign,omitempty"`
}

func (s *medicalTrialStruct) TrialDesign() []MedicalTrialDesign {
	return s.TrialDesign_
}

type MedicalTrialSlice []MedicalTrial

func (s *MedicalTrialSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalTrialSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalTrial)
	}
	return nil
}

var _ MedicalTrial = &medicalTrialStruct{}

// Design models for medical trials. Enumerated type.
type MedicalTrialDesign interface {
	// Parents
	MedicalEnumeration
}
type medicalTrialDesignStruct struct {
	medicalEnumerationStruct
}
type MedicalTrialDesignSlice []MedicalTrialDesign

func (s *MedicalTrialDesignSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalTrialDesignSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalTrialDesign)
	}
	return nil
}

var _ MedicalTrialDesign = &medicalTrialDesignStruct{}

// A web page that provides medical information.
type MedicalWebPage interface {
	// Parents
	WebPage
	// Accessors
	Aspect() []Text                                               // An aspect of medical practice that is considered on the page, such as 'diagnosis', 'treatment', 'causes', 'prognosis', 'etiology', 'epidemiology', etc.
	MedicalAudience() []MedicalAudience_MedicalAudienceType_Union // Medical audience for page.
}
type medicalWebPageStruct struct {
	webPageStruct

	Aspect_          TextSlice                                      `json:"aspect,omitempty"`
	MedicalAudience_ MedicalAudience_MedicalAudienceType_UnionSlice `json:"medicalAudience,omitempty"`
}

func (s *medicalWebPageStruct) Aspect() []Text {
	return s.Aspect_
}
func (s *medicalWebPageStruct) MedicalAudience() []MedicalAudience_MedicalAudienceType_Union {
	return s.MedicalAudience_
}

type MedicalWebPageSlice []MedicalWebPage

func (s *MedicalWebPageSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicalWebPageSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicalWebPage)
	}
	return nil
}

var _ MedicalWebPage = &medicalWebPageStruct{}

// Systems of medical practice.
type MedicineSystem interface {
	// Parents
	MedicalEnumeration
}
type medicineSystemStruct struct {
	medicalEnumerationStruct
}
type MedicineSystemSlice []MedicineSystem

func (s *MedicineSystemSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MedicineSystemSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MedicineSystem)
	}
	return nil
}

var _ MedicineSystem = &medicineSystemStruct{}

/*
A meeting room, conference room, or conference hall is a room provided for singular events such as business conferences and meetings (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Conference_hall">http://en.wikipedia.org/wiki/Conference_hall</a>).
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type MeetingRoom interface {
	// Parents
	Room
}
type meetingRoomStruct struct {
	roomStruct
}
type MeetingRoomSlice []MeetingRoom

func (s *MeetingRoomSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MeetingRoomSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MeetingRoom)
	}
	return nil
}

var _ MeetingRoom = &meetingRoomStruct{}

// A men's clothing store.
type MensClothingStore interface {
	// Parents
	Store
}
type mensClothingStoreStruct struct {
	storeStruct
}
type MensClothingStoreSlice []MensClothingStore

func (s *MensClothingStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MensClothingStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MensClothingStore)
	}
	return nil
}

var _ MensClothingStore = &mensClothingStoreStruct{}

// A structured representation of food or drink items available from a FoodEstablishment.
type Menu interface {
	// Parents
	CreativeWork
	// Unions
	Menu_Text_URL_Union
	// Accessors
	HasMenuItem() []MenuItem       // A food or drink item contained in a menu or menu section.
	HasMenuSection() []MenuSection // A subgrouping of the menu (by dishes, course, serving time period, etc.).
}
type menuStruct struct {
	creativeWorkStruct

	HasMenuItem_    MenuItemSlice    `json:"hasMenuItem,omitempty"`
	HasMenuSection_ MenuSectionSlice `json:"hasMenuSection,omitempty"`
}

func (s *menuStruct) implementsMenu_Text_URL_Union() {}

func (s *menuStruct) HasMenuItem() []MenuItem {
	return s.HasMenuItem_
}
func (s *menuStruct) HasMenuSection() []MenuSection {
	return s.HasMenuSection_
}

type MenuSlice []Menu

func (s *MenuSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MenuSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Menu)
	}
	return nil
}

var _ Menu = &menuStruct{}

// A food or drink item listed in a menu or menu section.
type MenuItem interface {
	// Parents
	Intangible
	// Unions
	AggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union
	MenuItem_MenuSection_Union
	// Accessors
	MenuAddOn() []MenuItem_MenuSection_Union // Additional menu item(s) such as a side dish of salad or side order of fries that can be added to this menu item. Additionally it can be a menu section containing allowed add-on menu items for this menu item.
	Nutrition() []NutritionInformation       // Nutrition information about the recipe or menu item.
	Offers() []Demand_Offer_Union            /*
	An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.

	*/
	SuitableForDiet() []RestrictedDiet // Indicates a dietary restriction or guideline for which this recipe or menu item is suitable, e.g. diabetic, halal etc.
}
type menuItemStruct struct {
	intangibleStruct

	MenuAddOn_       MenuItem_MenuSection_UnionSlice `json:"menuAddOn,omitempty"`
	Nutrition_       NutritionInformationSlice       `json:"nutrition,omitempty"`
	Offers_          Demand_Offer_UnionSlice         `json:"offers,omitempty"`
	SuitableForDiet_ RestrictedDietSlice             `json:"suitableForDiet,omitempty"`
}

func (s *menuItemStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
}
func (s *menuItemStruct) implementsMenuItem_MenuSection_Union() {}

func (s *menuItemStruct) MenuAddOn() []MenuItem_MenuSection_Union {
	return s.MenuAddOn_
}
func (s *menuItemStruct) Nutrition() []NutritionInformation {
	return s.Nutrition_
}
func (s *menuItemStruct) Offers() []Demand_Offer_Union {
	return s.Offers_
}
func (s *menuItemStruct) SuitableForDiet() []RestrictedDiet {
	return s.SuitableForDiet_
}

type MenuItemSlice []MenuItem

func (s *MenuItemSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MenuItemSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MenuItem)
	}
	return nil
}

var _ MenuItem = &menuItemStruct{}

// A sub-grouping of food or drink items in a menu. E.g. courses (such as 'Dinner', 'Breakfast', etc.), specific type of dishes (such as 'Meat', 'Vegan', 'Drinks', etc.), or some other classification made by the menu provider.
type MenuSection interface {
	// Parents
	CreativeWork
	// Unions
	MenuItem_MenuSection_Union
	// Accessors
	HasMenuItem() []MenuItem       // A food or drink item contained in a menu or menu section.
	HasMenuSection() []MenuSection // A subgrouping of the menu (by dishes, course, serving time period, etc.).
}
type menuSectionStruct struct {
	creativeWorkStruct

	HasMenuItem_    MenuItemSlice    `json:"hasMenuItem,omitempty"`
	HasMenuSection_ MenuSectionSlice `json:"hasMenuSection,omitempty"`
}

func (s *menuSectionStruct) implementsMenuItem_MenuSection_Union() {}

func (s *menuSectionStruct) HasMenuItem() []MenuItem {
	return s.HasMenuItem_
}
func (s *menuSectionStruct) HasMenuSection() []MenuSection {
	return s.HasMenuSection_
}

type MenuSectionSlice []MenuSection

func (s *MenuSectionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MenuSectionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MenuSection)
	}
	return nil
}

var _ MenuSection = &menuSectionStruct{}

// Enumerates several kinds of product return policies.
type MerchantReturnEnumeration interface {
	// Parents
	Enumeration
}
type merchantReturnEnumerationStruct struct {
	enumerationStruct
}
type MerchantReturnEnumerationSlice []MerchantReturnEnumeration

func (s *MerchantReturnEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MerchantReturnEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MerchantReturnEnumeration)
	}
	return nil
}

var _ MerchantReturnEnumeration = &merchantReturnEnumerationStruct{}

// A MerchantReturnPolicy provides information about product return policies associated with an [[Organization]], [[Product]], or [[Offer]].
type MerchantReturnPolicy interface {
	// Parents
	Intangible
	// Accessors
	AdditionalProperty() []PropertyValue /*
	A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.\n\nNote: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
	*/
	ApplicableCountry() []Country_Text_Union                              // A country where a particular merchant return policy applies to, for example the two-letter ISO 3166-1 alpha-2 country code.
	CustomerRemorseReturnFees() []ReturnFeesEnumeration                   // The type of return fees if the product is returned due to customer remorse.
	CustomerRemorseReturnLabelSource() []ReturnLabelSourceEnumeration     // The method (from an enumeration) by which the customer obtains a return shipping label for a product returned due to customer remorse.
	CustomerRemorseReturnShippingFeesAmount() []MonetaryAmount            // The amount of shipping costs if a product is returned due to customer remorse. Applicable when property [[customerRemorseReturnFees]] equals [[ReturnShippingFees]].
	InStoreReturnsOffered() []Boolean                                     // Are in-store returns offered? (for more advanced return methods use the [[returnMethod]] property)
	ItemCondition() []OfferItemCondition                                  // A predefined value from OfferItemCondition specifying the condition of the product or service, or the products or services included in the offer. Also used for product return policies to specify the condition of products accepted for returns.
	ItemDefectReturnFees() []ReturnFeesEnumeration                        // The type of return fees for returns of defect products.
	ItemDefectReturnLabelSource() []ReturnLabelSourceEnumeration          // The method (from an enumeration) by which the customer obtains a return shipping label for a defect product.
	ItemDefectReturnShippingFeesAmount() []MonetaryAmount                 // Amount of shipping costs for defect product returns. Applicable when property [[itemDefectReturnFees]] equals [[ReturnShippingFees]].
	MerchantReturnDays() []Date_DateTime_Integer_Union                    // Specifies either a fixed return date or the number of days (from the delivery date) that a product can be returned. Used when the [[returnPolicyCategory]] property is specified as [[MerchantReturnFiniteReturnWindow]].
	MerchantReturnLink() []URL                                            // Specifies a Web page or service by URL, for product returns.
	RefundType() []RefundTypeEnumeration                                  // A refund type, from an enumerated list.
	RestockingFee() []MonetaryAmount_Number_Union                         // Use [[MonetaryAmount]] to specify a fixed restocking fee for product returns, or use [[Number]] to specify a percentage of the product price paid by the customer.
	ReturnFees() []ReturnFeesEnumeration                                  // The type of return fees for purchased products (for any return reason)
	ReturnLabelSource() []ReturnLabelSourceEnumeration                    // The method (from an enumeration) by which the customer obtains a return shipping label for a product returned for any reason.
	ReturnMethod() []ReturnMethodEnumeration                              // The type of return method offered, specified from an enumeration.
	ReturnPolicyCategory() []MerchantReturnEnumeration                    // Specifies an applicable return policy (from an enumeration).
	ReturnPolicyCountry() []Country_Text_Union                            // The country where the product has to be sent to for returns, for example "Ireland" using the [[name]] property of [[Country]]. You can also provide the two-letter [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1). Note that this can be different from the country where the product was originally shipped from or sent too.
	ReturnPolicySeasonalOverride() []MerchantReturnPolicySeasonalOverride // Seasonal override of a return policy.
	ReturnShippingFeesAmount() []MonetaryAmount                           // Amount of shipping costs for product returns (for any reason). Applicable when property [[returnFees]] equals [[ReturnShippingFees]].
}
type merchantReturnPolicyStruct struct {
	intangibleStruct

	AdditionalProperty_                      PropertyValueSlice                        `json:"additionalProperty,omitempty"`
	ApplicableCountry_                       Country_Text_UnionSlice                   `json:"applicableCountry,omitempty"`
	CustomerRemorseReturnFees_               ReturnFeesEnumerationSlice                `json:"customerRemorseReturnFees,omitempty"`
	CustomerRemorseReturnLabelSource_        ReturnLabelSourceEnumerationSlice         `json:"customerRemorseReturnLabelSource,omitempty"`
	CustomerRemorseReturnShippingFeesAmount_ MonetaryAmountSlice                       `json:"customerRemorseReturnShippingFeesAmount,omitempty"`
	InStoreReturnsOffered_                   BooleanSlice                              `json:"inStoreReturnsOffered,omitempty"`
	ItemCondition_                           OfferItemConditionSlice                   `json:"itemCondition,omitempty"`
	ItemDefectReturnFees_                    ReturnFeesEnumerationSlice                `json:"itemDefectReturnFees,omitempty"`
	ItemDefectReturnLabelSource_             ReturnLabelSourceEnumerationSlice         `json:"itemDefectReturnLabelSource,omitempty"`
	ItemDefectReturnShippingFeesAmount_      MonetaryAmountSlice                       `json:"itemDefectReturnShippingFeesAmount,omitempty"`
	MerchantReturnDays_                      Date_DateTime_Integer_UnionSlice          `json:"merchantReturnDays,omitempty"`
	MerchantReturnLink_                      URLSlice                                  `json:"merchantReturnLink,omitempty"`
	RefundType_                              RefundTypeEnumerationSlice                `json:"refundType,omitempty"`
	RestockingFee_                           MonetaryAmount_Number_UnionSlice          `json:"restockingFee,omitempty"`
	ReturnFees_                              ReturnFeesEnumerationSlice                `json:"returnFees,omitempty"`
	ReturnLabelSource_                       ReturnLabelSourceEnumerationSlice         `json:"returnLabelSource,omitempty"`
	ReturnMethod_                            ReturnMethodEnumerationSlice              `json:"returnMethod,omitempty"`
	ReturnPolicyCategory_                    MerchantReturnEnumerationSlice            `json:"returnPolicyCategory,omitempty"`
	ReturnPolicyCountry_                     Country_Text_UnionSlice                   `json:"returnPolicyCountry,omitempty"`
	ReturnPolicySeasonalOverride_            MerchantReturnPolicySeasonalOverrideSlice `json:"returnPolicySeasonalOverride,omitempty"`
	ReturnShippingFeesAmount_                MonetaryAmountSlice                       `json:"returnShippingFeesAmount,omitempty"`
}

func (s *merchantReturnPolicyStruct) AdditionalProperty() []PropertyValue {
	return s.AdditionalProperty_
}
func (s *merchantReturnPolicyStruct) ApplicableCountry() []Country_Text_Union {
	return s.ApplicableCountry_
}
func (s *merchantReturnPolicyStruct) CustomerRemorseReturnFees() []ReturnFeesEnumeration {
	return s.CustomerRemorseReturnFees_
}
func (s *merchantReturnPolicyStruct) CustomerRemorseReturnLabelSource() []ReturnLabelSourceEnumeration {
	return s.CustomerRemorseReturnLabelSource_
}
func (s *merchantReturnPolicyStruct) CustomerRemorseReturnShippingFeesAmount() []MonetaryAmount {
	return s.CustomerRemorseReturnShippingFeesAmount_
}
func (s *merchantReturnPolicyStruct) InStoreReturnsOffered() []Boolean {
	return s.InStoreReturnsOffered_
}
func (s *merchantReturnPolicyStruct) ItemCondition() []OfferItemCondition {
	return s.ItemCondition_
}
func (s *merchantReturnPolicyStruct) ItemDefectReturnFees() []ReturnFeesEnumeration {
	return s.ItemDefectReturnFees_
}
func (s *merchantReturnPolicyStruct) ItemDefectReturnLabelSource() []ReturnLabelSourceEnumeration {
	return s.ItemDefectReturnLabelSource_
}
func (s *merchantReturnPolicyStruct) ItemDefectReturnShippingFeesAmount() []MonetaryAmount {
	return s.ItemDefectReturnShippingFeesAmount_
}
func (s *merchantReturnPolicyStruct) MerchantReturnDays() []Date_DateTime_Integer_Union {
	return s.MerchantReturnDays_
}
func (s *merchantReturnPolicyStruct) MerchantReturnLink() []URL {
	return s.MerchantReturnLink_
}
func (s *merchantReturnPolicyStruct) RefundType() []RefundTypeEnumeration {
	return s.RefundType_
}
func (s *merchantReturnPolicyStruct) RestockingFee() []MonetaryAmount_Number_Union {
	return s.RestockingFee_
}
func (s *merchantReturnPolicyStruct) ReturnFees() []ReturnFeesEnumeration {
	return s.ReturnFees_
}
func (s *merchantReturnPolicyStruct) ReturnLabelSource() []ReturnLabelSourceEnumeration {
	return s.ReturnLabelSource_
}
func (s *merchantReturnPolicyStruct) ReturnMethod() []ReturnMethodEnumeration {
	return s.ReturnMethod_
}
func (s *merchantReturnPolicyStruct) ReturnPolicyCategory() []MerchantReturnEnumeration {
	return s.ReturnPolicyCategory_
}
func (s *merchantReturnPolicyStruct) ReturnPolicyCountry() []Country_Text_Union {
	return s.ReturnPolicyCountry_
}
func (s *merchantReturnPolicyStruct) ReturnPolicySeasonalOverride() []MerchantReturnPolicySeasonalOverride {
	return s.ReturnPolicySeasonalOverride_
}
func (s *merchantReturnPolicyStruct) ReturnShippingFeesAmount() []MonetaryAmount {
	return s.ReturnShippingFeesAmount_
}

type MerchantReturnPolicySlice []MerchantReturnPolicy

func (s *MerchantReturnPolicySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MerchantReturnPolicySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MerchantReturnPolicy)
	}
	return nil
}

var _ MerchantReturnPolicy = &merchantReturnPolicyStruct{}

// A seasonal override of a return policy, for example used for holidays.
type MerchantReturnPolicySeasonalOverride interface {
	// Parents
	Intangible
	// Accessors
	EndDate() []Date_DateTime_Union                    // The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	MerchantReturnDays() []Date_DateTime_Integer_Union // Specifies either a fixed return date or the number of days (from the delivery date) that a product can be returned. Used when the [[returnPolicyCategory]] property is specified as [[MerchantReturnFiniteReturnWindow]].
	ReturnPolicyCategory() []MerchantReturnEnumeration // Specifies an applicable return policy (from an enumeration).
	StartDate() []Date_DateTime_Union                  // The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
}
type merchantReturnPolicySeasonalOverrideStruct struct {
	intangibleStruct

	EndDate_              Date_DateTime_UnionSlice         `json:"endDate,omitempty"`
	MerchantReturnDays_   Date_DateTime_Integer_UnionSlice `json:"merchantReturnDays,omitempty"`
	ReturnPolicyCategory_ MerchantReturnEnumerationSlice   `json:"returnPolicyCategory,omitempty"`
	StartDate_            Date_DateTime_UnionSlice         `json:"startDate,omitempty"`
}

func (s *merchantReturnPolicySeasonalOverrideStruct) EndDate() []Date_DateTime_Union {
	return s.EndDate_
}
func (s *merchantReturnPolicySeasonalOverrideStruct) MerchantReturnDays() []Date_DateTime_Integer_Union {
	return s.MerchantReturnDays_
}
func (s *merchantReturnPolicySeasonalOverrideStruct) ReturnPolicyCategory() []MerchantReturnEnumeration {
	return s.ReturnPolicyCategory_
}
func (s *merchantReturnPolicySeasonalOverrideStruct) StartDate() []Date_DateTime_Union {
	return s.StartDate_
}

type MerchantReturnPolicySeasonalOverrideSlice []MerchantReturnPolicySeasonalOverride

func (s *MerchantReturnPolicySeasonalOverrideSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MerchantReturnPolicySeasonalOverrideSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MerchantReturnPolicySeasonalOverride)
	}
	return nil
}

var _ MerchantReturnPolicySeasonalOverride = &merchantReturnPolicySeasonalOverrideStruct{}

// A single message from a sender to one or more organizations or people.
type Message interface {
	// Parents
	CreativeWork
	// Accessors
	BccRecipient() []ContactPoint_Organization_Person_Union         // A sub property of recipient. The recipient blind copied on a message.
	CcRecipient() []ContactPoint_Organization_Person_Union          // A sub property of recipient. The recipient copied on a message.
	DateRead() []Date_DateTime_Union                                // The date/time at which the message has been read by the recipient if a single recipient exists.
	DateReceived() []DateTime                                       // The date/time the message was received if a single recipient exists.
	DateSent() []DateTime                                           // The date/time at which the message was sent.
	MessageAttachment() []CreativeWork                              // A CreativeWork attached to the message.
	Recipient() []Audience_ContactPoint_Organization_Person_Union   // A sub property of participant. The participant who is at the receiving end of the action.
	Sender() []Audience_Organization_Person_Union                   // A sub property of participant. The participant who is at the sending end of the action.
	ToRecipient() []Audience_ContactPoint_Organization_Person_Union // A sub property of recipient. The recipient who was directly sent the message.
}
type messageStruct struct {
	creativeWorkStruct

	BccRecipient_      ContactPoint_Organization_Person_UnionSlice          `json:"bccRecipient,omitempty"`
	CcRecipient_       ContactPoint_Organization_Person_UnionSlice          `json:"ccRecipient,omitempty"`
	DateRead_          Date_DateTime_UnionSlice                             `json:"dateRead,omitempty"`
	DateReceived_      DateTimeSlice                                        `json:"dateReceived,omitempty"`
	DateSent_          DateTimeSlice                                        `json:"dateSent,omitempty"`
	MessageAttachment_ CreativeWorkSlice                                    `json:"messageAttachment,omitempty"`
	Recipient_         Audience_ContactPoint_Organization_Person_UnionSlice `json:"recipient,omitempty"`
	Sender_            Audience_Organization_Person_UnionSlice              `json:"sender,omitempty"`
	ToRecipient_       Audience_ContactPoint_Organization_Person_UnionSlice `json:"toRecipient,omitempty"`
}

func (s *messageStruct) BccRecipient() []ContactPoint_Organization_Person_Union {
	return s.BccRecipient_
}
func (s *messageStruct) CcRecipient() []ContactPoint_Organization_Person_Union {
	return s.CcRecipient_
}
func (s *messageStruct) DateRead() []Date_DateTime_Union {
	return s.DateRead_
}
func (s *messageStruct) DateReceived() []DateTime {
	return s.DateReceived_
}
func (s *messageStruct) DateSent() []DateTime {
	return s.DateSent_
}
func (s *messageStruct) MessageAttachment() []CreativeWork {
	return s.MessageAttachment_
}
func (s *messageStruct) Recipient() []Audience_ContactPoint_Organization_Person_Union {
	return s.Recipient_
}
func (s *messageStruct) Sender() []Audience_Organization_Person_Union {
	return s.Sender_
}
func (s *messageStruct) ToRecipient() []Audience_ContactPoint_Organization_Person_Union {
	return s.ToRecipient_
}

type MessageSlice []Message

func (s *MessageSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MessageSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Message)
	}
	return nil
}

var _ Message = &messageStruct{}

// A middle school (typically for children aged around 11-14, although this varies somewhat).
type MiddleSchool interface {
	// Parents
	EducationalOrganization
}
type middleSchoolStruct struct {
	educationalOrganizationStruct
}
type MiddleSchoolSlice []MiddleSchool

func (s *MiddleSchoolSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MiddleSchoolSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MiddleSchool)
	}
	return nil
}

var _ MiddleSchool = &middleSchoolStruct{}

// A software application designed specifically to work well on a mobile device such as a telephone.
type MobileApplication interface {
	// Parents
	SoftwareApplication
	// Accessors
	CarrierRequirements() []Text // Specifies specific carrier(s) requirements for the application (e.g. an application may only work on a specific carrier network).
}
type mobileApplicationStruct struct {
	softwareApplicationStruct

	CarrierRequirements_ TextSlice `json:"carrierRequirements,omitempty"`
}

func (s *mobileApplicationStruct) CarrierRequirements() []Text {
	return s.CarrierRequirements_
}

type MobileApplicationSlice []MobileApplication

func (s *MobileApplicationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MobileApplicationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MobileApplication)
	}
	return nil
}

var _ MobileApplication = &mobileApplicationStruct{}

// A store that sells mobile phones and related accessories.
type MobilePhoneStore interface {
	// Parents
	Store
}
type mobilePhoneStoreStruct struct {
	storeStruct
}
type MobilePhoneStoreSlice []MobilePhoneStore

func (s *MobilePhoneStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MobilePhoneStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MobilePhoneStore)
	}
	return nil
}

var _ MobilePhoneStore = &mobilePhoneStoreStruct{}

// Any constitutionally or isotopically distinct atom, molecule, ion, ion pair, radical, radical ion, complex, conformer etc., identifiable as a separately distinguishable entity.
type MolecularEntity interface {
	// Parents
	BioChemEntity
	// Accessors
	ChemicalRole() []DefinedTerm                                 // A role played by the BioChemEntity within a chemical context.
	InChI() []Text                                               // Non-proprietary identifier for molecular entity that can be used in printed and electronic data sources thus enabling easier linking of diverse data compilations.
	InChIKey() []Text                                            // InChIKey is a hashed version of the full InChI (using the SHA-256 algorithm).
	IupacName() []Text                                           // Systematic method of naming chemical compounds as recommended by the International Union of Pure and Applied Chemistry (IUPAC).
	MolecularFormula() []Text                                    // The empirical formula is the simplest whole number ratio of all the atoms in a molecule.
	MolecularWeight() []QuantitativeValue_Text_Union             // This is the molecular weight of the entity being described, not of the parent. Units should be included in the form '&lt;Number&gt; &lt;unit&gt;', for example '12 amu' or as '&lt;QuantitativeValue&gt;.
	MonoisotopicMolecularWeight() []QuantitativeValue_Text_Union // The monoisotopic mass is the sum of the masses of the atoms in a molecule using the unbound, ground-state, rest mass of the principal (most abundant) isotope for each element instead of the isotopic average mass. Please include the units the form '&lt;Number&gt; &lt;unit&gt;', for example '770.230488 g/mol' or as '&lt;QuantitativeValue&gt;.
	PotentialUse() []DefinedTerm                                 // Intended use of the BioChemEntity by humans.
	Smiles() []Text                                              // A specification in form of a line notation for describing the structure of chemical species using short ASCII strings.  Double bond stereochemistry \ indicators may need to be escaped in the string in formats where the backslash is an escape character.
}
type molecularEntityStruct struct {
	bioChemEntityStruct

	ChemicalRole_                DefinedTermSlice                  `json:"chemicalRole,omitempty"`
	InChI_                       TextSlice                         `json:"inChI,omitempty"`
	InChIKey_                    TextSlice                         `json:"inChIKey,omitempty"`
	IupacName_                   TextSlice                         `json:"iupacName,omitempty"`
	MolecularFormula_            TextSlice                         `json:"molecularFormula,omitempty"`
	MolecularWeight_             QuantitativeValue_Text_UnionSlice `json:"molecularWeight,omitempty"`
	MonoisotopicMolecularWeight_ QuantitativeValue_Text_UnionSlice `json:"monoisotopicMolecularWeight,omitempty"`
	PotentialUse_                DefinedTermSlice                  `json:"potentialUse,omitempty"`
	Smiles_                      TextSlice                         `json:"smiles,omitempty"`
}

func (s *molecularEntityStruct) ChemicalRole() []DefinedTerm {
	return s.ChemicalRole_
}
func (s *molecularEntityStruct) InChI() []Text {
	return s.InChI_
}
func (s *molecularEntityStruct) InChIKey() []Text {
	return s.InChIKey_
}
func (s *molecularEntityStruct) IupacName() []Text {
	return s.IupacName_
}
func (s *molecularEntityStruct) MolecularFormula() []Text {
	return s.MolecularFormula_
}
func (s *molecularEntityStruct) MolecularWeight() []QuantitativeValue_Text_Union {
	return s.MolecularWeight_
}
func (s *molecularEntityStruct) MonoisotopicMolecularWeight() []QuantitativeValue_Text_Union {
	return s.MonoisotopicMolecularWeight_
}
func (s *molecularEntityStruct) PotentialUse() []DefinedTerm {
	return s.PotentialUse_
}
func (s *molecularEntityStruct) Smiles() []Text {
	return s.Smiles_
}

type MolecularEntitySlice []MolecularEntity

func (s *MolecularEntitySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MolecularEntitySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MolecularEntity)
	}
	return nil
}

var _ MolecularEntity = &molecularEntityStruct{}

// A monetary value or range. This type can be used to describe an amount of money such as $50 USD, or a range as in describing a bank account being suitable for a balance between £1,000 and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]] Types to describe the price of an Offer, Invoice, etc.
type MonetaryAmount interface {
	// Parents
	StructuredValue
	// Unions
	DeliveryChargeSpecification_MonetaryAmount_Union
	MonetaryAmount_MonetaryAmountDistribution_Number_Union
	MonetaryAmount_Number_PriceSpecification_Union
	MonetaryAmount_Number_Union
	MonetaryAmount_PriceSpecification_Union
	MonetaryAmount_Text_Union
	// Accessors
	Currency() []Text                                   // The currency in which the monetary amount is expressed.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	MaxValue() []Number                                 // The upper value of some characteristic or property.
	MinValue() []Number                                 // The lower value of some characteristic or property.
	ValidFrom() []Date_DateTime_Union                   // The date when the item becomes valid.
	ValidThrough() []Date_DateTime_Union                // The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
	Value() []Boolean_Number_StructuredValue_Text_Union // The value of the quantitative value or property value node.\n\n* For [[QuantitativeValue]] and [[MonetaryAmount]], the recommended type for values is 'Number'.\n* For [[PropertyValue]], it can be 'Text;', 'Number', 'Boolean', or 'StructuredValue'.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
}
type monetaryAmountStruct struct {
	structuredValueStruct

	Currency_     TextSlice                                      `json:"currency,omitempty"`
	MaxValue_     NumberSlice                                    `json:"maxValue,omitempty"`
	MinValue_     NumberSlice                                    `json:"minValue,omitempty"`
	ValidFrom_    Date_DateTime_UnionSlice                       `json:"validFrom,omitempty"`
	ValidThrough_ Date_DateTime_UnionSlice                       `json:"validThrough,omitempty"`
	Value_        Boolean_Number_StructuredValue_Text_UnionSlice `json:"value,omitempty"`
}

func (s *monetaryAmountStruct) implementsDeliveryChargeSpecification_MonetaryAmount_Union()       {}
func (s *monetaryAmountStruct) implementsMonetaryAmount_MonetaryAmountDistribution_Number_Union() {}
func (s *monetaryAmountStruct) implementsMonetaryAmount_Number_PriceSpecification_Union()         {}
func (s *monetaryAmountStruct) implementsMonetaryAmount_Number_Union()                            {}
func (s *monetaryAmountStruct) implementsMonetaryAmount_PriceSpecification_Union()                {}
func (s *monetaryAmountStruct) implementsMonetaryAmount_Text_Union()                              {}

func (s *monetaryAmountStruct) Currency() []Text {
	return s.Currency_
}
func (s *monetaryAmountStruct) MaxValue() []Number {
	return s.MaxValue_
}
func (s *monetaryAmountStruct) MinValue() []Number {
	return s.MinValue_
}
func (s *monetaryAmountStruct) ValidFrom() []Date_DateTime_Union {
	return s.ValidFrom_
}
func (s *monetaryAmountStruct) ValidThrough() []Date_DateTime_Union {
	return s.ValidThrough_
}
func (s *monetaryAmountStruct) Value() []Boolean_Number_StructuredValue_Text_Union {
	return s.Value_
}

type MonetaryAmountSlice []MonetaryAmount

func (s *MonetaryAmountSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MonetaryAmountSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MonetaryAmount)
	}
	return nil
}

var _ MonetaryAmount = &monetaryAmountStruct{}

// A statistical distribution of monetary amounts.
type MonetaryAmountDistribution interface {
	// Parents
	QuantitativeValueDistribution
	// Unions
	MonetaryAmount_MonetaryAmountDistribution_Number_Union
	// Accessors
	Currency() []Text // The currency in which the monetary amount is expressed.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
}
type monetaryAmountDistributionStruct struct {
	quantitativeValueDistributionStruct

	Currency_ TextSlice `json:"currency,omitempty"`
}

func (s *monetaryAmountDistributionStruct) implementsMonetaryAmount_MonetaryAmountDistribution_Number_Union() {
}

func (s *monetaryAmountDistributionStruct) Currency() []Text {
	return s.Currency_
}

type MonetaryAmountDistributionSlice []MonetaryAmountDistribution

func (s *MonetaryAmountDistributionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MonetaryAmountDistributionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MonetaryAmountDistribution)
	}
	return nil
}

var _ MonetaryAmountDistribution = &monetaryAmountDistributionStruct{}

// A monetary grant.
type MonetaryGrant interface {
	// Parents
	Grant
	// Accessors
	Amount() []MonetaryAmount_Number_Union // The amount of money.
	Funder() []Organization_Person_Union   // A person or organization that supports (sponsors) something through some kind of financial contribution.
}
type monetaryGrantStruct struct {
	grantStruct

	Amount_ MonetaryAmount_Number_UnionSlice `json:"amount,omitempty"`
	Funder_ Organization_Person_UnionSlice   `json:"funder,omitempty"`
}

func (s *monetaryGrantStruct) Amount() []MonetaryAmount_Number_Union {
	return s.Amount_
}
func (s *monetaryGrantStruct) Funder() []Organization_Person_Union {
	return s.Funder_
}

type MonetaryGrantSlice []MonetaryGrant

func (s *MonetaryGrantSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MonetaryGrantSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MonetaryGrant)
	}
	return nil
}

var _ MonetaryGrant = &monetaryGrantStruct{}

// The act of transferring money from one place to another place. This may occur electronically or physically.
type MoneyTransfer interface {
	// Parents
	TransferAction
	// Accessors
	Amount() []MonetaryAmount_Number_Union           // The amount of money.
	BeneficiaryBank() []BankOrCreditUnion_Text_Union // A bank or bank’s branch, financial institution or international financial institution operating the beneficiary’s bank account or releasing funds for the beneficiary.
}
type moneyTransferStruct struct {
	transferActionStruct

	Amount_          MonetaryAmount_Number_UnionSlice  `json:"amount,omitempty"`
	BeneficiaryBank_ BankOrCreditUnion_Text_UnionSlice `json:"beneficiaryBank,omitempty"`
}

func (s *moneyTransferStruct) Amount() []MonetaryAmount_Number_Union {
	return s.Amount_
}
func (s *moneyTransferStruct) BeneficiaryBank() []BankOrCreditUnion_Text_Union {
	return s.BeneficiaryBank_
}

type MoneyTransferSlice []MoneyTransfer

func (s *MoneyTransferSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MoneyTransferSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MoneyTransfer)
	}
	return nil
}

var _ MoneyTransfer = &moneyTransferStruct{}

// A loan in which property or real estate is used as collateral. (A loan securitized against some real estate).
type MortgageLoan interface {
	// Parents
	LoanOrCredit
	// Accessors
	DomiciledMortgage() []Boolean                // Whether borrower is a resident of the jurisdiction where the property is located.
	LoanMortgageMandateAmount() []MonetaryAmount // Amount of mortgage mandate that can be converted into a proper mortgage at a later stage.
}
type mortgageLoanStruct struct {
	loanOrCreditStruct

	DomiciledMortgage_         BooleanSlice        `json:"domiciledMortgage,omitempty"`
	LoanMortgageMandateAmount_ MonetaryAmountSlice `json:"loanMortgageMandateAmount,omitempty"`
}

func (s *mortgageLoanStruct) DomiciledMortgage() []Boolean {
	return s.DomiciledMortgage_
}
func (s *mortgageLoanStruct) LoanMortgageMandateAmount() []MonetaryAmount {
	return s.LoanMortgageMandateAmount_
}

type MortgageLoanSlice []MortgageLoan

func (s *MortgageLoanSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MortgageLoanSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MortgageLoan)
	}
	return nil
}

var _ MortgageLoan = &mortgageLoanStruct{}

// A mosque.
type Mosque interface {
	// Parents
	PlaceOfWorship
}
type mosqueStruct struct {
	placeOfWorshipStruct
}
type MosqueSlice []Mosque

func (s *MosqueSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MosqueSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Mosque)
	}
	return nil
}

var _ Mosque = &mosqueStruct{}

/*
A motel.
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type Motel interface {
	// Parents
	LodgingBusiness
}
type motelStruct struct {
	lodgingBusinessStruct
}
type MotelSlice []Motel

func (s *MotelSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MotelSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Motel)
	}
	return nil
}

var _ Motel = &motelStruct{}

// A motorcycle or motorbike is a single-track, two-wheeled motor vehicle.
type Motorcycle interface {
	// Parents
	Vehicle
}
type motorcycleStruct struct {
	vehicleStruct
}
type MotorcycleSlice []Motorcycle

func (s *MotorcycleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MotorcycleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Motorcycle)
	}
	return nil
}

var _ Motorcycle = &motorcycleStruct{}

// A motorcycle dealer.
type MotorcycleDealer interface {
	// Parents
	AutomotiveBusiness
}
type motorcycleDealerStruct struct {
	automotiveBusinessStruct
}
type MotorcycleDealerSlice []MotorcycleDealer

func (s *MotorcycleDealerSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MotorcycleDealerSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MotorcycleDealer)
	}
	return nil
}

var _ MotorcycleDealer = &motorcycleDealerStruct{}

// A motorcycle repair shop.
type MotorcycleRepair interface {
	// Parents
	AutomotiveBusiness
}
type motorcycleRepairStruct struct {
	automotiveBusinessStruct
}
type MotorcycleRepairSlice []MotorcycleRepair

func (s *MotorcycleRepairSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MotorcycleRepairSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MotorcycleRepair)
	}
	return nil
}

var _ MotorcycleRepair = &motorcycleRepairStruct{}

// A motorized bicycle is a bicycle with an attached motor used to power the vehicle, or to assist with pedaling.
type MotorizedBicycle interface {
	// Parents
	Vehicle
}
type motorizedBicycleStruct struct {
	vehicleStruct
}
type MotorizedBicycleSlice []MotorizedBicycle

func (s *MotorizedBicycleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MotorizedBicycleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MotorizedBicycle)
	}
	return nil
}

var _ MotorizedBicycle = &motorizedBicycleStruct{}

// A mountain, like Mount Whitney or Mount Everest.
type Mountain interface {
	// Parents
	Landform
}
type mountainStruct struct {
	landformStruct
}
type MountainSlice []Mountain

func (s *MountainSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MountainSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Mountain)
	}
	return nil
}

var _ Mountain = &mountainStruct{}

// The act of an agent relocating to a place.\n\nRelated actions:\n\n* [[TransferAction]]: Unlike TransferAction, the subject of the move is a living Person or Organization rather than an inanimate object.
type MoveAction interface {
	// Parents
	Action
	// Accessors
	FromLocation() []Place // A sub property of location. The original location of the object or the agent before the action.
	ToLocation() []Place   // A sub property of location. The final location of the object or the agent after the action.
}
type moveActionStruct struct {
	actionStruct

	FromLocation_ PlaceSlice `json:"fromLocation,omitempty"`
	ToLocation_   PlaceSlice `json:"toLocation,omitempty"`
}

func (s *moveActionStruct) FromLocation() []Place {
	return s.FromLocation_
}
func (s *moveActionStruct) ToLocation() []Place {
	return s.ToLocation_
}

type MoveActionSlice []MoveAction

func (s *MoveActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MoveActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MoveAction)
	}
	return nil
}

var _ MoveAction = &moveActionStruct{}

// A movie.
type Movie interface {
	// Parents
	CreativeWork
	// Accessors
	Actor() []Person            // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Actors() []Person           // An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
	CountryOfOrigin() []Country /*
	The country of origin of something, including products as well as creative  works such as movie and TV content.

	In the case of TV and movie, this would be the country of the principle offices of the production company or individual responsible for the movie. For other kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties such as [[contentLocation]] and [[locationCreated]] may be more applicable.

	In the case of products, the country of origin of the product. The exact interpretation of this may vary by context and product type, and cannot be fully enumerated here.
	*/
	Director() []Person                      // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	Directors() []Person                     // A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
	Duration() []Duration                    // The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	MusicBy() []MusicGroup_Person_Union      // The composer of the soundtrack.
	ProductionCompany() []Organization       // The production company or studio responsible for the item e.g. series, video game, episode etc.
	SubtitleLanguage() []Language_Text_Union // Languages in which subtitles/captions are available, in [IETF BCP 47 standard format](http://tools.ietf.org/html/bcp47).
	TitleEIDR() []Text_URL_Union             /*
	An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]] representing at the most general/abstract level, a work of film or television.

	For example, the motion picture known as "Ghostbusters" has a titleEIDR of  "10.5240/7EC7-228A-510A-053E-CBB8-J". This title (or work) may have several variants, which EIDR calls "edits". See [[editEIDR]].

	Since schema.org types like [[Movie]] and [[TVEpisode]] can be used for both works and their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general description), or alongside [[editEIDR]] for a more edit-specific description.
	*/
	Trailer() []VideoObject // The trailer of a movie or tv/radio series, season, episode, etc.
}
type movieStruct struct {
	creativeWorkStruct

	Actor_             PersonSlice                  `json:"actor,omitempty"`
	Actors_            PersonSlice                  `json:"actors,omitempty"`
	CountryOfOrigin_   CountrySlice                 `json:"countryOfOrigin,omitempty"`
	Director_          PersonSlice                  `json:"director,omitempty"`
	Directors_         PersonSlice                  `json:"directors,omitempty"`
	Duration_          DurationSlice                `json:"duration,omitempty"`
	MusicBy_           MusicGroup_Person_UnionSlice `json:"musicBy,omitempty"`
	ProductionCompany_ OrganizationSlice            `json:"productionCompany,omitempty"`
	SubtitleLanguage_  Language_Text_UnionSlice     `json:"subtitleLanguage,omitempty"`
	TitleEIDR_         Text_URL_UnionSlice          `json:"titleEIDR,omitempty"`
	Trailer_           VideoObjectSlice             `json:"trailer,omitempty"`
}

func (s *movieStruct) Actor() []Person {
	return s.Actor_
}
func (s *movieStruct) Actors() []Person {
	return s.Actors_
}
func (s *movieStruct) CountryOfOrigin() []Country {
	return s.CountryOfOrigin_
}
func (s *movieStruct) Director() []Person {
	return s.Director_
}
func (s *movieStruct) Directors() []Person {
	return s.Directors_
}
func (s *movieStruct) Duration() []Duration {
	return s.Duration_
}
func (s *movieStruct) MusicBy() []MusicGroup_Person_Union {
	return s.MusicBy_
}
func (s *movieStruct) ProductionCompany() []Organization {
	return s.ProductionCompany_
}
func (s *movieStruct) SubtitleLanguage() []Language_Text_Union {
	return s.SubtitleLanguage_
}
func (s *movieStruct) TitleEIDR() []Text_URL_Union {
	return s.TitleEIDR_
}
func (s *movieStruct) Trailer() []VideoObject {
	return s.Trailer_
}

type MovieSlice []Movie

func (s *MovieSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MovieSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Movie)
	}
	return nil
}

var _ Movie = &movieStruct{}

// A short segment/part of a movie.
type MovieClip interface {
	// Parents
	Clip
}
type movieClipStruct struct {
	clipStruct
}
type MovieClipSlice []MovieClip

func (s *MovieClipSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MovieClipSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MovieClip)
	}
	return nil
}

var _ MovieClip = &movieClipStruct{}

// A movie rental store.
type MovieRentalStore interface {
	// Parents
	Store
}
type movieRentalStoreStruct struct {
	storeStruct
}
type MovieRentalStoreSlice []MovieRentalStore

func (s *MovieRentalStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MovieRentalStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MovieRentalStore)
	}
	return nil
}

var _ MovieRentalStore = &movieRentalStoreStruct{}

// A series of movies. Included movies can be indicated with the hasPart property.
type MovieSeries interface {
	// Parents
	CreativeWorkSeries
	// Accessors
	Actor() []Person                    // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Actors() []Person                   // An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
	Director() []Person                 // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	Directors() []Person                // A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
	MusicBy() []MusicGroup_Person_Union // The composer of the soundtrack.
	ProductionCompany() []Organization  // The production company or studio responsible for the item e.g. series, video game, episode etc.
	Trailer() []VideoObject             // The trailer of a movie or tv/radio series, season, episode, etc.
}
type movieSeriesStruct struct {
	creativeWorkSeriesStruct

	Actor_             PersonSlice                  `json:"actor,omitempty"`
	Actors_            PersonSlice                  `json:"actors,omitempty"`
	Director_          PersonSlice                  `json:"director,omitempty"`
	Directors_         PersonSlice                  `json:"directors,omitempty"`
	MusicBy_           MusicGroup_Person_UnionSlice `json:"musicBy,omitempty"`
	ProductionCompany_ OrganizationSlice            `json:"productionCompany,omitempty"`
	Trailer_           VideoObjectSlice             `json:"trailer,omitempty"`
}

func (s *movieSeriesStruct) Actor() []Person {
	return s.Actor_
}
func (s *movieSeriesStruct) Actors() []Person {
	return s.Actors_
}
func (s *movieSeriesStruct) Director() []Person {
	return s.Director_
}
func (s *movieSeriesStruct) Directors() []Person {
	return s.Directors_
}
func (s *movieSeriesStruct) MusicBy() []MusicGroup_Person_Union {
	return s.MusicBy_
}
func (s *movieSeriesStruct) ProductionCompany() []Organization {
	return s.ProductionCompany_
}
func (s *movieSeriesStruct) Trailer() []VideoObject {
	return s.Trailer_
}

type MovieSeriesSlice []MovieSeries

func (s *MovieSeriesSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MovieSeriesSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MovieSeries)
	}
	return nil
}

var _ MovieSeries = &movieSeriesStruct{}

// A movie theater.
type MovieTheater interface {
	// Parents
	CivicStructure
	EntertainmentBusiness
	// Accessors
	ScreenCount() []Number // The number of screens in the movie theater.
}
type movieTheaterStruct struct {
	civicStructureStruct
	entertainmentBusinessStruct

	ScreenCount_ NumberSlice `json:"screenCount,omitempty"`
}

func (s *movieTheaterStruct) implementsAdministrativeArea_GeoShape_Place_Text_Union()               {} // re
func (s *movieTheaterStruct) implementsAdministrativeArea_GeoShape_Place_Union()                    {} // re
func (s *movieTheaterStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *movieTheaterStruct) implementsCivicStructure_LocalBusiness_Union()                         {} // re
func (s *movieTheaterStruct) implementsContactPoint_Place_Union()                                   {} // re
func (s *movieTheaterStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *movieTheaterStruct) implementsFoodEstablishment_Place_Union()                              {} // re
func (s *movieTheaterStruct) implementsGeoShape_Place_Text_Union()                                  {} // re
func (s *movieTheaterStruct) implementsGeospatialGeometry_Place_Union()                             {} // re
func (s *movieTheaterStruct) implementsItemList_Place_Union()                                       {} // re
func (s *movieTheaterStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *movieTheaterStruct) implementsPlace_PostalAddress_Text_Union()                             {} // re
func (s *movieTheaterStruct) implementsPlace_PostalAddress_Text_VirtualLocation_Union()             {} // re
func (s *movieTheaterStruct) implementsPlace_PostalAddress_URL_Union()                              {} // re
func (s *movieTheaterStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *movieTheaterStruct) implementsText_Thing_Union()                                           {} // re
func (s *movieTheaterStruct) ScreenCount() []Number {
	return s.ScreenCount_
}

type MovieTheaterSlice []MovieTheater

func (s *MovieTheaterSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MovieTheaterSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MovieTheater)
	}
	return nil
}

var _ MovieTheater = &movieTheaterStruct{}

// A moving company.
type MovingCompany interface {
	// Parents
	HomeAndConstructionBusiness
}
type movingCompanyStruct struct {
	homeAndConstructionBusinessStruct
}
type MovingCompanySlice []MovingCompany

func (s *MovingCompanySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MovingCompanySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MovingCompany)
	}
	return nil
}

var _ MovingCompany = &movingCompanyStruct{}

// A muscle is an anatomical structure consisting of a contractile form of tissue that animals use to effect movement.
type Muscle interface {
	// Parents
	AnatomicalStructure
	// Accessors
	Antagonist() []Muscle             // The muscle whose action counteracts the specified muscle.
	BloodSupply() []Vessel            // The blood vessel that carries blood from the heart to the muscle.
	Insertion() []AnatomicalStructure // The place of attachment of a muscle, or what the muscle moves.
	MuscleAction() []Text             // The movement the muscle generates.
	Nerve() []Nerve                   // The underlying innervation associated with the muscle.
}
type muscleStruct struct {
	anatomicalStructureStruct

	Antagonist_   MuscleSlice              `json:"antagonist,omitempty"`
	BloodSupply_  VesselSlice              `json:"bloodSupply,omitempty"`
	Insertion_    AnatomicalStructureSlice `json:"insertion,omitempty"`
	MuscleAction_ TextSlice                `json:"muscleAction,omitempty"`
	Nerve_        NerveSlice               `json:"nerve,omitempty"`
}

func (s *muscleStruct) Antagonist() []Muscle {
	return s.Antagonist_
}
func (s *muscleStruct) BloodSupply() []Vessel {
	return s.BloodSupply_
}
func (s *muscleStruct) Insertion() []AnatomicalStructure {
	return s.Insertion_
}
func (s *muscleStruct) MuscleAction() []Text {
	return s.MuscleAction_
}
func (s *muscleStruct) Nerve() []Nerve {
	return s.Nerve_
}

type MuscleSlice []Muscle

func (s *MuscleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MuscleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Muscle)
	}
	return nil
}

var _ Muscle = &muscleStruct{}

// A museum.
type Museum interface {
	// Parents
	CivicStructure
}
type museumStruct struct {
	civicStructureStruct
}
type MuseumSlice []Museum

func (s *MuseumSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MuseumSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Museum)
	}
	return nil
}

var _ Museum = &museumStruct{}

// A collection of music tracks.
type MusicAlbum interface {
	// Parents
	MusicPlaylist
	// Accessors
	AlbumProductionType() []MusicAlbumProductionType // Classification of the album by it's type of content: soundtrack, live album, studio album, etc.
	AlbumRelease() []MusicRelease                    // A release of this album.
	AlbumReleaseType() []MusicAlbumReleaseType       // The kind of release which this album is: single, EP or album.
	ByArtist() []MusicGroup_Person_Union             // The artist that performed this album or recording.
}
type musicAlbumStruct struct {
	musicPlaylistStruct

	AlbumProductionType_ MusicAlbumProductionTypeSlice `json:"albumProductionType,omitempty"`
	AlbumRelease_        MusicReleaseSlice             `json:"albumRelease,omitempty"`
	AlbumReleaseType_    MusicAlbumReleaseTypeSlice    `json:"albumReleaseType,omitempty"`
	ByArtist_            MusicGroup_Person_UnionSlice  `json:"byArtist,omitempty"`
}

func (s *musicAlbumStruct) AlbumProductionType() []MusicAlbumProductionType {
	return s.AlbumProductionType_
}
func (s *musicAlbumStruct) AlbumRelease() []MusicRelease {
	return s.AlbumRelease_
}
func (s *musicAlbumStruct) AlbumReleaseType() []MusicAlbumReleaseType {
	return s.AlbumReleaseType_
}
func (s *musicAlbumStruct) ByArtist() []MusicGroup_Person_Union {
	return s.ByArtist_
}

type MusicAlbumSlice []MusicAlbum

func (s *MusicAlbumSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MusicAlbumSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MusicAlbum)
	}
	return nil
}

var _ MusicAlbum = &musicAlbumStruct{}

// Classification of the album by it's type of content: soundtrack, live album, studio album, etc.
type MusicAlbumProductionType interface {
	// Parents
	Enumeration
}
type musicAlbumProductionTypeStruct struct {
	enumerationStruct
}
type MusicAlbumProductionTypeSlice []MusicAlbumProductionType

func (s *MusicAlbumProductionTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MusicAlbumProductionTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MusicAlbumProductionType)
	}
	return nil
}

var _ MusicAlbumProductionType = &musicAlbumProductionTypeStruct{}

// The kind of release which this album is: single, EP or album.
type MusicAlbumReleaseType interface {
	// Parents
	Enumeration
}
type musicAlbumReleaseTypeStruct struct {
	enumerationStruct
}
type MusicAlbumReleaseTypeSlice []MusicAlbumReleaseType

func (s *MusicAlbumReleaseTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MusicAlbumReleaseTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MusicAlbumReleaseType)
	}
	return nil
}

var _ MusicAlbumReleaseType = &musicAlbumReleaseTypeStruct{}

// A musical composition.
type MusicComposition interface {
	// Parents
	CreativeWork
	// Accessors
	Composer() []Organization_Person_Union   // The person or organization who wrote a composition, or who is the composer of a work performed at some event.
	FirstPerformance() []Event               // The date and place the work was first performed.
	IncludedComposition() []MusicComposition // Smaller compositions included in this work (e.g. a movement in a symphony).
	IswcCode() []Text                        // The International Standard Musical Work Code for the composition.
	Lyricist() []Person                      // The person who wrote the words.
	Lyrics() []CreativeWork                  // The words in the song.
	MusicArrangement() []MusicComposition    // An arrangement derived from the composition.
	MusicCompositionForm() []Text            // The type of composition (e.g. overture, sonata, symphony, etc.).
	MusicalKey() []Text                      // The key, mode, or scale this composition uses.
	RecordedAs() []MusicRecording            // An audio recording of the work.
}
type musicCompositionStruct struct {
	creativeWorkStruct

	Composer_             Organization_Person_UnionSlice `json:"composer,omitempty"`
	FirstPerformance_     EventSlice                     `json:"firstPerformance,omitempty"`
	IncludedComposition_  MusicCompositionSlice          `json:"includedComposition,omitempty"`
	IswcCode_             TextSlice                      `json:"iswcCode,omitempty"`
	Lyricist_             PersonSlice                    `json:"lyricist,omitempty"`
	Lyrics_               CreativeWorkSlice              `json:"lyrics,omitempty"`
	MusicArrangement_     MusicCompositionSlice          `json:"musicArrangement,omitempty"`
	MusicCompositionForm_ TextSlice                      `json:"musicCompositionForm,omitempty"`
	MusicalKey_           TextSlice                      `json:"musicalKey,omitempty"`
	RecordedAs_           MusicRecordingSlice            `json:"recordedAs,omitempty"`
}

func (s *musicCompositionStruct) Composer() []Organization_Person_Union {
	return s.Composer_
}
func (s *musicCompositionStruct) FirstPerformance() []Event {
	return s.FirstPerformance_
}
func (s *musicCompositionStruct) IncludedComposition() []MusicComposition {
	return s.IncludedComposition_
}
func (s *musicCompositionStruct) IswcCode() []Text {
	return s.IswcCode_
}
func (s *musicCompositionStruct) Lyricist() []Person {
	return s.Lyricist_
}
func (s *musicCompositionStruct) Lyrics() []CreativeWork {
	return s.Lyrics_
}
func (s *musicCompositionStruct) MusicArrangement() []MusicComposition {
	return s.MusicArrangement_
}
func (s *musicCompositionStruct) MusicCompositionForm() []Text {
	return s.MusicCompositionForm_
}
func (s *musicCompositionStruct) MusicalKey() []Text {
	return s.MusicalKey_
}
func (s *musicCompositionStruct) RecordedAs() []MusicRecording {
	return s.RecordedAs_
}

type MusicCompositionSlice []MusicComposition

func (s *MusicCompositionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MusicCompositionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MusicComposition)
	}
	return nil
}

var _ MusicComposition = &musicCompositionStruct{}

// Event type: Music event.
type MusicEvent interface {
	// Parents
	Event
}
type musicEventStruct struct {
	eventStruct
}
type MusicEventSlice []MusicEvent

func (s *MusicEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MusicEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MusicEvent)
	}
	return nil
}

var _ MusicEvent = &musicEventStruct{}

// A musical group, such as a band, an orchestra, or a choir. Can also be a solo musician.
type MusicGroup interface {
	// Parents
	PerformingGroup
	// Unions
	MusicGroup_Person_Union
	// Accessors
	Album() []MusicAlbum                    // A music album.
	Albums() []MusicAlbum                   // A collection of music albums.
	Genre() []Text_URL_Union                // Genre of the creative work, broadcast channel or group.
	MusicGroupMember() []Person             // A member of a music group&#x2014;for example, John, Paul, George, or Ringo.
	Track() []ItemList_MusicRecording_Union // A music recording (track)&#x2014;usually a single song. If an ItemList is given, the list should contain items of type MusicRecording.
	Tracks() []MusicRecording               // A music recording (track)&#x2014;usually a single song.
}
type musicGroupStruct struct {
	performingGroupStruct

	Album_            MusicAlbumSlice                    `json:"album,omitempty"`
	Albums_           MusicAlbumSlice                    `json:"albums,omitempty"`
	Genre_            Text_URL_UnionSlice                `json:"genre,omitempty"`
	MusicGroupMember_ PersonSlice                        `json:"musicGroupMember,omitempty"`
	Track_            ItemList_MusicRecording_UnionSlice `json:"track,omitempty"`
	Tracks_           MusicRecordingSlice                `json:"tracks,omitempty"`
}

func (s *musicGroupStruct) implementsMusicGroup_Person_Union() {}

func (s *musicGroupStruct) Album() []MusicAlbum {
	return s.Album_
}
func (s *musicGroupStruct) Albums() []MusicAlbum {
	return s.Albums_
}
func (s *musicGroupStruct) Genre() []Text_URL_Union {
	return s.Genre_
}
func (s *musicGroupStruct) MusicGroupMember() []Person {
	return s.MusicGroupMember_
}
func (s *musicGroupStruct) Track() []ItemList_MusicRecording_Union {
	return s.Track_
}
func (s *musicGroupStruct) Tracks() []MusicRecording {
	return s.Tracks_
}

type MusicGroupSlice []MusicGroup

func (s *MusicGroupSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MusicGroupSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MusicGroup)
	}
	return nil
}

var _ MusicGroup = &musicGroupStruct{}

// A collection of music tracks in playlist form.
type MusicPlaylist interface {
	// Parents
	CreativeWork
	// Accessors
	NumTracks() []Integer                   // The number of tracks in this album or playlist.
	Track() []ItemList_MusicRecording_Union // A music recording (track)&#x2014;usually a single song. If an ItemList is given, the list should contain items of type MusicRecording.
	Tracks() []MusicRecording               // A music recording (track)&#x2014;usually a single song.
}
type musicPlaylistStruct struct {
	creativeWorkStruct

	NumTracks_ IntegerSlice                       `json:"numTracks,omitempty"`
	Track_     ItemList_MusicRecording_UnionSlice `json:"track,omitempty"`
	Tracks_    MusicRecordingSlice                `json:"tracks,omitempty"`
}

func (s *musicPlaylistStruct) NumTracks() []Integer {
	return s.NumTracks_
}
func (s *musicPlaylistStruct) Track() []ItemList_MusicRecording_Union {
	return s.Track_
}
func (s *musicPlaylistStruct) Tracks() []MusicRecording {
	return s.Tracks_
}

type MusicPlaylistSlice []MusicPlaylist

func (s *MusicPlaylistSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MusicPlaylistSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MusicPlaylist)
	}
	return nil
}

var _ MusicPlaylist = &musicPlaylistStruct{}

// A music recording (track), usually a single song.
type MusicRecording interface {
	// Parents
	CreativeWork
	// Unions
	AudioObject_Clip_MusicRecording_Union
	ItemList_MusicRecording_Union
	// Accessors
	ByArtist() []MusicGroup_Person_Union // The artist that performed this album or recording.
	Duration() []Duration                // The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	InAlbum() []MusicAlbum               // The album to which this recording belongs.
	InPlaylist() []MusicPlaylist         // The playlist to which this recording belongs.
	IsrcCode() []Text                    // The International Standard Recording Code for the recording.
	RecordingOf() []MusicComposition     // The composition this track is a recording of.
}
type musicRecordingStruct struct {
	creativeWorkStruct

	ByArtist_    MusicGroup_Person_UnionSlice `json:"byArtist,omitempty"`
	Duration_    DurationSlice                `json:"duration,omitempty"`
	InAlbum_     MusicAlbumSlice              `json:"inAlbum,omitempty"`
	InPlaylist_  MusicPlaylistSlice           `json:"inPlaylist,omitempty"`
	IsrcCode_    TextSlice                    `json:"isrcCode,omitempty"`
	RecordingOf_ MusicCompositionSlice        `json:"recordingOf,omitempty"`
}

func (s *musicRecordingStruct) implementsAudioObject_Clip_MusicRecording_Union() {}
func (s *musicRecordingStruct) implementsItemList_MusicRecording_Union()         {}

func (s *musicRecordingStruct) ByArtist() []MusicGroup_Person_Union {
	return s.ByArtist_
}
func (s *musicRecordingStruct) Duration() []Duration {
	return s.Duration_
}
func (s *musicRecordingStruct) InAlbum() []MusicAlbum {
	return s.InAlbum_
}
func (s *musicRecordingStruct) InPlaylist() []MusicPlaylist {
	return s.InPlaylist_
}
func (s *musicRecordingStruct) IsrcCode() []Text {
	return s.IsrcCode_
}
func (s *musicRecordingStruct) RecordingOf() []MusicComposition {
	return s.RecordingOf_
}

type MusicRecordingSlice []MusicRecording

func (s *MusicRecordingSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MusicRecordingSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MusicRecording)
	}
	return nil
}

var _ MusicRecording = &musicRecordingStruct{}

// A MusicRelease is a specific release of a music album.
type MusicRelease interface {
	// Parents
	MusicPlaylist
	// Accessors
	CatalogNumber() []Text                        // The catalog number for the release.
	CreditedTo() []Organization_Person_Union      // The group the release is credited to if different than the byArtist. For example, Red and Blue is credited to "Stefani Germanotta Band", but by Lady Gaga.
	Duration() []Duration                         // The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	MusicReleaseFormat() []MusicReleaseFormatType // Format of this release (the type of recording media used, ie. compact disc, digital media, LP, etc.).
	RecordLabel() []Organization                  // The label that issued the release.
	ReleaseOf() []MusicAlbum                      // The album this is a release of.
}
type musicReleaseStruct struct {
	musicPlaylistStruct

	CatalogNumber_      TextSlice                      `json:"catalogNumber,omitempty"`
	CreditedTo_         Organization_Person_UnionSlice `json:"creditedTo,omitempty"`
	Duration_           DurationSlice                  `json:"duration,omitempty"`
	MusicReleaseFormat_ MusicReleaseFormatTypeSlice    `json:"musicReleaseFormat,omitempty"`
	RecordLabel_        OrganizationSlice              `json:"recordLabel,omitempty"`
	ReleaseOf_          MusicAlbumSlice                `json:"releaseOf,omitempty"`
}

func (s *musicReleaseStruct) CatalogNumber() []Text {
	return s.CatalogNumber_
}
func (s *musicReleaseStruct) CreditedTo() []Organization_Person_Union {
	return s.CreditedTo_
}
func (s *musicReleaseStruct) Duration() []Duration {
	return s.Duration_
}
func (s *musicReleaseStruct) MusicReleaseFormat() []MusicReleaseFormatType {
	return s.MusicReleaseFormat_
}
func (s *musicReleaseStruct) RecordLabel() []Organization {
	return s.RecordLabel_
}
func (s *musicReleaseStruct) ReleaseOf() []MusicAlbum {
	return s.ReleaseOf_
}

type MusicReleaseSlice []MusicRelease

func (s *MusicReleaseSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MusicReleaseSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MusicRelease)
	}
	return nil
}

var _ MusicRelease = &musicReleaseStruct{}

// Format of this release (the type of recording media used, ie. compact disc, digital media, LP, etc.).
type MusicReleaseFormatType interface {
	// Parents
	Enumeration
}
type musicReleaseFormatTypeStruct struct {
	enumerationStruct
}
type MusicReleaseFormatTypeSlice []MusicReleaseFormatType

func (s *MusicReleaseFormatTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MusicReleaseFormatTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MusicReleaseFormatType)
	}
	return nil
}

var _ MusicReleaseFormatType = &musicReleaseFormatTypeStruct{}

// A music store.
type MusicStore interface {
	// Parents
	Store
}
type musicStoreStruct struct {
	storeStruct
}
type MusicStoreSlice []MusicStore

func (s *MusicStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MusicStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MusicStore)
	}
	return nil
}

var _ MusicStore = &musicStoreStruct{}

// A music venue.
type MusicVenue interface {
	// Parents
	CivicStructure
}
type musicVenueStruct struct {
	civicStructureStruct
}
type MusicVenueSlice []MusicVenue

func (s *MusicVenueSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MusicVenueSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MusicVenue)
	}
	return nil
}

var _ MusicVenue = &musicVenueStruct{}

// A music video file.
type MusicVideoObject interface {
	// Parents
	MediaObject
}
type musicVideoObjectStruct struct {
	mediaObjectStruct
}
type MusicVideoObjectSlice []MusicVideoObject

func (s *MusicVideoObjectSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(MusicVideoObjectSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(MusicVideoObject)
	}
	return nil
}

var _ MusicVideoObject = &musicVideoObjectStruct{}

// Organization: Non-governmental Organization.
type NGO interface {
	// Parents
	Organization
}
type nGOStruct struct {
	organizationStruct
}
type NGOSlice []NGO

func (s *NGOSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(NGOSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(NGO)
	}
	return nil
}

var _ NGO = &nGOStruct{}

// NLNonprofitType: Non-profit organization type originating from the Netherlands.
type NLNonprofitType interface {
	// Parents
	NonprofitType
}
type nLNonprofitTypeStruct struct {
	nonprofitTypeStruct
}
type NLNonprofitTypeSlice []NLNonprofitType

func (s *NLNonprofitTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(NLNonprofitTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(NLNonprofitType)
	}
	return nil
}

var _ NLNonprofitType = &nLNonprofitTypeStruct{}

// A nail salon.
type NailSalon interface {
	// Parents
	HealthAndBeautyBusiness
}
type nailSalonStruct struct {
	healthAndBeautyBusinessStruct
}
type NailSalonSlice []NailSalon

func (s *NailSalonSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(NailSalonSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(NailSalon)
	}
	return nil
}

var _ NailSalon = &nailSalonStruct{}

// A common pathway for the electrochemical nerve impulses that are transmitted along each of the axons.
type Nerve interface {
	// Parents
	AnatomicalStructure
	// Accessors
	Branch() []AnatomicalStructure                               // The branches that delineate from the nerve bundle. Not to be confused with [[branchOf]].
	NerveMotor() []Muscle                                        // The neurological pathway extension that involves muscle control.
	SensoryUnit() []AnatomicalStructure_SuperficialAnatomy_Union // The neurological pathway extension that inputs and sends information to the brain or spinal cord.
	SourcedFrom() []BrainStructure                               // The neurological pathway that originates the neurons.
}
type nerveStruct struct {
	anatomicalStructureStruct

	Branch_      AnatomicalStructureSlice                          `json:"branch,omitempty"`
	NerveMotor_  MuscleSlice                                       `json:"nerveMotor,omitempty"`
	SensoryUnit_ AnatomicalStructure_SuperficialAnatomy_UnionSlice `json:"sensoryUnit,omitempty"`
	SourcedFrom_ BrainStructureSlice                               `json:"sourcedFrom,omitempty"`
}

func (s *nerveStruct) Branch() []AnatomicalStructure {
	return s.Branch_
}
func (s *nerveStruct) NerveMotor() []Muscle {
	return s.NerveMotor_
}
func (s *nerveStruct) SensoryUnit() []AnatomicalStructure_SuperficialAnatomy_Union {
	return s.SensoryUnit_
}
func (s *nerveStruct) SourcedFrom() []BrainStructure {
	return s.SourcedFrom_
}

type NerveSlice []Nerve

func (s *NerveSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(NerveSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Nerve)
	}
	return nil
}

var _ Nerve = &nerveStruct{}

/*
A NewsArticle is an article whose content reports news, or provides background context and supporting materials for understanding the news.

A more detailed overview of [schema.org News markup](/docs/news.html) is also available.
*/
type NewsArticle interface {
	// Parents
	Article
	// Accessors
	Dateline() []Text /*
	A [dateline](https://en.wikipedia.org/wiki/Dateline) is a brief piece of text included in news articles that describes where and when the story was written or filed though the date is often omitted. Sometimes only a placename is provided.

	Structured representations of dateline-related information can also be expressed more explicitly using [[locationCreated]] (which represents where a work was created e.g. where a news report was written).  For location depicted or described in the content, use [[contentLocation]].

	Dateline summaries are oriented more towards human readers than towards automated processing, and can vary substantially. Some examples: "BEIRUT, Lebanon, June 2.", "Paris, France", "December 19, 2017 11:43AM Reporting from Washington", "Beijing/Moscow", "QUEZON CITY, Philippines".

	*/
	PrintColumn() []Text  // The number of the column in which the NewsArticle appears in the print edition.
	PrintEdition() []Text // The edition of the print product in which the NewsArticle appears.
	PrintPage() []Text    // If this NewsArticle appears in print, this field indicates the name of the page on which the article is found. Please note that this field is intended for the exact page name (e.g. A5, B18).
	PrintSection() []Text // If this NewsArticle appears in print, this field indicates the print section in which the article appeared.
}
type newsArticleStruct struct {
	articleStruct

	Dateline_     TextSlice `json:"dateline,omitempty"`
	PrintColumn_  TextSlice `json:"printColumn,omitempty"`
	PrintEdition_ TextSlice `json:"printEdition,omitempty"`
	PrintPage_    TextSlice `json:"printPage,omitempty"`
	PrintSection_ TextSlice `json:"printSection,omitempty"`
}
type newsArticleStruct_ struct {
	newsArticleStruct
}

func (s *newsArticleStruct) Dateline() []Text {
	return s.Dateline_
}
func (s *newsArticleStruct) PrintColumn() []Text {
	return s.PrintColumn_
}
func (s *newsArticleStruct) PrintEdition() []Text {
	return s.PrintEdition_
}
func (s *newsArticleStruct) PrintPage() []Text {
	return s.PrintPage_
}
func (s *newsArticleStruct) PrintSection() []Text {
	return s.PrintSection_
}

type NewsArticleSlice []NewsArticle

func (s *NewsArticleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(NewsArticleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(NewsArticle)
	}
	return nil
}

var _ NewsArticle = &newsArticleStruct{}

// A News/Media organization such as a newspaper or TV station.
type NewsMediaOrganization interface {
	// Parents
	Organization
	// Accessors
	ActionableFeedbackPolicy() []CreativeWork_URL_Union            // For a [[NewsMediaOrganization]] or other news-related [[Organization]], a statement about public engagement activities (for news media, the newsroom’s), including involving the public - digitally or otherwise -- in coverage decisions, reporting and activities after publication.
	CorrectionsPolicy() []CreativeWork_URL_Union                   // For an [[Organization]] (e.g. [[NewsMediaOrganization]]), a statement describing (in news media, the newsroom’s) disclosure and correction policy for errors.
	DiversityPolicy() []CreativeWork_URL_Union                     // Statement on diversity policy by an [[Organization]] e.g. a [[NewsMediaOrganization]]. For a [[NewsMediaOrganization]], a statement describing the newsroom’s diversity policy on both staffing and sources, typically providing staffing data.
	DiversityStaffingReport() []Article_URL_Union                  // For an [[Organization]] (often but not necessarily a [[NewsMediaOrganization]]), a report on staffing diversity issues. In a news context this might be for example ASNE or RTDNA (US) reports, or self-reported.
	EthicsPolicy() []CreativeWork_URL_Union                        // Statement about ethics policy, e.g. of a [[NewsMediaOrganization]] regarding journalistic and publishing practices, or of a [[Restaurant]], a page describing food source policies. In the case of a [[NewsMediaOrganization]], an ethicsPolicy is typically a statement describing the personal, organizational, and corporate standards of behavior expected by the organization.
	Masthead() []CreativeWork_URL_Union                            // For a [[NewsMediaOrganization]], a link to the masthead page or a page listing top editorial management.
	MissionCoveragePrioritiesPolicy() []CreativeWork_URL_Union     // For a [[NewsMediaOrganization]], a statement on coverage priorities, including any public agenda or stance on issues.
	NoBylinesPolicy() []CreativeWork_URL_Union                     // For a [[NewsMediaOrganization]] or other news-related [[Organization]], a statement explaining when authors of articles are not named in bylines.
	OwnershipFundingInfo() []AboutPage_CreativeWork_Text_URL_Union // For an [[Organization]] (often but not necessarily a [[NewsMediaOrganization]]), a description of organizational ownership structure; funding and grants. In a news/media setting, this is with particular reference to editorial independence.   Note that the [[funder]] is also available and can be used to make basic funder information machine-readable.
	UnnamedSourcesPolicy() []CreativeWork_URL_Union                // For an [[Organization]] (typically a [[NewsMediaOrganization]]), a statement about policy on use of unnamed sources and the decision process required.
	VerificationFactCheckingPolicy() []CreativeWork_URL_Union      // Disclosure about verification and fact-checking processes for a [[NewsMediaOrganization]] or other fact-checking [[Organization]].
}
type newsMediaOrganizationStruct struct {
	organizationStruct

	ActionableFeedbackPolicy_        CreativeWork_URL_UnionSlice                `json:"actionableFeedbackPolicy,omitempty"`
	CorrectionsPolicy_               CreativeWork_URL_UnionSlice                `json:"correctionsPolicy,omitempty"`
	DiversityPolicy_                 CreativeWork_URL_UnionSlice                `json:"diversityPolicy,omitempty"`
	DiversityStaffingReport_         Article_URL_UnionSlice                     `json:"diversityStaffingReport,omitempty"`
	EthicsPolicy_                    CreativeWork_URL_UnionSlice                `json:"ethicsPolicy,omitempty"`
	Masthead_                        CreativeWork_URL_UnionSlice                `json:"masthead,omitempty"`
	MissionCoveragePrioritiesPolicy_ CreativeWork_URL_UnionSlice                `json:"missionCoveragePrioritiesPolicy,omitempty"`
	NoBylinesPolicy_                 CreativeWork_URL_UnionSlice                `json:"noBylinesPolicy,omitempty"`
	OwnershipFundingInfo_            AboutPage_CreativeWork_Text_URL_UnionSlice `json:"ownershipFundingInfo,omitempty"`
	UnnamedSourcesPolicy_            CreativeWork_URL_UnionSlice                `json:"unnamedSourcesPolicy,omitempty"`
	VerificationFactCheckingPolicy_  CreativeWork_URL_UnionSlice                `json:"verificationFactCheckingPolicy,omitempty"`
}

func (s *newsMediaOrganizationStruct) ActionableFeedbackPolicy() []CreativeWork_URL_Union {
	return s.ActionableFeedbackPolicy_
}
func (s *newsMediaOrganizationStruct) CorrectionsPolicy() []CreativeWork_URL_Union {
	return s.CorrectionsPolicy_
}
func (s *newsMediaOrganizationStruct) DiversityPolicy() []CreativeWork_URL_Union {
	return s.DiversityPolicy_
}
func (s *newsMediaOrganizationStruct) DiversityStaffingReport() []Article_URL_Union {
	return s.DiversityStaffingReport_
}
func (s *newsMediaOrganizationStruct) EthicsPolicy() []CreativeWork_URL_Union {
	return s.EthicsPolicy_
}
func (s *newsMediaOrganizationStruct) Masthead() []CreativeWork_URL_Union {
	return s.Masthead_
}
func (s *newsMediaOrganizationStruct) MissionCoveragePrioritiesPolicy() []CreativeWork_URL_Union {
	return s.MissionCoveragePrioritiesPolicy_
}
func (s *newsMediaOrganizationStruct) NoBylinesPolicy() []CreativeWork_URL_Union {
	return s.NoBylinesPolicy_
}
func (s *newsMediaOrganizationStruct) OwnershipFundingInfo() []AboutPage_CreativeWork_Text_URL_Union {
	return s.OwnershipFundingInfo_
}
func (s *newsMediaOrganizationStruct) UnnamedSourcesPolicy() []CreativeWork_URL_Union {
	return s.UnnamedSourcesPolicy_
}
func (s *newsMediaOrganizationStruct) VerificationFactCheckingPolicy() []CreativeWork_URL_Union {
	return s.VerificationFactCheckingPolicy_
}

type NewsMediaOrganizationSlice []NewsMediaOrganization

func (s *NewsMediaOrganizationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(NewsMediaOrganizationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(NewsMediaOrganization)
	}
	return nil
}

var _ NewsMediaOrganization = &newsMediaOrganizationStruct{}

// A publication containing information about varied topics that are pertinent to general information, a geographic area, or a specific subject matter (i.e. business, culture, education). Often published daily.
type Newspaper interface {
	// Parents
	Periodical
}
type newspaperStruct struct {
	periodicalStruct
}
type NewspaperSlice []Newspaper

func (s *NewspaperSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(NewspaperSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Newspaper)
	}
	return nil
}

var _ Newspaper = &newspaperStruct{}

// A nightclub or discotheque.
type NightClub interface {
	// Parents
	EntertainmentBusiness
}
type nightClubStruct struct {
	entertainmentBusinessStruct
}
type NightClubSlice []NightClub

func (s *NightClubSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(NightClubSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(NightClub)
	}
	return nil
}

var _ NightClub = &nightClubStruct{}

// NonprofitType enumerates several kinds of official non-profit types of which a non-profit organization can be.
type NonprofitType interface {
	// Parents
	Enumeration
}
type nonprofitTypeStruct struct {
	enumerationStruct
}
type NonprofitTypeSlice []NonprofitType

func (s *NonprofitTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(NonprofitTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(NonprofitType)
	}
	return nil
}

var _ NonprofitType = &nonprofitTypeStruct{}

// A notary.
type Notary interface {
	// Parents
	LegalService
}
type notaryStruct struct {
	legalServiceStruct
}
type NotarySlice []Notary

func (s *NotarySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(NotarySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Notary)
	}
	return nil
}

var _ Notary = &notaryStruct{}

// A file containing a note, primarily for the author.
type NoteDigitalDocument interface {
	// Parents
	DigitalDocument
}
type noteDigitalDocumentStruct struct {
	digitalDocumentStruct
}
type NoteDigitalDocumentSlice []NoteDigitalDocument

func (s *NoteDigitalDocumentSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(NoteDigitalDocumentSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(NoteDigitalDocument)
	}
	return nil
}

var _ NoteDigitalDocument = &noteDigitalDocumentStruct{}

// Data type: Number.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
type Number interface {
	Value() float64
	// Unions
	Boolean_Number_StructuredValue_Text_Union
	Boolean_Number_Union
	Distance_Number_Text_Union
	Duration_Number_QuantitativeValue_Union
	HyperTocEntry_Number_Union
	MonetaryAmount_MonetaryAmountDistribution_Number_Union
	MonetaryAmount_Number_PriceSpecification_Union
	MonetaryAmount_Number_Union
	Number_PriceSpecification_Text_Union
	Number_QualitativeValue_Text_Union
	Number_QualitativeValue_Union
	Number_QuantitativeValue_Text_Union
	Number_QuantitativeValue_Union
	Number_Text_Union
}
type numberStruct struct {
	value float64
}

func (s *numberStruct) implementsBoolean_Number_StructuredValue_Text_Union()              {}
func (s *numberStruct) implementsBoolean_Number_Union()                                   {}
func (s *numberStruct) implementsDistance_Number_Text_Union()                             {}
func (s *numberStruct) implementsDuration_Number_QuantitativeValue_Union()                {}
func (s *numberStruct) implementsHyperTocEntry_Number_Union()                             {}
func (s *numberStruct) implementsMonetaryAmount_MonetaryAmountDistribution_Number_Union() {}
func (s *numberStruct) implementsMonetaryAmount_Number_PriceSpecification_Union()         {}
func (s *numberStruct) implementsMonetaryAmount_Number_Union()                            {}
func (s *numberStruct) implementsNumber_PriceSpecification_Text_Union()                   {}
func (s *numberStruct) implementsNumber_QualitativeValue_Text_Union()                     {}
func (s *numberStruct) implementsNumber_QualitativeValue_Union()                          {}
func (s *numberStruct) implementsNumber_QuantitativeValue_Text_Union()                    {}
func (s *numberStruct) implementsNumber_QuantitativeValue_Union()                         {}
func (s *numberStruct) implementsNumber_Text_Union()                                      {}

func (s *numberStruct) Value() float64 {
	return s.value
}
func (s *numberStruct) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &s.value)
}
func (s *numberStruct) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.value)
}

type NumberSlice []Number

func (s *NumberSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(NumberSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Number)
	}
	return nil
}

var _ Number = &numberStruct{}

// Nutritional information about the recipe.
type NutritionInformation interface {
	// Parents
	StructuredValue
	// Accessors
	Calories() []Energy            // The number of calories.
	CarbohydrateContent() []Mass   // The number of grams of carbohydrates.
	CholesterolContent() []Mass    // The number of milligrams of cholesterol.
	FatContent() []Mass            // The number of grams of fat.
	FiberContent() []Mass          // The number of grams of fiber.
	ProteinContent() []Mass        // The number of grams of protein.
	SaturatedFatContent() []Mass   // The number of grams of saturated fat.
	ServingSize() []Text           // The serving size, in terms of the number of volume or mass.
	SodiumContent() []Mass         // The number of milligrams of sodium.
	SugarContent() []Mass          // The number of grams of sugar.
	TransFatContent() []Mass       // The number of grams of trans fat.
	UnsaturatedFatContent() []Mass // The number of grams of unsaturated fat.
}
type nutritionInformationStruct struct {
	structuredValueStruct

	Calories_              EnergySlice `json:"calories,omitempty"`
	CarbohydrateContent_   MassSlice   `json:"carbohydrateContent,omitempty"`
	CholesterolContent_    MassSlice   `json:"cholesterolContent,omitempty"`
	FatContent_            MassSlice   `json:"fatContent,omitempty"`
	FiberContent_          MassSlice   `json:"fiberContent,omitempty"`
	ProteinContent_        MassSlice   `json:"proteinContent,omitempty"`
	SaturatedFatContent_   MassSlice   `json:"saturatedFatContent,omitempty"`
	ServingSize_           TextSlice   `json:"servingSize,omitempty"`
	SodiumContent_         MassSlice   `json:"sodiumContent,omitempty"`
	SugarContent_          MassSlice   `json:"sugarContent,omitempty"`
	TransFatContent_       MassSlice   `json:"transFatContent,omitempty"`
	UnsaturatedFatContent_ MassSlice   `json:"unsaturatedFatContent,omitempty"`
}

func (s *nutritionInformationStruct) Calories() []Energy {
	return s.Calories_
}
func (s *nutritionInformationStruct) CarbohydrateContent() []Mass {
	return s.CarbohydrateContent_
}
func (s *nutritionInformationStruct) CholesterolContent() []Mass {
	return s.CholesterolContent_
}
func (s *nutritionInformationStruct) FatContent() []Mass {
	return s.FatContent_
}
func (s *nutritionInformationStruct) FiberContent() []Mass {
	return s.FiberContent_
}
func (s *nutritionInformationStruct) ProteinContent() []Mass {
	return s.ProteinContent_
}
func (s *nutritionInformationStruct) SaturatedFatContent() []Mass {
	return s.SaturatedFatContent_
}
func (s *nutritionInformationStruct) ServingSize() []Text {
	return s.ServingSize_
}
func (s *nutritionInformationStruct) SodiumContent() []Mass {
	return s.SodiumContent_
}
func (s *nutritionInformationStruct) SugarContent() []Mass {
	return s.SugarContent_
}
func (s *nutritionInformationStruct) TransFatContent() []Mass {
	return s.TransFatContent_
}
func (s *nutritionInformationStruct) UnsaturatedFatContent() []Mass {
	return s.UnsaturatedFatContent_
}

type NutritionInformationSlice []NutritionInformation

func (s *NutritionInformationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(NutritionInformationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(NutritionInformation)
	}
	return nil
}

var _ NutritionInformation = &nutritionInformationStruct{}

/*
Instances of the class [[Observation]] are used to specify observations about an entity (which may or may not be an instance of a [[StatisticalPopulation]]), at a particular time. The principal properties of an [[Observation]] are [[observedNode]], [[measuredProperty]], [[measuredValue]] (or [[median]], etc.) and [[observationDate]] ([[measuredProperty]] properties can, but need not always, be W3C RDF Data Cube "measure properties", as in the [lifeExpectancy example](https://www.w3.org/TR/vocab-data-cube/#dsd-example)).
See also [[StatisticalPopulation]], and the [data and datasets](/docs/data-and-datasets.html) overview for more details.

*/
type Observation interface {
	// Parents
	Intangible
	// Unions
	Dataset_Observation_URL_WebContent_Union
	// Accessors
	MarginOfError() []QuantitativeValue    // A marginOfError for an [[Observation]].
	MeasuredProperty() []Property          // The measuredProperty of an [[Observation]], either a schema.org property, a property from other RDF-compatible systems e.g. W3C RDF Data Cube, or schema.org extensions such as [GS1's](https://www.gs1.org/voc/?show=properties).
	MeasuredValue() []DataType             // The measuredValue of an [[Observation]].
	ObservationDate() []DateTime           // The observationDate of an [[Observation]].
	ObservedNode() []StatisticalPopulation // The observedNode of an [[Observation]], often a [[StatisticalPopulation]].
}
type observationStruct struct {
	intangibleStruct

	MarginOfError_    QuantitativeValueSlice     `json:"marginOfError,omitempty"`
	MeasuredProperty_ PropertySlice              `json:"measuredProperty,omitempty"`
	MeasuredValue_    DataTypeSlice              `json:"measuredValue,omitempty"`
	ObservationDate_  DateTimeSlice              `json:"observationDate,omitempty"`
	ObservedNode_     StatisticalPopulationSlice `json:"observedNode,omitempty"`
}

func (s *observationStruct) implementsDataset_Observation_URL_WebContent_Union() {}

func (s *observationStruct) MarginOfError() []QuantitativeValue {
	return s.MarginOfError_
}
func (s *observationStruct) MeasuredProperty() []Property {
	return s.MeasuredProperty_
}
func (s *observationStruct) MeasuredValue() []DataType {
	return s.MeasuredValue_
}
func (s *observationStruct) ObservationDate() []DateTime {
	return s.ObservationDate_
}
func (s *observationStruct) ObservedNode() []StatisticalPopulation {
	return s.ObservedNode_
}

type ObservationSlice []Observation

func (s *ObservationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ObservationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Observation)
	}
	return nil
}

var _ Observation = &observationStruct{}

// A profession, may involve prolonged training and/or a formal qualification.
type Occupation interface {
	// Parents
	Intangible
	// Accessors
	EducationRequirements() []EducationalOccupationalCredential_Text_Union     // Educational background needed for the position or Occupation.
	EstimatedSalary() []MonetaryAmount_MonetaryAmountDistribution_Number_Union // An estimated salary for a job posting or occupation, based on a variety of variables including, but not limited to industry, job title, and location. Estimated salaries  are often computed by outside organizations rather than the hiring organization, who may not have committed to the estimated value.
	ExperienceRequirements() []OccupationalExperienceRequirements_Text_Union   // Description of skills and experience needed for the position or Occupation.
	OccupationLocation() []AdministrativeArea                                  //  The region/country for which this occupational description is appropriate. Note that educational requirements and qualifications can vary between jurisdictions.
	OccupationalCategory() []CategoryCode_Text_Union                           /*
	A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.\n
	Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
	*/
	Qualifications() []EducationalOccupationalCredential_Text_Union // Specific qualifications required for this role or Occupation.
	Responsibilities() []Text                                       // Responsibilities associated with this role or Occupation.
	Skills() []DefinedTerm_Text_Union                               // A statement of knowledge, skill, ability, task or any other assertion expressing a competency that is desired or required to fulfill this role or to work in this occupation.
}
type occupationStruct struct {
	intangibleStruct

	EducationRequirements_  EducationalOccupationalCredential_Text_UnionSlice           `json:"educationRequirements,omitempty"`
	EstimatedSalary_        MonetaryAmount_MonetaryAmountDistribution_Number_UnionSlice `json:"estimatedSalary,omitempty"`
	ExperienceRequirements_ OccupationalExperienceRequirements_Text_UnionSlice          `json:"experienceRequirements,omitempty"`
	OccupationLocation_     AdministrativeAreaSlice                                     `json:"occupationLocation,omitempty"`
	OccupationalCategory_   CategoryCode_Text_UnionSlice                                `json:"occupationalCategory,omitempty"`
	Qualifications_         EducationalOccupationalCredential_Text_UnionSlice           `json:"qualifications,omitempty"`
	Responsibilities_       TextSlice                                                   `json:"responsibilities,omitempty"`
	Skills_                 DefinedTerm_Text_UnionSlice                                 `json:"skills,omitempty"`
}

func (s *occupationStruct) EducationRequirements() []EducationalOccupationalCredential_Text_Union {
	return s.EducationRequirements_
}
func (s *occupationStruct) EstimatedSalary() []MonetaryAmount_MonetaryAmountDistribution_Number_Union {
	return s.EstimatedSalary_
}
func (s *occupationStruct) ExperienceRequirements() []OccupationalExperienceRequirements_Text_Union {
	return s.ExperienceRequirements_
}
func (s *occupationStruct) OccupationLocation() []AdministrativeArea {
	return s.OccupationLocation_
}
func (s *occupationStruct) OccupationalCategory() []CategoryCode_Text_Union {
	return s.OccupationalCategory_
}
func (s *occupationStruct) Qualifications() []EducationalOccupationalCredential_Text_Union {
	return s.Qualifications_
}
func (s *occupationStruct) Responsibilities() []Text {
	return s.Responsibilities_
}
func (s *occupationStruct) Skills() []DefinedTerm_Text_Union {
	return s.Skills_
}

type OccupationSlice []Occupation

func (s *OccupationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OccupationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Occupation)
	}
	return nil
}

var _ Occupation = &occupationStruct{}

// Indicates employment-related experience requirements, e.g. [[monthsOfExperience]].
type OccupationalExperienceRequirements interface {
	// Parents
	Intangible
	// Unions
	OccupationalExperienceRequirements_Text_Union
	// Accessors
	MonthsOfExperience() []Number // Indicates the minimal number of months of experience required for a position.
}
type occupationalExperienceRequirementsStruct struct {
	intangibleStruct

	MonthsOfExperience_ NumberSlice `json:"monthsOfExperience,omitempty"`
}

func (s *occupationalExperienceRequirementsStruct) implementsOccupationalExperienceRequirements_Text_Union() {
}

func (s *occupationalExperienceRequirementsStruct) MonthsOfExperience() []Number {
	return s.MonthsOfExperience_
}

type OccupationalExperienceRequirementsSlice []OccupationalExperienceRequirements

func (s *OccupationalExperienceRequirementsSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OccupationalExperienceRequirementsSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OccupationalExperienceRequirements)
	}
	return nil
}

var _ OccupationalExperienceRequirements = &occupationalExperienceRequirementsStruct{}

// A treatment of people with physical, emotional, or social problems, using purposeful activity to help them overcome or learn to deal with their problems.
type OccupationalTherapy interface {
	// Parents
	MedicalTherapy
}
type occupationalTherapyStruct struct {
	medicalTherapyStruct
}
type OccupationalTherapySlice []OccupationalTherapy

func (s *OccupationalTherapySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OccupationalTherapySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OccupationalTherapy)
	}
	return nil
}

var _ OccupationalTherapy = &occupationalTherapyStruct{}

// An ocean (for example, the Pacific).
type OceanBodyOfWater interface {
	// Parents
	BodyOfWater
}
type oceanBodyOfWaterStruct struct {
	bodyOfWaterStruct
}
type OceanBodyOfWaterSlice []OceanBodyOfWater

func (s *OceanBodyOfWaterSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OceanBodyOfWaterSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OceanBodyOfWater)
	}
	return nil
}

var _ OceanBodyOfWater = &oceanBodyOfWaterStruct{}

// An offer to transfer some rights to an item or to provide a service — for example, an offer to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet, to repair a motorcycle, or to loan a book.\n\nNote: As the [[businessFunction]] property, which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction value can be assumed to be an offer to sell.\n\nFor [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator) and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide) from [GS1](http://www.gs1.org/).
type Offer interface {
	// Parents
	Intangible
	// Unions
	Demand_Offer_Union
	// Accessors
	AcceptedPaymentMethod() []LoanOrCredit_PaymentMethod_Union              // The payment method(s) accepted by seller for this offer.
	AddOn() []Offer                                                         // An additional offer that can only be obtained in combination with the first base offer (e.g. supplements and extensions that are available for a surcharge).
	AdvanceBookingRequirement() []QuantitativeValue                         // The amount of time that is required between accepting the offer and the actual usage of the resource or service.
	AggregateRating() []AggregateRating                                     // The overall rating, based on a collection of reviews or ratings, of the item.
	AreaServed() []AdministrativeArea_GeoShape_Place_Text_Union             // The geographic area where a service or offered item is provided.
	Availability() []ItemAvailability                                       // The availability of this item&#x2014;for example In stock, Out of stock, Pre-order, etc.
	AvailabilityEnds() []Date_DateTime_Time_Union                           // The end of the availability of the product or service included in the offer.
	AvailabilityStarts() []Date_DateTime_Time_Union                         // The beginning of the availability of the product or service included in the offer.
	AvailableAtOrFrom() []Place                                             // The place(s) from which the offer can be obtained (e.g. store locations).
	AvailableDeliveryMethod() []DeliveryMethod                              // The delivery method(s) available for this offer.
	BusinessFunction() []BusinessFunction                                   // The business function (e.g. sell, lease, repair, dispose) of the offer or component of a bundle (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell.
	Category() []CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union // A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
	DeliveryLeadTime() []QuantitativeValue                                  // The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup.
	EligibleCustomerType() []BusinessEntityType                             // The type(s) of customers for which the given offer is valid.
	EligibleDuration() []QuantitativeValue                                  // The duration for which the given offer is valid.
	EligibleQuantity() []QuantitativeValue                                  // The interval and unit of measurement of ordering quantities for which the offer or price specification is valid. This allows e.g. specifying that a certain freight charge is valid only for a certain quantity.
	EligibleRegion() []GeoShape_Place_Text_Union                            /*
	The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is valid.\n\nSee also [[ineligibleRegion]].

	*/
	EligibleTransactionVolume() []PriceSpecification // The transaction volume, in a monetary unit, for which the offer or price specification is valid, e.g. for indicating a minimal purchasing volume, to express free shipping above a certain order volume, or to limit the acceptance of credit cards to purchases to a certain minimal amount.
	Gtin() []Text                                    /*
	A Global Trade Item Number ([GTIN](https://www.gs1.org/standards/id-keys/gtin)). GTINs identify trade items, including products and services, using numeric identification codes. The [[gtin]] property generalizes the earlier [[gtin8]], [[gtin12]], [[gtin13]], and [[gtin14]] properties. The GS1 [digital link specifications](https://www.gs1.org/standards/Digital-Link/) express GTINs as URLs. A correct [[gtin]] value should be a valid GTIN, which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or a "GS1 Digital Link" URL based on such a string. The numeric component should also have a [valid GS1 check digit](https://www.gs1.org/services/check-digit-calculator) and meet the other rules for valid GTINs. See also [GS1's GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) and [Wikipedia](https://en.wikipedia.org/wiki/Global_Trade_Item_Number) for more details. Left-padding of the gtin values is not required or encouraged.

	*/
	Gtin12() []Text                                    // The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin13() []Text                                    // The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceding zero. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin14() []Text                                    // The GTIN-14 code of the product, or the product to which the offer refers. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin8() []Text                                     // The GTIN-8 code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	HasAdultConsideration() []AdultOrientedEnumeration // Used to tag an item to be intended or suitable for consumption or use by adults only.
	HasMeasurement() []QuantitativeValue               // A product measurement, for example the inseam of pants, the wheel size of a bicycle, or the gauge of a screw. Usually an exact measurement, but can also be a range of measurements for adjustable products, for example belts and ski bindings.
	HasMerchantReturnPolicy() []MerchantReturnPolicy   // Specifies a MerchantReturnPolicy that may be applicable.
	IncludesObject() []TypeAndQuantityNode             // This links to a node or nodes indicating the exact quantity of the products included in  an [[Offer]] or [[ProductCollection]].
	IneligibleRegion() []GeoShape_Place_Text_Union     /*
	The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for the geo-political region(s) for which the offer or delivery charge specification is not valid, e.g. a region where the transaction is not allowed.\n\nSee also [[eligibleRegion]].

	*/
	InventoryLevel() []QuantitativeValue                                                  // The current approximate inventory level for the item or items.
	IsFamilyFriendly() []Boolean                                                          // Indicates whether this content is family friendly.
	ItemCondition() []OfferItemCondition                                                  // A predefined value from OfferItemCondition specifying the condition of the product or service, or the products or services included in the offer. Also used for product return policies to specify the condition of products accepted for returns.
	ItemOffered() []AggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union // An item being offered (or demanded). The transactional nature of the offer or demand is documented using [[businessFunction]], e.g. sell, lease etc. While several common expected types are listed explicitly in this definition, others can be used. Using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
	LeaseLength() []Duration_QuantitativeValue_Union                                      // Length of the lease for some [[Accommodation]], either particular to some [[Offer]] or in some cases intrinsic to the property.
	Mpn() []Text                                                                          // The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers.
	OfferedBy() []Organization_Person_Union                                               // A pointer to the organization or person making the offer.
	Price() []Number_Text_Union                                                           /*
	The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.\n\nUsage guidelines:\n\n* Use the [[priceCurrency]] property (with standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR") instead of including [ambiguous symbols](http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign) such as '$' in the value.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.\n* Note that both [RDFa](http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute) and Microdata syntax allow the use of a "content=" attribute for publishing simple machine-readable values alongside more human-friendly formatting.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.

	*/
	PriceCurrency() []Text                    // The currency of the price, or a price component when attached to [[PriceSpecification]] and its subtypes.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	PriceSpecification() []PriceSpecification // One or more detailed price specifications, indicating the unit price and delivery or payment charges.
	PriceValidUntil() []Date                  // The date after which the price is no longer available.
	Review() []Review                         // A review of the item.
	Reviews() []Review                        // Review of the item.
	Seller() []Organization_Person_Union      // An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
	SerialNumber() []Text                     // The serial number or any alphanumeric identifier of a particular product. When attached to an offer, it is a shortcut for the serial number of the product included in the offer.
	ShippingDetails() []OfferShippingDetails  // Indicates information about the shipping policies and options associated with an [[Offer]].
	Sku() []Text                              // The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers.
	ValidFrom() []Date_DateTime_Union         // The date when the item becomes valid.
	ValidThrough() []Date_DateTime_Union      // The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
	Warranty() []WarrantyPromise              // The warranty promise(s) included in the offer.
}
type offerStruct struct {
	intangibleStruct

	AcceptedPaymentMethod_     LoanOrCredit_PaymentMethod_UnionSlice                                      `json:"acceptedPaymentMethod,omitempty"`
	AddOn_                     OfferSlice                                                                 `json:"addOn,omitempty"`
	AdvanceBookingRequirement_ QuantitativeValueSlice                                                     `json:"advanceBookingRequirement,omitempty"`
	AggregateRating_           AggregateRatingSlice                                                       `json:"aggregateRating,omitempty"`
	AreaServed_                AdministrativeArea_GeoShape_Place_Text_UnionSlice                          `json:"areaServed,omitempty"`
	Availability_              ItemAvailabilitySlice                                                      `json:"availability,omitempty"`
	AvailabilityEnds_          Date_DateTime_Time_UnionSlice                                              `json:"availabilityEnds,omitempty"`
	AvailabilityStarts_        Date_DateTime_Time_UnionSlice                                              `json:"availabilityStarts,omitempty"`
	AvailableAtOrFrom_         PlaceSlice                                                                 `json:"availableAtOrFrom,omitempty"`
	AvailableDeliveryMethod_   DeliveryMethodSlice                                                        `json:"availableDeliveryMethod,omitempty"`
	BusinessFunction_          BusinessFunctionSlice                                                      `json:"businessFunction,omitempty"`
	Category_                  CategoryCode_PhysicalActivityCategory_Text_Thing_URL_UnionSlice            `json:"category,omitempty"`
	DeliveryLeadTime_          QuantitativeValueSlice                                                     `json:"deliveryLeadTime,omitempty"`
	EligibleCustomerType_      BusinessEntityTypeSlice                                                    `json:"eligibleCustomerType,omitempty"`
	EligibleDuration_          QuantitativeValueSlice                                                     `json:"eligibleDuration,omitempty"`
	EligibleQuantity_          QuantitativeValueSlice                                                     `json:"eligibleQuantity,omitempty"`
	EligibleRegion_            GeoShape_Place_Text_UnionSlice                                             `json:"eligibleRegion,omitempty"`
	EligibleTransactionVolume_ PriceSpecificationSlice                                                    `json:"eligibleTransactionVolume,omitempty"`
	Gtin_                      TextSlice                                                                  `json:"gtin,omitempty"`
	Gtin12_                    TextSlice                                                                  `json:"gtin12,omitempty"`
	Gtin13_                    TextSlice                                                                  `json:"gtin13,omitempty"`
	Gtin14_                    TextSlice                                                                  `json:"gtin14,omitempty"`
	Gtin8_                     TextSlice                                                                  `json:"gtin8,omitempty"`
	HasAdultConsideration_     AdultOrientedEnumerationSlice                                              `json:"hasAdultConsideration,omitempty"`
	HasMeasurement_            QuantitativeValueSlice                                                     `json:"hasMeasurement,omitempty"`
	HasMerchantReturnPolicy_   MerchantReturnPolicySlice                                                  `json:"hasMerchantReturnPolicy,omitempty"`
	IncludesObject_            TypeAndQuantityNodeSlice                                                   `json:"includesObject,omitempty"`
	IneligibleRegion_          GeoShape_Place_Text_UnionSlice                                             `json:"ineligibleRegion,omitempty"`
	InventoryLevel_            QuantitativeValueSlice                                                     `json:"inventoryLevel,omitempty"`
	IsFamilyFriendly_          BooleanSlice                                                               `json:"isFamilyFriendly,omitempty"`
	ItemCondition_             OfferItemConditionSlice                                                    `json:"itemCondition,omitempty"`
	ItemOffered_               AggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_UnionSlice `json:"itemOffered,omitempty"`
	LeaseLength_               Duration_QuantitativeValue_UnionSlice                                      `json:"leaseLength,omitempty"`
	Mpn_                       TextSlice                                                                  `json:"mpn,omitempty"`
	OfferedBy_                 Organization_Person_UnionSlice                                             `json:"offeredBy,omitempty"`
	Price_                     Number_Text_UnionSlice                                                     `json:"price,omitempty"`
	PriceCurrency_             TextSlice                                                                  `json:"priceCurrency,omitempty"`
	PriceSpecification_        PriceSpecificationSlice                                                    `json:"priceSpecification,omitempty"`
	PriceValidUntil_           DateSlice                                                                  `json:"priceValidUntil,omitempty"`
	Review_                    ReviewSlice                                                                `json:"review,omitempty"`
	Reviews_                   ReviewSlice                                                                `json:"reviews,omitempty"`
	Seller_                    Organization_Person_UnionSlice                                             `json:"seller,omitempty"`
	SerialNumber_              TextSlice                                                                  `json:"serialNumber,omitempty"`
	ShippingDetails_           OfferShippingDetailsSlice                                                  `json:"shippingDetails,omitempty"`
	Sku_                       TextSlice                                                                  `json:"sku,omitempty"`
	ValidFrom_                 Date_DateTime_UnionSlice                                                   `json:"validFrom,omitempty"`
	ValidThrough_              Date_DateTime_UnionSlice                                                   `json:"validThrough,omitempty"`
	Warranty_                  WarrantyPromiseSlice                                                       `json:"warranty,omitempty"`
}

func (s *offerStruct) implementsDemand_Offer_Union() {}

func (s *offerStruct) AcceptedPaymentMethod() []LoanOrCredit_PaymentMethod_Union {
	return s.AcceptedPaymentMethod_
}
func (s *offerStruct) AddOn() []Offer {
	return s.AddOn_
}
func (s *offerStruct) AdvanceBookingRequirement() []QuantitativeValue {
	return s.AdvanceBookingRequirement_
}
func (s *offerStruct) AggregateRating() []AggregateRating {
	return s.AggregateRating_
}
func (s *offerStruct) AreaServed() []AdministrativeArea_GeoShape_Place_Text_Union {
	return s.AreaServed_
}
func (s *offerStruct) Availability() []ItemAvailability {
	return s.Availability_
}
func (s *offerStruct) AvailabilityEnds() []Date_DateTime_Time_Union {
	return s.AvailabilityEnds_
}
func (s *offerStruct) AvailabilityStarts() []Date_DateTime_Time_Union {
	return s.AvailabilityStarts_
}
func (s *offerStruct) AvailableAtOrFrom() []Place {
	return s.AvailableAtOrFrom_
}
func (s *offerStruct) AvailableDeliveryMethod() []DeliveryMethod {
	return s.AvailableDeliveryMethod_
}
func (s *offerStruct) BusinessFunction() []BusinessFunction {
	return s.BusinessFunction_
}
func (s *offerStruct) Category() []CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union {
	return s.Category_
}
func (s *offerStruct) DeliveryLeadTime() []QuantitativeValue {
	return s.DeliveryLeadTime_
}
func (s *offerStruct) EligibleCustomerType() []BusinessEntityType {
	return s.EligibleCustomerType_
}
func (s *offerStruct) EligibleDuration() []QuantitativeValue {
	return s.EligibleDuration_
}
func (s *offerStruct) EligibleQuantity() []QuantitativeValue {
	return s.EligibleQuantity_
}
func (s *offerStruct) EligibleRegion() []GeoShape_Place_Text_Union {
	return s.EligibleRegion_
}
func (s *offerStruct) EligibleTransactionVolume() []PriceSpecification {
	return s.EligibleTransactionVolume_
}
func (s *offerStruct) Gtin() []Text {
	return s.Gtin_
}
func (s *offerStruct) Gtin12() []Text {
	return s.Gtin12_
}
func (s *offerStruct) Gtin13() []Text {
	return s.Gtin13_
}
func (s *offerStruct) Gtin14() []Text {
	return s.Gtin14_
}
func (s *offerStruct) Gtin8() []Text {
	return s.Gtin8_
}
func (s *offerStruct) HasAdultConsideration() []AdultOrientedEnumeration {
	return s.HasAdultConsideration_
}
func (s *offerStruct) HasMeasurement() []QuantitativeValue {
	return s.HasMeasurement_
}
func (s *offerStruct) HasMerchantReturnPolicy() []MerchantReturnPolicy {
	return s.HasMerchantReturnPolicy_
}
func (s *offerStruct) IncludesObject() []TypeAndQuantityNode {
	return s.IncludesObject_
}
func (s *offerStruct) IneligibleRegion() []GeoShape_Place_Text_Union {
	return s.IneligibleRegion_
}
func (s *offerStruct) InventoryLevel() []QuantitativeValue {
	return s.InventoryLevel_
}
func (s *offerStruct) IsFamilyFriendly() []Boolean {
	return s.IsFamilyFriendly_
}
func (s *offerStruct) ItemCondition() []OfferItemCondition {
	return s.ItemCondition_
}
func (s *offerStruct) ItemOffered() []AggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union {
	return s.ItemOffered_
}
func (s *offerStruct) LeaseLength() []Duration_QuantitativeValue_Union {
	return s.LeaseLength_
}
func (s *offerStruct) Mpn() []Text {
	return s.Mpn_
}
func (s *offerStruct) OfferedBy() []Organization_Person_Union {
	return s.OfferedBy_
}
func (s *offerStruct) Price() []Number_Text_Union {
	return s.Price_
}
func (s *offerStruct) PriceCurrency() []Text {
	return s.PriceCurrency_
}
func (s *offerStruct) PriceSpecification() []PriceSpecification {
	return s.PriceSpecification_
}
func (s *offerStruct) PriceValidUntil() []Date {
	return s.PriceValidUntil_
}
func (s *offerStruct) Review() []Review {
	return s.Review_
}
func (s *offerStruct) Reviews() []Review {
	return s.Reviews_
}
func (s *offerStruct) Seller() []Organization_Person_Union {
	return s.Seller_
}
func (s *offerStruct) SerialNumber() []Text {
	return s.SerialNumber_
}
func (s *offerStruct) ShippingDetails() []OfferShippingDetails {
	return s.ShippingDetails_
}
func (s *offerStruct) Sku() []Text {
	return s.Sku_
}
func (s *offerStruct) ValidFrom() []Date_DateTime_Union {
	return s.ValidFrom_
}
func (s *offerStruct) ValidThrough() []Date_DateTime_Union {
	return s.ValidThrough_
}
func (s *offerStruct) Warranty() []WarrantyPromise {
	return s.Warranty_
}

type OfferSlice []Offer

func (s *OfferSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OfferSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Offer)
	}
	return nil
}

var _ Offer = &offerStruct{}

// An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs that are offeredBy the same provider.
type OfferCatalog interface {
	// Parents
	ItemList
}
type offerCatalogStruct struct {
	itemListStruct
}
type OfferCatalogSlice []OfferCatalog

func (s *OfferCatalogSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OfferCatalogSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OfferCatalog)
	}
	return nil
}

var _ OfferCatalog = &offerCatalogStruct{}

/*
An [[OfferForLease]] in Schema.org represents an [[Offer]] to lease out something, i.e. an [[Offer]] whose
  [[businessFunction]] is [lease out](http://purl.org/goodrelations/v1#LeaseOut.). See [Good Relations](https://en.wikipedia.org/wiki/GoodRelations) for
  background on the underlying concepts.

*/
type OfferForLease interface {
	// Parents
	Offer
}
type offerForLeaseStruct struct {
	offerStruct
}
type OfferForLeaseSlice []OfferForLease

func (s *OfferForLeaseSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OfferForLeaseSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OfferForLease)
	}
	return nil
}

var _ OfferForLease = &offerForLeaseStruct{}

/*
An [[OfferForPurchase]] in Schema.org represents an [[Offer]] to sell something, i.e. an [[Offer]] whose
  [[businessFunction]] is [sell](http://purl.org/goodrelations/v1#Sell.). See [Good Relations](https://en.wikipedia.org/wiki/GoodRelations) for
  background on the underlying concepts.

*/
type OfferForPurchase interface {
	// Parents
	Offer
}
type offerForPurchaseStruct struct {
	offerStruct
}
type OfferForPurchaseSlice []OfferForPurchase

func (s *OfferForPurchaseSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OfferForPurchaseSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OfferForPurchase)
	}
	return nil
}

var _ OfferForPurchase = &offerForPurchaseStruct{}

// A list of possible conditions for the item.
type OfferItemCondition interface {
	// Parents
	Enumeration
}
type offerItemConditionStruct struct {
	enumerationStruct
}
type OfferItemConditionSlice []OfferItemCondition

func (s *OfferItemConditionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OfferItemConditionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OfferItemCondition)
	}
	return nil
}

var _ OfferItemCondition = &offerItemConditionStruct{}

/*
OfferShippingDetails represents information about shipping destinations.

Multiple of these entities can be used to represent different shipping rates for different destinations:

One entity for Alaska/Hawaii. A different one for continental US.A different one for all France.

Multiple of these entities can be used to represent different shipping costs and delivery times.

Two entities that are identical but differ in rate and time:

e.g. Cheaper and slower: $5 in 5-7days
or Fast and expensive: $15 in 1-2 days.
*/
type OfferShippingDetails interface {
	// Parents
	StructuredValue
	// Accessors
	DeliveryTime() []ShippingDeliveryTime // The total delay between the receipt of the order and the goods reaching the final customer.
	DoesNotShip() []Boolean               // Indicates when shipping to a particular [[shippingDestination]] is not available.
	ShippingDestination() []DefinedRegion // indicates (possibly multiple) shipping destinations. These can be defined in several ways e.g. postalCode ranges.
	ShippingLabel() []Text                // Label to match an [[OfferShippingDetails]] with a [[ShippingRateSettings]] (within the context of a [[shippingSettingsLink]] cross-reference).
	ShippingRate() []MonetaryAmount       // The shipping rate is the cost of shipping to the specified destination. Typically, the maxValue and currency values (of the [[MonetaryAmount]]) are most appropriate.
	ShippingSettingsLink() []URL          // Link to a page containing [[ShippingRateSettings]] and [[DeliveryTimeSettings]] details.
	TransitTimeLabel() []Text             // Label to match an [[OfferShippingDetails]] with a [[DeliveryTimeSettings]] (within the context of a [[shippingSettingsLink]] cross-reference).
}
type offerShippingDetailsStruct struct {
	structuredValueStruct

	DeliveryTime_         ShippingDeliveryTimeSlice `json:"deliveryTime,omitempty"`
	DoesNotShip_          BooleanSlice              `json:"doesNotShip,omitempty"`
	ShippingDestination_  DefinedRegionSlice        `json:"shippingDestination,omitempty"`
	ShippingLabel_        TextSlice                 `json:"shippingLabel,omitempty"`
	ShippingRate_         MonetaryAmountSlice       `json:"shippingRate,omitempty"`
	ShippingSettingsLink_ URLSlice                  `json:"shippingSettingsLink,omitempty"`
	TransitTimeLabel_     TextSlice                 `json:"transitTimeLabel,omitempty"`
}

func (s *offerShippingDetailsStruct) DeliveryTime() []ShippingDeliveryTime {
	return s.DeliveryTime_
}
func (s *offerShippingDetailsStruct) DoesNotShip() []Boolean {
	return s.DoesNotShip_
}
func (s *offerShippingDetailsStruct) ShippingDestination() []DefinedRegion {
	return s.ShippingDestination_
}
func (s *offerShippingDetailsStruct) ShippingLabel() []Text {
	return s.ShippingLabel_
}
func (s *offerShippingDetailsStruct) ShippingRate() []MonetaryAmount {
	return s.ShippingRate_
}
func (s *offerShippingDetailsStruct) ShippingSettingsLink() []URL {
	return s.ShippingSettingsLink_
}
func (s *offerShippingDetailsStruct) TransitTimeLabel() []Text {
	return s.TransitTimeLabel_
}

type OfferShippingDetailsSlice []OfferShippingDetails

func (s *OfferShippingDetailsSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OfferShippingDetailsSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OfferShippingDetails)
	}
	return nil
}

var _ OfferShippingDetails = &offerShippingDetailsStruct{}

// An office equipment store.
type OfficeEquipmentStore interface {
	// Parents
	Store
}
type officeEquipmentStoreStruct struct {
	storeStruct
}
type OfficeEquipmentStoreSlice []OfficeEquipmentStore

func (s *OfficeEquipmentStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OfficeEquipmentStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OfficeEquipmentStore)
	}
	return nil
}

var _ OfficeEquipmentStore = &officeEquipmentStoreStruct{}

// A publication event e.g. catch-up TV or radio podcast, during which a program is available on-demand.
type OnDemandEvent interface {
	// Parents
	PublicationEvent
}
type onDemandEventStruct struct {
	publicationEventStruct
}
type OnDemandEventSlice []OnDemandEvent

func (s *OnDemandEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OnDemandEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OnDemandEvent)
	}
	return nil
}

var _ OnDemandEvent = &onDemandEventStruct{}

// A particular online business, either standalone or the online part of a broader organization. Examples include an eCommerce site, an online travel booking site, an online learning site, an online logistics and shipping provider, an online (virtual) doctor, etc.
type OnlineBusiness interface {
	// Parents
	Organization
}
type onlineBusinessStruct struct {
	organizationStruct
}
type OnlineBusinessSlice []OnlineBusiness

func (s *OnlineBusinessSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OnlineBusinessSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OnlineBusiness)
	}
	return nil
}

var _ OnlineBusiness = &onlineBusinessStruct{}

// An eCommerce site.
type OnlineStore interface {
	// Parents
	OnlineBusiness
}
type onlineStoreStruct struct {
	onlineBusinessStruct
}
type OnlineStoreSlice []OnlineStore

func (s *OnlineStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OnlineStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OnlineStore)
	}
	return nil
}

var _ OnlineStore = &onlineStoreStruct{}

/*
A structured value providing information about the opening hours of a place or a certain service inside a place.\n\n
The place is __open__ if the [[opens]] property is specified, and __closed__ otherwise.\n\nIf the value for the [[closes]] property is less than the value for the [[opens]] property then the hour range is assumed to span over the next day.

*/
type OpeningHoursSpecification interface {
	// Parents
	StructuredValue
	// Accessors
	Closes() []Time                      // The closing hour of the place or service on the given day(s) of the week.
	DayOfWeek() []DayOfWeek              // The day of the week for which these opening hours are valid.
	Opens() []Time                       // The opening hour of the place or service on the given day(s) of the week.
	ValidFrom() []Date_DateTime_Union    // The date when the item becomes valid.
	ValidThrough() []Date_DateTime_Union // The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
}
type openingHoursSpecificationStruct struct {
	structuredValueStruct

	Closes_       TimeSlice                `json:"closes,omitempty"`
	DayOfWeek_    DayOfWeekSlice           `json:"dayOfWeek,omitempty"`
	Opens_        TimeSlice                `json:"opens,omitempty"`
	ValidFrom_    Date_DateTime_UnionSlice `json:"validFrom,omitempty"`
	ValidThrough_ Date_DateTime_UnionSlice `json:"validThrough,omitempty"`
}

func (s *openingHoursSpecificationStruct) Closes() []Time {
	return s.Closes_
}
func (s *openingHoursSpecificationStruct) DayOfWeek() []DayOfWeek {
	return s.DayOfWeek_
}
func (s *openingHoursSpecificationStruct) Opens() []Time {
	return s.Opens_
}
func (s *openingHoursSpecificationStruct) ValidFrom() []Date_DateTime_Union {
	return s.ValidFrom_
}
func (s *openingHoursSpecificationStruct) ValidThrough() []Date_DateTime_Union {
	return s.ValidThrough_
}

type OpeningHoursSpecificationSlice []OpeningHoursSpecification

func (s *OpeningHoursSpecificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OpeningHoursSpecificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OpeningHoursSpecification)
	}
	return nil
}

var _ OpeningHoursSpecification = &openingHoursSpecificationStruct{}

// An [[OpinionNewsArticle]] is a [[NewsArticle]] that primarily expresses opinions rather than journalistic reporting of news and events. For example, a [[NewsArticle]] consisting of a column or [[Blog]]/[[BlogPosting]] entry in the Opinions section of a news publication.
type OpinionNewsArticle interface {
	// Parents
	NewsArticle
}
type opinionNewsArticleStruct struct {
	newsArticleStruct
}
type OpinionNewsArticleSlice []OpinionNewsArticle

func (s *OpinionNewsArticleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OpinionNewsArticleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OpinionNewsArticle)
	}
	return nil
}

var _ OpinionNewsArticle = &opinionNewsArticleStruct{}

// A store that sells reading glasses and similar devices for improving vision.
type Optician interface {
	// Parents
	MedicalBusiness
}
type opticianStruct struct {
	medicalBusinessStruct
}
type OpticianSlice []Optician

func (s *OpticianSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OpticianSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Optician)
	}
	return nil
}

var _ Optician = &opticianStruct{}

// An order is a confirmation of a transaction (a receipt), which can contain multiple line items, each represented by an Offer that has been accepted by the customer.
type Order interface {
	// Parents
	Intangible
	// Accessors
	AcceptedOffer() []Offer                         // The offer(s) -- e.g., product, quantity and price combinations -- included in the order.
	BillingAddress() []PostalAddress                // The billing address for the order.
	Broker() []Organization_Person_Union            // An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
	ConfirmationNumber() []Text                     // A number that confirms the given order or payment has been received.
	Customer() []Organization_Person_Union          // Party placing the order or paying the invoice.
	Discount() []Number_Text_Union                  // Any discount applied (to an Order).
	DiscountCode() []Text                           // Code used to redeem a discount.
	DiscountCurrency() []Text                       // The currency of the discount.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	IsGift() []Boolean                              // Was the offer accepted as a gift for someone other than the buyer.
	Merchant() []Organization_Person_Union          // 'merchant' is an out-dated term for 'seller'.
	OrderDate() []Date_DateTime_Union               // Date order was placed.
	OrderDelivery() []ParcelDelivery                // The delivery of the parcel related to this order or order item.
	OrderNumber() []Text                            // The identifier of the transaction.
	OrderStatus() []OrderStatus                     // The current status of the order.
	OrderedItem() []OrderItem_Product_Service_Union // The item ordered.
	PartOfInvoice() []Invoice                       // The order is being paid as part of the referenced Invoice.
	PaymentDue() []DateTime                         // The date that payment is due.
	PaymentDueDate() []Date_DateTime_Union          // The date that payment is due.
	PaymentMethod() []PaymentMethod                 // The name of the credit card or other method of payment for the order.
	PaymentMethodId() []Text                        // An identifier for the method of payment used (e.g. the last 4 digits of the credit card).
	PaymentUrl() []URL                              // The URL for sending a payment.
	Seller() []Organization_Person_Union            // An entity which offers (sells / leases / lends / loans) the services / goods.  A seller may also be a provider.
}
type orderStruct struct {
	intangibleStruct

	AcceptedOffer_      OfferSlice                           `json:"acceptedOffer,omitempty"`
	BillingAddress_     PostalAddressSlice                   `json:"billingAddress,omitempty"`
	Broker_             Organization_Person_UnionSlice       `json:"broker,omitempty"`
	ConfirmationNumber_ TextSlice                            `json:"confirmationNumber,omitempty"`
	Customer_           Organization_Person_UnionSlice       `json:"customer,omitempty"`
	Discount_           Number_Text_UnionSlice               `json:"discount,omitempty"`
	DiscountCode_       TextSlice                            `json:"discountCode,omitempty"`
	DiscountCurrency_   TextSlice                            `json:"discountCurrency,omitempty"`
	IsGift_             BooleanSlice                         `json:"isGift,omitempty"`
	Merchant_           Organization_Person_UnionSlice       `json:"merchant,omitempty"`
	OrderDate_          Date_DateTime_UnionSlice             `json:"orderDate,omitempty"`
	OrderDelivery_      ParcelDeliverySlice                  `json:"orderDelivery,omitempty"`
	OrderNumber_        TextSlice                            `json:"orderNumber,omitempty"`
	OrderStatus_        OrderStatusSlice                     `json:"orderStatus,omitempty"`
	OrderedItem_        OrderItem_Product_Service_UnionSlice `json:"orderedItem,omitempty"`
	PartOfInvoice_      InvoiceSlice                         `json:"partOfInvoice,omitempty"`
	PaymentDue_         DateTimeSlice                        `json:"paymentDue,omitempty"`
	PaymentDueDate_     Date_DateTime_UnionSlice             `json:"paymentDueDate,omitempty"`
	PaymentMethod_      PaymentMethodSlice                   `json:"paymentMethod,omitempty"`
	PaymentMethodId_    TextSlice                            `json:"paymentMethodId,omitempty"`
	PaymentUrl_         URLSlice                             `json:"paymentUrl,omitempty"`
	Seller_             Organization_Person_UnionSlice       `json:"seller,omitempty"`
}

func (s *orderStruct) AcceptedOffer() []Offer {
	return s.AcceptedOffer_
}
func (s *orderStruct) BillingAddress() []PostalAddress {
	return s.BillingAddress_
}
func (s *orderStruct) Broker() []Organization_Person_Union {
	return s.Broker_
}
func (s *orderStruct) ConfirmationNumber() []Text {
	return s.ConfirmationNumber_
}
func (s *orderStruct) Customer() []Organization_Person_Union {
	return s.Customer_
}
func (s *orderStruct) Discount() []Number_Text_Union {
	return s.Discount_
}
func (s *orderStruct) DiscountCode() []Text {
	return s.DiscountCode_
}
func (s *orderStruct) DiscountCurrency() []Text {
	return s.DiscountCurrency_
}
func (s *orderStruct) IsGift() []Boolean {
	return s.IsGift_
}
func (s *orderStruct) Merchant() []Organization_Person_Union {
	return s.Merchant_
}
func (s *orderStruct) OrderDate() []Date_DateTime_Union {
	return s.OrderDate_
}
func (s *orderStruct) OrderDelivery() []ParcelDelivery {
	return s.OrderDelivery_
}
func (s *orderStruct) OrderNumber() []Text {
	return s.OrderNumber_
}
func (s *orderStruct) OrderStatus() []OrderStatus {
	return s.OrderStatus_
}
func (s *orderStruct) OrderedItem() []OrderItem_Product_Service_Union {
	return s.OrderedItem_
}
func (s *orderStruct) PartOfInvoice() []Invoice {
	return s.PartOfInvoice_
}
func (s *orderStruct) PaymentDue() []DateTime {
	return s.PaymentDue_
}
func (s *orderStruct) PaymentDueDate() []Date_DateTime_Union {
	return s.PaymentDueDate_
}
func (s *orderStruct) PaymentMethod() []PaymentMethod {
	return s.PaymentMethod_
}
func (s *orderStruct) PaymentMethodId() []Text {
	return s.PaymentMethodId_
}
func (s *orderStruct) PaymentUrl() []URL {
	return s.PaymentUrl_
}
func (s *orderStruct) Seller() []Organization_Person_Union {
	return s.Seller_
}

type OrderSlice []Order

func (s *OrderSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OrderSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Order)
	}
	return nil
}

var _ Order = &orderStruct{}

// An agent orders an object/product/service to be delivered/sent.
type OrderAction interface {
	// Parents
	TradeAction
	// Accessors
	DeliveryMethod() []DeliveryMethod // A sub property of instrument. The method of delivery.
}
type orderActionStruct struct {
	tradeActionStruct

	DeliveryMethod_ DeliveryMethodSlice `json:"deliveryMethod,omitempty"`
}

func (s *orderActionStruct) DeliveryMethod() []DeliveryMethod {
	return s.DeliveryMethod_
}

type OrderActionSlice []OrderAction

func (s *OrderActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OrderActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OrderAction)
	}
	return nil
}

var _ OrderAction = &orderActionStruct{}

// An order item is a line of an order. It includes the quantity and shipping details of a bought offer.
type OrderItem interface {
	// Parents
	Intangible
	// Unions
	OrderItem_Product_Service_Union
	// Accessors
	OrderDelivery() []ParcelDelivery                // The delivery of the parcel related to this order or order item.
	OrderItemNumber() []Text                        // The identifier of the order item.
	OrderItemStatus() []OrderStatus                 // The current status of the order item.
	OrderQuantity() []Number                        // The number of the item ordered. If the property is not set, assume the quantity is one.
	OrderedItem() []OrderItem_Product_Service_Union // The item ordered.
}
type orderItemStruct struct {
	intangibleStruct

	OrderDelivery_   ParcelDeliverySlice                  `json:"orderDelivery,omitempty"`
	OrderItemNumber_ TextSlice                            `json:"orderItemNumber,omitempty"`
	OrderItemStatus_ OrderStatusSlice                     `json:"orderItemStatus,omitempty"`
	OrderQuantity_   NumberSlice                          `json:"orderQuantity,omitempty"`
	OrderedItem_     OrderItem_Product_Service_UnionSlice `json:"orderedItem,omitempty"`
}

func (s *orderItemStruct) implementsOrderItem_Product_Service_Union() {}

func (s *orderItemStruct) OrderDelivery() []ParcelDelivery {
	return s.OrderDelivery_
}
func (s *orderItemStruct) OrderItemNumber() []Text {
	return s.OrderItemNumber_
}
func (s *orderItemStruct) OrderItemStatus() []OrderStatus {
	return s.OrderItemStatus_
}
func (s *orderItemStruct) OrderQuantity() []Number {
	return s.OrderQuantity_
}
func (s *orderItemStruct) OrderedItem() []OrderItem_Product_Service_Union {
	return s.OrderedItem_
}

type OrderItemSlice []OrderItem

func (s *OrderItemSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OrderItemSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OrderItem)
	}
	return nil
}

var _ OrderItem = &orderItemStruct{}

// Enumerated status values for Order.
type OrderStatus interface {
	// Parents
	StatusEnumeration
}
type orderStatusStruct struct {
	statusEnumerationStruct
}
type OrderStatusSlice []OrderStatus

func (s *OrderStatusSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OrderStatusSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OrderStatus)
	}
	return nil
}

var _ OrderStatus = &orderStatusStruct{}

// An organization such as a school, NGO, corporation, club, etc.
type Organization interface {
	// Parents
	Thing
	// Unions
	Audience_ContactPoint_Organization_Person_Union
	Audience_Organization_Person_Union
	BioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union
	Brand_Organization_Union
	ContactPoint_Organization_Person_Union
	EducationalOrganization_Organization_Union
	Organization_Person_Union
	Organization_ProgramMembership_Union
	// Accessors
	ActionableFeedbackPolicy() []CreativeWork_URL_Union            // For a [[NewsMediaOrganization]] or other news-related [[Organization]], a statement about public engagement activities (for news media, the newsroom’s), including involving the public - digitally or otherwise -- in coverage decisions, reporting and activities after publication.
	Address() []PostalAddress_Text_Union                           // Physical address of the item.
	AggregateRating() []AggregateRating                            // The overall rating, based on a collection of reviews or ratings, of the item.
	Alumni() []Person                                              // Alumni of an organization.
	AreaServed() []AdministrativeArea_GeoShape_Place_Text_Union    // The geographic area where a service or offered item is provided.
	Award() []Text                                                 // An award won by or for this item.
	Awards() []Text                                                // Awards won by or for this item.
	Brand() []Brand_Organization_Union                             // The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
	ContactPoint() []ContactPoint                                  // A contact point for a person or organization.
	ContactPoints() []ContactPoint                                 // A contact point for a person or organization.
	CorrectionsPolicy() []CreativeWork_URL_Union                   // For an [[Organization]] (e.g. [[NewsMediaOrganization]]), a statement describing (in news media, the newsroom’s) disclosure and correction policy for errors.
	Department() []Organization                                    // A relationship between an organization and a department of that organization, also described as an organization (allowing different urls, logos, opening hours). For example: a store with a pharmacy, or a bakery with a cafe.
	DissolutionDate() []Date                                       // The date that this organization was dissolved.
	DiversityPolicy() []CreativeWork_URL_Union                     // Statement on diversity policy by an [[Organization]] e.g. a [[NewsMediaOrganization]]. For a [[NewsMediaOrganization]], a statement describing the newsroom’s diversity policy on both staffing and sources, typically providing staffing data.
	DiversityStaffingReport() []Article_URL_Union                  // For an [[Organization]] (often but not necessarily a [[NewsMediaOrganization]]), a report on staffing diversity issues. In a news context this might be for example ASNE or RTDNA (US) reports, or self-reported.
	Duns() []Text                                                  // The Dun & Bradstreet DUNS number for identifying an organization or business person.
	Email() []Text                                                 // Email address.
	Employee() []Person                                            // Someone working for this organization.
	Employees() []Person                                           // People working for this organization.
	EthicsPolicy() []CreativeWork_URL_Union                        // Statement about ethics policy, e.g. of a [[NewsMediaOrganization]] regarding journalistic and publishing practices, or of a [[Restaurant]], a page describing food source policies. In the case of a [[NewsMediaOrganization]], an ethicsPolicy is typically a statement describing the personal, organizational, and corporate standards of behavior expected by the organization.
	Event() []Event                                                // Upcoming or past event associated with this place, organization, or action.
	Events() []Event                                               // Upcoming or past events associated with this place or organization.
	FaxNumber() []Text                                             // The fax number.
	Founder() []Person                                             // A person who founded this organization.
	Founders() []Person                                            // A person who founded this organization.
	FoundingDate() []Date                                          // The date that this organization was founded.
	FoundingLocation() []Place                                     // The place where the Organization was founded.
	Funder() []Organization_Person_Union                           // A person or organization that supports (sponsors) something through some kind of financial contribution.
	Funding() []Grant                                              // A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
	GlobalLocationNumber() []Text                                  // The [Global Location Number](http://www.gs1.org/gln) (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.
	HasCredential() []EducationalOccupationalCredential            // A credential awarded to the Person or Organization.
	HasMerchantReturnPolicy() []MerchantReturnPolicy               // Specifies a MerchantReturnPolicy that may be applicable.
	HasOfferCatalog() []OfferCatalog                               // Indicates an OfferCatalog listing for this Organization, Person, or Service.
	HasPOS() []Place                                               // Points-of-Sales operated by the organization or person.
	InteractionStatistic() []InteractionCounter                    // The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used.
	IsicV4() []Text                                                // The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.
	Iso6523Code() []Text                                           // An organization identifier as defined in ISO 6523(-1). Note that many existing organization identifiers such as [leiCode](https://schema.org/leiCode), [duns](https://schema.org/duns) and [vatID](https://schema.org/vatID) can be expressed as an ISO 6523 identifier by setting the ICD part of the ISO 6523 identifier accordingly.
	Keywords() []DefinedTerm_Text_URL_Union                        // Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
	KnowsAbout() []Text_Thing_URL_Union                            // Of a [[Person]], and less typically of an [[Organization]], to indicate a topic that is known about - suggesting possible expertise but not implying it. We do not distinguish skill levels here, or relate this to educational content, events, objectives or [[JobPosting]] descriptions.
	KnowsLanguage() []Language_Text_Union                          // Of a [[Person]], and less typically of an [[Organization]], to indicate a known language. We do not distinguish skill levels or reading/writing/speaking/signing here. Use language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47).
	LegalName() []Text                                             // The official name of the organization, e.g. the registered company name.
	LeiCode() []Text                                               // An organization identifier that uniquely identifies a legal entity as defined in ISO 17442.
	Location() []Place_PostalAddress_Text_VirtualLocation_Union    // The location of, for example, where an event is happening, where an organization is located, or where an action takes place.
	Logo() []ImageObject_URL_Union                                 // An associated logo.
	MakesOffer() []Offer                                           // A pointer to products or services offered by the organization or person.
	Member() []Organization_Person_Union                           // A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals.
	MemberOf() []Organization_ProgramMembership_Union              // An Organization (or ProgramMembership) to which this Person or Organization belongs.
	Members() []Organization_Person_Union                          // A member of this organization.
	Naics() []Text                                                 // The North American Industry Classification System (NAICS) code for a particular organization or business person.
	NonprofitStatus() []NonprofitType                              // nonprofit Status indicates the legal status of a non-profit organization in its primary place of business.
	NumberOfEmployees() []QuantitativeValue                        // The number of employees in an organization e.g. business.
	OwnershipFundingInfo() []AboutPage_CreativeWork_Text_URL_Union // For an [[Organization]] (often but not necessarily a [[NewsMediaOrganization]]), a description of organizational ownership structure; funding and grants. In a news/media setting, this is with particular reference to editorial independence.   Note that the [[funder]] is also available and can be used to make basic funder information machine-readable.
	Owns() []OwnershipInfo_Product_Union                           // Products owned by the organization or person.
	ParentOrganization() []Organization                            // The larger organization that this organization is a [[subOrganization]] of, if any.
	PublishingPrinciples() []CreativeWork_URL_Union                /*
	The publishingPrinciples property indicates (typically via [[URL]]) a document describing the editorial principles of an [[Organization]] (or individual e.g. a [[Person]] writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a [[CreativeWork]] (e.g. [[NewsArticle]]) the principles are those of the party primarily responsible for the creation of the [[CreativeWork]].

	While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a [[funder]]) can be expressed using schema.org terminology.
	*/
	Review() []Review                                       // A review of the item.
	Reviews() []Review                                      // Review of the item.
	Seeks() []Demand                                        // A pointer to products or services sought by the organization or person (demand).
	ServiceArea() []AdministrativeArea_GeoShape_Place_Union // The geographic area where the service is provided.
	Slogan() []Text                                         // A slogan or motto associated with the item.
	Sponsor() []Organization_Person_Union                   // A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
	SubOrganization() []Organization                        // A relationship between two organizations where the first includes the second, e.g., as a subsidiary. See also: the more specific 'department' property.
	TaxID() []Text                                          // The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.
	Telephone() []Text                                      // The telephone number.
	UnnamedSourcesPolicy() []CreativeWork_URL_Union         // For an [[Organization]] (typically a [[NewsMediaOrganization]]), a statement about policy on use of unnamed sources and the decision process required.
	VatID() []Text                                          // The Value-added Tax ID of the organization or person.
}
type organizationStruct struct {
	thingStruct

	ActionableFeedbackPolicy_ CreativeWork_URL_UnionSlice                         `json:"actionableFeedbackPolicy,omitempty"`
	Address_                  PostalAddress_Text_UnionSlice                       `json:"address,omitempty"`
	AggregateRating_          AggregateRatingSlice                                `json:"aggregateRating,omitempty"`
	Alumni_                   PersonSlice                                         `json:"alumni,omitempty"`
	AreaServed_               AdministrativeArea_GeoShape_Place_Text_UnionSlice   `json:"areaServed,omitempty"`
	Award_                    TextSlice                                           `json:"award,omitempty"`
	Awards_                   TextSlice                                           `json:"awards,omitempty"`
	Brand_                    Brand_Organization_UnionSlice                       `json:"brand,omitempty"`
	ContactPoint_             ContactPointSlice                                   `json:"contactPoint,omitempty"`
	ContactPoints_            ContactPointSlice                                   `json:"contactPoints,omitempty"`
	CorrectionsPolicy_        CreativeWork_URL_UnionSlice                         `json:"correctionsPolicy,omitempty"`
	Department_               OrganizationSlice                                   `json:"department,omitempty"`
	DissolutionDate_          DateSlice                                           `json:"dissolutionDate,omitempty"`
	DiversityPolicy_          CreativeWork_URL_UnionSlice                         `json:"diversityPolicy,omitempty"`
	DiversityStaffingReport_  Article_URL_UnionSlice                              `json:"diversityStaffingReport,omitempty"`
	Duns_                     TextSlice                                           `json:"duns,omitempty"`
	Email_                    TextSlice                                           `json:"email,omitempty"`
	Employee_                 PersonSlice                                         `json:"employee,omitempty"`
	Employees_                PersonSlice                                         `json:"employees,omitempty"`
	EthicsPolicy_             CreativeWork_URL_UnionSlice                         `json:"ethicsPolicy,omitempty"`
	Event_                    EventSlice                                          `json:"event,omitempty"`
	Events_                   EventSlice                                          `json:"events,omitempty"`
	FaxNumber_                TextSlice                                           `json:"faxNumber,omitempty"`
	Founder_                  PersonSlice                                         `json:"founder,omitempty"`
	Founders_                 PersonSlice                                         `json:"founders,omitempty"`
	FoundingDate_             DateSlice                                           `json:"foundingDate,omitempty"`
	FoundingLocation_         PlaceSlice                                          `json:"foundingLocation,omitempty"`
	Funder_                   Organization_Person_UnionSlice                      `json:"funder,omitempty"`
	Funding_                  GrantSlice                                          `json:"funding,omitempty"`
	GlobalLocationNumber_     TextSlice                                           `json:"globalLocationNumber,omitempty"`
	HasCredential_            EducationalOccupationalCredentialSlice              `json:"hasCredential,omitempty"`
	HasMerchantReturnPolicy_  MerchantReturnPolicySlice                           `json:"hasMerchantReturnPolicy,omitempty"`
	HasOfferCatalog_          OfferCatalogSlice                                   `json:"hasOfferCatalog,omitempty"`
	HasPOS_                   PlaceSlice                                          `json:"hasPOS,omitempty"`
	InteractionStatistic_     InteractionCounterSlice                             `json:"interactionStatistic,omitempty"`
	IsicV4_                   TextSlice                                           `json:"isicV4,omitempty"`
	Iso6523Code_              TextSlice                                           `json:"iso6523Code,omitempty"`
	Keywords_                 DefinedTerm_Text_URL_UnionSlice                     `json:"keywords,omitempty"`
	KnowsAbout_               Text_Thing_URL_UnionSlice                           `json:"knowsAbout,omitempty"`
	KnowsLanguage_            Language_Text_UnionSlice                            `json:"knowsLanguage,omitempty"`
	LegalName_                TextSlice                                           `json:"legalName,omitempty"`
	LeiCode_                  TextSlice                                           `json:"leiCode,omitempty"`
	Location_                 Place_PostalAddress_Text_VirtualLocation_UnionSlice `json:"location,omitempty"`
	Logo_                     ImageObject_URL_UnionSlice                          `json:"logo,omitempty"`
	MakesOffer_               OfferSlice                                          `json:"makesOffer,omitempty"`
	Member_                   Organization_Person_UnionSlice                      `json:"member,omitempty"`
	MemberOf_                 Organization_ProgramMembership_UnionSlice           `json:"memberOf,omitempty"`
	Members_                  Organization_Person_UnionSlice                      `json:"members,omitempty"`
	Naics_                    TextSlice                                           `json:"naics,omitempty"`
	NonprofitStatus_          NonprofitTypeSlice                                  `json:"nonprofitStatus,omitempty"`
	NumberOfEmployees_        QuantitativeValueSlice                              `json:"numberOfEmployees,omitempty"`
	OwnershipFundingInfo_     AboutPage_CreativeWork_Text_URL_UnionSlice          `json:"ownershipFundingInfo,omitempty"`
	Owns_                     OwnershipInfo_Product_UnionSlice                    `json:"owns,omitempty"`
	ParentOrganization_       OrganizationSlice                                   `json:"parentOrganization,omitempty"`
	PublishingPrinciples_     CreativeWork_URL_UnionSlice                         `json:"publishingPrinciples,omitempty"`
	Review_                   ReviewSlice                                         `json:"review,omitempty"`
	Reviews_                  ReviewSlice                                         `json:"reviews,omitempty"`
	Seeks_                    DemandSlice                                         `json:"seeks,omitempty"`
	ServiceArea_              AdministrativeArea_GeoShape_Place_UnionSlice        `json:"serviceArea,omitempty"`
	Slogan_                   TextSlice                                           `json:"slogan,omitempty"`
	Sponsor_                  Organization_Person_UnionSlice                      `json:"sponsor,omitempty"`
	SubOrganization_          OrganizationSlice                                   `json:"subOrganization,omitempty"`
	TaxID_                    TextSlice                                           `json:"taxID,omitempty"`
	Telephone_                TextSlice                                           `json:"telephone,omitempty"`
	UnnamedSourcesPolicy_     CreativeWork_URL_UnionSlice                         `json:"unnamedSourcesPolicy,omitempty"`
	VatID_                    TextSlice                                           `json:"vatID,omitempty"`
}

func (s *organizationStruct) implementsAudience_ContactPoint_Organization_Person_Union() {}
func (s *organizationStruct) implementsAudience_Organization_Person_Union()              {}
func (s *organizationStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}
func (s *organizationStruct) implementsBrand_Organization_Union()                   {}
func (s *organizationStruct) implementsContactPoint_Organization_Person_Union()     {}
func (s *organizationStruct) implementsEducationalOrganization_Organization_Union() {}
func (s *organizationStruct) implementsOrganization_Person_Union()                  {}
func (s *organizationStruct) implementsOrganization_ProgramMembership_Union()       {}

func (s *organizationStruct) ActionableFeedbackPolicy() []CreativeWork_URL_Union {
	return s.ActionableFeedbackPolicy_
}
func (s *organizationStruct) Address() []PostalAddress_Text_Union {
	return s.Address_
}
func (s *organizationStruct) AggregateRating() []AggregateRating {
	return s.AggregateRating_
}
func (s *organizationStruct) Alumni() []Person {
	return s.Alumni_
}
func (s *organizationStruct) AreaServed() []AdministrativeArea_GeoShape_Place_Text_Union {
	return s.AreaServed_
}
func (s *organizationStruct) Award() []Text {
	return s.Award_
}
func (s *organizationStruct) Awards() []Text {
	return s.Awards_
}
func (s *organizationStruct) Brand() []Brand_Organization_Union {
	return s.Brand_
}
func (s *organizationStruct) ContactPoint() []ContactPoint {
	return s.ContactPoint_
}
func (s *organizationStruct) ContactPoints() []ContactPoint {
	return s.ContactPoints_
}
func (s *organizationStruct) CorrectionsPolicy() []CreativeWork_URL_Union {
	return s.CorrectionsPolicy_
}
func (s *organizationStruct) Department() []Organization {
	return s.Department_
}
func (s *organizationStruct) DissolutionDate() []Date {
	return s.DissolutionDate_
}
func (s *organizationStruct) DiversityPolicy() []CreativeWork_URL_Union {
	return s.DiversityPolicy_
}
func (s *organizationStruct) DiversityStaffingReport() []Article_URL_Union {
	return s.DiversityStaffingReport_
}
func (s *organizationStruct) Duns() []Text {
	return s.Duns_
}
func (s *organizationStruct) Email() []Text {
	return s.Email_
}
func (s *organizationStruct) Employee() []Person {
	return s.Employee_
}
func (s *organizationStruct) Employees() []Person {
	return s.Employees_
}
func (s *organizationStruct) EthicsPolicy() []CreativeWork_URL_Union {
	return s.EthicsPolicy_
}
func (s *organizationStruct) Event() []Event {
	return s.Event_
}
func (s *organizationStruct) Events() []Event {
	return s.Events_
}
func (s *organizationStruct) FaxNumber() []Text {
	return s.FaxNumber_
}
func (s *organizationStruct) Founder() []Person {
	return s.Founder_
}
func (s *organizationStruct) Founders() []Person {
	return s.Founders_
}
func (s *organizationStruct) FoundingDate() []Date {
	return s.FoundingDate_
}
func (s *organizationStruct) FoundingLocation() []Place {
	return s.FoundingLocation_
}
func (s *organizationStruct) Funder() []Organization_Person_Union {
	return s.Funder_
}
func (s *organizationStruct) Funding() []Grant {
	return s.Funding_
}
func (s *organizationStruct) GlobalLocationNumber() []Text {
	return s.GlobalLocationNumber_
}
func (s *organizationStruct) HasCredential() []EducationalOccupationalCredential {
	return s.HasCredential_
}
func (s *organizationStruct) HasMerchantReturnPolicy() []MerchantReturnPolicy {
	return s.HasMerchantReturnPolicy_
}
func (s *organizationStruct) HasOfferCatalog() []OfferCatalog {
	return s.HasOfferCatalog_
}
func (s *organizationStruct) HasPOS() []Place {
	return s.HasPOS_
}
func (s *organizationStruct) InteractionStatistic() []InteractionCounter {
	return s.InteractionStatistic_
}
func (s *organizationStruct) IsicV4() []Text {
	return s.IsicV4_
}
func (s *organizationStruct) Iso6523Code() []Text {
	return s.Iso6523Code_
}
func (s *organizationStruct) Keywords() []DefinedTerm_Text_URL_Union {
	return s.Keywords_
}
func (s *organizationStruct) KnowsAbout() []Text_Thing_URL_Union {
	return s.KnowsAbout_
}
func (s *organizationStruct) KnowsLanguage() []Language_Text_Union {
	return s.KnowsLanguage_
}
func (s *organizationStruct) LegalName() []Text {
	return s.LegalName_
}
func (s *organizationStruct) LeiCode() []Text {
	return s.LeiCode_
}
func (s *organizationStruct) Location() []Place_PostalAddress_Text_VirtualLocation_Union {
	return s.Location_
}
func (s *organizationStruct) Logo() []ImageObject_URL_Union {
	return s.Logo_
}
func (s *organizationStruct) MakesOffer() []Offer {
	return s.MakesOffer_
}
func (s *organizationStruct) Member() []Organization_Person_Union {
	return s.Member_
}
func (s *organizationStruct) MemberOf() []Organization_ProgramMembership_Union {
	return s.MemberOf_
}
func (s *organizationStruct) Members() []Organization_Person_Union {
	return s.Members_
}
func (s *organizationStruct) Naics() []Text {
	return s.Naics_
}
func (s *organizationStruct) NonprofitStatus() []NonprofitType {
	return s.NonprofitStatus_
}
func (s *organizationStruct) NumberOfEmployees() []QuantitativeValue {
	return s.NumberOfEmployees_
}
func (s *organizationStruct) OwnershipFundingInfo() []AboutPage_CreativeWork_Text_URL_Union {
	return s.OwnershipFundingInfo_
}
func (s *organizationStruct) Owns() []OwnershipInfo_Product_Union {
	return s.Owns_
}
func (s *organizationStruct) ParentOrganization() []Organization {
	return s.ParentOrganization_
}
func (s *organizationStruct) PublishingPrinciples() []CreativeWork_URL_Union {
	return s.PublishingPrinciples_
}
func (s *organizationStruct) Review() []Review {
	return s.Review_
}
func (s *organizationStruct) Reviews() []Review {
	return s.Reviews_
}
func (s *organizationStruct) Seeks() []Demand {
	return s.Seeks_
}
func (s *organizationStruct) ServiceArea() []AdministrativeArea_GeoShape_Place_Union {
	return s.ServiceArea_
}
func (s *organizationStruct) Slogan() []Text {
	return s.Slogan_
}
func (s *organizationStruct) Sponsor() []Organization_Person_Union {
	return s.Sponsor_
}
func (s *organizationStruct) SubOrganization() []Organization {
	return s.SubOrganization_
}
func (s *organizationStruct) TaxID() []Text {
	return s.TaxID_
}
func (s *organizationStruct) Telephone() []Text {
	return s.Telephone_
}
func (s *organizationStruct) UnnamedSourcesPolicy() []CreativeWork_URL_Union {
	return s.UnnamedSourcesPolicy_
}
func (s *organizationStruct) VatID() []Text {
	return s.VatID_
}

type OrganizationSlice []Organization

func (s *OrganizationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OrganizationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Organization)
	}
	return nil
}

var _ Organization = &organizationStruct{}

// A subclass of Role used to describe roles within organizations.
type OrganizationRole interface {
	// Parents
	Role
	// Accessors
	NumberedPosition() []Number // A number associated with a role in an organization, for example, the number on an athlete's jersey.
}
type organizationRoleStruct struct {
	roleStruct

	NumberedPosition_ NumberSlice `json:"numberedPosition,omitempty"`
}

func (s *organizationRoleStruct) NumberedPosition() []Number {
	return s.NumberedPosition_
}

type OrganizationRoleSlice []OrganizationRole

func (s *OrganizationRoleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OrganizationRoleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OrganizationRole)
	}
	return nil
}

var _ OrganizationRole = &organizationRoleStruct{}

// The act of manipulating/administering/supervising/controlling one or more objects.
type OrganizeAction interface {
	// Parents
	Action
}
type organizeActionStruct struct {
	actionStruct
}
type OrganizeActionSlice []OrganizeAction

func (s *OrganizeActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OrganizeActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OrganizeAction)
	}
	return nil
}

var _ OrganizeAction = &organizeActionStruct{}

// An outlet store.
type OutletStore interface {
	// Parents
	Store
}
type outletStoreStruct struct {
	storeStruct
}
type OutletStoreSlice []OutletStore

func (s *OutletStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OutletStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OutletStore)
	}
	return nil
}

var _ OutletStore = &outletStoreStruct{}

// A structured value providing information about when a certain organization or person owned a certain product.
type OwnershipInfo interface {
	// Parents
	StructuredValue
	// Unions
	OwnershipInfo_Product_Union
	// Accessors
	AcquiredFrom() []Organization_Person_Union // The organization or person from which the product was acquired.
	OwnedFrom() []DateTime                     // The date and time of obtaining the product.
	OwnedThrough() []DateTime                  // The date and time of giving up ownership on the product.
	TypeOfGood() []Product_Service_Union       // The product that this structured value is referring to.
}
type ownershipInfoStruct struct {
	structuredValueStruct

	AcquiredFrom_ Organization_Person_UnionSlice `json:"acquiredFrom,omitempty"`
	OwnedFrom_    DateTimeSlice                  `json:"ownedFrom,omitempty"`
	OwnedThrough_ DateTimeSlice                  `json:"ownedThrough,omitempty"`
	TypeOfGood_   Product_Service_UnionSlice     `json:"typeOfGood,omitempty"`
}

func (s *ownershipInfoStruct) implementsOwnershipInfo_Product_Union() {}

func (s *ownershipInfoStruct) AcquiredFrom() []Organization_Person_Union {
	return s.AcquiredFrom_
}
func (s *ownershipInfoStruct) OwnedFrom() []DateTime {
	return s.OwnedFrom_
}
func (s *ownershipInfoStruct) OwnedThrough() []DateTime {
	return s.OwnedThrough_
}
func (s *ownershipInfoStruct) TypeOfGood() []Product_Service_Union {
	return s.TypeOfGood_
}

type OwnershipInfoSlice []OwnershipInfo

func (s *OwnershipInfoSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(OwnershipInfoSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(OwnershipInfo)
	}
	return nil
}

var _ OwnershipInfo = &ownershipInfoStruct{}

// The act of producing a painting, typically with paint and canvas as instruments.
type PaintAction interface {
	// Parents
	CreateAction
}
type paintActionStruct struct {
	createActionStruct
}
type PaintActionSlice []PaintAction

func (s *PaintActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PaintActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PaintAction)
	}
	return nil
}

var _ PaintAction = &paintActionStruct{}

// A painting.
type Painting interface {
	// Parents
	CreativeWork
}
type paintingStruct struct {
	creativeWorkStruct
}
type PaintingSlice []Painting

func (s *PaintingSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PaintingSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Painting)
	}
	return nil
}

var _ Painting = &paintingStruct{}

// A medical procedure intended primarily for palliative purposes, aimed at relieving the symptoms of an underlying health condition.
type PalliativeProcedure interface {
	// Parents
	MedicalProcedure
	MedicalTherapy
}
type palliativeProcedureStruct struct {
	medicalProcedureStruct
	medicalTherapyStruct
}

func (s *palliativeProcedureStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
} // re
func (s *palliativeProcedureStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {
}                                                                                                 // re
func (s *palliativeProcedureStruct) implementsDataFeedItem_Text_Thing_Union()                     {} // re
func (s *palliativeProcedureStruct) implementsListItem_Text_Thing_Union()                         {} // re
func (s *palliativeProcedureStruct) implementsMedicalEntity_Text_Union()                          {} // re
func (s *palliativeProcedureStruct) implementsMedicalProcedure_MedicalTest_MedicalTherapy_Union() {} // re
func (s *palliativeProcedureStruct) implementsText_Thing_URL_Union()                              {} // re
func (s *palliativeProcedureStruct) implementsText_Thing_Union()                                  {} // re
type PalliativeProcedureSlice []PalliativeProcedure

func (s *PalliativeProcedureSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PalliativeProcedureSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PalliativeProcedure)
	}
	return nil
}

var _ PalliativeProcedure = &palliativeProcedureStruct{}

// The delivery of a parcel either via the postal service or a commercial service.
type ParcelDelivery interface {
	// Parents
	Intangible
	// Accessors
	Carrier() []Organization                     // 'carrier' is an out-dated term indicating the 'provider' for parcel delivery and flights.
	DeliveryAddress() []PostalAddress            // Destination address.
	DeliveryStatus() []DeliveryEvent             // New entry added as the package passes through each leg of its journey (from shipment to final delivery).
	ExpectedArrivalFrom() []Date_DateTime_Union  // The earliest date the package may arrive.
	ExpectedArrivalUntil() []Date_DateTime_Union // The latest date the package may arrive.
	HasDeliveryMethod() []DeliveryMethod         // Method used for delivery or shipping.
	ItemShipped() []Product                      // Item(s) being shipped.
	OriginAddress() []PostalAddress              // Shipper's address.
	PartOfOrder() []Order                        // The overall order the items in this delivery were included in.
	Provider() []Organization_Person_Union       // The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
	TrackingNumber() []Text                      // Shipper tracking number.
	TrackingUrl() []URL                          // Tracking url for the parcel delivery.
}
type parcelDeliveryStruct struct {
	intangibleStruct

	Carrier_              OrganizationSlice              `json:"carrier,omitempty"`
	DeliveryAddress_      PostalAddressSlice             `json:"deliveryAddress,omitempty"`
	DeliveryStatus_       DeliveryEventSlice             `json:"deliveryStatus,omitempty"`
	ExpectedArrivalFrom_  Date_DateTime_UnionSlice       `json:"expectedArrivalFrom,omitempty"`
	ExpectedArrivalUntil_ Date_DateTime_UnionSlice       `json:"expectedArrivalUntil,omitempty"`
	HasDeliveryMethod_    DeliveryMethodSlice            `json:"hasDeliveryMethod,omitempty"`
	ItemShipped_          ProductSlice                   `json:"itemShipped,omitempty"`
	OriginAddress_        PostalAddressSlice             `json:"originAddress,omitempty"`
	PartOfOrder_          OrderSlice                     `json:"partOfOrder,omitempty"`
	Provider_             Organization_Person_UnionSlice `json:"provider,omitempty"`
	TrackingNumber_       TextSlice                      `json:"trackingNumber,omitempty"`
	TrackingUrl_          URLSlice                       `json:"trackingUrl,omitempty"`
}

func (s *parcelDeliveryStruct) Carrier() []Organization {
	return s.Carrier_
}
func (s *parcelDeliveryStruct) DeliveryAddress() []PostalAddress {
	return s.DeliveryAddress_
}
func (s *parcelDeliveryStruct) DeliveryStatus() []DeliveryEvent {
	return s.DeliveryStatus_
}
func (s *parcelDeliveryStruct) ExpectedArrivalFrom() []Date_DateTime_Union {
	return s.ExpectedArrivalFrom_
}
func (s *parcelDeliveryStruct) ExpectedArrivalUntil() []Date_DateTime_Union {
	return s.ExpectedArrivalUntil_
}
func (s *parcelDeliveryStruct) HasDeliveryMethod() []DeliveryMethod {
	return s.HasDeliveryMethod_
}
func (s *parcelDeliveryStruct) ItemShipped() []Product {
	return s.ItemShipped_
}
func (s *parcelDeliveryStruct) OriginAddress() []PostalAddress {
	return s.OriginAddress_
}
func (s *parcelDeliveryStruct) PartOfOrder() []Order {
	return s.PartOfOrder_
}
func (s *parcelDeliveryStruct) Provider() []Organization_Person_Union {
	return s.Provider_
}
func (s *parcelDeliveryStruct) TrackingNumber() []Text {
	return s.TrackingNumber_
}
func (s *parcelDeliveryStruct) TrackingUrl() []URL {
	return s.TrackingUrl_
}

type ParcelDeliverySlice []ParcelDelivery

func (s *ParcelDeliverySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ParcelDeliverySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ParcelDelivery)
	}
	return nil
}

var _ ParcelDelivery = &parcelDeliveryStruct{}

// A set of characteristics describing parents, who can be interested in viewing some content.
type ParentAudience interface {
	// Parents
	PeopleAudience
	// Accessors
	ChildMaxAge() []Number // Maximal age of the child.
	ChildMinAge() []Number // Minimal age of the child.
}
type parentAudienceStruct struct {
	peopleAudienceStruct

	ChildMaxAge_ NumberSlice `json:"childMaxAge,omitempty"`
	ChildMinAge_ NumberSlice `json:"childMinAge,omitempty"`
}

func (s *parentAudienceStruct) ChildMaxAge() []Number {
	return s.ChildMaxAge_
}
func (s *parentAudienceStruct) ChildMinAge() []Number {
	return s.ChildMinAge_
}

type ParentAudienceSlice []ParentAudience

func (s *ParentAudienceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ParentAudienceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ParentAudience)
	}
	return nil
}

var _ ParentAudience = &parentAudienceStruct{}

// A park.
type Park interface {
	// Parents
	CivicStructure
}
type parkStruct struct {
	civicStructureStruct
}
type ParkSlice []Park

func (s *ParkSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ParkSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Park)
	}
	return nil
}

var _ Park = &parkStruct{}

// A parking lot or other parking facility.
type ParkingFacility interface {
	// Parents
	CivicStructure
}
type parkingFacilityStruct struct {
	civicStructureStruct
}
type ParkingFacilitySlice []ParkingFacility

func (s *ParkingFacilitySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ParkingFacilitySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ParkingFacility)
	}
	return nil
}

var _ ParkingFacility = &parkingFacilityStruct{}

// A medical test performed by a laboratory that typically involves examination of a tissue sample by a pathologist.
type PathologyTest interface {
	// Parents
	MedicalTest
	// Accessors
	TissueSample() []Text // The type of tissue sample required for the test.
}
type pathologyTestStruct struct {
	medicalTestStruct

	TissueSample_ TextSlice `json:"tissueSample,omitempty"`
}

func (s *pathologyTestStruct) TissueSample() []Text {
	return s.TissueSample_
}

type PathologyTestSlice []PathologyTest

func (s *PathologyTestSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PathologyTestSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PathologyTest)
	}
	return nil
}

var _ PathologyTest = &pathologyTestStruct{}

// A patient is any person recipient of health care services.
type Patient interface {
	// Parents
	MedicalAudience
	Person
	// Accessors
	Diagnosis() []MedicalCondition       // One or more alternative conditions considered in the differential diagnosis process as output of a diagnosis process.
	Drug() []Drug                        // Specifying a drug or medicine used in a medication procedure.
	HealthCondition() []MedicalCondition // Specifying the health condition(s) of a patient, medical study, or other target audience.
}
type patientStruct struct {
	medicalAudienceStruct
	personStruct

	Diagnosis_       MedicalConditionSlice `json:"diagnosis,omitempty"`
	Drug_            DrugSlice             `json:"drug,omitempty"`
	HealthCondition_ MedicalConditionSlice `json:"healthCondition,omitempty"`
}

func (s *patientStruct) implementsAudience_ContactPoint_Organization_Person_Union()            {} // re
func (s *patientStruct) implementsAudience_Organization_Person_Union()                         {} // re
func (s *patientStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *patientStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *patientStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *patientStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *patientStruct) implementsText_Thing_Union()                                           {} // re
func (s *patientStruct) Diagnosis() []MedicalCondition {
	return s.Diagnosis_
}
func (s *patientStruct) Drug() []Drug {
	return s.Drug_
}
func (s *patientStruct) HealthCondition() []MedicalCondition {
	return s.HealthCondition_
}

type PatientSlice []Patient

func (s *PatientSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PatientSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Patient)
	}
	return nil
}

var _ Patient = &patientStruct{}

// A shop that will buy, or lend money against the security of, personal possessions.
type PawnShop interface {
	// Parents
	Store
}
type pawnShopStruct struct {
	storeStruct
}
type PawnShopSlice []PawnShop

func (s *PawnShopSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PawnShopSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PawnShop)
	}
	return nil
}

var _ PawnShop = &pawnShopStruct{}

// An agent pays a price to a participant.
type PayAction interface {
	// Parents
	TradeAction
	// Accessors
	Recipient() []Audience_ContactPoint_Organization_Person_Union // A sub property of participant. The participant who is at the receiving end of the action.
}
type payActionStruct struct {
	tradeActionStruct

	Recipient_ Audience_ContactPoint_Organization_Person_UnionSlice `json:"recipient,omitempty"`
}

func (s *payActionStruct) Recipient() []Audience_ContactPoint_Organization_Person_Union {
	return s.Recipient_
}

type PayActionSlice []PayAction

func (s *PayActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PayActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PayAction)
	}
	return nil
}

var _ PayAction = &payActionStruct{}

// A payment method using a credit, debit, store or other card to associate the payment with an account.
type PaymentCard interface {
	// Parents
	FinancialProduct
	PaymentMethod
	// Accessors
	CashBack() []Boolean_Number_Union                             // A cardholder benefit that pays the cardholder a small percentage of their net expenditures.
	ContactlessPayment() []Boolean                                // A secure method for consumers to purchase products or services via debit, credit or smartcards by using RFID or NFC technology.
	FloorLimit() []MonetaryAmount                                 // A floor limit is the amount of money above which credit card transactions must be authorized.
	MonthlyMinimumRepaymentAmount() []MonetaryAmount_Number_Union // The minimum payment is the lowest amount of money that one is required to pay on a credit card statement each month.
}
type paymentCardStruct struct {
	financialProductStruct
	paymentMethodStruct_

	CashBack_                      Boolean_Number_UnionSlice        `json:"cashBack,omitempty"`
	ContactlessPayment_            BooleanSlice                     `json:"contactlessPayment,omitempty"`
	FloorLimit_                    MonetaryAmountSlice              `json:"floorLimit,omitempty"`
	MonthlyMinimumRepaymentAmount_ MonetaryAmount_Number_UnionSlice `json:"monthlyMinimumRepaymentAmount,omitempty"`
}
type paymentCardStruct_ struct {
	paymentCardStruct
}

func (s *paymentCardStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *paymentCardStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *paymentCardStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *paymentCardStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *paymentCardStruct) implementsText_Thing_Union()                                           {} // re
func (s *paymentCardStruct) CashBack() []Boolean_Number_Union {
	return s.CashBack_
}
func (s *paymentCardStruct) ContactlessPayment() []Boolean {
	return s.ContactlessPayment_
}
func (s *paymentCardStruct) FloorLimit() []MonetaryAmount {
	return s.FloorLimit_
}
func (s *paymentCardStruct) MonthlyMinimumRepaymentAmount() []MonetaryAmount_Number_Union {
	return s.MonthlyMinimumRepaymentAmount_
}

type PaymentCardSlice []PaymentCard

func (s *PaymentCardSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PaymentCardSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PaymentCard)
	}
	return nil
}

var _ PaymentCard = &paymentCardStruct{}

// The costs of settling the payment using a particular payment method.
type PaymentChargeSpecification interface {
	// Parents
	PriceSpecification
	// Accessors
	AppliesToDeliveryMethod() []DeliveryMethod // The delivery method(s) to which the delivery charge or payment charge specification applies.
	AppliesToPaymentMethod() []PaymentMethod   // The payment method(s) to which the payment charge specification applies.
}
type paymentChargeSpecificationStruct struct {
	priceSpecificationStruct

	AppliesToDeliveryMethod_ DeliveryMethodSlice `json:"appliesToDeliveryMethod,omitempty"`
	AppliesToPaymentMethod_  PaymentMethodSlice  `json:"appliesToPaymentMethod,omitempty"`
}

func (s *paymentChargeSpecificationStruct) AppliesToDeliveryMethod() []DeliveryMethod {
	return s.AppliesToDeliveryMethod_
}
func (s *paymentChargeSpecificationStruct) AppliesToPaymentMethod() []PaymentMethod {
	return s.AppliesToPaymentMethod_
}

type PaymentChargeSpecificationSlice []PaymentChargeSpecification

func (s *PaymentChargeSpecificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PaymentChargeSpecificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PaymentChargeSpecification)
	}
	return nil
}

var _ PaymentChargeSpecification = &paymentChargeSpecificationStruct{}

/*
A payment method is a standardized procedure for transferring the monetary amount for a purchase. Payment methods are characterized by the legal and technical structures used, and by the organization or group carrying out the transaction.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#ByBankTransferInAdvance\n* http://purl.org/goodrelations/v1#ByInvoice\n* http://purl.org/goodrelations/v1#Cash\n* http://purl.org/goodrelations/v1#CheckInAdvance\n* http://purl.org/goodrelations/v1#COD\n* http://purl.org/goodrelations/v1#DirectDebit\n* http://purl.org/goodrelations/v1#GoogleCheckout\n* http://purl.org/goodrelations/v1#PayPal\n* http://purl.org/goodrelations/v1#PaySwarm

*/
type PaymentMethod interface {
	// Parents
	Enumeration
	// Unions
	LoanOrCredit_PaymentMethod_Union
}
type paymentMethodStruct struct {
	enumerationStruct
}
type paymentMethodStruct_ struct {
	paymentMethodStruct
}

func (s *paymentMethodStruct) implementsLoanOrCredit_PaymentMethod_Union() {}

type PaymentMethodSlice []PaymentMethod

func (s *PaymentMethodSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PaymentMethodSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PaymentMethod)
	}
	return nil
}

var _ PaymentMethod = &paymentMethodStruct{}

// A Service to transfer funds from a person or organization to a beneficiary person or organization.
type PaymentService interface {
	// Parents
	FinancialProduct
}
type paymentServiceStruct struct {
	financialProductStruct
}
type PaymentServiceSlice []PaymentService

func (s *PaymentServiceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PaymentServiceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PaymentService)
	}
	return nil
}

var _ PaymentService = &paymentServiceStruct{}

// A specific payment status. For example, PaymentDue, PaymentComplete, etc.
type PaymentStatusType interface {
	// Parents
	StatusEnumeration
	// Unions
	PaymentStatusType_Text_Union
}
type paymentStatusTypeStruct struct {
	statusEnumerationStruct
}

func (s *paymentStatusTypeStruct) implementsPaymentStatusType_Text_Union() {}

type PaymentStatusTypeSlice []PaymentStatusType

func (s *PaymentStatusTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PaymentStatusTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PaymentStatusType)
	}
	return nil
}

var _ PaymentStatusType = &paymentStatusTypeStruct{}

// A set of characteristics belonging to people, e.g. who compose an item's target audience.
type PeopleAudience interface {
	// Parents
	Audience
	// Accessors
	HealthCondition() []MedicalCondition       // Specifying the health condition(s) of a patient, medical study, or other target audience.
	RequiredGender() []Text                    // Audiences defined by a person's gender.
	RequiredMaxAge() []Integer                 // Audiences defined by a person's maximum age.
	RequiredMinAge() []Integer                 // Audiences defined by a person's minimum age.
	SuggestedAge() []QuantitativeValue         // The age or age range for the intended audience or person, for example 3-12 months for infants, 1-5 years for toddlers.
	SuggestedGender() []GenderType_Text_Union  // The suggested gender of the intended person or audience, for example "male", "female", or "unisex".
	SuggestedMaxAge() []Number                 // Maximum recommended age in years for the audience or user.
	SuggestedMeasurement() []QuantitativeValue // A suggested range of body measurements for the intended audience or person, for example inseam between 32 and 34 inches or height between 170 and 190 cm. Typically found on a size chart for wearable products.
	SuggestedMinAge() []Number                 // Minimum recommended age in years for the audience or user.
}
type peopleAudienceStruct struct {
	audienceStruct

	HealthCondition_      MedicalConditionSlice      `json:"healthCondition,omitempty"`
	RequiredGender_       TextSlice                  `json:"requiredGender,omitempty"`
	RequiredMaxAge_       IntegerSlice               `json:"requiredMaxAge,omitempty"`
	RequiredMinAge_       IntegerSlice               `json:"requiredMinAge,omitempty"`
	SuggestedAge_         QuantitativeValueSlice     `json:"suggestedAge,omitempty"`
	SuggestedGender_      GenderType_Text_UnionSlice `json:"suggestedGender,omitempty"`
	SuggestedMaxAge_      NumberSlice                `json:"suggestedMaxAge,omitempty"`
	SuggestedMeasurement_ QuantitativeValueSlice     `json:"suggestedMeasurement,omitempty"`
	SuggestedMinAge_      NumberSlice                `json:"suggestedMinAge,omitempty"`
}

func (s *peopleAudienceStruct) HealthCondition() []MedicalCondition {
	return s.HealthCondition_
}
func (s *peopleAudienceStruct) RequiredGender() []Text {
	return s.RequiredGender_
}
func (s *peopleAudienceStruct) RequiredMaxAge() []Integer {
	return s.RequiredMaxAge_
}
func (s *peopleAudienceStruct) RequiredMinAge() []Integer {
	return s.RequiredMinAge_
}
func (s *peopleAudienceStruct) SuggestedAge() []QuantitativeValue {
	return s.SuggestedAge_
}
func (s *peopleAudienceStruct) SuggestedGender() []GenderType_Text_Union {
	return s.SuggestedGender_
}
func (s *peopleAudienceStruct) SuggestedMaxAge() []Number {
	return s.SuggestedMaxAge_
}
func (s *peopleAudienceStruct) SuggestedMeasurement() []QuantitativeValue {
	return s.SuggestedMeasurement_
}
func (s *peopleAudienceStruct) SuggestedMinAge() []Number {
	return s.SuggestedMinAge_
}

type PeopleAudienceSlice []PeopleAudience

func (s *PeopleAudienceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PeopleAudienceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PeopleAudience)
	}
	return nil
}

var _ PeopleAudience = &peopleAudienceStruct{}

// The act of participating in performance arts.
type PerformAction interface {
	// Parents
	PlayAction
	// Accessors
	EntertainmentBusiness() []EntertainmentBusiness // A sub property of location. The entertainment business where the action occurred.
}
type performActionStruct struct {
	playActionStruct

	EntertainmentBusiness_ EntertainmentBusinessSlice `json:"entertainmentBusiness,omitempty"`
}

func (s *performActionStruct) EntertainmentBusiness() []EntertainmentBusiness {
	return s.EntertainmentBusiness_
}

type PerformActionSlice []PerformAction

func (s *PerformActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PerformActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PerformAction)
	}
	return nil
}

var _ PerformAction = &performActionStruct{}

// A PerformanceRole is a Role that some entity places with regard to a theatrical performance, e.g. in a Movie, TVSeries etc.
type PerformanceRole interface {
	// Parents
	Role
	// Accessors
	CharacterName() []Text // The name of a character played in some acting or performing role, i.e. in a PerformanceRole.
}
type performanceRoleStruct struct {
	roleStruct

	CharacterName_ TextSlice `json:"characterName,omitempty"`
}

func (s *performanceRoleStruct) CharacterName() []Text {
	return s.CharacterName_
}

type PerformanceRoleSlice []PerformanceRole

func (s *PerformanceRoleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PerformanceRoleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PerformanceRole)
	}
	return nil
}

var _ PerformanceRole = &performanceRoleStruct{}

// A theater or other performing art center.
type PerformingArtsTheater interface {
	// Parents
	CivicStructure
}
type performingArtsTheaterStruct struct {
	civicStructureStruct
}
type PerformingArtsTheaterSlice []PerformingArtsTheater

func (s *PerformingArtsTheaterSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PerformingArtsTheaterSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PerformingArtsTheater)
	}
	return nil
}

var _ PerformingArtsTheater = &performingArtsTheaterStruct{}

// A performance group, such as a band, an orchestra, or a circus.
type PerformingGroup interface {
	// Parents
	Organization
}
type performingGroupStruct struct {
	organizationStruct
}
type PerformingGroupSlice []PerformingGroup

func (s *PerformingGroupSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PerformingGroupSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PerformingGroup)
	}
	return nil
}

var _ PerformingGroup = &performingGroupStruct{}

// A publication in any medium issued in successive parts bearing numerical or chronological designations and intended, such as a magazine, scholarly journal, or newspaper to continue indefinitely.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
type Periodical interface {
	// Parents
	CreativeWorkSeries
}
type periodicalStruct struct {
	creativeWorkSeriesStruct
}
type PeriodicalSlice []Periodical

func (s *PeriodicalSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PeriodicalSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Periodical)
	}
	return nil
}

var _ Periodical = &periodicalStruct{}

// A permit issued by an organization, e.g. a parking pass.
type Permit interface {
	// Parents
	Intangible
	// Accessors
	IssuedBy() []Organization         // The organization issuing the ticket or permit.
	IssuedThrough() []Service         // The service through with the permit was granted.
	PermitAudience() []Audience       // The target audience for this permit.
	ValidFor() []Duration             // The duration of validity of a permit or similar thing.
	ValidFrom() []Date_DateTime_Union // The date when the item becomes valid.
	ValidIn() []AdministrativeArea    // The geographic area where a permit or similar thing is valid.
	ValidUntil() []Date               // The date when the item is no longer valid.
}
type permitStruct struct {
	intangibleStruct

	IssuedBy_       OrganizationSlice        `json:"issuedBy,omitempty"`
	IssuedThrough_  ServiceSlice             `json:"issuedThrough,omitempty"`
	PermitAudience_ AudienceSlice            `json:"permitAudience,omitempty"`
	ValidFor_       DurationSlice            `json:"validFor,omitempty"`
	ValidFrom_      Date_DateTime_UnionSlice `json:"validFrom,omitempty"`
	ValidIn_        AdministrativeAreaSlice  `json:"validIn,omitempty"`
	ValidUntil_     DateSlice                `json:"validUntil,omitempty"`
}

func (s *permitStruct) IssuedBy() []Organization {
	return s.IssuedBy_
}
func (s *permitStruct) IssuedThrough() []Service {
	return s.IssuedThrough_
}
func (s *permitStruct) PermitAudience() []Audience {
	return s.PermitAudience_
}
func (s *permitStruct) ValidFor() []Duration {
	return s.ValidFor_
}
func (s *permitStruct) ValidFrom() []Date_DateTime_Union {
	return s.ValidFrom_
}
func (s *permitStruct) ValidIn() []AdministrativeArea {
	return s.ValidIn_
}
func (s *permitStruct) ValidUntil() []Date {
	return s.ValidUntil_
}

type PermitSlice []Permit

func (s *PermitSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PermitSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Permit)
	}
	return nil
}

var _ Permit = &permitStruct{}

// A person (alive, dead, undead, or fictional).
type Person interface {
	// Parents
	Thing
	// Unions
	Audience_ContactPoint_Organization_Person_Union
	Audience_Organization_Person_Union
	BioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union
	ContactPoint_Organization_Person_Union
	MusicGroup_Person_Union
	Organization_Person_Union
	Person_SportsTeam_Union
	Person_URL_Union
	// Accessors
	AdditionalName() []Text                                 // An additional name for a Person, can be used for a middle name.
	Address() []PostalAddress_Text_Union                    // Physical address of the item.
	Affiliation() []Organization                            // An organization that this person is affiliated with. For example, a school/university, a club, or a team.
	AlumniOf() []EducationalOrganization_Organization_Union // An organization that the person is an alumni of.
	Award() []Text                                          // An award won by or for this item.
	Awards() []Text                                         // Awards won by or for this item.
	BirthDate() []Date                                      // Date of birth.
	BirthPlace() []Place                                    // The place where the person was born.
	Brand() []Brand_Organization_Union                      // The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
	CallSign() []Text                                       // A [callsign](https://en.wikipedia.org/wiki/Call_sign), as used in broadcasting and radio communications to identify people, radio and TV stations, or vehicles.
	Children() []Person                                     // A child of the person.
	Colleague() []Person_URL_Union                          // A colleague of the person.
	Colleagues() []Person                                   // A colleague of the person.
	ContactPoint() []ContactPoint                           // A contact point for a person or organization.
	ContactPoints() []ContactPoint                          // A contact point for a person or organization.
	DeathDate() []Date                                      // Date of death.
	DeathPlace() []Place                                    // The place where the person died.
	Duns() []Text                                           // The Dun & Bradstreet DUNS number for identifying an organization or business person.
	Email() []Text                                          // Email address.
	FamilyName() []Text                                     // Family name. In the U.S., the last name of a Person.
	FaxNumber() []Text                                      // The fax number.
	Follows() []Person                                      // The most generic uni-directional social relation.
	Funder() []Organization_Person_Union                    // A person or organization that supports (sponsors) something through some kind of financial contribution.
	Funding() []Grant                                       // A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
	Gender() []GenderType_Text_Union                        // Gender of something, typically a [[Person]], but possibly also fictional characters, animals, etc. While https://schema.org/Male and https://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender. The [[gender]] property can also be used in an extended sense to cover e.g. the gender of sports teams. As with the gender of individuals, we do not try to enumerate all possibilities. A mixed-gender [[SportsTeam]] can be indicated with a text value of "Mixed".
	GivenName() []Text                                      // Given name. In the U.S., the first name of a Person.
	GlobalLocationNumber() []Text                           // The [Global Location Number](http://www.gs1.org/gln) (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.
	HasCredential() []EducationalOccupationalCredential     // A credential awarded to the Person or Organization.
	HasOccupation() []Occupation                            // The Person's occupation. For past professions, use Role for expressing dates.
	HasOfferCatalog() []OfferCatalog                        // Indicates an OfferCatalog listing for this Organization, Person, or Service.
	HasPOS() []Place                                        // Points-of-Sales operated by the organization or person.
	Height() []Distance_QuantitativeValue_Union             // The height of the item.
	HomeLocation() []ContactPoint_Place_Union               // A contact location for a person's residence.
	HonorificPrefix() []Text                                // An honorific prefix preceding a Person's name such as Dr/Mrs/Mr.
	HonorificSuffix() []Text                                // An honorific suffix following a Person's name such as M.D. /PhD/MSCSW.
	InteractionStatistic() []InteractionCounter             // The number of interactions for the CreativeWork using the WebSite or SoftwareApplication. The most specific child type of InteractionCounter should be used.
	IsicV4() []Text                                         // The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.
	JobTitle() []DefinedTerm_Text_Union                     // The job title of the person (for example, Financial Manager).
	Knows() []Person                                        // The most generic bi-directional social/work relation.
	KnowsAbout() []Text_Thing_URL_Union                     // Of a [[Person]], and less typically of an [[Organization]], to indicate a topic that is known about - suggesting possible expertise but not implying it. We do not distinguish skill levels here, or relate this to educational content, events, objectives or [[JobPosting]] descriptions.
	KnowsLanguage() []Language_Text_Union                   // Of a [[Person]], and less typically of an [[Organization]], to indicate a known language. We do not distinguish skill levels or reading/writing/speaking/signing here. Use language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47).
	MakesOffer() []Offer                                    // A pointer to products or services offered by the organization or person.
	MemberOf() []Organization_ProgramMembership_Union       // An Organization (or ProgramMembership) to which this Person or Organization belongs.
	Naics() []Text                                          // The North American Industry Classification System (NAICS) code for a particular organization or business person.
	Nationality() []Country                                 // Nationality of the person.
	NetWorth() []MonetaryAmount_PriceSpecification_Union    // The total financial value of the person as calculated by subtracting assets from liabilities.
	Owns() []OwnershipInfo_Product_Union                    // Products owned by the organization or person.
	Parent() []Person                                       // A parent of this person.
	Parents() []Person                                      // A parents of the person.
	PerformerIn() []Event                                   // Event that this person is a performer or participant in.
	PublishingPrinciples() []CreativeWork_URL_Union         /*
	The publishingPrinciples property indicates (typically via [[URL]]) a document describing the editorial principles of an [[Organization]] (or individual e.g. a [[Person]] writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity policies. When applied to a [[CreativeWork]] (e.g. [[NewsArticle]]) the principles are those of the party primarily responsible for the creation of the [[CreativeWork]].

	While such policies are most typically expressed in natural language, sometimes related information (e.g. indicating a [[funder]]) can be expressed using schema.org terminology.
	*/
	RelatedTo() []Person                      // The most generic familial relation.
	Seeks() []Demand                          // A pointer to products or services sought by the organization or person (demand).
	Sibling() []Person                        // A sibling of the person.
	Siblings() []Person                       // A sibling of the person.
	Sponsor() []Organization_Person_Union     // A person or organization that supports a thing through a pledge, promise, or financial contribution. e.g. a sponsor of a Medical Study or a corporate sponsor of an event.
	Spouse() []Person                         // The person's spouse.
	TaxID() []Text                            // The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in Spain.
	Telephone() []Text                        // The telephone number.
	VatID() []Text                            // The Value-added Tax ID of the organization or person.
	Weight() []QuantitativeValue              // The weight of the product or person.
	WorkLocation() []ContactPoint_Place_Union // A contact location for a person's place of work.
	WorksFor() []Organization                 // Organizations that the person works for.
}
type personStruct struct {
	thingStruct

	AdditionalName_       TextSlice                                       `json:"additionalName,omitempty"`
	Address_              PostalAddress_Text_UnionSlice                   `json:"address,omitempty"`
	Affiliation_          OrganizationSlice                               `json:"affiliation,omitempty"`
	AlumniOf_             EducationalOrganization_Organization_UnionSlice `json:"alumniOf,omitempty"`
	Award_                TextSlice                                       `json:"award,omitempty"`
	Awards_               TextSlice                                       `json:"awards,omitempty"`
	BirthDate_            DateSlice                                       `json:"birthDate,omitempty"`
	BirthPlace_           PlaceSlice                                      `json:"birthPlace,omitempty"`
	Brand_                Brand_Organization_UnionSlice                   `json:"brand,omitempty"`
	CallSign_             TextSlice                                       `json:"callSign,omitempty"`
	Children_             PersonSlice                                     `json:"children,omitempty"`
	Colleague_            Person_URL_UnionSlice                           `json:"colleague,omitempty"`
	Colleagues_           PersonSlice                                     `json:"colleagues,omitempty"`
	ContactPoint_         ContactPointSlice                               `json:"contactPoint,omitempty"`
	ContactPoints_        ContactPointSlice                               `json:"contactPoints,omitempty"`
	DeathDate_            DateSlice                                       `json:"deathDate,omitempty"`
	DeathPlace_           PlaceSlice                                      `json:"deathPlace,omitempty"`
	Duns_                 TextSlice                                       `json:"duns,omitempty"`
	Email_                TextSlice                                       `json:"email,omitempty"`
	FamilyName_           TextSlice                                       `json:"familyName,omitempty"`
	FaxNumber_            TextSlice                                       `json:"faxNumber,omitempty"`
	Follows_              PersonSlice                                     `json:"follows,omitempty"`
	Funder_               Organization_Person_UnionSlice                  `json:"funder,omitempty"`
	Funding_              GrantSlice                                      `json:"funding,omitempty"`
	Gender_               GenderType_Text_UnionSlice                      `json:"gender,omitempty"`
	GivenName_            TextSlice                                       `json:"givenName,omitempty"`
	GlobalLocationNumber_ TextSlice                                       `json:"globalLocationNumber,omitempty"`
	HasCredential_        EducationalOccupationalCredentialSlice          `json:"hasCredential,omitempty"`
	HasOccupation_        OccupationSlice                                 `json:"hasOccupation,omitempty"`
	HasOfferCatalog_      OfferCatalogSlice                               `json:"hasOfferCatalog,omitempty"`
	HasPOS_               PlaceSlice                                      `json:"hasPOS,omitempty"`
	Height_               Distance_QuantitativeValue_UnionSlice           `json:"height,omitempty"`
	HomeLocation_         ContactPoint_Place_UnionSlice                   `json:"homeLocation,omitempty"`
	HonorificPrefix_      TextSlice                                       `json:"honorificPrefix,omitempty"`
	HonorificSuffix_      TextSlice                                       `json:"honorificSuffix,omitempty"`
	InteractionStatistic_ InteractionCounterSlice                         `json:"interactionStatistic,omitempty"`
	IsicV4_               TextSlice                                       `json:"isicV4,omitempty"`
	JobTitle_             DefinedTerm_Text_UnionSlice                     `json:"jobTitle,omitempty"`
	Knows_                PersonSlice                                     `json:"knows,omitempty"`
	KnowsAbout_           Text_Thing_URL_UnionSlice                       `json:"knowsAbout,omitempty"`
	KnowsLanguage_        Language_Text_UnionSlice                        `json:"knowsLanguage,omitempty"`
	MakesOffer_           OfferSlice                                      `json:"makesOffer,omitempty"`
	MemberOf_             Organization_ProgramMembership_UnionSlice       `json:"memberOf,omitempty"`
	Naics_                TextSlice                                       `json:"naics,omitempty"`
	Nationality_          CountrySlice                                    `json:"nationality,omitempty"`
	NetWorth_             MonetaryAmount_PriceSpecification_UnionSlice    `json:"netWorth,omitempty"`
	Owns_                 OwnershipInfo_Product_UnionSlice                `json:"owns,omitempty"`
	Parent_               PersonSlice                                     `json:"parent,omitempty"`
	Parents_              PersonSlice                                     `json:"parents,omitempty"`
	PerformerIn_          EventSlice                                      `json:"performerIn,omitempty"`
	PublishingPrinciples_ CreativeWork_URL_UnionSlice                     `json:"publishingPrinciples,omitempty"`
	RelatedTo_            PersonSlice                                     `json:"relatedTo,omitempty"`
	Seeks_                DemandSlice                                     `json:"seeks,omitempty"`
	Sibling_              PersonSlice                                     `json:"sibling,omitempty"`
	Siblings_             PersonSlice                                     `json:"siblings,omitempty"`
	Sponsor_              Organization_Person_UnionSlice                  `json:"sponsor,omitempty"`
	Spouse_               PersonSlice                                     `json:"spouse,omitempty"`
	TaxID_                TextSlice                                       `json:"taxID,omitempty"`
	Telephone_            TextSlice                                       `json:"telephone,omitempty"`
	VatID_                TextSlice                                       `json:"vatID,omitempty"`
	Weight_               QuantitativeValueSlice                          `json:"weight,omitempty"`
	WorkLocation_         ContactPoint_Place_UnionSlice                   `json:"workLocation,omitempty"`
	WorksFor_             OrganizationSlice                               `json:"worksFor,omitempty"`
}

func (s *personStruct) implementsAudience_ContactPoint_Organization_Person_Union() {}
func (s *personStruct) implementsAudience_Organization_Person_Union()              {}
func (s *personStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}
func (s *personStruct) implementsContactPoint_Organization_Person_Union() {}
func (s *personStruct) implementsMusicGroup_Person_Union()                {}
func (s *personStruct) implementsOrganization_Person_Union()              {}
func (s *personStruct) implementsPerson_SportsTeam_Union()                {}
func (s *personStruct) implementsPerson_URL_Union()                       {}

func (s *personStruct) AdditionalName() []Text {
	return s.AdditionalName_
}
func (s *personStruct) Address() []PostalAddress_Text_Union {
	return s.Address_
}
func (s *personStruct) Affiliation() []Organization {
	return s.Affiliation_
}
func (s *personStruct) AlumniOf() []EducationalOrganization_Organization_Union {
	return s.AlumniOf_
}
func (s *personStruct) Award() []Text {
	return s.Award_
}
func (s *personStruct) Awards() []Text {
	return s.Awards_
}
func (s *personStruct) BirthDate() []Date {
	return s.BirthDate_
}
func (s *personStruct) BirthPlace() []Place {
	return s.BirthPlace_
}
func (s *personStruct) Brand() []Brand_Organization_Union {
	return s.Brand_
}
func (s *personStruct) CallSign() []Text {
	return s.CallSign_
}
func (s *personStruct) Children() []Person {
	return s.Children_
}
func (s *personStruct) Colleague() []Person_URL_Union {
	return s.Colleague_
}
func (s *personStruct) Colleagues() []Person {
	return s.Colleagues_
}
func (s *personStruct) ContactPoint() []ContactPoint {
	return s.ContactPoint_
}
func (s *personStruct) ContactPoints() []ContactPoint {
	return s.ContactPoints_
}
func (s *personStruct) DeathDate() []Date {
	return s.DeathDate_
}
func (s *personStruct) DeathPlace() []Place {
	return s.DeathPlace_
}
func (s *personStruct) Duns() []Text {
	return s.Duns_
}
func (s *personStruct) Email() []Text {
	return s.Email_
}
func (s *personStruct) FamilyName() []Text {
	return s.FamilyName_
}
func (s *personStruct) FaxNumber() []Text {
	return s.FaxNumber_
}
func (s *personStruct) Follows() []Person {
	return s.Follows_
}
func (s *personStruct) Funder() []Organization_Person_Union {
	return s.Funder_
}
func (s *personStruct) Funding() []Grant {
	return s.Funding_
}
func (s *personStruct) Gender() []GenderType_Text_Union {
	return s.Gender_
}
func (s *personStruct) GivenName() []Text {
	return s.GivenName_
}
func (s *personStruct) GlobalLocationNumber() []Text {
	return s.GlobalLocationNumber_
}
func (s *personStruct) HasCredential() []EducationalOccupationalCredential {
	return s.HasCredential_
}
func (s *personStruct) HasOccupation() []Occupation {
	return s.HasOccupation_
}
func (s *personStruct) HasOfferCatalog() []OfferCatalog {
	return s.HasOfferCatalog_
}
func (s *personStruct) HasPOS() []Place {
	return s.HasPOS_
}
func (s *personStruct) Height() []Distance_QuantitativeValue_Union {
	return s.Height_
}
func (s *personStruct) HomeLocation() []ContactPoint_Place_Union {
	return s.HomeLocation_
}
func (s *personStruct) HonorificPrefix() []Text {
	return s.HonorificPrefix_
}
func (s *personStruct) HonorificSuffix() []Text {
	return s.HonorificSuffix_
}
func (s *personStruct) InteractionStatistic() []InteractionCounter {
	return s.InteractionStatistic_
}
func (s *personStruct) IsicV4() []Text {
	return s.IsicV4_
}
func (s *personStruct) JobTitle() []DefinedTerm_Text_Union {
	return s.JobTitle_
}
func (s *personStruct) Knows() []Person {
	return s.Knows_
}
func (s *personStruct) KnowsAbout() []Text_Thing_URL_Union {
	return s.KnowsAbout_
}
func (s *personStruct) KnowsLanguage() []Language_Text_Union {
	return s.KnowsLanguage_
}
func (s *personStruct) MakesOffer() []Offer {
	return s.MakesOffer_
}
func (s *personStruct) MemberOf() []Organization_ProgramMembership_Union {
	return s.MemberOf_
}
func (s *personStruct) Naics() []Text {
	return s.Naics_
}
func (s *personStruct) Nationality() []Country {
	return s.Nationality_
}
func (s *personStruct) NetWorth() []MonetaryAmount_PriceSpecification_Union {
	return s.NetWorth_
}
func (s *personStruct) Owns() []OwnershipInfo_Product_Union {
	return s.Owns_
}
func (s *personStruct) Parent() []Person {
	return s.Parent_
}
func (s *personStruct) Parents() []Person {
	return s.Parents_
}
func (s *personStruct) PerformerIn() []Event {
	return s.PerformerIn_
}
func (s *personStruct) PublishingPrinciples() []CreativeWork_URL_Union {
	return s.PublishingPrinciples_
}
func (s *personStruct) RelatedTo() []Person {
	return s.RelatedTo_
}
func (s *personStruct) Seeks() []Demand {
	return s.Seeks_
}
func (s *personStruct) Sibling() []Person {
	return s.Sibling_
}
func (s *personStruct) Siblings() []Person {
	return s.Siblings_
}
func (s *personStruct) Sponsor() []Organization_Person_Union {
	return s.Sponsor_
}
func (s *personStruct) Spouse() []Person {
	return s.Spouse_
}
func (s *personStruct) TaxID() []Text {
	return s.TaxID_
}
func (s *personStruct) Telephone() []Text {
	return s.Telephone_
}
func (s *personStruct) VatID() []Text {
	return s.VatID_
}
func (s *personStruct) Weight() []QuantitativeValue {
	return s.Weight_
}
func (s *personStruct) WorkLocation() []ContactPoint_Place_Union {
	return s.WorkLocation_
}
func (s *personStruct) WorksFor() []Organization {
	return s.WorksFor_
}

type PersonSlice []Person

func (s *PersonSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PersonSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Person)
	}
	return nil
}

var _ Person = &personStruct{}

// A pet store.
type PetStore interface {
	// Parents
	Store
}
type petStoreStruct struct {
	storeStruct
}
type PetStoreSlice []PetStore

func (s *PetStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PetStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PetStore)
	}
	return nil
}

var _ PetStore = &petStoreStruct{}

// A pharmacy or drugstore.
type Pharmacy interface {
	// Parents
	MedicalBusiness
	MedicalOrganization
}
type pharmacyStruct struct {
	medicalBusinessStruct
	medicalOrganizationStruct
}

func (s *pharmacyStruct) implementsAudience_ContactPoint_Organization_Person_Union() {} // re
func (s *pharmacyStruct) implementsAudience_Organization_Person_Union()              {} // re
func (s *pharmacyStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}                                                                                               // re
func (s *pharmacyStruct) implementsBrand_Organization_Union()                                   {} // re
func (s *pharmacyStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *pharmacyStruct) implementsContactPoint_Organization_Person_Union()                     {} // re
func (s *pharmacyStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *pharmacyStruct) implementsEducationalOrganization_Organization_Union()                 {} // re
func (s *pharmacyStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *pharmacyStruct) implementsOrganization_Person_Union()                                  {} // re
func (s *pharmacyStruct) implementsOrganization_ProgramMembership_Union()                       {} // re
func (s *pharmacyStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *pharmacyStruct) implementsText_Thing_Union()                                           {} // re
type PharmacySlice []Pharmacy

func (s *PharmacySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PharmacySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Pharmacy)
	}
	return nil
}

var _ Pharmacy = &pharmacyStruct{}

// A photograph.
type Photograph interface {
	// Parents
	CreativeWork
	// Unions
	ImageObject_Photograph_Union
}
type photographStruct struct {
	creativeWorkStruct
}

func (s *photographStruct) implementsImageObject_Photograph_Union() {}

type PhotographSlice []Photograph

func (s *PhotographSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PhotographSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Photograph)
	}
	return nil
}

var _ Photograph = &photographStruct{}

// The act of capturing still images of objects using a camera.
type PhotographAction interface {
	// Parents
	CreateAction
}
type photographActionStruct struct {
	createActionStruct
}
type PhotographActionSlice []PhotographAction

func (s *PhotographActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PhotographActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PhotographAction)
	}
	return nil
}

var _ PhotographAction = &photographActionStruct{}

// Any bodily activity that enhances or maintains physical fitness and overall health and wellness. Includes activity that is part of daily living and routine, structured exercise, and exercise prescribed as part of a medical treatment or recovery plan.
type PhysicalActivity interface {
	// Parents
	LifestyleModification
	// Accessors
	AssociatedAnatomy() []AnatomicalStructure_AnatomicalSystem_SuperficialAnatomy_Union // The anatomy of the underlying organ system or structures associated with this entity.
	Category() []CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union             // A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
	Epidemiology() []Text                                                               // The characteristics of associated patients, such as age, gender, race etc.
	Pathophysiology() []Text                                                            // Changes in the normal mechanical, physical, and biochemical functions that are associated with this activity or condition.
}
type physicalActivityStruct struct {
	lifestyleModificationStruct

	AssociatedAnatomy_ AnatomicalStructure_AnatomicalSystem_SuperficialAnatomy_UnionSlice `json:"associatedAnatomy,omitempty"`
	Category_          CategoryCode_PhysicalActivityCategory_Text_Thing_URL_UnionSlice    `json:"category,omitempty"`
	Epidemiology_      TextSlice                                                          `json:"epidemiology,omitempty"`
	Pathophysiology_   TextSlice                                                          `json:"pathophysiology,omitempty"`
}

func (s *physicalActivityStruct) AssociatedAnatomy() []AnatomicalStructure_AnatomicalSystem_SuperficialAnatomy_Union {
	return s.AssociatedAnatomy_
}
func (s *physicalActivityStruct) Category() []CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union {
	return s.Category_
}
func (s *physicalActivityStruct) Epidemiology() []Text {
	return s.Epidemiology_
}
func (s *physicalActivityStruct) Pathophysiology() []Text {
	return s.Pathophysiology_
}

type PhysicalActivitySlice []PhysicalActivity

func (s *PhysicalActivitySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PhysicalActivitySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PhysicalActivity)
	}
	return nil
}

var _ PhysicalActivity = &physicalActivityStruct{}

// Categories of physical activity, organized by physiologic classification.
type PhysicalActivityCategory interface {
	// Parents
	Enumeration
	// Unions
	CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union
}
type physicalActivityCategoryStruct struct {
	enumerationStruct
}

func (s *physicalActivityCategoryStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {
}

type PhysicalActivityCategorySlice []PhysicalActivityCategory

func (s *PhysicalActivityCategorySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PhysicalActivityCategorySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PhysicalActivityCategory)
	}
	return nil
}

var _ PhysicalActivityCategory = &physicalActivityCategoryStruct{}

// A type of physical examination of a patient performed by a physician.
type PhysicalExam interface {
	// Parents
	MedicalEnumeration
	MedicalProcedure
}
type physicalExamStruct struct {
	medicalEnumerationStruct
	medicalProcedureStruct
}

func (s *physicalExamStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *physicalExamStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *physicalExamStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *physicalExamStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *physicalExamStruct) implementsText_Thing_Union()                                           {} // re
type PhysicalExamSlice []PhysicalExam

func (s *PhysicalExamSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PhysicalExamSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PhysicalExam)
	}
	return nil
}

var _ PhysicalExam = &physicalExamStruct{}

// A process of progressive physical care and rehabilitation aimed at improving a health condition.
type PhysicalTherapy interface {
	// Parents
	MedicalTherapy
}
type physicalTherapyStruct struct {
	medicalTherapyStruct
}
type PhysicalTherapySlice []PhysicalTherapy

func (s *PhysicalTherapySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PhysicalTherapySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PhysicalTherapy)
	}
	return nil
}

var _ PhysicalTherapy = &physicalTherapyStruct{}

// A doctor's office.
type Physician interface {
	// Parents
	MedicalBusiness
	MedicalOrganization
	// Accessors
	AvailableService() []MedicalProcedure_MedicalTest_MedicalTherapy_Union // A medical service available from this provider.
	HospitalAffiliation() []Hospital                                       // A hospital with which the physician or office is affiliated.
	MedicalSpecialty() []MedicalSpecialty                                  // A medical specialty of the provider.
}
type physicianStruct struct {
	medicalBusinessStruct
	medicalOrganizationStruct

	AvailableService_    MedicalProcedure_MedicalTest_MedicalTherapy_UnionSlice `json:"availableService,omitempty"`
	HospitalAffiliation_ HospitalSlice                                          `json:"hospitalAffiliation,omitempty"`
	MedicalSpecialty_    MedicalSpecialtySlice                                  `json:"medicalSpecialty,omitempty"`
}

func (s *physicianStruct) implementsAudience_ContactPoint_Organization_Person_Union() {} // re
func (s *physicianStruct) implementsAudience_Organization_Person_Union()              {} // re
func (s *physicianStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}                                                                                                // re
func (s *physicianStruct) implementsBrand_Organization_Union()                                   {} // re
func (s *physicianStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *physicianStruct) implementsContactPoint_Organization_Person_Union()                     {} // re
func (s *physicianStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *physicianStruct) implementsEducationalOrganization_Organization_Union()                 {} // re
func (s *physicianStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *physicianStruct) implementsOrganization_Person_Union()                                  {} // re
func (s *physicianStruct) implementsOrganization_ProgramMembership_Union()                       {} // re
func (s *physicianStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *physicianStruct) implementsText_Thing_Union()                                           {} // re
func (s *physicianStruct) AvailableService() []MedicalProcedure_MedicalTest_MedicalTherapy_Union {
	return s.AvailableService_
}
func (s *physicianStruct) HospitalAffiliation() []Hospital {
	return s.HospitalAffiliation_
}
func (s *physicianStruct) MedicalSpecialty() []MedicalSpecialty {
	return s.MedicalSpecialty_
}

type PhysicianSlice []Physician

func (s *PhysicianSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PhysicianSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Physician)
	}
	return nil
}

var _ Physician = &physicianStruct{}

// Entities that have a somewhat fixed, physical extension.
type Place interface {
	// Parents
	Thing
	// Unions
	AdministrativeArea_GeoShape_Place_Text_Union
	AdministrativeArea_GeoShape_Place_Union
	ContactPoint_Place_Union
	FoodEstablishment_Place_Union
	GeoShape_Place_Text_Union
	GeospatialGeometry_Place_Union
	ItemList_Place_Union
	Place_PostalAddress_Text_Union
	Place_PostalAddress_Text_VirtualLocation_Union
	Place_PostalAddress_URL_Union
	// Accessors
	AdditionalProperty() []PropertyValue /*
	A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.\n\nNote: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
	*/
	Address() []PostalAddress_Text_Union            // Physical address of the item.
	AggregateRating() []AggregateRating             // The overall rating, based on a collection of reviews or ratings, of the item.
	AmenityFeature() []LocationFeatureSpecification // An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic property does not make a statement about whether the feature is included in an offer for the main accommodation or available at extra costs.
	BranchCode() []Text                             /*
	A short textual code (also called "store code") that uniquely identifies a place of business. The code is typically assigned by the parentOrganization and used in structured URLs.\n\nFor example, in the URL http://www.starbucks.co.uk/store-locator/etc/detail/3047 the code "3047" is a branchCode for a particular branch.

	*/
	ContainedIn() []Place                                          // The basic containment relation between a place and one that contains it.
	ContainedInPlace() []Place                                     // The basic containment relation between a place and one that contains it.
	ContainsPlace() []Place                                        // The basic containment relation between a place and another that it contains.
	Event() []Event                                                // Upcoming or past event associated with this place, organization, or action.
	Events() []Event                                               // Upcoming or past events associated with this place or organization.
	FaxNumber() []Text                                             // The fax number.
	Geo() []GeoCoordinates_GeoShape_Union                          // The geo coordinates of the place.
	GeoContains() []GeospatialGeometry_Place_Union                 // Represents a relationship between two geometries (or the places they represent), relating a containing geometry to a contained geometry. "a contains b iff no points of b lie in the exterior of a, and at least one point of the interior of b lies in the interior of a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoCoveredBy() []GeospatialGeometry_Place_Union                // Represents a relationship between two geometries (or the places they represent), relating a geometry to another that covers it. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoCovers() []GeospatialGeometry_Place_Union                   // Represents a relationship between two geometries (or the places they represent), relating a covering geometry to a covered geometry. "Every point of b is a point of (the interior or boundary of) a". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoCrosses() []GeospatialGeometry_Place_Union                  // Represents a relationship between two geometries (or the places they represent), relating a geometry to another that crosses it: "a crosses b: they have some but not all interior points in common, and the dimension of the intersection is less than that of at least one of them". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoDisjoint() []GeospatialGeometry_Place_Union                 // Represents spatial relations in which two geometries (or the places they represent) are topologically disjoint: they have no point in common. They form a set of disconnected geometries." (a symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM))
	GeoEquals() []GeospatialGeometry_Place_Union                   // Represents spatial relations in which two geometries (or the places they represent) are topologically equal, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM). "Two geometries are topologically equal if their interiors intersect and no part of the interior or boundary of one geometry intersects the exterior of the other" (a symmetric relationship)
	GeoIntersects() []GeospatialGeometry_Place_Union               // Represents spatial relations in which two geometries (or the places they represent) have at least one point in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoOverlaps() []GeospatialGeometry_Place_Union                 // Represents a relationship between two geometries (or the places they represent), relating a geometry to another that geospatially overlaps it, i.e. they have some but not all points in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GeoTouches() []GeospatialGeometry_Place_Union                  // Represents spatial relations in which two geometries (or the places they represent) touch: they have at least one boundary point in common, but no interior points." (a symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM) )
	GeoWithin() []GeospatialGeometry_Place_Union                   // Represents a relationship between two geometries (or the places they represent), relating a geometry to one that contains it, i.e. it is inside (i.e. within) its interior. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).
	GlobalLocationNumber() []Text                                  // The [Global Location Number](http://www.gs1.org/gln) (GLN, sometimes also referred to as International Location Number or ILN) of the respective organization, person, or place. The GLN is a 13-digit number used to identify parties and physical locations.
	HasDriveThroughService() []Boolean                             // Indicates whether some facility (e.g. [[FoodEstablishment]], [[CovidTestingFacility]]) offers a service that can be used by driving through in a car. In the case of [[CovidTestingFacility]] such facilities could potentially help with social distancing from other potentially-infected users.
	HasMap() []Map_URL_Union                                       // A URL to a map of the place.
	IsAccessibleForFree() []Boolean                                // A flag to signal that the item, event, or place is accessible for free.
	IsicV4() []Text                                                // The International Standard of Industrial Classification of All Economic Activities (ISIC), Revision 4 code for a particular organization, business person, or place.
	Keywords() []DefinedTerm_Text_URL_Union                        // Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
	Latitude() []Number_Text_Union                                 // The latitude of a location. For example ```37.42242``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
	Logo() []ImageObject_URL_Union                                 // An associated logo.
	Longitude() []Number_Text_Union                                // The longitude of a location. For example ```-122.08585``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).
	Map_() []URL                                                   // A URL to a map of the place.
	Maps() []URL                                                   // A URL to a map of the place.
	MaximumAttendeeCapacity() []Integer                            // The total number of individuals that may attend an event or venue.
	OpeningHoursSpecification() []OpeningHoursSpecification        // The opening hours of a certain place.
	Photo() []ImageObject_Photograph_Union                         // A photograph of this place.
	Photos() []ImageObject_Photograph_Union                        // Photographs of this place.
	PublicAccess() []Boolean                                       // A flag to signal that the [[Place]] is open to public visitors.  If this property is omitted there is no assumed default boolean value
	Review() []Review                                              // A review of the item.
	Reviews() []Review                                             // Review of the item.
	Slogan() []Text                                                // A slogan or motto associated with the item.
	SmokingAllowed() []Boolean                                     // Indicates whether it is allowed to smoke in the place, e.g. in the restaurant, hotel or hotel room.
	SpecialOpeningHoursSpecification() []OpeningHoursSpecification /*
	The special opening hours of a certain place.\n\nUse this to explicitly override general opening hours brought in scope by [[openingHoursSpecification]] or [[openingHours]].

	*/
	Telephone() []Text      // The telephone number.
	TourBookingPage() []URL // A page providing information on how to book a tour of some [[Place]], such as an [[Accommodation]] or [[ApartmentComplex]] in a real estate setting, as well as other kinds of tours as appropriate.
}
type placeStruct struct {
	thingStruct

	AdditionalProperty_               PropertyValueSlice                  `json:"additionalProperty,omitempty"`
	Address_                          PostalAddress_Text_UnionSlice       `json:"address,omitempty"`
	AggregateRating_                  AggregateRatingSlice                `json:"aggregateRating,omitempty"`
	AmenityFeature_                   LocationFeatureSpecificationSlice   `json:"amenityFeature,omitempty"`
	BranchCode_                       TextSlice                           `json:"branchCode,omitempty"`
	ContainedIn_                      PlaceSlice                          `json:"containedIn,omitempty"`
	ContainedInPlace_                 PlaceSlice                          `json:"containedInPlace,omitempty"`
	ContainsPlace_                    PlaceSlice                          `json:"containsPlace,omitempty"`
	Event_                            EventSlice                          `json:"event,omitempty"`
	Events_                           EventSlice                          `json:"events,omitempty"`
	FaxNumber_                        TextSlice                           `json:"faxNumber,omitempty"`
	Geo_                              GeoCoordinates_GeoShape_UnionSlice  `json:"geo,omitempty"`
	GeoContains_                      GeospatialGeometry_Place_UnionSlice `json:"geoContains,omitempty"`
	GeoCoveredBy_                     GeospatialGeometry_Place_UnionSlice `json:"geoCoveredBy,omitempty"`
	GeoCovers_                        GeospatialGeometry_Place_UnionSlice `json:"geoCovers,omitempty"`
	GeoCrosses_                       GeospatialGeometry_Place_UnionSlice `json:"geoCrosses,omitempty"`
	GeoDisjoint_                      GeospatialGeometry_Place_UnionSlice `json:"geoDisjoint,omitempty"`
	GeoEquals_                        GeospatialGeometry_Place_UnionSlice `json:"geoEquals,omitempty"`
	GeoIntersects_                    GeospatialGeometry_Place_UnionSlice `json:"geoIntersects,omitempty"`
	GeoOverlaps_                      GeospatialGeometry_Place_UnionSlice `json:"geoOverlaps,omitempty"`
	GeoTouches_                       GeospatialGeometry_Place_UnionSlice `json:"geoTouches,omitempty"`
	GeoWithin_                        GeospatialGeometry_Place_UnionSlice `json:"geoWithin,omitempty"`
	GlobalLocationNumber_             TextSlice                           `json:"globalLocationNumber,omitempty"`
	HasDriveThroughService_           BooleanSlice                        `json:"hasDriveThroughService,omitempty"`
	HasMap_                           Map_URL_UnionSlice                  `json:"hasMap,omitempty"`
	IsAccessibleForFree_              BooleanSlice                        `json:"isAccessibleForFree,omitempty"`
	IsicV4_                           TextSlice                           `json:"isicV4,omitempty"`
	Keywords_                         DefinedTerm_Text_URL_UnionSlice     `json:"keywords,omitempty"`
	Latitude_                         Number_Text_UnionSlice              `json:"latitude,omitempty"`
	Logo_                             ImageObject_URL_UnionSlice          `json:"logo,omitempty"`
	Longitude_                        Number_Text_UnionSlice              `json:"longitude,omitempty"`
	Map__                             URLSlice                            `json:"map_,omitempty"`
	Maps_                             URLSlice                            `json:"maps,omitempty"`
	MaximumAttendeeCapacity_          IntegerSlice                        `json:"maximumAttendeeCapacity,omitempty"`
	OpeningHoursSpecification_        OpeningHoursSpecificationSlice      `json:"openingHoursSpecification,omitempty"`
	Photo_                            ImageObject_Photograph_UnionSlice   `json:"photo,omitempty"`
	Photos_                           ImageObject_Photograph_UnionSlice   `json:"photos,omitempty"`
	PublicAccess_                     BooleanSlice                        `json:"publicAccess,omitempty"`
	Review_                           ReviewSlice                         `json:"review,omitempty"`
	Reviews_                          ReviewSlice                         `json:"reviews,omitempty"`
	Slogan_                           TextSlice                           `json:"slogan,omitempty"`
	SmokingAllowed_                   BooleanSlice                        `json:"smokingAllowed,omitempty"`
	SpecialOpeningHoursSpecification_ OpeningHoursSpecificationSlice      `json:"specialOpeningHoursSpecification,omitempty"`
	Telephone_                        TextSlice                           `json:"telephone,omitempty"`
	TourBookingPage_                  URLSlice                            `json:"tourBookingPage,omitempty"`
}
type placeStruct_ struct {
	placeStruct
}

func (s *placeStruct) implementsAdministrativeArea_GeoShape_Place_Text_Union()   {}
func (s *placeStruct) implementsAdministrativeArea_GeoShape_Place_Union()        {}
func (s *placeStruct) implementsContactPoint_Place_Union()                       {}
func (s *placeStruct) implementsFoodEstablishment_Place_Union()                  {}
func (s *placeStruct) implementsGeoShape_Place_Text_Union()                      {}
func (s *placeStruct) implementsGeospatialGeometry_Place_Union()                 {}
func (s *placeStruct) implementsItemList_Place_Union()                           {}
func (s *placeStruct) implementsPlace_PostalAddress_Text_Union()                 {}
func (s *placeStruct) implementsPlace_PostalAddress_Text_VirtualLocation_Union() {}
func (s *placeStruct) implementsPlace_PostalAddress_URL_Union()                  {}

func (s *placeStruct) AdditionalProperty() []PropertyValue {
	return s.AdditionalProperty_
}
func (s *placeStruct) Address() []PostalAddress_Text_Union {
	return s.Address_
}
func (s *placeStruct) AggregateRating() []AggregateRating {
	return s.AggregateRating_
}
func (s *placeStruct) AmenityFeature() []LocationFeatureSpecification {
	return s.AmenityFeature_
}
func (s *placeStruct) BranchCode() []Text {
	return s.BranchCode_
}
func (s *placeStruct) ContainedIn() []Place {
	return s.ContainedIn_
}
func (s *placeStruct) ContainedInPlace() []Place {
	return s.ContainedInPlace_
}
func (s *placeStruct) ContainsPlace() []Place {
	return s.ContainsPlace_
}
func (s *placeStruct) Event() []Event {
	return s.Event_
}
func (s *placeStruct) Events() []Event {
	return s.Events_
}
func (s *placeStruct) FaxNumber() []Text {
	return s.FaxNumber_
}
func (s *placeStruct) Geo() []GeoCoordinates_GeoShape_Union {
	return s.Geo_
}
func (s *placeStruct) GeoContains() []GeospatialGeometry_Place_Union {
	return s.GeoContains_
}
func (s *placeStruct) GeoCoveredBy() []GeospatialGeometry_Place_Union {
	return s.GeoCoveredBy_
}
func (s *placeStruct) GeoCovers() []GeospatialGeometry_Place_Union {
	return s.GeoCovers_
}
func (s *placeStruct) GeoCrosses() []GeospatialGeometry_Place_Union {
	return s.GeoCrosses_
}
func (s *placeStruct) GeoDisjoint() []GeospatialGeometry_Place_Union {
	return s.GeoDisjoint_
}
func (s *placeStruct) GeoEquals() []GeospatialGeometry_Place_Union {
	return s.GeoEquals_
}
func (s *placeStruct) GeoIntersects() []GeospatialGeometry_Place_Union {
	return s.GeoIntersects_
}
func (s *placeStruct) GeoOverlaps() []GeospatialGeometry_Place_Union {
	return s.GeoOverlaps_
}
func (s *placeStruct) GeoTouches() []GeospatialGeometry_Place_Union {
	return s.GeoTouches_
}
func (s *placeStruct) GeoWithin() []GeospatialGeometry_Place_Union {
	return s.GeoWithin_
}
func (s *placeStruct) GlobalLocationNumber() []Text {
	return s.GlobalLocationNumber_
}
func (s *placeStruct) HasDriveThroughService() []Boolean {
	return s.HasDriveThroughService_
}
func (s *placeStruct) HasMap() []Map_URL_Union {
	return s.HasMap_
}
func (s *placeStruct) IsAccessibleForFree() []Boolean {
	return s.IsAccessibleForFree_
}
func (s *placeStruct) IsicV4() []Text {
	return s.IsicV4_
}
func (s *placeStruct) Keywords() []DefinedTerm_Text_URL_Union {
	return s.Keywords_
}
func (s *placeStruct) Latitude() []Number_Text_Union {
	return s.Latitude_
}
func (s *placeStruct) Logo() []ImageObject_URL_Union {
	return s.Logo_
}
func (s *placeStruct) Longitude() []Number_Text_Union {
	return s.Longitude_
}
func (s *placeStruct) Map_() []URL {
	return s.Map__
}
func (s *placeStruct) Maps() []URL {
	return s.Maps_
}
func (s *placeStruct) MaximumAttendeeCapacity() []Integer {
	return s.MaximumAttendeeCapacity_
}
func (s *placeStruct) OpeningHoursSpecification() []OpeningHoursSpecification {
	return s.OpeningHoursSpecification_
}
func (s *placeStruct) Photo() []ImageObject_Photograph_Union {
	return s.Photo_
}
func (s *placeStruct) Photos() []ImageObject_Photograph_Union {
	return s.Photos_
}
func (s *placeStruct) PublicAccess() []Boolean {
	return s.PublicAccess_
}
func (s *placeStruct) Review() []Review {
	return s.Review_
}
func (s *placeStruct) Reviews() []Review {
	return s.Reviews_
}
func (s *placeStruct) Slogan() []Text {
	return s.Slogan_
}
func (s *placeStruct) SmokingAllowed() []Boolean {
	return s.SmokingAllowed_
}
func (s *placeStruct) SpecialOpeningHoursSpecification() []OpeningHoursSpecification {
	return s.SpecialOpeningHoursSpecification_
}
func (s *placeStruct) Telephone() []Text {
	return s.Telephone_
}
func (s *placeStruct) TourBookingPage() []URL {
	return s.TourBookingPage_
}

type PlaceSlice []Place

func (s *PlaceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PlaceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Place)
	}
	return nil
}

var _ Place = &placeStruct{}

// Place of worship, such as a church, synagogue, or mosque.
type PlaceOfWorship interface {
	// Parents
	CivicStructure
}
type placeOfWorshipStruct struct {
	civicStructureStruct
}
type PlaceOfWorshipSlice []PlaceOfWorship

func (s *PlaceOfWorshipSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PlaceOfWorshipSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PlaceOfWorship)
	}
	return nil
}

var _ PlaceOfWorship = &placeOfWorshipStruct{}

// The act of planning the execution of an event/task/action/reservation/plan to a future date.
type PlanAction interface {
	// Parents
	OrganizeAction
	// Accessors
	ScheduledTime() []DateTime // The time the object is scheduled to.
}
type planActionStruct struct {
	organizeActionStruct

	ScheduledTime_ DateTimeSlice `json:"scheduledTime,omitempty"`
}

func (s *planActionStruct) ScheduledTime() []DateTime {
	return s.ScheduledTime_
}

type PlanActionSlice []PlanAction

func (s *PlanActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PlanActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PlanAction)
	}
	return nil
}

var _ PlanAction = &planActionStruct{}

// A play is a form of literature, usually consisting of dialogue between characters, intended for theatrical performance rather than just reading. Note: A performance of a Play would be a [[TheaterEvent]] or [[BroadcastEvent]] - the *Play* being the [[workPerformed]].
type Play interface {
	// Parents
	CreativeWork
}
type playStruct struct {
	creativeWorkStruct
}
type PlaySlice []Play

func (s *PlaySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PlaySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Play)
	}
	return nil
}

var _ Play = &playStruct{}

// The act of playing/exercising/training/performing for enjoyment, leisure, recreation, Competition or exercise.\n\nRelated actions:\n\n* [[ListenAction]]: Unlike ListenAction (which is under ConsumeAction), PlayAction refers to performing for an audience or at an event, rather than consuming music.\n* [[WatchAction]]: Unlike WatchAction (which is under ConsumeAction), PlayAction refers to showing/displaying for an audience or at an event, rather than consuming visual content.
type PlayAction interface {
	// Parents
	Action
	// Accessors
	Audience() []Audience // An intended audience, i.e. a group for whom something was created.
	Event() []Event       // Upcoming or past event associated with this place, organization, or action.
}
type playActionStruct struct {
	actionStruct

	Audience_ AudienceSlice `json:"audience,omitempty"`
	Event_    EventSlice    `json:"event,omitempty"`
}

func (s *playActionStruct) Audience() []Audience {
	return s.Audience_
}
func (s *playActionStruct) Event() []Event {
	return s.Event_
}

type PlayActionSlice []PlayAction

func (s *PlayActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PlayActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PlayAction)
	}
	return nil
}

var _ PlayAction = &playActionStruct{}

// The act of playing a video game.
type PlayGameAction interface {
	// Parents
	ConsumeAction
	// Accessors
	GameAvailabilityType() []GameAvailabilityEnumeration_Text_Union // Indicates the availability type of the game content associated with this action, such as whether it is a full version or a demo.
}
type playGameActionStruct struct {
	consumeActionStruct

	GameAvailabilityType_ GameAvailabilityEnumeration_Text_UnionSlice `json:"gameAvailabilityType,omitempty"`
}

func (s *playGameActionStruct) GameAvailabilityType() []GameAvailabilityEnumeration_Text_Union {
	return s.GameAvailabilityType_
}

type PlayGameActionSlice []PlayGameAction

func (s *PlayGameActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PlayGameActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PlayGameAction)
	}
	return nil
}

var _ PlayGameAction = &playGameActionStruct{}

// A playground.
type Playground interface {
	// Parents
	CivicStructure
}
type playgroundStruct struct {
	civicStructureStruct
}
type PlaygroundSlice []Playground

func (s *PlaygroundSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PlaygroundSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Playground)
	}
	return nil
}

var _ Playground = &playgroundStruct{}

// A plumbing service.
type Plumber interface {
	// Parents
	HomeAndConstructionBusiness
}
type plumberStruct struct {
	homeAndConstructionBusinessStruct
}
type PlumberSlice []Plumber

func (s *PlumberSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PlumberSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Plumber)
	}
	return nil
}

var _ Plumber = &plumberStruct{}

// A single episode of a podcast series.
type PodcastEpisode interface {
	// Parents
	Episode
}
type podcastEpisodeStruct struct {
	episodeStruct
}
type PodcastEpisodeSlice []PodcastEpisode

func (s *PodcastEpisodeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PodcastEpisodeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PodcastEpisode)
	}
	return nil
}

var _ PodcastEpisode = &podcastEpisodeStruct{}

// A single season of a podcast. Many podcasts do not break down into separate seasons. In that case, PodcastSeries should be used.
type PodcastSeason interface {
	// Parents
	CreativeWorkSeason
}
type podcastSeasonStruct struct {
	creativeWorkSeasonStruct
}
type PodcastSeasonSlice []PodcastSeason

func (s *PodcastSeasonSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PodcastSeasonSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PodcastSeason)
	}
	return nil
}

var _ PodcastSeason = &podcastSeasonStruct{}

// A podcast is an episodic series of digital audio or video files which a user can download and listen to.
type PodcastSeries interface {
	// Parents
	CreativeWorkSeries
	// Accessors
	Actor() []Person               // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	WebFeed() []DataFeed_URL_Union // The URL for a feed, e.g. associated with a podcast series, blog, or series of date-stamped updates. This is usually RSS or Atom.
}
type podcastSeriesStruct struct {
	creativeWorkSeriesStruct

	Actor_   PersonSlice             `json:"actor,omitempty"`
	WebFeed_ DataFeed_URL_UnionSlice `json:"webFeed,omitempty"`
}

func (s *podcastSeriesStruct) Actor() []Person {
	return s.Actor_
}
func (s *podcastSeriesStruct) WebFeed() []DataFeed_URL_Union {
	return s.WebFeed_
}

type PodcastSeriesSlice []PodcastSeries

func (s *PodcastSeriesSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PodcastSeriesSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PodcastSeries)
	}
	return nil
}

var _ PodcastSeries = &podcastSeriesStruct{}

// A police station.
type PoliceStation interface {
	// Parents
	CivicStructure
	EmergencyService
}
type policeStationStruct struct {
	civicStructureStruct
	emergencyServiceStruct
}

func (s *policeStationStruct) implementsAdministrativeArea_GeoShape_Place_Text_Union() {} // re
func (s *policeStationStruct) implementsAdministrativeArea_GeoShape_Place_Union()      {} // re
func (s *policeStationStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {
}                                                                                        // re
func (s *policeStationStruct) implementsCivicStructure_LocalBusiness_Union()             {} // re
func (s *policeStationStruct) implementsContactPoint_Place_Union()                       {} // re
func (s *policeStationStruct) implementsDataFeedItem_Text_Thing_Union()                  {} // re
func (s *policeStationStruct) implementsFoodEstablishment_Place_Union()                  {} // re
func (s *policeStationStruct) implementsGeoShape_Place_Text_Union()                      {} // re
func (s *policeStationStruct) implementsGeospatialGeometry_Place_Union()                 {} // re
func (s *policeStationStruct) implementsItemList_Place_Union()                           {} // re
func (s *policeStationStruct) implementsListItem_Text_Thing_Union()                      {} // re
func (s *policeStationStruct) implementsPlace_PostalAddress_Text_Union()                 {} // re
func (s *policeStationStruct) implementsPlace_PostalAddress_Text_VirtualLocation_Union() {} // re
func (s *policeStationStruct) implementsPlace_PostalAddress_URL_Union()                  {} // re
func (s *policeStationStruct) implementsText_Thing_URL_Union()                           {} // re
func (s *policeStationStruct) implementsText_Thing_Union()                               {} // re
type PoliceStationSlice []PoliceStation

func (s *PoliceStationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PoliceStationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PoliceStation)
	}
	return nil
}

var _ PoliceStation = &policeStationStruct{}

// A pond.
type Pond interface {
	// Parents
	BodyOfWater
}
type pondStruct struct {
	bodyOfWaterStruct
}
type PondSlice []Pond

func (s *PondSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PondSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Pond)
	}
	return nil
}

var _ Pond = &pondStruct{}

// A post office.
type PostOffice interface {
	// Parents
	GovernmentOffice
}
type postOfficeStruct struct {
	governmentOfficeStruct
}
type PostOfficeSlice []PostOffice

func (s *PostOfficeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PostOfficeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PostOffice)
	}
	return nil
}

var _ PostOffice = &postOfficeStruct{}

// The mailing address.
type PostalAddress interface {
	// Parents
	ContactPoint
	// Unions
	Place_PostalAddress_Text_Union
	Place_PostalAddress_Text_VirtualLocation_Union
	Place_PostalAddress_URL_Union
	PostalAddress_Text_Union
	// Accessors
	AddressCountry() []Country_Text_Union // The country. For example, USA. You can also provide the two-letter [ISO 3166-1 alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1).
	AddressLocality() []Text              // The locality in which the street address is, and which is in the region. For example, Mountain View.
	AddressRegion() []Text                // The region in which the locality is, and which is in the country. For example, California or another appropriate first-level [Administrative division](https://en.wikipedia.org/wiki/List_of_administrative_divisions_by_country)
	PostOfficeBoxNumber() []Text          // The post office box number for PO box addresses.
	PostalCode() []Text                   // The postal code. For example, 94043.
	StreetAddress() []Text                // The street address. For example, 1600 Amphitheatre Pkwy.
}
type postalAddressStruct struct {
	contactPointStruct

	AddressCountry_      Country_Text_UnionSlice `json:"addressCountry,omitempty"`
	AddressLocality_     TextSlice               `json:"addressLocality,omitempty"`
	AddressRegion_       TextSlice               `json:"addressRegion,omitempty"`
	PostOfficeBoxNumber_ TextSlice               `json:"postOfficeBoxNumber,omitempty"`
	PostalCode_          TextSlice               `json:"postalCode,omitempty"`
	StreetAddress_       TextSlice               `json:"streetAddress,omitempty"`
}

func (s *postalAddressStruct) implementsPlace_PostalAddress_Text_Union()                 {}
func (s *postalAddressStruct) implementsPlace_PostalAddress_Text_VirtualLocation_Union() {}
func (s *postalAddressStruct) implementsPlace_PostalAddress_URL_Union()                  {}
func (s *postalAddressStruct) implementsPostalAddress_Text_Union()                       {}

func (s *postalAddressStruct) AddressCountry() []Country_Text_Union {
	return s.AddressCountry_
}
func (s *postalAddressStruct) AddressLocality() []Text {
	return s.AddressLocality_
}
func (s *postalAddressStruct) AddressRegion() []Text {
	return s.AddressRegion_
}
func (s *postalAddressStruct) PostOfficeBoxNumber() []Text {
	return s.PostOfficeBoxNumber_
}
func (s *postalAddressStruct) PostalCode() []Text {
	return s.PostalCode_
}
func (s *postalAddressStruct) StreetAddress() []Text {
	return s.StreetAddress_
}

type PostalAddressSlice []PostalAddress

func (s *PostalAddressSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PostalAddressSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PostalAddress)
	}
	return nil
}

var _ PostalAddress = &postalAddressStruct{}

// Indicates a range of postalcodes, usually defined as the set of valid codes between [[postalCodeBegin]] and [[postalCodeEnd]], inclusively.
type PostalCodeRangeSpecification interface {
	// Parents
	StructuredValue
	// Accessors
	PostalCodeBegin() []Text // First postal code in a range (included).
	PostalCodeEnd() []Text   // Last postal code in the range (included). Needs to be after [[postalCodeBegin]].
}
type postalCodeRangeSpecificationStruct struct {
	structuredValueStruct

	PostalCodeBegin_ TextSlice `json:"postalCodeBegin,omitempty"`
	PostalCodeEnd_   TextSlice `json:"postalCodeEnd,omitempty"`
}

func (s *postalCodeRangeSpecificationStruct) PostalCodeBegin() []Text {
	return s.PostalCodeBegin_
}
func (s *postalCodeRangeSpecificationStruct) PostalCodeEnd() []Text {
	return s.PostalCodeEnd_
}

type PostalCodeRangeSpecificationSlice []PostalCodeRangeSpecification

func (s *PostalCodeRangeSpecificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PostalCodeRangeSpecificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PostalCodeRangeSpecification)
	}
	return nil
}

var _ PostalCodeRangeSpecification = &postalCodeRangeSpecificationStruct{}

// A large, usually printed placard, bill, or announcement, often illustrated, that is posted to advertise or publicize something.
type Poster interface {
	// Parents
	CreativeWork
}
type posterStruct struct {
	creativeWorkStruct
}
type PosterSlice []Poster

func (s *PosterSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PosterSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Poster)
	}
	return nil
}

var _ Poster = &posterStruct{}

// An agent orders a (not yet released) object/product/service to be delivered/sent.
type PreOrderAction interface {
	// Parents
	TradeAction
}
type preOrderActionStruct struct {
	tradeActionStruct
}
type PreOrderActionSlice []PreOrderAction

func (s *PreOrderActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PreOrderActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PreOrderAction)
	}
	return nil
}

var _ PreOrderAction = &preOrderActionStruct{}

// The act of inserting at the beginning if an ordered collection.
type PrependAction interface {
	// Parents
	InsertAction
}
type prependActionStruct struct {
	insertActionStruct
}
type PrependActionSlice []PrependAction

func (s *PrependActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PrependActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PrependAction)
	}
	return nil
}

var _ PrependAction = &prependActionStruct{}

// A preschool.
type Preschool interface {
	// Parents
	EducationalOrganization
}
type preschoolStruct struct {
	educationalOrganizationStruct
}
type PreschoolSlice []Preschool

func (s *PreschoolSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PreschoolSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Preschool)
	}
	return nil
}

var _ Preschool = &preschoolStruct{}

// A file containing slides or used for a presentation.
type PresentationDigitalDocument interface {
	// Parents
	DigitalDocument
}
type presentationDigitalDocumentStruct struct {
	digitalDocumentStruct
}
type PresentationDigitalDocumentSlice []PresentationDigitalDocument

func (s *PresentationDigitalDocumentSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PresentationDigitalDocumentSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PresentationDigitalDocument)
	}
	return nil
}

var _ PresentationDigitalDocument = &presentationDigitalDocumentStruct{}

// An indication for preventing an underlying condition, symptom, etc.
type PreventionIndication interface {
	// Parents
	MedicalIndication
}
type preventionIndicationStruct struct {
	medicalIndicationStruct
}
type PreventionIndicationSlice []PreventionIndication

func (s *PreventionIndicationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PreventionIndicationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PreventionIndication)
	}
	return nil
}

var _ PreventionIndication = &preventionIndicationStruct{}

// Enumerates different price components that together make up the total price for an offered product.
type PriceComponentTypeEnumeration interface {
	// Parents
	Enumeration
}
type priceComponentTypeEnumerationStruct struct {
	enumerationStruct
}
type PriceComponentTypeEnumerationSlice []PriceComponentTypeEnumeration

func (s *PriceComponentTypeEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PriceComponentTypeEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PriceComponentTypeEnumeration)
	}
	return nil
}

var _ PriceComponentTypeEnumeration = &priceComponentTypeEnumerationStruct{}

// A structured value representing a price or price range. Typically, only the subclasses of this type are used for markup. It is recommended to use [[MonetaryAmount]] to describe independent amounts of money such as a salary, credit card limits, etc.
type PriceSpecification interface {
	// Parents
	StructuredValue
	// Unions
	MonetaryAmount_Number_PriceSpecification_Union
	MonetaryAmount_PriceSpecification_Union
	Number_PriceSpecification_Text_Union
	// Accessors
	EligibleQuantity() []QuantitativeValue           // The interval and unit of measurement of ordering quantities for which the offer or price specification is valid. This allows e.g. specifying that a certain freight charge is valid only for a certain quantity.
	EligibleTransactionVolume() []PriceSpecification // The transaction volume, in a monetary unit, for which the offer or price specification is valid, e.g. for indicating a minimal purchasing volume, to express free shipping above a certain order volume, or to limit the acceptance of credit cards to purchases to a certain minimal amount.
	MaxPrice() []Number                              // The highest price if the price is a range.
	MinPrice() []Number                              // The lowest price if the price is a range.
	Price() []Number_Text_Union                      /*
	The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.\n\nUsage guidelines:\n\n* Use the [[priceCurrency]] property (with standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR") instead of including [ambiguous symbols](http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign) such as '$' in the value.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.\n* Note that both [RDFa](http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute) and Microdata syntax allow the use of a "content=" attribute for publishing simple machine-readable values alongside more human-friendly formatting.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.

	*/
	PriceCurrency() []Text               // The currency of the price, or a price component when attached to [[PriceSpecification]] and its subtypes.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	ValidFrom() []Date_DateTime_Union    // The date when the item becomes valid.
	ValidThrough() []Date_DateTime_Union // The date after when the item is not valid. For example the end of an offer, salary period, or a period of opening hours.
	ValueAddedTaxIncluded() []Boolean    // Specifies whether the applicable value-added tax (VAT) is included in the price specification or not.
}
type priceSpecificationStruct struct {
	structuredValueStruct

	EligibleQuantity_          QuantitativeValueSlice   `json:"eligibleQuantity,omitempty"`
	EligibleTransactionVolume_ PriceSpecificationSlice  `json:"eligibleTransactionVolume,omitempty"`
	MaxPrice_                  NumberSlice              `json:"maxPrice,omitempty"`
	MinPrice_                  NumberSlice              `json:"minPrice,omitempty"`
	Price_                     Number_Text_UnionSlice   `json:"price,omitempty"`
	PriceCurrency_             TextSlice                `json:"priceCurrency,omitempty"`
	ValidFrom_                 Date_DateTime_UnionSlice `json:"validFrom,omitempty"`
	ValidThrough_              Date_DateTime_UnionSlice `json:"validThrough,omitempty"`
	ValueAddedTaxIncluded_     BooleanSlice             `json:"valueAddedTaxIncluded,omitempty"`
}

func (s *priceSpecificationStruct) implementsMonetaryAmount_Number_PriceSpecification_Union() {}
func (s *priceSpecificationStruct) implementsMonetaryAmount_PriceSpecification_Union()        {}
func (s *priceSpecificationStruct) implementsNumber_PriceSpecification_Text_Union()           {}

func (s *priceSpecificationStruct) EligibleQuantity() []QuantitativeValue {
	return s.EligibleQuantity_
}
func (s *priceSpecificationStruct) EligibleTransactionVolume() []PriceSpecification {
	return s.EligibleTransactionVolume_
}
func (s *priceSpecificationStruct) MaxPrice() []Number {
	return s.MaxPrice_
}
func (s *priceSpecificationStruct) MinPrice() []Number {
	return s.MinPrice_
}
func (s *priceSpecificationStruct) Price() []Number_Text_Union {
	return s.Price_
}
func (s *priceSpecificationStruct) PriceCurrency() []Text {
	return s.PriceCurrency_
}
func (s *priceSpecificationStruct) ValidFrom() []Date_DateTime_Union {
	return s.ValidFrom_
}
func (s *priceSpecificationStruct) ValidThrough() []Date_DateTime_Union {
	return s.ValidThrough_
}
func (s *priceSpecificationStruct) ValueAddedTaxIncluded() []Boolean {
	return s.ValueAddedTaxIncluded_
}

type PriceSpecificationSlice []PriceSpecification

func (s *PriceSpecificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PriceSpecificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PriceSpecification)
	}
	return nil
}

var _ PriceSpecification = &priceSpecificationStruct{}

// Enumerates different price types, for example list price, invoice price, and sale price.
type PriceTypeEnumeration interface {
	// Parents
	Enumeration
	// Unions
	PriceTypeEnumeration_Text_Union
}
type priceTypeEnumerationStruct struct {
	enumerationStruct
}

func (s *priceTypeEnumerationStruct) implementsPriceTypeEnumeration_Text_Union() {}

type PriceTypeEnumerationSlice []PriceTypeEnumeration

func (s *PriceTypeEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PriceTypeEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PriceTypeEnumeration)
	}
	return nil
}

var _ PriceTypeEnumeration = &priceTypeEnumerationStruct{}

// Any offered product or service. For example: a pair of shoes; a concert ticket; the rental of a car; a haircut; or an episode of a TV show streamed online.
type Product interface {
	// Parents
	Thing
	// Unions
	AggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union
	BioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union
	CreativeWork_Product_URL_Union
	OrderItem_Product_Service_Union
	OwnershipInfo_Product_Union
	Product_Service_Union
	Product_Text_URL_Union
	Product_Text_Union
	// Accessors
	AdditionalProperty() []PropertyValue /*
	A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.\n\nNote: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
	*/
	AggregateRating() []AggregateRating                                     // The overall rating, based on a collection of reviews or ratings, of the item.
	Audience() []Audience                                                   // An intended audience, i.e. a group for whom something was created.
	Award() []Text                                                          // An award won by or for this item.
	Awards() []Text                                                         // Awards won by or for this item.
	Brand() []Brand_Organization_Union                                      // The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
	Category() []CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union // A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
	Color() []Text                                                          // The color of the product.
	CountryOfAssembly() []Text                                              // The place where the product was assembled.
	CountryOfLastProcessing() []Text                                        // The place where the item (typically [[Product]]) was last processed and tested before importation.
	CountryOfOrigin() []Country                                             /*
	The country of origin of something, including products as well as creative  works such as movie and TV content.

	In the case of TV and movie, this would be the country of the principle offices of the production company or individual responsible for the movie. For other kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties such as [[contentLocation]] and [[locationCreated]] may be more applicable.

	In the case of products, the country of origin of the product. The exact interpretation of this may vary by context and product type, and cannot be fully enumerated here.
	*/
	Depth() []Distance_QuantitativeValue_Union // The depth of the item.
	Funding() []Grant                          // A [[Grant]] that directly or indirectly provide funding or sponsorship for this item. See also [[ownershipFundingInfo]].
	Gtin() []Text                              /*
	A Global Trade Item Number ([GTIN](https://www.gs1.org/standards/id-keys/gtin)). GTINs identify trade items, including products and services, using numeric identification codes. The [[gtin]] property generalizes the earlier [[gtin8]], [[gtin12]], [[gtin13]], and [[gtin14]] properties. The GS1 [digital link specifications](https://www.gs1.org/standards/Digital-Link/) express GTINs as URLs. A correct [[gtin]] value should be a valid GTIN, which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or a "GS1 Digital Link" URL based on such a string. The numeric component should also have a [valid GS1 check digit](https://www.gs1.org/services/check-digit-calculator) and meet the other rules for valid GTINs. See also [GS1's GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) and [Wikipedia](https://en.wikipedia.org/wiki/Global_Trade_Item_Number) for more details. Left-padding of the gtin values is not required or encouraged.

	*/
	Gtin12() []Text                                          // The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12 is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference, and Check Digit used to identify trade items. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin13() []Text                                          // The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into a GTIN-13 code by simply adding a preceding zero. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin14() []Text                                          // The GTIN-14 code of the product, or the product to which the offer refers. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	Gtin8() []Text                                           // The GTIN-8 code of the product, or the product to which the offer refers. This code is also known as EAN/UCC-8 or 8-digit EAN. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.
	HasAdultConsideration() []AdultOrientedEnumeration       // Used to tag an item to be intended or suitable for consumption or use by adults only.
	HasEnergyConsumptionDetails() []EnergyConsumptionDetails // Defines the energy efficiency Category (also known as "class" or "rating") for a product according to an international energy efficiency standard.
	HasMeasurement() []QuantitativeValue                     // A product measurement, for example the inseam of pants, the wheel size of a bicycle, or the gauge of a screw. Usually an exact measurement, but can also be a range of measurements for adjustable products, for example belts and ski bindings.
	HasMerchantReturnPolicy() []MerchantReturnPolicy         // Specifies a MerchantReturnPolicy that may be applicable.
	Height() []Distance_QuantitativeValue_Union              // The height of the item.
	InProductGroupWithID() []Text                            // Indicates the [[productGroupID]] for a [[ProductGroup]] that this product [[isVariantOf]].
	IsAccessoryOrSparePartFor() []Product                    // A pointer to another product (or multiple products) for which this product is an accessory or spare part.
	IsConsumableFor() []Product                              // A pointer to another product (or multiple products) for which this product is a consumable.
	IsFamilyFriendly() []Boolean                             // Indicates whether this content is family friendly.
	IsRelatedTo() []Product_Service_Union                    // A pointer to another, somehow related product (or multiple products).
	IsSimilarTo() []Product_Service_Union                    // A pointer to another, functionally similar product (or multiple products).
	IsVariantOf() []ProductGroup_ProductModel_Union          // Indicates the kind of product that this is a variant of. In the case of [[ProductModel]], this is a pointer (from a ProductModel) to a base product from which this product is a variant. It is safe to infer that the variant inherits all product features from the base model, unless defined locally. This is not transitive. In the case of a [[ProductGroup]], the group description also serves as a template, representing a set of Products that vary on explicitly defined, specific dimensions only (so it defines both a set of variants, as well as which values distinguish amongst those variants). When used with [[ProductGroup]], this property can apply to any [[Product]] included in the group.
	ItemCondition() []OfferItemCondition                     // A predefined value from OfferItemCondition specifying the condition of the product or service, or the products or services included in the offer. Also used for product return policies to specify the condition of products accepted for returns.
	Keywords() []DefinedTerm_Text_URL_Union                  // Keywords or tags used to describe some item. Multiple textual entries in a keywords list are typically delimited by commas, or by repeating the property.
	Logo() []ImageObject_URL_Union                           // An associated logo.
	Manufacturer() []Organization                            // The manufacturer of the product.
	Material() []Product_Text_URL_Union                      // A material that something is made from, e.g. leather, wool, cotton, paper.
	Model() []ProductModel_Text_Union                        // The model of the product. Use with the URL of a ProductModel or a textual representation of the model identifier. The URL of the ProductModel can be from an external source. It is recommended to additionally provide strong product identifiers via the gtin8/gtin13/gtin14 and mpn properties.
	Mpn() []Text                                             // The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers.
	Nsn() []Text                                             // Indicates the [NATO stock number](https://en.wikipedia.org/wiki/NATO_Stock_Number) (nsn) of a [[Product]].
	Offers() []Demand_Offer_Union                            /*
	An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.

	*/
	Pattern() []DefinedTerm_Text_Union                                  // A pattern that something has, for example 'polka dot', 'striped', 'Canadian flag'. Values are typically expressed as text, although links to controlled value schemes are also supported.
	ProductID() []Text                                                  // The product identifier, such as ISBN. For example: ``` meta itemprop="productID" content="isbn:123-456-789" ```.
	ProductionDate() []Date                                             // The date of production of the item, e.g. vehicle.
	PurchaseDate() []Date                                               // The date the item e.g. vehicle was purchased by the current owner.
	ReleaseDate() []Date                                                // The release date of a product or product model. This can be used to distinguish the exact variant of a product.
	Review() []Review                                                   // A review of the item.
	Reviews() []Review                                                  // Review of the item.
	Size() []DefinedTerm_QuantitativeValue_SizeSpecification_Text_Union // A standardized size of a product or creative work, specified either through a simple textual string (for example 'XL', '32Wx34L'), a  QuantitativeValue with a unitCode, or a comprehensive and structured [[SizeSpecification]]; in other cases, the [[width]], [[height]], [[depth]] and [[weight]] properties may be more applicable.
	Sku() []Text                                                        // The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service, or the product to which the offer refers.
	Slogan() []Text                                                     // A slogan or motto associated with the item.
	Weight() []QuantitativeValue                                        // The weight of the product or person.
	Width() []Distance_QuantitativeValue_Union                          // The width of the item.
}
type productStruct struct {
	thingStruct

	AdditionalProperty_          PropertyValueSlice                                              `json:"additionalProperty,omitempty"`
	AggregateRating_             AggregateRatingSlice                                            `json:"aggregateRating,omitempty"`
	Audience_                    AudienceSlice                                                   `json:"audience,omitempty"`
	Award_                       TextSlice                                                       `json:"award,omitempty"`
	Awards_                      TextSlice                                                       `json:"awards,omitempty"`
	Brand_                       Brand_Organization_UnionSlice                                   `json:"brand,omitempty"`
	Category_                    CategoryCode_PhysicalActivityCategory_Text_Thing_URL_UnionSlice `json:"category,omitempty"`
	Color_                       TextSlice                                                       `json:"color,omitempty"`
	CountryOfAssembly_           TextSlice                                                       `json:"countryOfAssembly,omitempty"`
	CountryOfLastProcessing_     TextSlice                                                       `json:"countryOfLastProcessing,omitempty"`
	CountryOfOrigin_             CountrySlice                                                    `json:"countryOfOrigin,omitempty"`
	Depth_                       Distance_QuantitativeValue_UnionSlice                           `json:"depth,omitempty"`
	Funding_                     GrantSlice                                                      `json:"funding,omitempty"`
	Gtin_                        TextSlice                                                       `json:"gtin,omitempty"`
	Gtin12_                      TextSlice                                                       `json:"gtin12,omitempty"`
	Gtin13_                      TextSlice                                                       `json:"gtin13,omitempty"`
	Gtin14_                      TextSlice                                                       `json:"gtin14,omitempty"`
	Gtin8_                       TextSlice                                                       `json:"gtin8,omitempty"`
	HasAdultConsideration_       AdultOrientedEnumerationSlice                                   `json:"hasAdultConsideration,omitempty"`
	HasEnergyConsumptionDetails_ EnergyConsumptionDetailsSlice                                   `json:"hasEnergyConsumptionDetails,omitempty"`
	HasMeasurement_              QuantitativeValueSlice                                          `json:"hasMeasurement,omitempty"`
	HasMerchantReturnPolicy_     MerchantReturnPolicySlice                                       `json:"hasMerchantReturnPolicy,omitempty"`
	Height_                      Distance_QuantitativeValue_UnionSlice                           `json:"height,omitempty"`
	InProductGroupWithID_        TextSlice                                                       `json:"inProductGroupWithID,omitempty"`
	IsAccessoryOrSparePartFor_   ProductSlice                                                    `json:"isAccessoryOrSparePartFor,omitempty"`
	IsConsumableFor_             ProductSlice                                                    `json:"isConsumableFor,omitempty"`
	IsFamilyFriendly_            BooleanSlice                                                    `json:"isFamilyFriendly,omitempty"`
	IsRelatedTo_                 Product_Service_UnionSlice                                      `json:"isRelatedTo,omitempty"`
	IsSimilarTo_                 Product_Service_UnionSlice                                      `json:"isSimilarTo,omitempty"`
	IsVariantOf_                 ProductGroup_ProductModel_UnionSlice                            `json:"isVariantOf,omitempty"`
	ItemCondition_               OfferItemConditionSlice                                         `json:"itemCondition,omitempty"`
	Keywords_                    DefinedTerm_Text_URL_UnionSlice                                 `json:"keywords,omitempty"`
	Logo_                        ImageObject_URL_UnionSlice                                      `json:"logo,omitempty"`
	Manufacturer_                OrganizationSlice                                               `json:"manufacturer,omitempty"`
	Material_                    Product_Text_URL_UnionSlice                                     `json:"material,omitempty"`
	Model_                       ProductModel_Text_UnionSlice                                    `json:"model,omitempty"`
	Mpn_                         TextSlice                                                       `json:"mpn,omitempty"`
	Nsn_                         TextSlice                                                       `json:"nsn,omitempty"`
	Offers_                      Demand_Offer_UnionSlice                                         `json:"offers,omitempty"`
	Pattern_                     DefinedTerm_Text_UnionSlice                                     `json:"pattern,omitempty"`
	ProductID_                   TextSlice                                                       `json:"productID,omitempty"`
	ProductionDate_              DateSlice                                                       `json:"productionDate,omitempty"`
	PurchaseDate_                DateSlice                                                       `json:"purchaseDate,omitempty"`
	ReleaseDate_                 DateSlice                                                       `json:"releaseDate,omitempty"`
	Review_                      ReviewSlice                                                     `json:"review,omitempty"`
	Reviews_                     ReviewSlice                                                     `json:"reviews,omitempty"`
	Size_                        DefinedTerm_QuantitativeValue_SizeSpecification_Text_UnionSlice `json:"size,omitempty"`
	Sku_                         TextSlice                                                       `json:"sku,omitempty"`
	Slogan_                      TextSlice                                                       `json:"slogan,omitempty"`
	Weight_                      QuantitativeValueSlice                                          `json:"weight,omitempty"`
	Width_                       Distance_QuantitativeValue_UnionSlice                           `json:"width,omitempty"`
}

func (s *productStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
}
func (s *productStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}
func (s *productStruct) implementsCreativeWork_Product_URL_Union()  {}
func (s *productStruct) implementsOrderItem_Product_Service_Union() {}
func (s *productStruct) implementsOwnershipInfo_Product_Union()     {}
func (s *productStruct) implementsProduct_Service_Union()           {}
func (s *productStruct) implementsProduct_Text_URL_Union()          {}
func (s *productStruct) implementsProduct_Text_Union()              {}

func (s *productStruct) AdditionalProperty() []PropertyValue {
	return s.AdditionalProperty_
}
func (s *productStruct) AggregateRating() []AggregateRating {
	return s.AggregateRating_
}
func (s *productStruct) Audience() []Audience {
	return s.Audience_
}
func (s *productStruct) Award() []Text {
	return s.Award_
}
func (s *productStruct) Awards() []Text {
	return s.Awards_
}
func (s *productStruct) Brand() []Brand_Organization_Union {
	return s.Brand_
}
func (s *productStruct) Category() []CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union {
	return s.Category_
}
func (s *productStruct) Color() []Text {
	return s.Color_
}
func (s *productStruct) CountryOfAssembly() []Text {
	return s.CountryOfAssembly_
}
func (s *productStruct) CountryOfLastProcessing() []Text {
	return s.CountryOfLastProcessing_
}
func (s *productStruct) CountryOfOrigin() []Country {
	return s.CountryOfOrigin_
}
func (s *productStruct) Depth() []Distance_QuantitativeValue_Union {
	return s.Depth_
}
func (s *productStruct) Funding() []Grant {
	return s.Funding_
}
func (s *productStruct) Gtin() []Text {
	return s.Gtin_
}
func (s *productStruct) Gtin12() []Text {
	return s.Gtin12_
}
func (s *productStruct) Gtin13() []Text {
	return s.Gtin13_
}
func (s *productStruct) Gtin14() []Text {
	return s.Gtin14_
}
func (s *productStruct) Gtin8() []Text {
	return s.Gtin8_
}
func (s *productStruct) HasAdultConsideration() []AdultOrientedEnumeration {
	return s.HasAdultConsideration_
}
func (s *productStruct) HasEnergyConsumptionDetails() []EnergyConsumptionDetails {
	return s.HasEnergyConsumptionDetails_
}
func (s *productStruct) HasMeasurement() []QuantitativeValue {
	return s.HasMeasurement_
}
func (s *productStruct) HasMerchantReturnPolicy() []MerchantReturnPolicy {
	return s.HasMerchantReturnPolicy_
}
func (s *productStruct) Height() []Distance_QuantitativeValue_Union {
	return s.Height_
}
func (s *productStruct) InProductGroupWithID() []Text {
	return s.InProductGroupWithID_
}
func (s *productStruct) IsAccessoryOrSparePartFor() []Product {
	return s.IsAccessoryOrSparePartFor_
}
func (s *productStruct) IsConsumableFor() []Product {
	return s.IsConsumableFor_
}
func (s *productStruct) IsFamilyFriendly() []Boolean {
	return s.IsFamilyFriendly_
}
func (s *productStruct) IsRelatedTo() []Product_Service_Union {
	return s.IsRelatedTo_
}
func (s *productStruct) IsSimilarTo() []Product_Service_Union {
	return s.IsSimilarTo_
}
func (s *productStruct) IsVariantOf() []ProductGroup_ProductModel_Union {
	return s.IsVariantOf_
}
func (s *productStruct) ItemCondition() []OfferItemCondition {
	return s.ItemCondition_
}
func (s *productStruct) Keywords() []DefinedTerm_Text_URL_Union {
	return s.Keywords_
}
func (s *productStruct) Logo() []ImageObject_URL_Union {
	return s.Logo_
}
func (s *productStruct) Manufacturer() []Organization {
	return s.Manufacturer_
}
func (s *productStruct) Material() []Product_Text_URL_Union {
	return s.Material_
}
func (s *productStruct) Model() []ProductModel_Text_Union {
	return s.Model_
}
func (s *productStruct) Mpn() []Text {
	return s.Mpn_
}
func (s *productStruct) Nsn() []Text {
	return s.Nsn_
}
func (s *productStruct) Offers() []Demand_Offer_Union {
	return s.Offers_
}
func (s *productStruct) Pattern() []DefinedTerm_Text_Union {
	return s.Pattern_
}
func (s *productStruct) ProductID() []Text {
	return s.ProductID_
}
func (s *productStruct) ProductionDate() []Date {
	return s.ProductionDate_
}
func (s *productStruct) PurchaseDate() []Date {
	return s.PurchaseDate_
}
func (s *productStruct) ReleaseDate() []Date {
	return s.ReleaseDate_
}
func (s *productStruct) Review() []Review {
	return s.Review_
}
func (s *productStruct) Reviews() []Review {
	return s.Reviews_
}
func (s *productStruct) Size() []DefinedTerm_QuantitativeValue_SizeSpecification_Text_Union {
	return s.Size_
}
func (s *productStruct) Sku() []Text {
	return s.Sku_
}
func (s *productStruct) Slogan() []Text {
	return s.Slogan_
}
func (s *productStruct) Weight() []QuantitativeValue {
	return s.Weight_
}
func (s *productStruct) Width() []Distance_QuantitativeValue_Union {
	return s.Width_
}

type ProductSlice []Product

func (s *ProductSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ProductSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Product)
	}
	return nil
}

var _ Product = &productStruct{}

// A set of products (either [[ProductGroup]]s or specific variants) that are listed together e.g. in an [[Offer]].
type ProductCollection interface {
	// Parents
	Collection
	Product
	// Accessors
	IncludesObject() []TypeAndQuantityNode // This links to a node or nodes indicating the exact quantity of the products included in  an [[Offer]] or [[ProductCollection]].
}
type productCollectionStruct struct {
	collectionStruct
	productStruct

	IncludesObject_ TypeAndQuantityNodeSlice `json:"includesObject,omitempty"`
}

func (s *productCollectionStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
} // re
func (s *productCollectionStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
} // re
func (s *productCollectionStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {
}                                                                            // re
func (s *productCollectionStruct) implementsCreativeWork_Product_URL_Union() {} // re
func (s *productCollectionStruct) implementsDataFeedItem_Text_Thing_Union()  {} // re
func (s *productCollectionStruct) implementsListItem_Text_Thing_Union()      {} // re
func (s *productCollectionStruct) implementsText_Thing_URL_Union()           {} // re
func (s *productCollectionStruct) implementsText_Thing_Union()               {} // re
func (s *productCollectionStruct) IncludesObject() []TypeAndQuantityNode {
	return s.IncludesObject_
}

type ProductCollectionSlice []ProductCollection

func (s *ProductCollectionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ProductCollectionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ProductCollection)
	}
	return nil
}

var _ ProductCollection = &productCollectionStruct{}

/*
A ProductGroup represents a group of [[Product]]s that vary only in certain well-described ways, such as by [[size]], [[color]], [[material]] etc.

While a ProductGroup itself is not directly offered for sale, the various varying products that it represents can be. The ProductGroup serves as a prototype or template, standing in for all of the products who have an [[isVariantOf]] relationship to it. As such, properties (including additional types) can be applied to the ProductGroup to represent characteristics shared by each of the (possibly very many) variants. Properties that reference a ProductGroup are not included in this mechanism; neither are the following specific properties [[variesBy]], [[hasVariant]], [[url]].
*/
type ProductGroup interface {
	// Parents
	Product
	// Unions
	ProductGroup_ProductModel_Union
	// Accessors
	HasVariant() []Product              // Indicates a [[Product]] that is a member of this [[ProductGroup]] (or [[ProductModel]]).
	ProductGroupID() []Text             // Indicates a textual identifier for a ProductGroup.
	VariesBy() []DefinedTerm_Text_Union // Indicates the property or properties by which the variants in a [[ProductGroup]] vary, e.g. their size, color etc. Schema.org properties can be referenced by their short name e.g. "color"; terms defined elsewhere can be referenced with their URIs.
}
type productGroupStruct struct {
	productStruct

	HasVariant_     ProductSlice                `json:"hasVariant,omitempty"`
	ProductGroupID_ TextSlice                   `json:"productGroupID,omitempty"`
	VariesBy_       DefinedTerm_Text_UnionSlice `json:"variesBy,omitempty"`
}

func (s *productGroupStruct) implementsProductGroup_ProductModel_Union() {}

func (s *productGroupStruct) HasVariant() []Product {
	return s.HasVariant_
}
func (s *productGroupStruct) ProductGroupID() []Text {
	return s.ProductGroupID_
}
func (s *productGroupStruct) VariesBy() []DefinedTerm_Text_Union {
	return s.VariesBy_
}

type ProductGroupSlice []ProductGroup

func (s *ProductGroupSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ProductGroupSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ProductGroup)
	}
	return nil
}

var _ ProductGroup = &productGroupStruct{}

// A datasheet or vendor specification of a product (in the sense of a prototypical description).
type ProductModel interface {
	// Parents
	Product
	// Unions
	ProductGroup_ProductModel_Union
	ProductModel_Text_Union
	// Accessors
	IsVariantOf() []ProductGroup_ProductModel_Union // Indicates the kind of product that this is a variant of. In the case of [[ProductModel]], this is a pointer (from a ProductModel) to a base product from which this product is a variant. It is safe to infer that the variant inherits all product features from the base model, unless defined locally. This is not transitive. In the case of a [[ProductGroup]], the group description also serves as a template, representing a set of Products that vary on explicitly defined, specific dimensions only (so it defines both a set of variants, as well as which values distinguish amongst those variants). When used with [[ProductGroup]], this property can apply to any [[Product]] included in the group.
	PredecessorOf() []ProductModel                  // A pointer from a previous, often discontinued variant of the product to its newer variant.
	SuccessorOf() []ProductModel                    // A pointer from a newer variant of a product  to its previous, often discontinued predecessor.
}
type productModelStruct struct {
	productStruct

	IsVariantOf_   ProductGroup_ProductModel_UnionSlice `json:"isVariantOf,omitempty"`
	PredecessorOf_ ProductModelSlice                    `json:"predecessorOf,omitempty"`
	SuccessorOf_   ProductModelSlice                    `json:"successorOf,omitempty"`
}

func (s *productModelStruct) implementsProductGroup_ProductModel_Union() {}
func (s *productModelStruct) implementsProductModel_Text_Union()         {}

func (s *productModelStruct) IsVariantOf() []ProductGroup_ProductModel_Union {
	return s.IsVariantOf_
}
func (s *productModelStruct) PredecessorOf() []ProductModel {
	return s.PredecessorOf_
}
func (s *productModelStruct) SuccessorOf() []ProductModel {
	return s.SuccessorOf_
}

type ProductModelSlice []ProductModel

func (s *ProductModelSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ProductModelSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ProductModel)
	}
	return nil
}

var _ ProductModel = &productModelStruct{}

/*
Original definition: "provider of professional services."\n\nThe general [[ProfessionalService]] type for local businesses was deprecated due to confusion with [[Service]]. For reference, the types that it included were: [[Dentist]],
        [[AccountingService]], [[Attorney]], [[Notary]], as well as types for several kinds of [[HomeAndConstructionBusiness]]: [[Electrician]], [[GeneralContractor]],
        [[HousePainter]], [[Locksmith]], [[Plumber]], [[RoofingContractor]]. [[LegalService]] was introduced as a more inclusive supertype of [[Attorney]].
*/
type ProfessionalService interface {
	// Parents
	LocalBusiness
}
type professionalServiceStruct struct {
	localBusinessStruct
}
type ProfessionalServiceSlice []ProfessionalService

func (s *ProfessionalServiceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ProfessionalServiceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ProfessionalService)
	}
	return nil
}

var _ ProfessionalService = &professionalServiceStruct{}

// Web page type: Profile page.
type ProfilePage interface {
	// Parents
	WebPage
}
type profilePageStruct struct {
	webPageStruct
}
type ProfilePageSlice []ProfilePage

func (s *ProfilePageSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ProfilePageSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ProfilePage)
	}
	return nil
}

var _ ProfilePage = &profilePageStruct{}

// Used to describe membership in a loyalty programs (e.g. "StarAliance"), traveler clubs (e.g. "AAA"), purchase clubs ("Safeway Club"), etc.
type ProgramMembership interface {
	// Parents
	Intangible
	// Unions
	Organization_ProgramMembership_Union
	// Accessors
	HostingOrganization() []Organization                      // The organization (airline, travelers' club, etc.) the membership is made with.
	Member() []Organization_Person_Union                      // A member of an Organization or a ProgramMembership. Organizations can be members of organizations; ProgramMembership is typically for individuals.
	Members() []Organization_Person_Union                     // A member of this organization.
	MembershipNumber() []Text                                 // A unique identifier for the membership.
	MembershipPointsEarned() []Number_QuantitativeValue_Union // The number of membership points earned by the member. If necessary, the unitText can be used to express the units the points are issued in. (e.g. stars, miles, etc.)
	ProgramName() []Text                                      // The program providing the membership.
}
type programMembershipStruct struct {
	intangibleStruct

	HostingOrganization_    OrganizationSlice                   `json:"hostingOrganization,omitempty"`
	Member_                 Organization_Person_UnionSlice      `json:"member,omitempty"`
	Members_                Organization_Person_UnionSlice      `json:"members,omitempty"`
	MembershipNumber_       TextSlice                           `json:"membershipNumber,omitempty"`
	MembershipPointsEarned_ Number_QuantitativeValue_UnionSlice `json:"membershipPointsEarned,omitempty"`
	ProgramName_            TextSlice                           `json:"programName,omitempty"`
}

func (s *programMembershipStruct) implementsOrganization_ProgramMembership_Union() {}

func (s *programMembershipStruct) HostingOrganization() []Organization {
	return s.HostingOrganization_
}
func (s *programMembershipStruct) Member() []Organization_Person_Union {
	return s.Member_
}
func (s *programMembershipStruct) Members() []Organization_Person_Union {
	return s.Members_
}
func (s *programMembershipStruct) MembershipNumber() []Text {
	return s.MembershipNumber_
}
func (s *programMembershipStruct) MembershipPointsEarned() []Number_QuantitativeValue_Union {
	return s.MembershipPointsEarned_
}
func (s *programMembershipStruct) ProgramName() []Text {
	return s.ProgramName_
}

type ProgramMembershipSlice []ProgramMembership

func (s *ProgramMembershipSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ProgramMembershipSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ProgramMembership)
	}
	return nil
}

var _ ProgramMembership = &programMembershipStruct{}

/*
An enterprise (potentially individual but typically collaborative), planned to achieve a particular aim.
Use properties from [[Organization]], [[subOrganization]]/[[parentOrganization]] to indicate project sub-structures.

*/
type Project interface {
	// Parents
	Organization
}
type projectStruct struct {
	organizationStruct
}
type ProjectSlice []Project

func (s *ProjectSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ProjectSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Project)
	}
	return nil
}

var _ Project = &projectStruct{}

// Data type: PronounceableText.
type PronounceableText interface {
	// Parents
	Text
	// Accessors
	InLanguage() []Language_Text_Union // The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
	PhoneticText() []Text              // Representation of a text [[textValue]] using the specified [[speechToTextMarkup]]. For example the city name of Houston in IPA: /ˈhjuːstən/.
	SpeechToTextMarkup() []Text        // Form of markup used. eg. [SSML](https://www.w3.org/TR/speech-synthesis11) or [IPA](https://www.wikidata.org/wiki/Property:P898).
	TextValue() []Text                 // Text value being annotated.
}
type pronounceableTextStruct struct {
	textStruct

	InLanguage_         Language_Text_UnionSlice `json:"inLanguage,omitempty"`
	PhoneticText_       TextSlice                `json:"phoneticText,omitempty"`
	SpeechToTextMarkup_ TextSlice                `json:"speechToTextMarkup,omitempty"`
	TextValue_          TextSlice                `json:"textValue,omitempty"`
}

func (s *pronounceableTextStruct) InLanguage() []Language_Text_Union {
	return s.InLanguage_
}
func (s *pronounceableTextStruct) PhoneticText() []Text {
	return s.PhoneticText_
}
func (s *pronounceableTextStruct) SpeechToTextMarkup() []Text {
	return s.SpeechToTextMarkup_
}
func (s *pronounceableTextStruct) TextValue() []Text {
	return s.TextValue_
}

type PronounceableTextSlice []PronounceableText

func (s *PronounceableTextSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PronounceableTextSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PronounceableText)
	}
	return nil
}

var _ PronounceableText = &pronounceableTextStruct{}

// A property, used to indicate attributes and relationships of some Thing; equivalent to rdf:Property.
type Property interface {
	// Parents
	Intangible
	// Unions
	Class_Enumeration_Property_Union
	// Accessors
	DomainIncludes() []Class                          // Relates a property to a class that is (one of) the type(s) the property is expected to be used on.
	InverseOf() []Property                            // Relates a property to a property that is its inverse. Inverse properties relate the same pairs of items to each other, but in reversed direction. For example, the 'alumni' and 'alumniOf' properties are inverseOf each other. Some properties don't have explicit inverses; in these situations RDFa and JSON-LD syntax for reverse properties can be used.
	RangeIncludes() []Class                           // Relates a property to a class that constitutes (one of) the expected type(s) for values of the property.
	SupersededBy() []Class_Enumeration_Property_Union // Relates a term (i.e. a property, class or enumeration) to one that supersedes it.
}
type propertyStruct struct {
	intangibleStruct

	DomainIncludes_ ClassSlice                            `json:"domainIncludes,omitempty"`
	InverseOf_      PropertySlice                         `json:"inverseOf,omitempty"`
	RangeIncludes_  ClassSlice                            `json:"rangeIncludes,omitempty"`
	SupersededBy_   Class_Enumeration_Property_UnionSlice `json:"supersededBy,omitempty"`
}

func (s *propertyStruct) implementsClass_Enumeration_Property_Union() {}

func (s *propertyStruct) DomainIncludes() []Class {
	return s.DomainIncludes_
}
func (s *propertyStruct) InverseOf() []Property {
	return s.InverseOf_
}
func (s *propertyStruct) RangeIncludes() []Class {
	return s.RangeIncludes_
}
func (s *propertyStruct) SupersededBy() []Class_Enumeration_Property_Union {
	return s.SupersededBy_
}

type PropertySlice []Property

func (s *PropertySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PropertySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Property)
	}
	return nil
}

var _ Property = &propertyStruct{}

/*
A property-value pair, e.g. representing a feature of a product or place. Use the 'name' property for the name of the property. If there is an additional human-readable version of the value, put that into the 'description' property.\n\n Always use specific schema.org properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute will typically not trigger the same effect as using the original, specific property.

*/
type PropertyValue interface {
	// Parents
	StructuredValue
	// Unions
	DefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union
	DefinedTerm_PropertyValue_URL_Union
	MedicalCondition_PropertyValue_URL_Union
	PropertyValue_Text_URL_Union
	PropertyValue_Text_Union
	// Accessors
	MaxValue() []Number                     // The upper value of some characteristic or property.
	MeasurementTechnique() []Text_URL_Union /*
	A technique or technology used in a [[Dataset]] (or [[DataDownload]], [[DataCatalog]]),
	corresponding to the method used for measuring the corresponding variable(s) (described using [[variableMeasured]]). This is oriented towards scientific and scholarly dataset publication but may have broader applicability; it is not intended as a full representation of measurement, but rather as a high level summary for dataset discovery.

	For example, if [[variableMeasured]] is: molecule concentration, [[measurementTechnique]] could be: "mass spectrometry" or "nmr spectroscopy" or "colorimetry" or "immunofluorescence".

	If the [[variableMeasured]] is "depression rating", the [[measurementTechnique]] could be "Zung Scale" or "HAM-D" or "Beck Depression Inventory".

	If there are several [[variableMeasured]] properties recorded for some given data object, use a [[PropertyValue]] for each [[variableMeasured]] and attach the corresponding [[measurementTechnique]].

	*/
	MinValue() []Number           // The lower value of some characteristic or property.
	PropertyID() []Text_URL_Union /*
	A commonly used identifier for the characteristic represented by the property, e.g. a manufacturer or a standard code for a property. propertyID can be
	(1) a prefixed string, mainly meant to be used with standards for product properties; (2) a site-specific, non-prefixed string (e.g. the primary key of the property or the vendor-specific id of the property), or (3)
	a URL indicating the type of the property, either pointing to an external vocabulary, or a Web resource that describes the property (e.g. a glossary entry).
	Standards bodies should promote a standard prefix for the identifiers of properties from their standards.
	*/
	UnitCode() []Text_URL_Union // The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.
	UnitText() []Text           /*
	A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for
	<a href='unitCode'>unitCode</a>.
	*/
	Value() []Boolean_Number_StructuredValue_Text_Union                                                                                               // The value of the quantitative value or property value node.\n\n* For [[QuantitativeValue]] and [[MonetaryAmount]], the recommended type for values is 'Number'.\n* For [[PropertyValue]], it can be 'Text;', 'Number', 'Boolean', or 'StructuredValue'.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
	ValueReference() []DefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union // A secondary value that provides additional information on the original value, e.g. a reference temperature or a type of measurement.
}
type propertyValueStruct struct {
	structuredValueStruct

	MaxValue_             NumberSlice                                                                                                                         `json:"maxValue,omitempty"`
	MeasurementTechnique_ Text_URL_UnionSlice                                                                                                                 `json:"measurementTechnique,omitempty"`
	MinValue_             NumberSlice                                                                                                                         `json:"minValue,omitempty"`
	PropertyID_           Text_URL_UnionSlice                                                                                                                 `json:"propertyID,omitempty"`
	UnitCode_             Text_URL_UnionSlice                                                                                                                 `json:"unitCode,omitempty"`
	UnitText_             TextSlice                                                                                                                           `json:"unitText,omitempty"`
	Value_                Boolean_Number_StructuredValue_Text_UnionSlice                                                                                      `json:"value,omitempty"`
	ValueReference_       DefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_UnionSlice `json:"valueReference,omitempty"`
}

func (s *propertyValueStruct) implementsDefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union() {
}
func (s *propertyValueStruct) implementsDefinedTerm_PropertyValue_URL_Union()      {}
func (s *propertyValueStruct) implementsMedicalCondition_PropertyValue_URL_Union() {}
func (s *propertyValueStruct) implementsPropertyValue_Text_URL_Union()             {}
func (s *propertyValueStruct) implementsPropertyValue_Text_Union()                 {}

func (s *propertyValueStruct) MaxValue() []Number {
	return s.MaxValue_
}
func (s *propertyValueStruct) MeasurementTechnique() []Text_URL_Union {
	return s.MeasurementTechnique_
}
func (s *propertyValueStruct) MinValue() []Number {
	return s.MinValue_
}
func (s *propertyValueStruct) PropertyID() []Text_URL_Union {
	return s.PropertyID_
}
func (s *propertyValueStruct) UnitCode() []Text_URL_Union {
	return s.UnitCode_
}
func (s *propertyValueStruct) UnitText() []Text {
	return s.UnitText_
}
func (s *propertyValueStruct) Value() []Boolean_Number_StructuredValue_Text_Union {
	return s.Value_
}
func (s *propertyValueStruct) ValueReference() []DefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union {
	return s.ValueReference_
}

type PropertyValueSlice []PropertyValue

func (s *PropertyValueSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PropertyValueSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PropertyValue)
	}
	return nil
}

var _ PropertyValue = &propertyValueStruct{}

// A Property value specification.
type PropertyValueSpecification interface {
	// Parents
	Intangible
	// Accessors
	DefaultValue() []Text_Thing_Union // The default value of the input.  For properties that expect a literal, the default is a literal value, for properties that expect an object, it's an ID reference to one of the current values.
	MaxValue() []Number               // The upper value of some characteristic or property.
	MinValue() []Number               // The lower value of some characteristic or property.
	MultipleValues() []Boolean        // Whether multiple values are allowed for the property.  Default is false.
	ReadonlyValue() []Boolean         // Whether or not a property is mutable.  Default is false. Specifying this for a property that also has a value makes it act similar to a "hidden" input in an HTML form.
	StepValue() []Number              // The stepValue attribute indicates the granularity that is expected (and required) of the value in a PropertyValueSpecification.
	ValueMaxLength() []Number         // Specifies the allowed range for number of characters in a literal value.
	ValueMinLength() []Number         // Specifies the minimum allowed range for number of characters in a literal value.
	ValueName() []Text                // Indicates the name of the PropertyValueSpecification to be used in URL templates and form encoding in a manner analogous to HTML's input@name.
	ValuePattern() []Text             // Specifies a regular expression for testing literal values according to the HTML spec.
	ValueRequired() []Boolean         // Whether the property must be filled in to complete the action.  Default is false.
}
type propertyValueSpecificationStruct struct {
	intangibleStruct

	DefaultValue_   Text_Thing_UnionSlice `json:"defaultValue,omitempty"`
	MaxValue_       NumberSlice           `json:"maxValue,omitempty"`
	MinValue_       NumberSlice           `json:"minValue,omitempty"`
	MultipleValues_ BooleanSlice          `json:"multipleValues,omitempty"`
	ReadonlyValue_  BooleanSlice          `json:"readonlyValue,omitempty"`
	StepValue_      NumberSlice           `json:"stepValue,omitempty"`
	ValueMaxLength_ NumberSlice           `json:"valueMaxLength,omitempty"`
	ValueMinLength_ NumberSlice           `json:"valueMinLength,omitempty"`
	ValueName_      TextSlice             `json:"valueName,omitempty"`
	ValuePattern_   TextSlice             `json:"valuePattern,omitempty"`
	ValueRequired_  BooleanSlice          `json:"valueRequired,omitempty"`
}

func (s *propertyValueSpecificationStruct) DefaultValue() []Text_Thing_Union {
	return s.DefaultValue_
}
func (s *propertyValueSpecificationStruct) MaxValue() []Number {
	return s.MaxValue_
}
func (s *propertyValueSpecificationStruct) MinValue() []Number {
	return s.MinValue_
}
func (s *propertyValueSpecificationStruct) MultipleValues() []Boolean {
	return s.MultipleValues_
}
func (s *propertyValueSpecificationStruct) ReadonlyValue() []Boolean {
	return s.ReadonlyValue_
}
func (s *propertyValueSpecificationStruct) StepValue() []Number {
	return s.StepValue_
}
func (s *propertyValueSpecificationStruct) ValueMaxLength() []Number {
	return s.ValueMaxLength_
}
func (s *propertyValueSpecificationStruct) ValueMinLength() []Number {
	return s.ValueMinLength_
}
func (s *propertyValueSpecificationStruct) ValueName() []Text {
	return s.ValueName_
}
func (s *propertyValueSpecificationStruct) ValuePattern() []Text {
	return s.ValuePattern_
}
func (s *propertyValueSpecificationStruct) ValueRequired() []Boolean {
	return s.ValueRequired_
}

type PropertyValueSpecificationSlice []PropertyValueSpecification

func (s *PropertyValueSpecificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PropertyValueSpecificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PropertyValueSpecification)
	}
	return nil
}

var _ PropertyValueSpecification = &propertyValueSpecificationStruct{}

// Protein is here used in its widest possible definition, as classes of amino acid based molecules. Amyloid-beta Protein in human (UniProt P05067), eukaryota (e.g. an OrthoDB group) or even a single molecule that one can point to are all of type schema:Protein. A protein can thus be a subclass of another protein, e.g. schema:Protein as a UniProt record can have multiple isoforms inside it which would also be schema:Protein. They can be imagined, synthetic, hypothetical or naturally occurring.
type Protein interface {
	// Parents
	BioChemEntity
	// Accessors
	HasBioPolymerSequence() []Text // A symbolic representation of a BioChemEnity. For example, a nucleotide sequence of a Gene or an amino acid sequence of a Protein.
}
type proteinStruct struct {
	bioChemEntityStruct

	HasBioPolymerSequence_ TextSlice `json:"hasBioPolymerSequence,omitempty"`
}

func (s *proteinStruct) HasBioPolymerSequence() []Text {
	return s.HasBioPolymerSequence_
}

type ProteinSlice []Protein

func (s *ProteinSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ProteinSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Protein)
	}
	return nil
}

var _ Protein = &proteinStruct{}

// A process of care relying upon counseling, dialogue and communication  aimed at improving a mental health condition without use of drugs.
type PsychologicalTreatment interface {
	// Parents
	TherapeuticProcedure
}
type psychologicalTreatmentStruct struct {
	therapeuticProcedureStruct
}
type PsychologicalTreatmentSlice []PsychologicalTreatment

func (s *PsychologicalTreatmentSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PsychologicalTreatmentSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PsychologicalTreatment)
	}
	return nil
}

var _ PsychologicalTreatment = &psychologicalTreatmentStruct{}

// A public swimming pool.
type PublicSwimmingPool interface {
	// Parents
	SportsActivityLocation
}
type publicSwimmingPoolStruct struct {
	sportsActivityLocationStruct
}
type PublicSwimmingPoolSlice []PublicSwimmingPool

func (s *PublicSwimmingPoolSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PublicSwimmingPoolSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PublicSwimmingPool)
	}
	return nil
}

var _ PublicSwimmingPool = &publicSwimmingPoolStruct{}

// A public toilet is a room or small building containing one or more toilets (and possibly also urinals) which is available for use by the general public, or by customers or employees of certain businesses.
type PublicToilet interface {
	// Parents
	CivicStructure
}
type publicToiletStruct struct {
	civicStructureStruct
}
type PublicToiletSlice []PublicToilet

func (s *PublicToiletSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PublicToiletSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PublicToilet)
	}
	return nil
}

var _ PublicToilet = &publicToiletStruct{}

// A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork of any type e.g. a broadcast event, an on-demand event, a book/journal publication via a variety of delivery media.
type PublicationEvent interface {
	// Parents
	Event
	// Accessors
	Free() []Boolean                          // A flag to signal that the item, event, or place is accessible for free.
	PublishedBy() []Organization_Person_Union // An agent associated with the publication event.
	PublishedOn() []BroadcastService          // A broadcast service associated with the publication event.
}
type publicationEventStruct struct {
	eventStruct

	Free_        BooleanSlice                   `json:"free,omitempty"`
	PublishedBy_ Organization_Person_UnionSlice `json:"publishedBy,omitempty"`
	PublishedOn_ BroadcastServiceSlice          `json:"publishedOn,omitempty"`
}

func (s *publicationEventStruct) Free() []Boolean {
	return s.Free_
}
func (s *publicationEventStruct) PublishedBy() []Organization_Person_Union {
	return s.PublishedBy_
}
func (s *publicationEventStruct) PublishedOn() []BroadcastService {
	return s.PublishedOn_
}

type PublicationEventSlice []PublicationEvent

func (s *PublicationEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PublicationEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PublicationEvent)
	}
	return nil
}

var _ PublicationEvent = &publicationEventStruct{}

// A part of a successively published publication such as a periodical or publication volume, often numbered, usually containing a grouping of works such as articles.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
type PublicationIssue interface {
	// Parents
	CreativeWork
	// Accessors
	IssueNumber() []Integer_Text_Union // Identifies the issue of publication; for example, "iii" or "2".
	PageEnd() []Integer_Text_Union     // The page on which the work ends; for example "138" or "xvi".
	PageStart() []Integer_Text_Union   // The page on which the work starts; for example "135" or "xiii".
	Pagination() []Text                // Any description of pages that is not separated into pageStart and pageEnd; for example, "1-6, 9, 55" or "10-12, 46-49".
}
type publicationIssueStruct struct {
	creativeWorkStruct

	IssueNumber_ Integer_Text_UnionSlice `json:"issueNumber,omitempty"`
	PageEnd_     Integer_Text_UnionSlice `json:"pageEnd,omitempty"`
	PageStart_   Integer_Text_UnionSlice `json:"pageStart,omitempty"`
	Pagination_  TextSlice               `json:"pagination,omitempty"`
}

func (s *publicationIssueStruct) IssueNumber() []Integer_Text_Union {
	return s.IssueNumber_
}
func (s *publicationIssueStruct) PageEnd() []Integer_Text_Union {
	return s.PageEnd_
}
func (s *publicationIssueStruct) PageStart() []Integer_Text_Union {
	return s.PageStart_
}
func (s *publicationIssueStruct) Pagination() []Text {
	return s.Pagination_
}

type PublicationIssueSlice []PublicationIssue

func (s *PublicationIssueSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PublicationIssueSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PublicationIssue)
	}
	return nil
}

var _ PublicationIssue = &publicationIssueStruct{}

// A part of a successively published publication such as a periodical or multi-volume work, often numbered. It may represent a time span, such as a year.\n\nSee also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).
type PublicationVolume interface {
	// Parents
	CreativeWork
	// Accessors
	PageEnd() []Integer_Text_Union      // The page on which the work ends; for example "138" or "xvi".
	PageStart() []Integer_Text_Union    // The page on which the work starts; for example "135" or "xiii".
	Pagination() []Text                 // Any description of pages that is not separated into pageStart and pageEnd; for example, "1-6, 9, 55" or "10-12, 46-49".
	VolumeNumber() []Integer_Text_Union // Identifies the volume of publication or multi-part work; for example, "iii" or "2".
}
type publicationVolumeStruct struct {
	creativeWorkStruct

	PageEnd_      Integer_Text_UnionSlice `json:"pageEnd,omitempty"`
	PageStart_    Integer_Text_UnionSlice `json:"pageStart,omitempty"`
	Pagination_   TextSlice               `json:"pagination,omitempty"`
	VolumeNumber_ Integer_Text_UnionSlice `json:"volumeNumber,omitempty"`
}

func (s *publicationVolumeStruct) PageEnd() []Integer_Text_Union {
	return s.PageEnd_
}
func (s *publicationVolumeStruct) PageStart() []Integer_Text_Union {
	return s.PageStart_
}
func (s *publicationVolumeStruct) Pagination() []Text {
	return s.Pagination_
}
func (s *publicationVolumeStruct) VolumeNumber() []Integer_Text_Union {
	return s.VolumeNumber_
}

type PublicationVolumeSlice []PublicationVolume

func (s *PublicationVolumeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(PublicationVolumeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(PublicationVolume)
	}
	return nil
}

var _ PublicationVolume = &publicationVolumeStruct{}

// A QAPage is a WebPage focussed on a specific Question and its Answer(s), e.g. in a question answering site or documenting Frequently Asked Questions (FAQs).
type QAPage interface {
	// Parents
	WebPage
}
type qAPageStruct struct {
	webPageStruct
}
type QAPageSlice []QAPage

func (s *QAPageSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(QAPageSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(QAPage)
	}
	return nil
}

var _ QAPage = &qAPageStruct{}

// A predefined value for a product characteristic, e.g. the power cord plug type 'US' or the garment sizes 'S', 'M', 'L', and 'XL'.
type QualitativeValue interface {
	// Parents
	Enumeration
	// Unions
	DefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union
	Number_QualitativeValue_Text_Union
	Number_QualitativeValue_Union
	QualitativeValue_Text_URL_Union
	QualitativeValue_Text_Union
	// Accessors
	AdditionalProperty() []PropertyValue /*
	A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.\n\nNote: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
	*/
	Equal() []QualitativeValue                                                                                                                        // This ordering relation for qualitative values indicates that the subject is equal to the object.
	Greater() []QualitativeValue                                                                                                                      // This ordering relation for qualitative values indicates that the subject is greater than the object.
	GreaterOrEqual() []QualitativeValue                                                                                                               // This ordering relation for qualitative values indicates that the subject is greater than or equal to the object.
	Lesser() []QualitativeValue                                                                                                                       // This ordering relation for qualitative values indicates that the subject is lesser than the object.
	LesserOrEqual() []QualitativeValue                                                                                                                // This ordering relation for qualitative values indicates that the subject is lesser than or equal to the object.
	NonEqual() []QualitativeValue                                                                                                                     // This ordering relation for qualitative values indicates that the subject is not equal to the object.
	ValueReference() []DefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union // A secondary value that provides additional information on the original value, e.g. a reference temperature or a type of measurement.
}
type qualitativeValueStruct struct {
	enumerationStruct

	AdditionalProperty_ PropertyValueSlice                                                                                                                  `json:"additionalProperty,omitempty"`
	Equal_              QualitativeValueSlice                                                                                                               `json:"equal,omitempty"`
	Greater_            QualitativeValueSlice                                                                                                               `json:"greater,omitempty"`
	GreaterOrEqual_     QualitativeValueSlice                                                                                                               `json:"greaterOrEqual,omitempty"`
	Lesser_             QualitativeValueSlice                                                                                                               `json:"lesser,omitempty"`
	LesserOrEqual_      QualitativeValueSlice                                                                                                               `json:"lesserOrEqual,omitempty"`
	NonEqual_           QualitativeValueSlice                                                                                                               `json:"nonEqual,omitempty"`
	ValueReference_     DefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_UnionSlice `json:"valueReference,omitempty"`
}

func (s *qualitativeValueStruct) implementsDefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union() {
}
func (s *qualitativeValueStruct) implementsNumber_QualitativeValue_Text_Union() {}
func (s *qualitativeValueStruct) implementsNumber_QualitativeValue_Union()      {}
func (s *qualitativeValueStruct) implementsQualitativeValue_Text_URL_Union()    {}
func (s *qualitativeValueStruct) implementsQualitativeValue_Text_Union()        {}

func (s *qualitativeValueStruct) AdditionalProperty() []PropertyValue {
	return s.AdditionalProperty_
}
func (s *qualitativeValueStruct) Equal() []QualitativeValue {
	return s.Equal_
}
func (s *qualitativeValueStruct) Greater() []QualitativeValue {
	return s.Greater_
}
func (s *qualitativeValueStruct) GreaterOrEqual() []QualitativeValue {
	return s.GreaterOrEqual_
}
func (s *qualitativeValueStruct) Lesser() []QualitativeValue {
	return s.Lesser_
}
func (s *qualitativeValueStruct) LesserOrEqual() []QualitativeValue {
	return s.LesserOrEqual_
}
func (s *qualitativeValueStruct) NonEqual() []QualitativeValue {
	return s.NonEqual_
}
func (s *qualitativeValueStruct) ValueReference() []DefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union {
	return s.ValueReference_
}

type QualitativeValueSlice []QualitativeValue

func (s *QualitativeValueSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(QualitativeValueSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(QualitativeValue)
	}
	return nil
}

var _ QualitativeValue = &qualitativeValueStruct{}

//  A point value or interval for product characteristics and other purposes.
type QuantitativeValue interface {
	// Parents
	StructuredValue
	// Unions
	DefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union
	DefinedTerm_QuantitativeValue_SizeSpecification_Text_Union
	Distance_QuantitativeValue_Union
	Duration_Number_QuantitativeValue_Union
	Duration_QuantitativeValue_Union
	Energy_QuantitativeValue_Union
	Integer_QuantitativeValue_Union
	Number_QuantitativeValue_Text_Union
	Number_QuantitativeValue_Union
	QuantitativeValue_Text_Union
	// Accessors
	AdditionalProperty() []PropertyValue /*
	A property-value pair representing an additional characteristics of the entitity, e.g. a product feature or another characteristic for which there is no matching property in schema.org.\n\nNote: Publishers should be aware that applications designed to use specific schema.org properties (e.g. https://schema.org/width, https://schema.org/color, https://schema.org/gtin13, ...) will typically expect such data to be provided using those properties, rather than using the generic property/value mechanism.
	*/
	MaxValue() []Number         // The upper value of some characteristic or property.
	MinValue() []Number         // The lower value of some characteristic or property.
	UnitCode() []Text_URL_Union // The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.
	UnitText() []Text           /*
	A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for
	<a href='unitCode'>unitCode</a>.
	*/
	Value() []Boolean_Number_StructuredValue_Text_Union                                                                                               // The value of the quantitative value or property value node.\n\n* For [[QuantitativeValue]] and [[MonetaryAmount]], the recommended type for values is 'Number'.\n* For [[PropertyValue]], it can be 'Text;', 'Number', 'Boolean', or 'StructuredValue'.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
	ValueReference() []DefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union // A secondary value that provides additional information on the original value, e.g. a reference temperature or a type of measurement.
}
type quantitativeValueStruct struct {
	structuredValueStruct

	AdditionalProperty_ PropertyValueSlice                                                                                                                  `json:"additionalProperty,omitempty"`
	MaxValue_           NumberSlice                                                                                                                         `json:"maxValue,omitempty"`
	MinValue_           NumberSlice                                                                                                                         `json:"minValue,omitempty"`
	UnitCode_           Text_URL_UnionSlice                                                                                                                 `json:"unitCode,omitempty"`
	UnitText_           TextSlice                                                                                                                           `json:"unitText,omitempty"`
	Value_              Boolean_Number_StructuredValue_Text_UnionSlice                                                                                      `json:"value,omitempty"`
	ValueReference_     DefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_UnionSlice `json:"valueReference,omitempty"`
}

func (s *quantitativeValueStruct) implementsDefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union() {
}
func (s *quantitativeValueStruct) implementsDefinedTerm_QuantitativeValue_SizeSpecification_Text_Union() {
}
func (s *quantitativeValueStruct) implementsDistance_QuantitativeValue_Union()        {}
func (s *quantitativeValueStruct) implementsDuration_Number_QuantitativeValue_Union() {}
func (s *quantitativeValueStruct) implementsDuration_QuantitativeValue_Union()        {}
func (s *quantitativeValueStruct) implementsEnergy_QuantitativeValue_Union()          {}
func (s *quantitativeValueStruct) implementsInteger_QuantitativeValue_Union()         {}
func (s *quantitativeValueStruct) implementsNumber_QuantitativeValue_Text_Union()     {}
func (s *quantitativeValueStruct) implementsNumber_QuantitativeValue_Union()          {}
func (s *quantitativeValueStruct) implementsQuantitativeValue_Text_Union()            {}

func (s *quantitativeValueStruct) AdditionalProperty() []PropertyValue {
	return s.AdditionalProperty_
}
func (s *quantitativeValueStruct) MaxValue() []Number {
	return s.MaxValue_
}
func (s *quantitativeValueStruct) MinValue() []Number {
	return s.MinValue_
}
func (s *quantitativeValueStruct) UnitCode() []Text_URL_Union {
	return s.UnitCode_
}
func (s *quantitativeValueStruct) UnitText() []Text {
	return s.UnitText_
}
func (s *quantitativeValueStruct) Value() []Boolean_Number_StructuredValue_Text_Union {
	return s.Value_
}
func (s *quantitativeValueStruct) ValueReference() []DefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union {
	return s.ValueReference_
}

type QuantitativeValueSlice []QuantitativeValue

func (s *QuantitativeValueSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(QuantitativeValueSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(QuantitativeValue)
	}
	return nil
}

var _ QuantitativeValue = &quantitativeValueStruct{}

// A statistical distribution of values.
type QuantitativeValueDistribution interface {
	// Parents
	StructuredValue
	// Accessors
	Duration() []Duration   // The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	Median() []Number       // The median value.
	Percentile10() []Number // The 10th percentile value.
	Percentile25() []Number // The 25th percentile value.
	Percentile75() []Number // The 75th percentile value.
	Percentile90() []Number // The 90th percentile value.
}
type quantitativeValueDistributionStruct struct {
	structuredValueStruct

	Duration_     DurationSlice `json:"duration,omitempty"`
	Median_       NumberSlice   `json:"median,omitempty"`
	Percentile10_ NumberSlice   `json:"percentile10,omitempty"`
	Percentile25_ NumberSlice   `json:"percentile25,omitempty"`
	Percentile75_ NumberSlice   `json:"percentile75,omitempty"`
	Percentile90_ NumberSlice   `json:"percentile90,omitempty"`
}

func (s *quantitativeValueDistributionStruct) Duration() []Duration {
	return s.Duration_
}
func (s *quantitativeValueDistributionStruct) Median() []Number {
	return s.Median_
}
func (s *quantitativeValueDistributionStruct) Percentile10() []Number {
	return s.Percentile10_
}
func (s *quantitativeValueDistributionStruct) Percentile25() []Number {
	return s.Percentile25_
}
func (s *quantitativeValueDistributionStruct) Percentile75() []Number {
	return s.Percentile75_
}
func (s *quantitativeValueDistributionStruct) Percentile90() []Number {
	return s.Percentile90_
}

type QuantitativeValueDistributionSlice []QuantitativeValueDistribution

func (s *QuantitativeValueDistributionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(QuantitativeValueDistributionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(QuantitativeValueDistribution)
	}
	return nil
}

var _ QuantitativeValueDistribution = &quantitativeValueDistributionStruct{}

// Quantities such as distance, time, mass, weight, etc. Particular instances of say Mass are entities like '3 Kg' or '4 milligrams'.
type Quantity interface {
	// Parents
	Intangible
}
type quantityStruct struct {
	intangibleStruct
}
type QuantitySlice []Quantity

func (s *QuantitySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(QuantitySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Quantity)
	}
	return nil
}

var _ Quantity = &quantityStruct{}

// A specific question - e.g. from a user seeking answers online, or collected in a Frequently Asked Questions (FAQ) document.
type Question interface {
	// Parents
	Comment
	// Accessors
	AcceptedAnswer() []Answer_ItemList_Union  // The answer(s) that has been accepted as best, typically on a Question/Answer site. Sites vary in their selection mechanisms, e.g. drawing on community opinion and/or the view of the Question author.
	AnswerCount() []Integer                   // The number of answers this question has received.
	EduQuestionType() []Text                  // For questions that are part of learning resources (e.g. Quiz), eduQuestionType indicates the format of question being given. Example: "Multiple choice", "Open ended", "Flashcard".
	SuggestedAnswer() []Answer_ItemList_Union // An answer (possibly one of several, possibly incorrect) to a Question, e.g. on a Question/Answer site.
}
type questionStruct struct {
	commentStruct

	AcceptedAnswer_  Answer_ItemList_UnionSlice `json:"acceptedAnswer,omitempty"`
	AnswerCount_     IntegerSlice               `json:"answerCount,omitempty"`
	EduQuestionType_ TextSlice                  `json:"eduQuestionType,omitempty"`
	SuggestedAnswer_ Answer_ItemList_UnionSlice `json:"suggestedAnswer,omitempty"`
}

func (s *questionStruct) AcceptedAnswer() []Answer_ItemList_Union {
	return s.AcceptedAnswer_
}
func (s *questionStruct) AnswerCount() []Integer {
	return s.AnswerCount_
}
func (s *questionStruct) EduQuestionType() []Text {
	return s.EduQuestionType_
}
func (s *questionStruct) SuggestedAnswer() []Answer_ItemList_Union {
	return s.SuggestedAnswer_
}

type QuestionSlice []Question

func (s *QuestionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(QuestionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Question)
	}
	return nil
}

var _ Question = &questionStruct{}

// Quiz: A test of knowledge, skills and abilities.
type Quiz interface {
	// Parents
	LearningResource
}
type quizStruct struct {
	learningResourceStruct
}
type QuizSlice []Quiz

func (s *QuizSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(QuizSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Quiz)
	}
	return nil
}

var _ Quiz = &quizStruct{}

// A quotation. Often but not necessarily from some written work, attributable to a real world author and - if associated with a fictional character - to any fictional Person. Use [[isBasedOn]] to link to source/origin. The [[recordedIn]] property can be used to reference a Quotation from an [[Event]].
type Quotation interface {
	// Parents
	CreativeWork
	// Accessors
	SpokenByCharacter() []Organization_Person_Union // The (e.g. fictional) character, Person or Organization to whom the quotation is attributed within the containing CreativeWork.
}
type quotationStruct struct {
	creativeWorkStruct

	SpokenByCharacter_ Organization_Person_UnionSlice `json:"spokenByCharacter,omitempty"`
}

func (s *quotationStruct) SpokenByCharacter() []Organization_Person_Union {
	return s.SpokenByCharacter_
}

type QuotationSlice []Quotation

func (s *QuotationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(QuotationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Quotation)
	}
	return nil
}

var _ Quotation = &quotationStruct{}

// An agent quotes/estimates/appraises an object/product/service with a price at a location/store.
type QuoteAction interface {
	// Parents
	TradeAction
}
type quoteActionStruct struct {
	tradeActionStruct
}
type QuoteActionSlice []QuoteAction

func (s *QuoteActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(QuoteActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(QuoteAction)
	}
	return nil
}

var _ QuoteAction = &quoteActionStruct{}

// A place offering space for "Recreational Vehicles", Caravans, mobile homes and the like.
type RVPark interface {
	// Parents
	CivicStructure
}
type rVParkStruct struct {
	civicStructureStruct
}
type RVParkSlice []RVPark

func (s *RVParkSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RVParkSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RVPark)
	}
	return nil
}

var _ RVPark = &rVParkStruct{}

// A process of care using radiation aimed at improving a health condition.
type RadiationTherapy interface {
	// Parents
	MedicalTherapy
}
type radiationTherapyStruct struct {
	medicalTherapyStruct
}
type RadiationTherapySlice []RadiationTherapy

func (s *RadiationTherapySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RadiationTherapySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RadiationTherapy)
	}
	return nil
}

var _ RadiationTherapy = &radiationTherapyStruct{}

// A delivery service through which radio content is provided via broadcast over the air or online.
type RadioBroadcastService interface {
	// Parents
	BroadcastService
}
type radioBroadcastServiceStruct struct {
	broadcastServiceStruct
}
type RadioBroadcastServiceSlice []RadioBroadcastService

func (s *RadioBroadcastServiceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RadioBroadcastServiceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RadioBroadcastService)
	}
	return nil
}

var _ RadioBroadcastService = &radioBroadcastServiceStruct{}

// A unique instance of a radio BroadcastService on a CableOrSatelliteService lineup.
type RadioChannel interface {
	// Parents
	BroadcastChannel
}
type radioChannelStruct struct {
	broadcastChannelStruct
}
type RadioChannelSlice []RadioChannel

func (s *RadioChannelSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RadioChannelSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RadioChannel)
	}
	return nil
}

var _ RadioChannel = &radioChannelStruct{}

// A short radio program or a segment/part of a radio program.
type RadioClip interface {
	// Parents
	Clip
}
type radioClipStruct struct {
	clipStruct
}
type RadioClipSlice []RadioClip

func (s *RadioClipSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RadioClipSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RadioClip)
	}
	return nil
}

var _ RadioClip = &radioClipStruct{}

// A radio episode which can be part of a series or season.
type RadioEpisode interface {
	// Parents
	Episode
}
type radioEpisodeStruct struct {
	episodeStruct
}
type RadioEpisodeSlice []RadioEpisode

func (s *RadioEpisodeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RadioEpisodeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RadioEpisode)
	}
	return nil
}

var _ RadioEpisode = &radioEpisodeStruct{}

// Season dedicated to radio broadcast and associated online delivery.
type RadioSeason interface {
	// Parents
	CreativeWorkSeason
}
type radioSeasonStruct struct {
	creativeWorkSeasonStruct
}
type RadioSeasonSlice []RadioSeason

func (s *RadioSeasonSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RadioSeasonSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RadioSeason)
	}
	return nil
}

var _ RadioSeason = &radioSeasonStruct{}

// CreativeWorkSeries dedicated to radio broadcast and associated online delivery.
type RadioSeries interface {
	// Parents
	CreativeWorkSeries
	// Accessors
	Actor() []Person                        // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Actors() []Person                       // An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
	ContainsSeason() []CreativeWorkSeason   // A season that is part of the media series.
	Director() []Person                     // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	Directors() []Person                    // A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
	Episode() []Episode                     // An episode of a tv, radio or game media within a series or season.
	Episodes() []Episode                    // An episode of a TV/radio series or season.
	MusicBy() []MusicGroup_Person_Union     // The composer of the soundtrack.
	NumberOfEpisodes() []Integer            // The number of episodes in this season or series.
	NumberOfSeasons() []Integer             // The number of seasons in this series.
	ProductionCompany() []Organization      // The production company or studio responsible for the item e.g. series, video game, episode etc.
	Season() []CreativeWorkSeason_URL_Union // A season in a media series.
	Seasons() []CreativeWorkSeason          // A season in a media series.
	Trailer() []VideoObject                 // The trailer of a movie or tv/radio series, season, episode, etc.
}
type radioSeriesStruct struct {
	creativeWorkSeriesStruct

	Actor_             PersonSlice                       `json:"actor,omitempty"`
	Actors_            PersonSlice                       `json:"actors,omitempty"`
	ContainsSeason_    CreativeWorkSeasonSlice           `json:"containsSeason,omitempty"`
	Director_          PersonSlice                       `json:"director,omitempty"`
	Directors_         PersonSlice                       `json:"directors,omitempty"`
	Episode_           EpisodeSlice                      `json:"episode,omitempty"`
	Episodes_          EpisodeSlice                      `json:"episodes,omitempty"`
	MusicBy_           MusicGroup_Person_UnionSlice      `json:"musicBy,omitempty"`
	NumberOfEpisodes_  IntegerSlice                      `json:"numberOfEpisodes,omitempty"`
	NumberOfSeasons_   IntegerSlice                      `json:"numberOfSeasons,omitempty"`
	ProductionCompany_ OrganizationSlice                 `json:"productionCompany,omitempty"`
	Season_            CreativeWorkSeason_URL_UnionSlice `json:"season,omitempty"`
	Seasons_           CreativeWorkSeasonSlice           `json:"seasons,omitempty"`
	Trailer_           VideoObjectSlice                  `json:"trailer,omitempty"`
}

func (s *radioSeriesStruct) Actor() []Person {
	return s.Actor_
}
func (s *radioSeriesStruct) Actors() []Person {
	return s.Actors_
}
func (s *radioSeriesStruct) ContainsSeason() []CreativeWorkSeason {
	return s.ContainsSeason_
}
func (s *radioSeriesStruct) Director() []Person {
	return s.Director_
}
func (s *radioSeriesStruct) Directors() []Person {
	return s.Directors_
}
func (s *radioSeriesStruct) Episode() []Episode {
	return s.Episode_
}
func (s *radioSeriesStruct) Episodes() []Episode {
	return s.Episodes_
}
func (s *radioSeriesStruct) MusicBy() []MusicGroup_Person_Union {
	return s.MusicBy_
}
func (s *radioSeriesStruct) NumberOfEpisodes() []Integer {
	return s.NumberOfEpisodes_
}
func (s *radioSeriesStruct) NumberOfSeasons() []Integer {
	return s.NumberOfSeasons_
}
func (s *radioSeriesStruct) ProductionCompany() []Organization {
	return s.ProductionCompany_
}
func (s *radioSeriesStruct) Season() []CreativeWorkSeason_URL_Union {
	return s.Season_
}
func (s *radioSeriesStruct) Seasons() []CreativeWorkSeason {
	return s.Seasons_
}
func (s *radioSeriesStruct) Trailer() []VideoObject {
	return s.Trailer_
}

type RadioSeriesSlice []RadioSeries

func (s *RadioSeriesSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RadioSeriesSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RadioSeries)
	}
	return nil
}

var _ RadioSeries = &radioSeriesStruct{}

// A radio station.
type RadioStation interface {
	// Parents
	LocalBusiness
}
type radioStationStruct struct {
	localBusinessStruct
}
type RadioStationSlice []RadioStation

func (s *RadioStationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RadioStationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RadioStation)
	}
	return nil
}

var _ RadioStation = &radioStationStruct{}

// A rating is an evaluation on a numeric scale, such as 1 to 5 stars.
type Rating interface {
	// Parents
	Intangible
	// Unions
	Rating_Text_Union
	// Accessors
	Author() []Organization_Person_Union // The author of this content or rating. Please note that author is special in that HTML 5 provides a special mechanism for indicating authorship via the rel tag. That is equivalent to this and may be used interchangeably.
	BestRating() []Number_Text_Union     // The highest value allowed in this rating system. If bestRating is omitted, 5 is assumed.
	RatingExplanation() []Text           // A short explanation (e.g. one to two sentences) providing background context and other information that led to the conclusion expressed in the rating. This is particularly applicable to ratings associated with "fact check" markup using [[ClaimReview]].
	RatingValue() []Number_Text_Union    // The rating for the content.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
	ReviewAspect() []Text                // This Review or Rating is relevant to this part or facet of the itemReviewed.
	WorstRating() []Number_Text_Union    // The lowest value allowed in this rating system. If worstRating is omitted, 1 is assumed.
}
type ratingStruct struct {
	intangibleStruct

	Author_            Organization_Person_UnionSlice `json:"author,omitempty"`
	BestRating_        Number_Text_UnionSlice         `json:"bestRating,omitempty"`
	RatingExplanation_ TextSlice                      `json:"ratingExplanation,omitempty"`
	RatingValue_       Number_Text_UnionSlice         `json:"ratingValue,omitempty"`
	ReviewAspect_      TextSlice                      `json:"reviewAspect,omitempty"`
	WorstRating_       Number_Text_UnionSlice         `json:"worstRating,omitempty"`
}

func (s *ratingStruct) implementsRating_Text_Union() {}

func (s *ratingStruct) Author() []Organization_Person_Union {
	return s.Author_
}
func (s *ratingStruct) BestRating() []Number_Text_Union {
	return s.BestRating_
}
func (s *ratingStruct) RatingExplanation() []Text {
	return s.RatingExplanation_
}
func (s *ratingStruct) RatingValue() []Number_Text_Union {
	return s.RatingValue_
}
func (s *ratingStruct) ReviewAspect() []Text {
	return s.ReviewAspect_
}
func (s *ratingStruct) WorstRating() []Number_Text_Union {
	return s.WorstRating_
}

type RatingSlice []Rating

func (s *RatingSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RatingSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Rating)
	}
	return nil
}

var _ Rating = &ratingStruct{}

// The act of responding instinctively and emotionally to an object, expressing a sentiment.
type ReactAction interface {
	// Parents
	AssessAction
}
type reactActionStruct struct {
	assessActionStruct
}
type ReactActionSlice []ReactAction

func (s *ReactActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReactActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ReactAction)
	}
	return nil
}

var _ ReactAction = &reactActionStruct{}

// The act of consuming written content.
type ReadAction interface {
	// Parents
	ConsumeAction
}
type readActionStruct struct {
	consumeActionStruct
}
type ReadActionSlice []ReadAction

func (s *ReadActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReadActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ReadAction)
	}
	return nil
}

var _ ReadAction = &readActionStruct{}

// A real-estate agent.
type RealEstateAgent interface {
	// Parents
	LocalBusiness
}
type realEstateAgentStruct struct {
	localBusinessStruct
}
type RealEstateAgentSlice []RealEstateAgent

func (s *RealEstateAgentSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RealEstateAgentSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RealEstateAgent)
	}
	return nil
}

var _ RealEstateAgent = &realEstateAgentStruct{}

/*
A [[RealEstateListing]] is a listing that describes one or more real-estate [[Offer]]s (whose [[businessFunction]] is typically to lease out, or to sell).
  The [[RealEstateListing]] type itself represents the overall listing, as manifested in some [[WebPage]].

*/
type RealEstateListing interface {
	// Parents
	WebPage
	// Accessors
	DatePosted() []Date_DateTime_Union               // Publication date of an online listing.
	LeaseLength() []Duration_QuantitativeValue_Union // Length of the lease for some [[Accommodation]], either particular to some [[Offer]] or in some cases intrinsic to the property.
}
type realEstateListingStruct struct {
	webPageStruct

	DatePosted_  Date_DateTime_UnionSlice              `json:"datePosted,omitempty"`
	LeaseLength_ Duration_QuantitativeValue_UnionSlice `json:"leaseLength,omitempty"`
}

func (s *realEstateListingStruct) DatePosted() []Date_DateTime_Union {
	return s.DatePosted_
}
func (s *realEstateListingStruct) LeaseLength() []Duration_QuantitativeValue_Union {
	return s.LeaseLength_
}

type RealEstateListingSlice []RealEstateListing

func (s *RealEstateListingSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RealEstateListingSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RealEstateListing)
	}
	return nil
}

var _ RealEstateListing = &realEstateListingStruct{}

// The act of physically/electronically taking delivery of an object that has been transferred from an origin to a destination. Reciprocal of SendAction.\n\nRelated actions:\n\n* [[SendAction]]: The reciprocal of ReceiveAction.\n* [[TakeAction]]: Unlike TakeAction, ReceiveAction does not imply that the ownership has been transfered (e.g. I can receive a package, but it does not mean the package is now mine).
type ReceiveAction interface {
	// Parents
	TransferAction
	// Accessors
	DeliveryMethod() []DeliveryMethod             // A sub property of instrument. The method of delivery.
	Sender() []Audience_Organization_Person_Union // A sub property of participant. The participant who is at the sending end of the action.
}
type receiveActionStruct struct {
	transferActionStruct

	DeliveryMethod_ DeliveryMethodSlice                     `json:"deliveryMethod,omitempty"`
	Sender_         Audience_Organization_Person_UnionSlice `json:"sender,omitempty"`
}

func (s *receiveActionStruct) DeliveryMethod() []DeliveryMethod {
	return s.DeliveryMethod_
}
func (s *receiveActionStruct) Sender() []Audience_Organization_Person_Union {
	return s.Sender_
}

type ReceiveActionSlice []ReceiveAction

func (s *ReceiveActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReceiveActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ReceiveAction)
	}
	return nil
}

var _ ReceiveAction = &receiveActionStruct{}

// A recipe. For dietary restrictions covered by the recipe, a few common restrictions are enumerated via [[suitableForDiet]]. The [[keywords]] property can also be used to add more detail.
type Recipe interface {
	// Parents
	HowTo
	// Accessors
	CookTime() []Duration                                   // The time it takes to actually cook the dish, in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).
	CookingMethod() []Text                                  // The method of cooking, such as Frying, Steaming, ...
	Ingredients() []Text                                    // A single ingredient used in the recipe, e.g. sugar, flour or garlic.
	Nutrition() []NutritionInformation                      // Nutrition information about the recipe or menu item.
	RecipeCategory() []Text                                 // The category of the recipe—for example, appetizer, entree, etc.
	RecipeCuisine() []Text                                  // The cuisine of the recipe (for example, French or Ethiopian).
	RecipeIngredient() []Text                               // A single ingredient used in the recipe, e.g. sugar, flour or garlic.
	RecipeInstructions() []CreativeWork_ItemList_Text_Union // A step in making the recipe, in the form of a single item (document, video, etc.) or an ordered list with HowToStep and/or HowToSection items.
	RecipeYield() []QuantitativeValue_Text_Union            // The quantity produced by the recipe (for example, number of people served, number of servings, etc).
	SuitableForDiet() []RestrictedDiet                      // Indicates a dietary restriction or guideline for which this recipe or menu item is suitable, e.g. diabetic, halal etc.
}
type recipeStruct struct {
	howToStruct

	CookTime_           DurationSlice                         `json:"cookTime,omitempty"`
	CookingMethod_      TextSlice                             `json:"cookingMethod,omitempty"`
	Ingredients_        TextSlice                             `json:"ingredients,omitempty"`
	Nutrition_          NutritionInformationSlice             `json:"nutrition,omitempty"`
	RecipeCategory_     TextSlice                             `json:"recipeCategory,omitempty"`
	RecipeCuisine_      TextSlice                             `json:"recipeCuisine,omitempty"`
	RecipeIngredient_   TextSlice                             `json:"recipeIngredient,omitempty"`
	RecipeInstructions_ CreativeWork_ItemList_Text_UnionSlice `json:"recipeInstructions,omitempty"`
	RecipeYield_        QuantitativeValue_Text_UnionSlice     `json:"recipeYield,omitempty"`
	SuitableForDiet_    RestrictedDietSlice                   `json:"suitableForDiet,omitempty"`
}

func (s *recipeStruct) CookTime() []Duration {
	return s.CookTime_
}
func (s *recipeStruct) CookingMethod() []Text {
	return s.CookingMethod_
}
func (s *recipeStruct) Ingredients() []Text {
	return s.Ingredients_
}
func (s *recipeStruct) Nutrition() []NutritionInformation {
	return s.Nutrition_
}
func (s *recipeStruct) RecipeCategory() []Text {
	return s.RecipeCategory_
}
func (s *recipeStruct) RecipeCuisine() []Text {
	return s.RecipeCuisine_
}
func (s *recipeStruct) RecipeIngredient() []Text {
	return s.RecipeIngredient_
}
func (s *recipeStruct) RecipeInstructions() []CreativeWork_ItemList_Text_Union {
	return s.RecipeInstructions_
}
func (s *recipeStruct) RecipeYield() []QuantitativeValue_Text_Union {
	return s.RecipeYield_
}
func (s *recipeStruct) SuitableForDiet() []RestrictedDiet {
	return s.SuitableForDiet_
}

type RecipeSlice []Recipe

func (s *RecipeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RecipeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Recipe)
	}
	return nil
}

var _ Recipe = &recipeStruct{}

// [[Recommendation]] is a type of [[Review]] that suggests or proposes something as the best option or best course of action. Recommendations may be for products or services, or other concrete things, as in the case of a ranked list or product guide. A [[Guide]] may list multiple recommendations for different categories. For example, in a [[Guide]] about which TVs to buy, the author may have several [[Recommendation]]s.
type Recommendation interface {
	// Parents
	Review
	// Accessors
	Category() []CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union // A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
}
type recommendationStruct struct {
	reviewStruct

	Category_ CategoryCode_PhysicalActivityCategory_Text_Thing_URL_UnionSlice `json:"category,omitempty"`
}

func (s *recommendationStruct) Category() []CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union {
	return s.Category_
}

type RecommendationSlice []Recommendation

func (s *RecommendationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RecommendationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Recommendation)
	}
	return nil
}

var _ Recommendation = &recommendationStruct{}

// A recommended dosing schedule for a drug or supplement as prescribed or recommended by an authority or by the drug/supplement's manufacturer. Capture the recommending authority in the recognizingAuthority property of MedicalEntity.
type RecommendedDoseSchedule interface {
	// Parents
	DoseSchedule
}
type recommendedDoseScheduleStruct struct {
	doseScheduleStruct
}
type RecommendedDoseScheduleSlice []RecommendedDoseSchedule

func (s *RecommendedDoseScheduleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RecommendedDoseScheduleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RecommendedDoseSchedule)
	}
	return nil
}

var _ RecommendedDoseSchedule = &recommendedDoseScheduleStruct{}

// A recycling center.
type RecyclingCenter interface {
	// Parents
	LocalBusiness
}
type recyclingCenterStruct struct {
	localBusinessStruct
}
type RecyclingCenterSlice []RecyclingCenter

func (s *RecyclingCenterSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RecyclingCenterSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RecyclingCenter)
	}
	return nil
}

var _ RecyclingCenter = &recyclingCenterStruct{}

// Enumerates several kinds of product return refund types.
type RefundTypeEnumeration interface {
	// Parents
	Enumeration
}
type refundTypeEnumerationStruct struct {
	enumerationStruct
}
type RefundTypeEnumerationSlice []RefundTypeEnumeration

func (s *RefundTypeEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RefundTypeEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RefundTypeEnumeration)
	}
	return nil
}

var _ RefundTypeEnumeration = &refundTypeEnumerationStruct{}

// The act of registering to be a user of a service, product or web page.\n\nRelated actions:\n\n* [[JoinAction]]: Unlike JoinAction, RegisterAction implies you are registering to be a user of a service, *not* a group/team of people.\n* [FollowAction]]: Unlike FollowAction, RegisterAction doesn't imply that the agent is expecting to poll for updates from the object.\n* [[SubscribeAction]]: Unlike SubscribeAction, RegisterAction doesn't imply that the agent is expecting updates from the object.
type RegisterAction interface {
	// Parents
	InteractAction
}
type registerActionStruct struct {
	interactActionStruct
}
type RegisterActionSlice []RegisterAction

func (s *RegisterActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RegisterActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RegisterAction)
	}
	return nil
}

var _ RegisterAction = &registerActionStruct{}

// The act of rejecting to/adopting an object.\n\nRelated actions:\n\n* [[AcceptAction]]: The antonym of RejectAction.
type RejectAction interface {
	// Parents
	AllocateAction
}
type rejectActionStruct struct {
	allocateActionStruct
}
type RejectActionSlice []RejectAction

func (s *RejectActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RejectActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RejectAction)
	}
	return nil
}

var _ RejectAction = &rejectActionStruct{}

// The act of giving money in return for temporary use, but not ownership, of an object such as a vehicle or property. For example, an agent rents a property from a landlord in exchange for a periodic payment.
type RentAction interface {
	// Parents
	TradeAction
	// Accessors
	Landlord() []Organization_Person_Union // A sub property of participant. The owner of the real estate property.
	RealEstateAgent() []RealEstateAgent    // A sub property of participant. The real estate agent involved in the action.
}
type rentActionStruct struct {
	tradeActionStruct

	Landlord_        Organization_Person_UnionSlice `json:"landlord,omitempty"`
	RealEstateAgent_ RealEstateAgentSlice           `json:"realEstateAgent,omitempty"`
}

func (s *rentActionStruct) Landlord() []Organization_Person_Union {
	return s.Landlord_
}
func (s *rentActionStruct) RealEstateAgent() []RealEstateAgent {
	return s.RealEstateAgent_
}

type RentActionSlice []RentAction

func (s *RentActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RentActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RentAction)
	}
	return nil
}

var _ RentAction = &rentActionStruct{}

// A reservation for a rental car.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations.
type RentalCarReservation interface {
	// Parents
	Reservation
	// Accessors
	DropoffLocation() []Place // Where a rental car can be dropped off.
	DropoffTime() []DateTime  // When a rental car can be dropped off.
	PickupLocation() []Place  // Where a taxi will pick up a passenger or a rental car can be picked up.
	PickupTime() []DateTime   // When a taxi will pickup a passenger or a rental car can be picked up.
}
type rentalCarReservationStruct struct {
	reservationStruct

	DropoffLocation_ PlaceSlice    `json:"dropoffLocation,omitempty"`
	DropoffTime_     DateTimeSlice `json:"dropoffTime,omitempty"`
	PickupLocation_  PlaceSlice    `json:"pickupLocation,omitempty"`
	PickupTime_      DateTimeSlice `json:"pickupTime,omitempty"`
}

func (s *rentalCarReservationStruct) DropoffLocation() []Place {
	return s.DropoffLocation_
}
func (s *rentalCarReservationStruct) DropoffTime() []DateTime {
	return s.DropoffTime_
}
func (s *rentalCarReservationStruct) PickupLocation() []Place {
	return s.PickupLocation_
}
func (s *rentalCarReservationStruct) PickupTime() []DateTime {
	return s.PickupTime_
}

type RentalCarReservationSlice []RentalCarReservation

func (s *RentalCarReservationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RentalCarReservationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RentalCarReservation)
	}
	return nil
}

var _ RentalCarReservation = &rentalCarReservationStruct{}

// A structured value representing repayment.
type RepaymentSpecification interface {
	// Parents
	StructuredValue
	// Accessors
	DownPayment() []MonetaryAmount_Number_Union // a type of payment made in cash during the onset of the purchase of an expensive good/service. The payment typically represents only a percentage of the full purchase price.
	EarlyPrepaymentPenalty() []MonetaryAmount   // The amount to be paid as a penalty in the event of early payment of the loan.
	LoanPaymentAmount() []MonetaryAmount        // The amount of money to pay in a single payment.
	LoanPaymentFrequency() []Number             // Frequency of payments due, i.e. number of months between payments. This is defined as a frequency, i.e. the reciprocal of a period of time.
	NumberOfLoanPayments() []Number             // The number of payments contractually required at origination to repay the loan. For monthly paying loans this is the number of months from the contractual first payment date to the maturity date.
}
type repaymentSpecificationStruct struct {
	structuredValueStruct

	DownPayment_            MonetaryAmount_Number_UnionSlice `json:"downPayment,omitempty"`
	EarlyPrepaymentPenalty_ MonetaryAmountSlice              `json:"earlyPrepaymentPenalty,omitempty"`
	LoanPaymentAmount_      MonetaryAmountSlice              `json:"loanPaymentAmount,omitempty"`
	LoanPaymentFrequency_   NumberSlice                      `json:"loanPaymentFrequency,omitempty"`
	NumberOfLoanPayments_   NumberSlice                      `json:"numberOfLoanPayments,omitempty"`
}

func (s *repaymentSpecificationStruct) DownPayment() []MonetaryAmount_Number_Union {
	return s.DownPayment_
}
func (s *repaymentSpecificationStruct) EarlyPrepaymentPenalty() []MonetaryAmount {
	return s.EarlyPrepaymentPenalty_
}
func (s *repaymentSpecificationStruct) LoanPaymentAmount() []MonetaryAmount {
	return s.LoanPaymentAmount_
}
func (s *repaymentSpecificationStruct) LoanPaymentFrequency() []Number {
	return s.LoanPaymentFrequency_
}
func (s *repaymentSpecificationStruct) NumberOfLoanPayments() []Number {
	return s.NumberOfLoanPayments_
}

type RepaymentSpecificationSlice []RepaymentSpecification

func (s *RepaymentSpecificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RepaymentSpecificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RepaymentSpecification)
	}
	return nil
}

var _ RepaymentSpecification = &repaymentSpecificationStruct{}

// The act of editing a recipient by replacing an old object with a new object.
type ReplaceAction interface {
	// Parents
	UpdateAction
	// Accessors
	Replacee() []Thing // A sub property of object. The object that is being replaced.
	Replacer() []Thing // A sub property of object. The object that replaces.
}
type replaceActionStruct struct {
	updateActionStruct

	Replacee_ ThingSlice `json:"replacee,omitempty"`
	Replacer_ ThingSlice `json:"replacer,omitempty"`
}

func (s *replaceActionStruct) Replacee() []Thing {
	return s.Replacee_
}
func (s *replaceActionStruct) Replacer() []Thing {
	return s.Replacer_
}

type ReplaceActionSlice []ReplaceAction

func (s *ReplaceActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReplaceActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ReplaceAction)
	}
	return nil
}

var _ ReplaceAction = &replaceActionStruct{}

// The act of responding to a question/message asked/sent by the object. Related to [[AskAction]]\n\nRelated actions:\n\n* [[AskAction]]: Appears generally as an origin of a ReplyAction.
type ReplyAction interface {
	// Parents
	CommunicateAction
	// Accessors
	ResultComment() []Comment // A sub property of result. The Comment created or sent as a result of this action.
}
type replyActionStruct struct {
	communicateActionStruct

	ResultComment_ CommentSlice `json:"resultComment,omitempty"`
}

func (s *replyActionStruct) ResultComment() []Comment {
	return s.ResultComment_
}

type ReplyActionSlice []ReplyAction

func (s *ReplyActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReplyActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ReplyAction)
	}
	return nil
}

var _ ReplyAction = &replyActionStruct{}

// A Report generated by governmental or non-governmental organization.
type Report interface {
	// Parents
	Article
	// Accessors
	ReportNumber() []Text // The number or other unique designator assigned to a Report by the publishing organization.
}
type reportStruct struct {
	articleStruct

	ReportNumber_ TextSlice `json:"reportNumber,omitempty"`
}

func (s *reportStruct) ReportNumber() []Text {
	return s.ReportNumber_
}

type ReportSlice []Report

func (s *ReportSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReportSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Report)
	}
	return nil
}

var _ Report = &reportStruct{}

/*
The [[ReportageNewsArticle]] type is a subtype of [[NewsArticle]] representing
 news articles which are the result of journalistic news reporting conventions.

In practice many news publishers produce a wide variety of article types, many of which might be considered a [[NewsArticle]] but not a [[ReportageNewsArticle]]. For example, opinion pieces, reviews, analysis, sponsored or satirical articles, or articles that combine several of these elements.

The [[ReportageNewsArticle]] type is based on a stricter ideal for "news" as a work of journalism, with articles based on factual information either observed or verified by the author, or reported and verified from knowledgeable sources.  This often includes perspectives from multiple viewpoints on a particular issue (distinguishing news reports from public relations or propaganda).  News reports in the [[ReportageNewsArticle]] sense de-emphasize the opinion of the author, with commentary and value judgements typically expressed elsewhere.

A [[ReportageNewsArticle]] which goes deeper into analysis can also be marked with an additional type of [[AnalysisNewsArticle]].
*/
type ReportageNewsArticle interface {
	// Parents
	NewsArticle
}
type reportageNewsArticleStruct struct {
	newsArticleStruct
}
type ReportageNewsArticleSlice []ReportageNewsArticle

func (s *ReportageNewsArticleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReportageNewsArticleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ReportageNewsArticle)
	}
	return nil
}

var _ ReportageNewsArticle = &reportageNewsArticleStruct{}

// A patient-reported or observed dosing schedule for a drug or supplement.
type ReportedDoseSchedule interface {
	// Parents
	DoseSchedule
}
type reportedDoseScheduleStruct struct {
	doseScheduleStruct
}
type ReportedDoseScheduleSlice []ReportedDoseSchedule

func (s *ReportedDoseScheduleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReportedDoseScheduleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ReportedDoseSchedule)
	}
	return nil
}

var _ ReportedDoseSchedule = &reportedDoseScheduleStruct{}

// A Research Organization (e.g. scientific institute, research company).
type ResearchOrganization interface {
	// Parents
	Organization
}
type researchOrganizationStruct struct {
	organizationStruct
}
type ResearchOrganizationSlice []ResearchOrganization

func (s *ResearchOrganizationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ResearchOrganizationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ResearchOrganization)
	}
	return nil
}

var _ ResearchOrganization = &researchOrganizationStruct{}

// A Research project.
type ResearchProject interface {
	// Parents
	Project
}
type researchProjectStruct struct {
	projectStruct
}
type ResearchProjectSlice []ResearchProject

func (s *ResearchProjectSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ResearchProjectSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ResearchProject)
	}
	return nil
}

var _ ResearchProject = &researchProjectStruct{}

// Researchers.
type Researcher interface {
	// Parents
	Audience
}
type researcherStruct struct {
	audienceStruct
}
type ResearcherSlice []Researcher

func (s *ResearcherSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ResearcherSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Researcher)
	}
	return nil
}

var _ Researcher = &researcherStruct{}

// Describes a reservation for travel, dining or an event. Some reservations require tickets. \n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, restaurant reservations, flights, or rental cars, use [[Offer]].
type Reservation interface {
	// Parents
	Intangible
	// Accessors
	BookingAgent() []Organization_Person_Union          // 'bookingAgent' is an out-dated term indicating a 'broker' that serves as a booking agent.
	BookingTime() []DateTime                            // The date and time the reservation was booked.
	Broker() []Organization_Person_Union                // An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
	ModifiedTime() []DateTime                           // The date and time the reservation was modified.
	PriceCurrency() []Text                              // The currency of the price, or a price component when attached to [[PriceSpecification]] and its subtypes.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	ProgramMembershipUsed() []ProgramMembership         // Any membership in a frequent flyer, hotel loyalty program, etc. being applied to the reservation.
	Provider() []Organization_Person_Union              // The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
	ReservationFor() []Thing                            // The thing -- flight, event, restaurant,etc. being reserved.
	ReservationId() []Text                              // A unique identifier for the reservation.
	ReservationStatus() []ReservationStatusType         // The current status of the reservation.
	ReservedTicket() []Ticket                           // A ticket associated with the reservation.
	TotalPrice() []Number_PriceSpecification_Text_Union // The total price for the reservation or ticket, including applicable taxes, shipping, etc.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
	UnderName() []Organization_Person_Union             // The person or organization the reservation or ticket is for.
}
type reservationStruct struct {
	intangibleStruct

	BookingAgent_          Organization_Person_UnionSlice            `json:"bookingAgent,omitempty"`
	BookingTime_           DateTimeSlice                             `json:"bookingTime,omitempty"`
	Broker_                Organization_Person_UnionSlice            `json:"broker,omitempty"`
	ModifiedTime_          DateTimeSlice                             `json:"modifiedTime,omitempty"`
	PriceCurrency_         TextSlice                                 `json:"priceCurrency,omitempty"`
	ProgramMembershipUsed_ ProgramMembershipSlice                    `json:"programMembershipUsed,omitempty"`
	Provider_              Organization_Person_UnionSlice            `json:"provider,omitempty"`
	ReservationFor_        ThingSlice                                `json:"reservationFor,omitempty"`
	ReservationId_         TextSlice                                 `json:"reservationId,omitempty"`
	ReservationStatus_     ReservationStatusTypeSlice                `json:"reservationStatus,omitempty"`
	ReservedTicket_        TicketSlice                               `json:"reservedTicket,omitempty"`
	TotalPrice_            Number_PriceSpecification_Text_UnionSlice `json:"totalPrice,omitempty"`
	UnderName_             Organization_Person_UnionSlice            `json:"underName,omitempty"`
}

func (s *reservationStruct) BookingAgent() []Organization_Person_Union {
	return s.BookingAgent_
}
func (s *reservationStruct) BookingTime() []DateTime {
	return s.BookingTime_
}
func (s *reservationStruct) Broker() []Organization_Person_Union {
	return s.Broker_
}
func (s *reservationStruct) ModifiedTime() []DateTime {
	return s.ModifiedTime_
}
func (s *reservationStruct) PriceCurrency() []Text {
	return s.PriceCurrency_
}
func (s *reservationStruct) ProgramMembershipUsed() []ProgramMembership {
	return s.ProgramMembershipUsed_
}
func (s *reservationStruct) Provider() []Organization_Person_Union {
	return s.Provider_
}
func (s *reservationStruct) ReservationFor() []Thing {
	return s.ReservationFor_
}
func (s *reservationStruct) ReservationId() []Text {
	return s.ReservationId_
}
func (s *reservationStruct) ReservationStatus() []ReservationStatusType {
	return s.ReservationStatus_
}
func (s *reservationStruct) ReservedTicket() []Ticket {
	return s.ReservedTicket_
}
func (s *reservationStruct) TotalPrice() []Number_PriceSpecification_Text_Union {
	return s.TotalPrice_
}
func (s *reservationStruct) UnderName() []Organization_Person_Union {
	return s.UnderName_
}

type ReservationSlice []Reservation

func (s *ReservationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReservationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Reservation)
	}
	return nil
}

var _ Reservation = &reservationStruct{}

// A group of multiple reservations with common values for all sub-reservations.
type ReservationPackage interface {
	// Parents
	Reservation
	// Accessors
	SubReservation() []Reservation // The individual reservations included in the package. Typically a repeated property.
}
type reservationPackageStruct struct {
	reservationStruct

	SubReservation_ ReservationSlice `json:"subReservation,omitempty"`
}

func (s *reservationPackageStruct) SubReservation() []Reservation {
	return s.SubReservation_
}

type ReservationPackageSlice []ReservationPackage

func (s *ReservationPackageSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReservationPackageSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ReservationPackage)
	}
	return nil
}

var _ ReservationPackage = &reservationPackageStruct{}

// Enumerated status values for Reservation.
type ReservationStatusType interface {
	// Parents
	StatusEnumeration
}
type reservationStatusTypeStruct struct {
	statusEnumerationStruct
}
type ReservationStatusTypeSlice []ReservationStatusType

func (s *ReservationStatusTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReservationStatusTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ReservationStatusType)
	}
	return nil
}

var _ ReservationStatusType = &reservationStatusTypeStruct{}

// Reserving a concrete object.\n\nRelated actions:\n\n* [[ScheduleAction]]: Unlike ScheduleAction, ReserveAction reserves concrete objects (e.g. a table, a hotel) towards a time slot / spatial allocation.
type ReserveAction interface {
	// Parents
	PlanAction
}
type reserveActionStruct struct {
	planActionStruct
}
type ReserveActionSlice []ReserveAction

func (s *ReserveActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReserveActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ReserveAction)
	}
	return nil
}

var _ ReserveAction = &reserveActionStruct{}

// A reservoir of water, typically an artificially created lake, like the Lake Kariba reservoir.
type Reservoir interface {
	// Parents
	BodyOfWater
}
type reservoirStruct struct {
	bodyOfWaterStruct
}
type ReservoirSlice []Reservoir

func (s *ReservoirSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReservoirSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Reservoir)
	}
	return nil
}

var _ Reservoir = &reservoirStruct{}

// The place where a person lives.
type Residence interface {
	// Parents
	Place
	// Accessors
	AccommodationFloorPlan() []FloorPlan // A floorplan of some [[Accommodation]].
}
type residenceStruct struct {
	placeStruct

	AccommodationFloorPlan_ FloorPlanSlice `json:"accommodationFloorPlan,omitempty"`
}

func (s *residenceStruct) AccommodationFloorPlan() []FloorPlan {
	return s.AccommodationFloorPlan_
}

type ResidenceSlice []Residence

func (s *ResidenceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ResidenceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Residence)
	}
	return nil
}

var _ Residence = &residenceStruct{}

/*
A resort is a place used for relaxation or recreation, attracting visitors for holidays or vacations. Resorts are places, towns or sometimes commercial establishment operated by a single company (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Resort">http://en.wikipedia.org/wiki/Resort</a>).
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.

*/
type Resort interface {
	// Parents
	LodgingBusiness
}
type resortStruct struct {
	lodgingBusinessStruct
}
type ResortSlice []Resort

func (s *ResortSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ResortSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Resort)
	}
	return nil
}

var _ Resort = &resortStruct{}

// A restaurant.
type Restaurant interface {
	// Parents
	FoodEstablishment
}
type restaurantStruct struct {
	foodEstablishmentStruct
}
type RestaurantSlice []Restaurant

func (s *RestaurantSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RestaurantSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Restaurant)
	}
	return nil
}

var _ Restaurant = &restaurantStruct{}

// A diet restricted to certain foods or preparations for cultural, religious, health or lifestyle reasons.
type RestrictedDiet interface {
	// Parents
	Enumeration
}
type restrictedDietStruct struct {
	enumerationStruct
}
type RestrictedDietSlice []RestrictedDiet

func (s *RestrictedDietSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RestrictedDietSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RestrictedDiet)
	}
	return nil
}

var _ RestrictedDiet = &restrictedDietStruct{}

// The act of resuming a device or application which was formerly paused (e.g. resume music playback or resume a timer).
type ResumeAction interface {
	// Parents
	ControlAction
}
type resumeActionStruct struct {
	controlActionStruct
}
type ResumeActionSlice []ResumeAction

func (s *ResumeActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ResumeActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ResumeAction)
	}
	return nil
}

var _ ResumeAction = &resumeActionStruct{}

// The act of returning to the origin that which was previously received (concrete objects) or taken (ownership).
type ReturnAction interface {
	// Parents
	TransferAction
	// Accessors
	Recipient() []Audience_ContactPoint_Organization_Person_Union // A sub property of participant. The participant who is at the receiving end of the action.
}
type returnActionStruct struct {
	transferActionStruct

	Recipient_ Audience_ContactPoint_Organization_Person_UnionSlice `json:"recipient,omitempty"`
}

func (s *returnActionStruct) Recipient() []Audience_ContactPoint_Organization_Person_Union {
	return s.Recipient_
}

type ReturnActionSlice []ReturnAction

func (s *ReturnActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReturnActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ReturnAction)
	}
	return nil
}

var _ ReturnAction = &returnActionStruct{}

// Enumerates several kinds of policies for product return fees.
type ReturnFeesEnumeration interface {
	// Parents
	Enumeration
}
type returnFeesEnumerationStruct struct {
	enumerationStruct
}
type ReturnFeesEnumerationSlice []ReturnFeesEnumeration

func (s *ReturnFeesEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReturnFeesEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ReturnFeesEnumeration)
	}
	return nil
}

var _ ReturnFeesEnumeration = &returnFeesEnumerationStruct{}

// Enumerates several types of return labels for product returns.
type ReturnLabelSourceEnumeration interface {
	// Parents
	Enumeration
}
type returnLabelSourceEnumerationStruct struct {
	enumerationStruct
}
type ReturnLabelSourceEnumerationSlice []ReturnLabelSourceEnumeration

func (s *ReturnLabelSourceEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReturnLabelSourceEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ReturnLabelSourceEnumeration)
	}
	return nil
}

var _ ReturnLabelSourceEnumeration = &returnLabelSourceEnumerationStruct{}

// Enumerates several types of product return methods.
type ReturnMethodEnumeration interface {
	// Parents
	Enumeration
}
type returnMethodEnumerationStruct struct {
	enumerationStruct
}
type ReturnMethodEnumerationSlice []ReturnMethodEnumeration

func (s *ReturnMethodEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReturnMethodEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ReturnMethodEnumeration)
	}
	return nil
}

var _ ReturnMethodEnumeration = &returnMethodEnumerationStruct{}

// A review of an item - for example, of a restaurant, movie, or store.
type Review interface {
	// Parents
	CreativeWork
	// Accessors
	AssociatedClaimReview() []Review                          // An associated [[ClaimReview]], related by specific common content, topic or claim. The expectation is that this property would be most typically used in cases where a single activity is conducting both claim reviews and media reviews, in which case [[relatedMediaReview]] would commonly be used on a [[ClaimReview]], while [[relatedClaimReview]] would be used on [[MediaReview]].
	AssociatedMediaReview() []Review                          // An associated [[MediaReview]], related by specific common content, topic or claim. The expectation is that this property would be most typically used in cases where a single activity is conducting both claim reviews and media reviews, in which case [[relatedMediaReview]] would commonly be used on a [[ClaimReview]], while [[relatedClaimReview]] would be used on [[MediaReview]].
	AssociatedReview() []Review                               // An associated [[Review]].
	ItemReviewed() []Thing                                    // The item that is being reviewed/rated.
	NegativeNotes() []ItemList_ListItem_Text_WebContent_Union // Indicates, in the context of a [[Review]] (e.g. framed as 'pro' vs 'con' considerations), negative considerations - either as unstructured text, or a list.
	PositiveNotes() []ItemList_ListItem_Text_WebContent_Union // Indicates, in the context of a [[Review]] (e.g. framed as 'pro' vs 'con' considerations), positive considerations - either as unstructured text, or a list.
	ReviewAspect() []Text                                     // This Review or Rating is relevant to this part or facet of the itemReviewed.
	ReviewBody() []Text                                       // The actual body of the review.
	ReviewRating() []Rating                                   // The rating given in this review. Note that reviews can themselves be rated. The ```reviewRating``` applies to rating given by the review. The [[aggregateRating]] property applies to the review itself, as a creative work.
}
type reviewStruct struct {
	creativeWorkStruct

	AssociatedClaimReview_ ReviewSlice                                  `json:"associatedClaimReview,omitempty"`
	AssociatedMediaReview_ ReviewSlice                                  `json:"associatedMediaReview,omitempty"`
	AssociatedReview_      ReviewSlice                                  `json:"associatedReview,omitempty"`
	ItemReviewed_          ThingSlice                                   `json:"itemReviewed,omitempty"`
	NegativeNotes_         ItemList_ListItem_Text_WebContent_UnionSlice `json:"negativeNotes,omitempty"`
	PositiveNotes_         ItemList_ListItem_Text_WebContent_UnionSlice `json:"positiveNotes,omitempty"`
	ReviewAspect_          TextSlice                                    `json:"reviewAspect,omitempty"`
	ReviewBody_            TextSlice                                    `json:"reviewBody,omitempty"`
	ReviewRating_          RatingSlice                                  `json:"reviewRating,omitempty"`
}

func (s *reviewStruct) AssociatedClaimReview() []Review {
	return s.AssociatedClaimReview_
}
func (s *reviewStruct) AssociatedMediaReview() []Review {
	return s.AssociatedMediaReview_
}
func (s *reviewStruct) AssociatedReview() []Review {
	return s.AssociatedReview_
}
func (s *reviewStruct) ItemReviewed() []Thing {
	return s.ItemReviewed_
}
func (s *reviewStruct) NegativeNotes() []ItemList_ListItem_Text_WebContent_Union {
	return s.NegativeNotes_
}
func (s *reviewStruct) PositiveNotes() []ItemList_ListItem_Text_WebContent_Union {
	return s.PositiveNotes_
}
func (s *reviewStruct) ReviewAspect() []Text {
	return s.ReviewAspect_
}
func (s *reviewStruct) ReviewBody() []Text {
	return s.ReviewBody_
}
func (s *reviewStruct) ReviewRating() []Rating {
	return s.ReviewRating_
}

type ReviewSlice []Review

func (s *ReviewSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReviewSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Review)
	}
	return nil
}

var _ Review = &reviewStruct{}

// The act of producing a balanced opinion about the object for an audience. An agent reviews an object with participants resulting in a review.
type ReviewAction interface {
	// Parents
	AssessAction
	// Accessors
	ResultReview() []Review // A sub property of result. The review that resulted in the performing of the action.
}
type reviewActionStruct struct {
	assessActionStruct

	ResultReview_ ReviewSlice `json:"resultReview,omitempty"`
}

func (s *reviewActionStruct) ResultReview() []Review {
	return s.ResultReview_
}

type ReviewActionSlice []ReviewAction

func (s *ReviewActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReviewActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ReviewAction)
	}
	return nil
}

var _ ReviewAction = &reviewActionStruct{}

// A [[NewsArticle]] and [[CriticReview]] providing a professional critic's assessment of a service, product, performance, or artistic or literary work.
type ReviewNewsArticle interface {
	// Parents
	CriticReview
	NewsArticle
}
type reviewNewsArticleStruct struct {
	criticReviewStruct
	newsArticleStruct_
}

func (s *reviewNewsArticleStruct) implementsAboutPage_CreativeWork_Text_URL_Union() {} // re
func (s *reviewNewsArticleStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
} // re
func (s *reviewNewsArticleStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
} // re
func (s *reviewNewsArticleStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {
}                                                                                            // re
func (s *reviewNewsArticleStruct) implementsCreativeWork_Event_Union()                       {} // re
func (s *reviewNewsArticleStruct) implementsCreativeWork_HowToSection_HowToStep_Text_Union() {} // re
func (s *reviewNewsArticleStruct) implementsCreativeWork_ItemList_Text_Union()               {} // re
func (s *reviewNewsArticleStruct) implementsCreativeWork_Product_URL_Union()                 {} // re
func (s *reviewNewsArticleStruct) implementsCreativeWork_Text_Union()                        {} // re
func (s *reviewNewsArticleStruct) implementsCreativeWork_URL_Union()                         {} // re
func (s *reviewNewsArticleStruct) implementsDataFeedItem_Text_Thing_Union()                  {} // re
func (s *reviewNewsArticleStruct) implementsListItem_Text_Thing_Union()                      {} // re
func (s *reviewNewsArticleStruct) implementsText_Thing_URL_Union()                           {} // re
func (s *reviewNewsArticleStruct) implementsText_Thing_Union()                               {} // re
type ReviewNewsArticleSlice []ReviewNewsArticle

func (s *ReviewNewsArticleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ReviewNewsArticleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ReviewNewsArticle)
	}
	return nil
}

var _ ReviewNewsArticle = &reviewNewsArticleStruct{}

// A river (for example, the broad majestic Shannon).
type RiverBodyOfWater interface {
	// Parents
	BodyOfWater
}
type riverBodyOfWaterStruct struct {
	bodyOfWaterStruct
}
type RiverBodyOfWaterSlice []RiverBodyOfWater

func (s *RiverBodyOfWaterSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RiverBodyOfWaterSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RiverBodyOfWater)
	}
	return nil
}

var _ RiverBodyOfWater = &riverBodyOfWaterStruct{}

// Represents additional information about a relationship or property. For example a Role can be used to say that a 'member' role linking some SportsTeam to a player occurred during a particular time period. Or that a Person's 'actor' role in a Movie was for some particular characterName. Such properties can be attached to a Role entity, which is then associated with the main entities using ordinary properties like 'member' or 'actor'.\n\nSee also [blog post](http://blog.schema.org/2014/06/introducing-role.html).
type Role interface {
	// Parents
	Intangible
	// Accessors
	EndDate() []Date_DateTime_Union   // The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	NamedPosition() []Text_URL_Union  // A position played, performed or filled by a person or organization, as part of an organization. For example, an athlete in a SportsTeam might play in the position named 'Quarterback'.
	RoleName() []Text_URL_Union       // A role played, performed or filled by a person or organization. For example, the team of creators for a comic book might fill the roles named 'inker', 'penciller', and 'letterer'; or an athlete in a SportsTeam might play in the position named 'Quarterback'.
	StartDate() []Date_DateTime_Union // The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
}
type roleStruct struct {
	intangibleStruct

	EndDate_       Date_DateTime_UnionSlice `json:"endDate,omitempty"`
	NamedPosition_ Text_URL_UnionSlice      `json:"namedPosition,omitempty"`
	RoleName_      Text_URL_UnionSlice      `json:"roleName,omitempty"`
	StartDate_     Date_DateTime_UnionSlice `json:"startDate,omitempty"`
}

func (s *roleStruct) EndDate() []Date_DateTime_Union {
	return s.EndDate_
}
func (s *roleStruct) NamedPosition() []Text_URL_Union {
	return s.NamedPosition_
}
func (s *roleStruct) RoleName() []Text_URL_Union {
	return s.RoleName_
}
func (s *roleStruct) StartDate() []Date_DateTime_Union {
	return s.StartDate_
}

type RoleSlice []Role

func (s *RoleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RoleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Role)
	}
	return nil
}

var _ Role = &roleStruct{}

// A roofing contractor.
type RoofingContractor interface {
	// Parents
	HomeAndConstructionBusiness
}
type roofingContractorStruct struct {
	homeAndConstructionBusinessStruct
}
type RoofingContractorSlice []RoofingContractor

func (s *RoofingContractorSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RoofingContractorSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RoofingContractor)
	}
	return nil
}

var _ RoofingContractor = &roofingContractorStruct{}

/*
A room is a distinguishable space within a structure, usually separated from other spaces by interior walls. (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Room">http://en.wikipedia.org/wiki/Room</a>).
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type Room interface {
	// Parents
	Accommodation
}
type roomStruct struct {
	accommodationStruct
}
type RoomSlice []Room

func (s *RoomSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RoomSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Room)
	}
	return nil
}

var _ Room = &roomStruct{}

// The act of notifying an event organizer as to whether you expect to attend the event.
type RsvpAction interface {
	// Parents
	InformAction
	// Accessors
	AdditionalNumberOfGuests() []Number // If responding yes, the number of guests who will attend in addition to the invitee.
	Comment() []Comment                 // Comments, typically from users.
	RsvpResponse() []RsvpResponseType   // The response (yes, no, maybe) to the RSVP.
}
type rsvpActionStruct struct {
	informActionStruct

	AdditionalNumberOfGuests_ NumberSlice           `json:"additionalNumberOfGuests,omitempty"`
	Comment_                  CommentSlice          `json:"comment,omitempty"`
	RsvpResponse_             RsvpResponseTypeSlice `json:"rsvpResponse,omitempty"`
}

func (s *rsvpActionStruct) AdditionalNumberOfGuests() []Number {
	return s.AdditionalNumberOfGuests_
}
func (s *rsvpActionStruct) Comment() []Comment {
	return s.Comment_
}
func (s *rsvpActionStruct) RsvpResponse() []RsvpResponseType {
	return s.RsvpResponse_
}

type RsvpActionSlice []RsvpAction

func (s *RsvpActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RsvpActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RsvpAction)
	}
	return nil
}

var _ RsvpAction = &rsvpActionStruct{}

// RsvpResponseType is an enumeration type whose instances represent responding to an RSVP request.
type RsvpResponseType interface {
	// Parents
	Enumeration
}
type rsvpResponseTypeStruct struct {
	enumerationStruct
}
type RsvpResponseTypeSlice []RsvpResponseType

func (s *RsvpResponseTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(RsvpResponseTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(RsvpResponseType)
	}
	return nil
}

var _ RsvpResponseType = &rsvpResponseTypeStruct{}

// Event type: Sales event.
type SaleEvent interface {
	// Parents
	Event
}
type saleEventStruct struct {
	eventStruct
}
type SaleEventSlice []SaleEvent

func (s *SaleEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SaleEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SaleEvent)
	}
	return nil
}

var _ SaleEvent = &saleEventStruct{}

// An [[Article]] whose content is primarily [[satirical]](https://en.wikipedia.org/wiki/Satire) in nature, i.e. unlikely to be literally true. A satirical article is sometimes but not necessarily also a [[NewsArticle]]. [[ScholarlyArticle]]s are also sometimes satirized.
type SatiricalArticle interface {
	// Parents
	Article
}
type satiricalArticleStruct struct {
	articleStruct
}
type SatiricalArticleSlice []SatiricalArticle

func (s *SatiricalArticleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SatiricalArticleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SatiricalArticle)
	}
	return nil
}

var _ SatiricalArticle = &satiricalArticleStruct{}

/*
A schedule defines a repeating time period used to describe a regularly occurring [[Event]]. At a minimum a schedule will specify [[repeatFrequency]] which describes the interval between occurences of the event. Additional information can be provided to specify the schedule more precisely.
      This includes identifying the day(s) of the week or month when the recurring event will take place, in addition to its start and end time. Schedules may also
      have start and end dates to indicate when they are active, e.g. to define a limited calendar of events.
*/
type Schedule interface {
	// Parents
	Intangible
	// Accessors
	ByDay() []DayOfWeek_Text_Union     // Defines the day(s) of the week on which a recurring [[Event]] takes place. May be specified using either [[DayOfWeek]], or alternatively [[Text]] conforming to iCal's syntax for byDay recurrence rules.
	ByMonth() []Integer                // Defines the month(s) of the year on which a recurring [[Event]] takes place. Specified as an [[Integer]] between 1-12. January is 1.
	ByMonthDay() []Integer             // Defines the day(s) of the month on which a recurring [[Event]] takes place. Specified as an [[Integer]] between 1-31.
	ByMonthWeek() []Integer            // Defines the week(s) of the month on which a recurring Event takes place. Specified as an Integer between 1-5. For clarity, byMonthWeek is best used in conjunction with byDay to indicate concepts like the first and third Mondays of a month.
	Duration() []Duration              // The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).
	EndDate() []Date_DateTime_Union    // The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	EndTime() []DateTime_Time_Union    // The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
	ExceptDate() []Date_DateTime_Union /*
	Defines a [[Date]] or [[DateTime]] during which a scheduled [[Event]] will not take place. The property allows exceptions to
	      a [[Schedule]] to be specified. If an exception is specified as a [[DateTime]] then only the event that would have started at that specific date and time
	      should be excluded from the schedule. If an exception is specified as a [[Date]] then any event that is scheduled for that 24 hour period should be
	      excluded from the schedule. This allows a whole day to be excluded from the schedule without having to itemise every scheduled event.
	*/
	RepeatCount() []Integer                 // Defines the number of times a recurring [[Event]] will take place
	RepeatFrequency() []Duration_Text_Union /*
	Defines the frequency at which [[Event]]s will occur according to a schedule [[Schedule]]. The intervals between
	      events should be defined as a [[Duration]] of time.
	*/
	ScheduleTimezone() []Text         // Indicates the timezone for which the time(s) indicated in the [[Schedule]] are given. The value provided should be among those listed in the IANA Time Zone Database.
	StartDate() []Date_DateTime_Union // The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).
	StartTime() []DateTime_Time_Union // The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
}
type scheduleStruct struct {
	intangibleStruct

	ByDay_            DayOfWeek_Text_UnionSlice `json:"byDay,omitempty"`
	ByMonth_          IntegerSlice              `json:"byMonth,omitempty"`
	ByMonthDay_       IntegerSlice              `json:"byMonthDay,omitempty"`
	ByMonthWeek_      IntegerSlice              `json:"byMonthWeek,omitempty"`
	Duration_         DurationSlice             `json:"duration,omitempty"`
	EndDate_          Date_DateTime_UnionSlice  `json:"endDate,omitempty"`
	EndTime_          DateTime_Time_UnionSlice  `json:"endTime,omitempty"`
	ExceptDate_       Date_DateTime_UnionSlice  `json:"exceptDate,omitempty"`
	RepeatCount_      IntegerSlice              `json:"repeatCount,omitempty"`
	RepeatFrequency_  Duration_Text_UnionSlice  `json:"repeatFrequency,omitempty"`
	ScheduleTimezone_ TextSlice                 `json:"scheduleTimezone,omitempty"`
	StartDate_        Date_DateTime_UnionSlice  `json:"startDate,omitempty"`
	StartTime_        DateTime_Time_UnionSlice  `json:"startTime,omitempty"`
}

func (s *scheduleStruct) ByDay() []DayOfWeek_Text_Union {
	return s.ByDay_
}
func (s *scheduleStruct) ByMonth() []Integer {
	return s.ByMonth_
}
func (s *scheduleStruct) ByMonthDay() []Integer {
	return s.ByMonthDay_
}
func (s *scheduleStruct) ByMonthWeek() []Integer {
	return s.ByMonthWeek_
}
func (s *scheduleStruct) Duration() []Duration {
	return s.Duration_
}
func (s *scheduleStruct) EndDate() []Date_DateTime_Union {
	return s.EndDate_
}
func (s *scheduleStruct) EndTime() []DateTime_Time_Union {
	return s.EndTime_
}
func (s *scheduleStruct) ExceptDate() []Date_DateTime_Union {
	return s.ExceptDate_
}
func (s *scheduleStruct) RepeatCount() []Integer {
	return s.RepeatCount_
}
func (s *scheduleStruct) RepeatFrequency() []Duration_Text_Union {
	return s.RepeatFrequency_
}
func (s *scheduleStruct) ScheduleTimezone() []Text {
	return s.ScheduleTimezone_
}
func (s *scheduleStruct) StartDate() []Date_DateTime_Union {
	return s.StartDate_
}
func (s *scheduleStruct) StartTime() []DateTime_Time_Union {
	return s.StartTime_
}

type ScheduleSlice []Schedule

func (s *ScheduleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ScheduleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Schedule)
	}
	return nil
}

var _ Schedule = &scheduleStruct{}

// Scheduling future actions, events, or tasks.\n\nRelated actions:\n\n* [[ReserveAction]]: Unlike ReserveAction, ScheduleAction allocates future actions (e.g. an event, a task, etc) towards a time slot / spatial allocation.
type ScheduleAction interface {
	// Parents
	PlanAction
}
type scheduleActionStruct struct {
	planActionStruct
}
type ScheduleActionSlice []ScheduleAction

func (s *ScheduleActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ScheduleActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ScheduleAction)
	}
	return nil
}

var _ ScheduleAction = &scheduleActionStruct{}

// A scholarly article.
type ScholarlyArticle interface {
	// Parents
	Article
}
type scholarlyArticleStruct struct {
	articleStruct
}
type ScholarlyArticleSlice []ScholarlyArticle

func (s *ScholarlyArticleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ScholarlyArticleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ScholarlyArticle)
	}
	return nil
}

var _ ScholarlyArticle = &scholarlyArticleStruct{}

// A school.
type School interface {
	// Parents
	EducationalOrganization
}
type schoolStruct struct {
	educationalOrganizationStruct
}
type SchoolSlice []School

func (s *SchoolSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SchoolSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(School)
	}
	return nil
}

var _ School = &schoolStruct{}

// A School District is an administrative area for the administration of schools.
type SchoolDistrict interface {
	// Parents
	AdministrativeArea
}
type schoolDistrictStruct struct {
	administrativeAreaStruct
}
type SchoolDistrictSlice []SchoolDistrict

func (s *SchoolDistrictSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SchoolDistrictSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SchoolDistrict)
	}
	return nil
}

var _ SchoolDistrict = &schoolDistrictStruct{}

// A screening of a movie or other video.
type ScreeningEvent interface {
	// Parents
	Event
	// Accessors
	SubtitleLanguage() []Language_Text_Union // Languages in which subtitles/captions are available, in [IETF BCP 47 standard format](http://tools.ietf.org/html/bcp47).
	VideoFormat() []Text                     // The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.).
	WorkPresented() []Movie                  // The movie presented during this event.
}
type screeningEventStruct struct {
	eventStruct

	SubtitleLanguage_ Language_Text_UnionSlice `json:"subtitleLanguage,omitempty"`
	VideoFormat_      TextSlice                `json:"videoFormat,omitempty"`
	WorkPresented_    MovieSlice               `json:"workPresented,omitempty"`
}

func (s *screeningEventStruct) SubtitleLanguage() []Language_Text_Union {
	return s.SubtitleLanguage_
}
func (s *screeningEventStruct) VideoFormat() []Text {
	return s.VideoFormat_
}
func (s *screeningEventStruct) WorkPresented() []Movie {
	return s.WorkPresented_
}

type ScreeningEventSlice []ScreeningEvent

func (s *ScreeningEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ScreeningEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ScreeningEvent)
	}
	return nil
}

var _ ScreeningEvent = &screeningEventStruct{}

// A piece of sculpture.
type Sculpture interface {
	// Parents
	CreativeWork
}
type sculptureStruct struct {
	creativeWorkStruct
}
type SculptureSlice []Sculpture

func (s *SculptureSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SculptureSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Sculpture)
	}
	return nil
}

var _ Sculpture = &sculptureStruct{}

// A sea (for example, the Caspian sea).
type SeaBodyOfWater interface {
	// Parents
	BodyOfWater
}
type seaBodyOfWaterStruct struct {
	bodyOfWaterStruct
}
type SeaBodyOfWaterSlice []SeaBodyOfWater

func (s *SeaBodyOfWaterSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SeaBodyOfWaterSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SeaBodyOfWater)
	}
	return nil
}

var _ SeaBodyOfWater = &seaBodyOfWaterStruct{}

// The act of searching for an object.\n\nRelated actions:\n\n* [[FindAction]]: SearchAction generally leads to a FindAction, but not necessarily.
type SearchAction interface {
	// Parents
	Action
	// Accessors
	Query() []Text // A sub property of instrument. The query used on this action.
}
type searchActionStruct struct {
	actionStruct

	Query_ TextSlice `json:"query,omitempty"`
}

func (s *searchActionStruct) Query() []Text {
	return s.Query_
}

type SearchActionSlice []SearchAction

func (s *SearchActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SearchActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SearchAction)
	}
	return nil
}

var _ SearchAction = &searchActionStruct{}

// A Search and Rescue organization of some kind.
type SearchRescueOrganization interface {
	// Parents
	Organization
}
type searchRescueOrganizationStruct struct {
	organizationStruct
}
type SearchRescueOrganizationSlice []SearchRescueOrganization

func (s *SearchRescueOrganizationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SearchRescueOrganizationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SearchRescueOrganization)
	}
	return nil
}

var _ SearchRescueOrganization = &searchRescueOrganizationStruct{}

// Web page type: Search results page.
type SearchResultsPage interface {
	// Parents
	WebPage
}
type searchResultsPageStruct struct {
	webPageStruct
}
type SearchResultsPageSlice []SearchResultsPage

func (s *SearchResultsPageSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SearchResultsPageSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SearchResultsPage)
	}
	return nil
}

var _ SearchResultsPage = &searchResultsPageStruct{}

// A media season e.g. tv, radio, video game etc.
type Season interface {
	// Parents
	CreativeWork
}
type seasonStruct struct {
	creativeWorkStruct
}
type SeasonSlice []Season

func (s *SeasonSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SeasonSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Season)
	}
	return nil
}

var _ Season = &seasonStruct{}

// Used to describe a seat, such as a reserved seat in an event reservation.
type Seat interface {
	// Parents
	Intangible
	// Accessors
	SeatNumber() []Text                         // The location of the reserved seat (e.g., 27).
	SeatRow() []Text                            // The row location of the reserved seat (e.g., B).
	SeatSection() []Text                        // The section location of the reserved seat (e.g. Orchestra).
	SeatingType() []QualitativeValue_Text_Union // The type/class of the seat.
}
type seatStruct struct {
	intangibleStruct

	SeatNumber_  TextSlice                        `json:"seatNumber,omitempty"`
	SeatRow_     TextSlice                        `json:"seatRow,omitempty"`
	SeatSection_ TextSlice                        `json:"seatSection,omitempty"`
	SeatingType_ QualitativeValue_Text_UnionSlice `json:"seatingType,omitempty"`
}

func (s *seatStruct) SeatNumber() []Text {
	return s.SeatNumber_
}
func (s *seatStruct) SeatRow() []Text {
	return s.SeatRow_
}
func (s *seatStruct) SeatSection() []Text {
	return s.SeatSection_
}
func (s *seatStruct) SeatingType() []QualitativeValue_Text_Union {
	return s.SeatingType_
}

type SeatSlice []Seat

func (s *SeatSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SeatSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Seat)
	}
	return nil
}

var _ Seat = &seatStruct{}

// This is the [[Action]] of navigating to a specific [[startOffset]] timestamp within a [[VideoObject]], typically represented with a URL template structure.
type SeekToAction interface {
	// Parents
	Action
	// Accessors
	StartOffset() []HyperTocEntry_Number_Union // The start time of the clip expressed as the number of seconds from the beginning of the work.
}
type seekToActionStruct struct {
	actionStruct

	StartOffset_ HyperTocEntry_Number_UnionSlice `json:"startOffset,omitempty"`
}

func (s *seekToActionStruct) StartOffset() []HyperTocEntry_Number_Union {
	return s.StartOffset_
}

type SeekToActionSlice []SeekToAction

func (s *SeekToActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SeekToActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SeekToAction)
	}
	return nil
}

var _ SeekToAction = &seekToActionStruct{}

// A self-storage facility.
type SelfStorage interface {
	// Parents
	LocalBusiness
}
type selfStorageStruct struct {
	localBusinessStruct
}
type SelfStorageSlice []SelfStorage

func (s *SelfStorageSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SelfStorageSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SelfStorage)
	}
	return nil
}

var _ SelfStorage = &selfStorageStruct{}

// The act of taking money from a buyer in exchange for goods or services rendered. An agent sells an object, product, or service to a buyer for a price. Reciprocal of BuyAction.
type SellAction interface {
	// Parents
	TradeAction
	// Accessors
	Buyer() []Organization_Person_Union // A sub property of participant. The participant/person/organization that bought the object.
	WarrantyPromise() []WarrantyPromise // The warranty promise(s) included in the offer.
}
type sellActionStruct struct {
	tradeActionStruct

	Buyer_           Organization_Person_UnionSlice `json:"buyer,omitempty"`
	WarrantyPromise_ WarrantyPromiseSlice           `json:"warrantyPromise,omitempty"`
}

func (s *sellActionStruct) Buyer() []Organization_Person_Union {
	return s.Buyer_
}
func (s *sellActionStruct) WarrantyPromise() []WarrantyPromise {
	return s.WarrantyPromise_
}

type SellActionSlice []SellAction

func (s *SellActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SellActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SellAction)
	}
	return nil
}

var _ SellAction = &sellActionStruct{}

// The act of physically/electronically dispatching an object for transfer from an origin to a destination.Related actions:\n\n* [[ReceiveAction]]: The reciprocal of SendAction.\n* [[GiveAction]]: Unlike GiveAction, SendAction does not imply the transfer of ownership (e.g. I can send you my laptop, but I'm not necessarily giving it to you).
type SendAction interface {
	// Parents
	TransferAction
	// Accessors
	DeliveryMethod() []DeliveryMethod                             // A sub property of instrument. The method of delivery.
	Recipient() []Audience_ContactPoint_Organization_Person_Union // A sub property of participant. The participant who is at the receiving end of the action.
}
type sendActionStruct struct {
	transferActionStruct

	DeliveryMethod_ DeliveryMethodSlice                                  `json:"deliveryMethod,omitempty"`
	Recipient_      Audience_ContactPoint_Organization_Person_UnionSlice `json:"recipient,omitempty"`
}

func (s *sendActionStruct) DeliveryMethod() []DeliveryMethod {
	return s.DeliveryMethod_
}
func (s *sendActionStruct) Recipient() []Audience_ContactPoint_Organization_Person_Union {
	return s.Recipient_
}

type SendActionSlice []SendAction

func (s *SendActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SendActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SendAction)
	}
	return nil
}

var _ SendAction = &sendActionStruct{}

// A Series in schema.org is a group of related items, typically but not necessarily of the same kind. See also [[CreativeWorkSeries]], [[EventSeries]].
type Series interface {
	// Parents
	Intangible
}
type seriesStruct struct {
	intangibleStruct
}
type SeriesSlice []Series

func (s *SeriesSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SeriesSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Series)
	}
	return nil
}

var _ Series = &seriesStruct{}

// A service provided by an organization, e.g. delivery service, print services, etc.
type Service interface {
	// Parents
	Intangible
	// Unions
	AggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union
	OrderItem_Product_Service_Union
	Product_Service_Union
	// Accessors
	AggregateRating() []AggregateRating                                     // The overall rating, based on a collection of reviews or ratings, of the item.
	AreaServed() []AdministrativeArea_GeoShape_Place_Text_Union             // The geographic area where a service or offered item is provided.
	Audience() []Audience                                                   // An intended audience, i.e. a group for whom something was created.
	AvailableChannel() []ServiceChannel                                     // A means of accessing the service (e.g. a phone bank, a web site, a location, etc.).
	Award() []Text                                                          // An award won by or for this item.
	Brand() []Brand_Organization_Union                                      // The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
	Broker() []Organization_Person_Union                                    // An entity that arranges for an exchange between a buyer and a seller.  In most cases a broker never acquires or releases ownership of a product or service involved in an exchange.  If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
	Category() []CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union // A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
	HasOfferCatalog() []OfferCatalog                                        // Indicates an OfferCatalog listing for this Organization, Person, or Service.
	HoursAvailable() []OpeningHoursSpecification                            // The hours during which this service or contact is available.
	IsRelatedTo() []Product_Service_Union                                   // A pointer to another, somehow related product (or multiple products).
	IsSimilarTo() []Product_Service_Union                                   // A pointer to another, functionally similar product (or multiple products).
	Logo() []ImageObject_URL_Union                                          // An associated logo.
	Offers() []Demand_Offer_Union                                           /*
	An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.

	*/
	Produces() []Thing                                      // The tangible thing generated by the service, e.g. a passport, permit, etc.
	Provider() []Organization_Person_Union                  // The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
	ProviderMobility() []Text                               // Indicates the mobility of a provided service (e.g. 'static', 'dynamic').
	Review() []Review                                       // A review of the item.
	ServiceArea() []AdministrativeArea_GeoShape_Place_Union // The geographic area where the service is provided.
	ServiceAudience() []Audience                            // The audience eligible for this service.
	ServiceOutput() []Thing                                 // The tangible thing generated by the service, e.g. a passport, permit, etc.
	ServiceType() []GovernmentBenefitsType_Text_Union       // The type of service being offered, e.g. veterans' benefits, emergency relief, etc.
	Slogan() []Text                                         // A slogan or motto associated with the item.
	TermsOfService() []Text_URL_Union                       // Human-readable terms of service documentation.
}
type serviceStruct struct {
	intangibleStruct

	AggregateRating_  AggregateRatingSlice                                            `json:"aggregateRating,omitempty"`
	AreaServed_       AdministrativeArea_GeoShape_Place_Text_UnionSlice               `json:"areaServed,omitempty"`
	Audience_         AudienceSlice                                                   `json:"audience,omitempty"`
	AvailableChannel_ ServiceChannelSlice                                             `json:"availableChannel,omitempty"`
	Award_            TextSlice                                                       `json:"award,omitempty"`
	Brand_            Brand_Organization_UnionSlice                                   `json:"brand,omitempty"`
	Broker_           Organization_Person_UnionSlice                                  `json:"broker,omitempty"`
	Category_         CategoryCode_PhysicalActivityCategory_Text_Thing_URL_UnionSlice `json:"category,omitempty"`
	HasOfferCatalog_  OfferCatalogSlice                                               `json:"hasOfferCatalog,omitempty"`
	HoursAvailable_   OpeningHoursSpecificationSlice                                  `json:"hoursAvailable,omitempty"`
	IsRelatedTo_      Product_Service_UnionSlice                                      `json:"isRelatedTo,omitempty"`
	IsSimilarTo_      Product_Service_UnionSlice                                      `json:"isSimilarTo,omitempty"`
	Logo_             ImageObject_URL_UnionSlice                                      `json:"logo,omitempty"`
	Offers_           Demand_Offer_UnionSlice                                         `json:"offers,omitempty"`
	Produces_         ThingSlice                                                      `json:"produces,omitempty"`
	Provider_         Organization_Person_UnionSlice                                  `json:"provider,omitempty"`
	ProviderMobility_ TextSlice                                                       `json:"providerMobility,omitempty"`
	Review_           ReviewSlice                                                     `json:"review,omitempty"`
	ServiceArea_      AdministrativeArea_GeoShape_Place_UnionSlice                    `json:"serviceArea,omitempty"`
	ServiceAudience_  AudienceSlice                                                   `json:"serviceAudience,omitempty"`
	ServiceOutput_    ThingSlice                                                      `json:"serviceOutput,omitempty"`
	ServiceType_      GovernmentBenefitsType_Text_UnionSlice                          `json:"serviceType,omitempty"`
	Slogan_           TextSlice                                                       `json:"slogan,omitempty"`
	TermsOfService_   Text_URL_UnionSlice                                             `json:"termsOfService,omitempty"`
}

func (s *serviceStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
}
func (s *serviceStruct) implementsOrderItem_Product_Service_Union() {}
func (s *serviceStruct) implementsProduct_Service_Union()           {}

func (s *serviceStruct) AggregateRating() []AggregateRating {
	return s.AggregateRating_
}
func (s *serviceStruct) AreaServed() []AdministrativeArea_GeoShape_Place_Text_Union {
	return s.AreaServed_
}
func (s *serviceStruct) Audience() []Audience {
	return s.Audience_
}
func (s *serviceStruct) AvailableChannel() []ServiceChannel {
	return s.AvailableChannel_
}
func (s *serviceStruct) Award() []Text {
	return s.Award_
}
func (s *serviceStruct) Brand() []Brand_Organization_Union {
	return s.Brand_
}
func (s *serviceStruct) Broker() []Organization_Person_Union {
	return s.Broker_
}
func (s *serviceStruct) Category() []CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union {
	return s.Category_
}
func (s *serviceStruct) HasOfferCatalog() []OfferCatalog {
	return s.HasOfferCatalog_
}
func (s *serviceStruct) HoursAvailable() []OpeningHoursSpecification {
	return s.HoursAvailable_
}
func (s *serviceStruct) IsRelatedTo() []Product_Service_Union {
	return s.IsRelatedTo_
}
func (s *serviceStruct) IsSimilarTo() []Product_Service_Union {
	return s.IsSimilarTo_
}
func (s *serviceStruct) Logo() []ImageObject_URL_Union {
	return s.Logo_
}
func (s *serviceStruct) Offers() []Demand_Offer_Union {
	return s.Offers_
}
func (s *serviceStruct) Produces() []Thing {
	return s.Produces_
}
func (s *serviceStruct) Provider() []Organization_Person_Union {
	return s.Provider_
}
func (s *serviceStruct) ProviderMobility() []Text {
	return s.ProviderMobility_
}
func (s *serviceStruct) Review() []Review {
	return s.Review_
}
func (s *serviceStruct) ServiceArea() []AdministrativeArea_GeoShape_Place_Union {
	return s.ServiceArea_
}
func (s *serviceStruct) ServiceAudience() []Audience {
	return s.ServiceAudience_
}
func (s *serviceStruct) ServiceOutput() []Thing {
	return s.ServiceOutput_
}
func (s *serviceStruct) ServiceType() []GovernmentBenefitsType_Text_Union {
	return s.ServiceType_
}
func (s *serviceStruct) Slogan() []Text {
	return s.Slogan_
}
func (s *serviceStruct) TermsOfService() []Text_URL_Union {
	return s.TermsOfService_
}

type ServiceSlice []Service

func (s *ServiceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ServiceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Service)
	}
	return nil
}

var _ Service = &serviceStruct{}

// A means for accessing a service, e.g. a government office location, web site, or phone number.
type ServiceChannel interface {
	// Parents
	Intangible
	// Accessors
	AvailableLanguage() []Language_Text_Union // A language someone may use with or at the item, service or place. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[inLanguage]]
	ProcessingTime() []Duration               // Estimated processing time for the service using this channel.
	ProvidesService() []Service               // The service provided by this channel.
	ServiceLocation() []Place                 // The location (e.g. civic structure, local business, etc.) where a person can go to access the service.
	ServicePhone() []ContactPoint             // The phone number to use to access the service.
	ServicePostalAddress() []PostalAddress    // The address for accessing the service by mail.
	ServiceSmsNumber() []ContactPoint         // The number to access the service by text message.
	ServiceUrl() []URL                        // The website to access the service.
}
type serviceChannelStruct struct {
	intangibleStruct

	AvailableLanguage_    Language_Text_UnionSlice `json:"availableLanguage,omitempty"`
	ProcessingTime_       DurationSlice            `json:"processingTime,omitempty"`
	ProvidesService_      ServiceSlice             `json:"providesService,omitempty"`
	ServiceLocation_      PlaceSlice               `json:"serviceLocation,omitempty"`
	ServicePhone_         ContactPointSlice        `json:"servicePhone,omitempty"`
	ServicePostalAddress_ PostalAddressSlice       `json:"servicePostalAddress,omitempty"`
	ServiceSmsNumber_     ContactPointSlice        `json:"serviceSmsNumber,omitempty"`
	ServiceUrl_           URLSlice                 `json:"serviceUrl,omitempty"`
}

func (s *serviceChannelStruct) AvailableLanguage() []Language_Text_Union {
	return s.AvailableLanguage_
}
func (s *serviceChannelStruct) ProcessingTime() []Duration {
	return s.ProcessingTime_
}
func (s *serviceChannelStruct) ProvidesService() []Service {
	return s.ProvidesService_
}
func (s *serviceChannelStruct) ServiceLocation() []Place {
	return s.ServiceLocation_
}
func (s *serviceChannelStruct) ServicePhone() []ContactPoint {
	return s.ServicePhone_
}
func (s *serviceChannelStruct) ServicePostalAddress() []PostalAddress {
	return s.ServicePostalAddress_
}
func (s *serviceChannelStruct) ServiceSmsNumber() []ContactPoint {
	return s.ServiceSmsNumber_
}
func (s *serviceChannelStruct) ServiceUrl() []URL {
	return s.ServiceUrl_
}

type ServiceChannelSlice []ServiceChannel

func (s *ServiceChannelSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ServiceChannelSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ServiceChannel)
	}
	return nil
}

var _ ServiceChannel = &serviceChannelStruct{}

// The act of distributing content to people for their amusement or edification.
type ShareAction interface {
	// Parents
	CommunicateAction
}
type shareActionStruct struct {
	communicateActionStruct
}
type ShareActionSlice []ShareAction

func (s *ShareActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ShareActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ShareAction)
	}
	return nil
}

var _ ShareAction = &shareActionStruct{}

// Printed music, as opposed to performed or recorded music.
type SheetMusic interface {
	// Parents
	CreativeWork
}
type sheetMusicStruct struct {
	creativeWorkStruct
}
type SheetMusicSlice []SheetMusic

func (s *SheetMusicSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SheetMusicSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SheetMusic)
	}
	return nil
}

var _ SheetMusic = &sheetMusicStruct{}

// ShippingDeliveryTime provides various pieces of information about delivery times for shipping.
type ShippingDeliveryTime interface {
	// Parents
	StructuredValue
	// Accessors
	BusinessDays() []OpeningHoursSpecification // Days of the week when the merchant typically operates, indicated via opening hours markup.
	CutoffTime() []Time                        // Order cutoff time allows merchants to describe the time after which they will no longer process orders received on that day. For orders processed after cutoff time, one day gets added to the delivery time estimate. This property is expected to be most typically used via the [[ShippingRateSettings]] publication pattern. The time is indicated using the ISO-8601 Time format, e.g. "23:30:00-05:00" would represent 6:30 pm Eastern Standard Time (EST) which is 5 hours behind Coordinated Universal Time (UTC).
	HandlingTime() []QuantitativeValue         // The typical delay between the receipt of the order and the goods either leaving the warehouse or being prepared for pickup, in case the delivery method is on site pickup. Typical properties: minValue, maxValue, unitCode (d for DAY).  This is by common convention assumed to mean business days (if a unitCode is used, coded as "d"), i.e. only counting days when the business normally operates.
	TransitTime() []QuantitativeValue          // The typical delay the order has been sent for delivery and the goods reach the final customer. Typical properties: minValue, maxValue, unitCode (d for DAY).
}
type shippingDeliveryTimeStruct struct {
	structuredValueStruct

	BusinessDays_ OpeningHoursSpecificationSlice `json:"businessDays,omitempty"`
	CutoffTime_   TimeSlice                      `json:"cutoffTime,omitempty"`
	HandlingTime_ QuantitativeValueSlice         `json:"handlingTime,omitempty"`
	TransitTime_  QuantitativeValueSlice         `json:"transitTime,omitempty"`
}

func (s *shippingDeliveryTimeStruct) BusinessDays() []OpeningHoursSpecification {
	return s.BusinessDays_
}
func (s *shippingDeliveryTimeStruct) CutoffTime() []Time {
	return s.CutoffTime_
}
func (s *shippingDeliveryTimeStruct) HandlingTime() []QuantitativeValue {
	return s.HandlingTime_
}
func (s *shippingDeliveryTimeStruct) TransitTime() []QuantitativeValue {
	return s.TransitTime_
}

type ShippingDeliveryTimeSlice []ShippingDeliveryTime

func (s *ShippingDeliveryTimeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ShippingDeliveryTimeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ShippingDeliveryTime)
	}
	return nil
}

var _ ShippingDeliveryTime = &shippingDeliveryTimeStruct{}

// A ShippingRateSettings represents re-usable pieces of shipping information. It is designed for publication on an URL that may be referenced via the [[shippingSettingsLink]] property of an [[OfferShippingDetails]]. Several occurrences can be published, distinguished and matched (i.e. identified/referenced) by their different values for [[shippingLabel]].
type ShippingRateSettings interface {
	// Parents
	StructuredValue
	// Accessors
	DoesNotShip() []Boolean                                                    // Indicates when shipping to a particular [[shippingDestination]] is not available.
	FreeShippingThreshold() []DeliveryChargeSpecification_MonetaryAmount_Union // A monetary value above which (or equal to) the shipping rate becomes free. Intended to be used via an [[OfferShippingDetails]] with [[shippingSettingsLink]] matching this [[ShippingRateSettings]].
	IsUnlabelledFallback() []Boolean                                           // This can be marked 'true' to indicate that some published [[DeliveryTimeSettings]] or [[ShippingRateSettings]] are intended to apply to all [[OfferShippingDetails]] published by the same merchant, when referenced by a [[shippingSettingsLink]] in those settings. It is not meaningful to use a 'true' value for this property alongside a transitTimeLabel (for [[DeliveryTimeSettings]]) or shippingLabel (for [[ShippingRateSettings]]), since this property is for use with unlabelled settings.
	ShippingDestination() []DefinedRegion                                      // indicates (possibly multiple) shipping destinations. These can be defined in several ways e.g. postalCode ranges.
	ShippingLabel() []Text                                                     // Label to match an [[OfferShippingDetails]] with a [[ShippingRateSettings]] (within the context of a [[shippingSettingsLink]] cross-reference).
	ShippingRate() []MonetaryAmount                                            // The shipping rate is the cost of shipping to the specified destination. Typically, the maxValue and currency values (of the [[MonetaryAmount]]) are most appropriate.
}
type shippingRateSettingsStruct struct {
	structuredValueStruct

	DoesNotShip_           BooleanSlice                                          `json:"doesNotShip,omitempty"`
	FreeShippingThreshold_ DeliveryChargeSpecification_MonetaryAmount_UnionSlice `json:"freeShippingThreshold,omitempty"`
	IsUnlabelledFallback_  BooleanSlice                                          `json:"isUnlabelledFallback,omitempty"`
	ShippingDestination_   DefinedRegionSlice                                    `json:"shippingDestination,omitempty"`
	ShippingLabel_         TextSlice                                             `json:"shippingLabel,omitempty"`
	ShippingRate_          MonetaryAmountSlice                                   `json:"shippingRate,omitempty"`
}

func (s *shippingRateSettingsStruct) DoesNotShip() []Boolean {
	return s.DoesNotShip_
}
func (s *shippingRateSettingsStruct) FreeShippingThreshold() []DeliveryChargeSpecification_MonetaryAmount_Union {
	return s.FreeShippingThreshold_
}
func (s *shippingRateSettingsStruct) IsUnlabelledFallback() []Boolean {
	return s.IsUnlabelledFallback_
}
func (s *shippingRateSettingsStruct) ShippingDestination() []DefinedRegion {
	return s.ShippingDestination_
}
func (s *shippingRateSettingsStruct) ShippingLabel() []Text {
	return s.ShippingLabel_
}
func (s *shippingRateSettingsStruct) ShippingRate() []MonetaryAmount {
	return s.ShippingRate_
}

type ShippingRateSettingsSlice []ShippingRateSettings

func (s *ShippingRateSettingsSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ShippingRateSettingsSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ShippingRateSettings)
	}
	return nil
}

var _ ShippingRateSettings = &shippingRateSettingsStruct{}

// A shoe store.
type ShoeStore interface {
	// Parents
	Store
}
type shoeStoreStruct struct {
	storeStruct
}
type ShoeStoreSlice []ShoeStore

func (s *ShoeStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ShoeStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ShoeStore)
	}
	return nil
}

var _ ShoeStore = &shoeStoreStruct{}

// A shopping center or mall.
type ShoppingCenter interface {
	// Parents
	LocalBusiness
}
type shoppingCenterStruct struct {
	localBusinessStruct
}
type ShoppingCenterSlice []ShoppingCenter

func (s *ShoppingCenterSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ShoppingCenterSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ShoppingCenter)
	}
	return nil
}

var _ ShoppingCenter = &shoppingCenterStruct{}

// Short story or tale. A brief work of literature, usually written in narrative prose.
type ShortStory interface {
	// Parents
	CreativeWork
}
type shortStoryStruct struct {
	creativeWorkStruct
}
type ShortStorySlice []ShortStory

func (s *ShortStorySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ShortStorySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ShortStory)
	}
	return nil
}

var _ ShortStory = &shortStoryStruct{}

// Residence type: Single-family home.
type SingleFamilyResidence interface {
	// Parents
	House
	// Accessors
	NumberOfRooms() []Number_QuantitativeValue_Union /*
	The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.
	Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.
	*/
	Occupancy() []QuantitativeValue /*
	The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).
	Typical unit code(s): C62 for person
	*/
}
type singleFamilyResidenceStruct struct {
	houseStruct

	NumberOfRooms_ Number_QuantitativeValue_UnionSlice `json:"numberOfRooms,omitempty"`
	Occupancy_     QuantitativeValueSlice              `json:"occupancy,omitempty"`
}

func (s *singleFamilyResidenceStruct) NumberOfRooms() []Number_QuantitativeValue_Union {
	return s.NumberOfRooms_
}
func (s *singleFamilyResidenceStruct) Occupancy() []QuantitativeValue {
	return s.Occupancy_
}

type SingleFamilyResidenceSlice []SingleFamilyResidence

func (s *SingleFamilyResidenceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SingleFamilyResidenceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SingleFamilyResidence)
	}
	return nil
}

var _ SingleFamilyResidence = &singleFamilyResidenceStruct{}

// A navigation element of the page.
type SiteNavigationElement interface {
	// Parents
	WebPageElement
}
type siteNavigationElementStruct struct {
	webPageElementStruct
}
type SiteNavigationElementSlice []SiteNavigationElement

func (s *SiteNavigationElementSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SiteNavigationElementSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SiteNavigationElement)
	}
	return nil
}

var _ SiteNavigationElement = &siteNavigationElementStruct{}

// Enumerates common size groups for various product categories.
type SizeGroupEnumeration interface {
	// Parents
	Enumeration
	// Unions
	SizeGroupEnumeration_Text_Union
}
type sizeGroupEnumerationStruct struct {
	enumerationStruct
}

func (s *sizeGroupEnumerationStruct) implementsSizeGroupEnumeration_Text_Union() {}

type SizeGroupEnumerationSlice []SizeGroupEnumeration

func (s *SizeGroupEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SizeGroupEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SizeGroupEnumeration)
	}
	return nil
}

var _ SizeGroupEnumeration = &sizeGroupEnumerationStruct{}

// Size related properties of a product, typically a size code ([[name]]) and optionally a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]]). In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]], and suggested body measurements ([[suggestedMeasurement]]).
type SizeSpecification interface {
	// Parents
	QualitativeValue
	// Unions
	DefinedTerm_QuantitativeValue_SizeSpecification_Text_Union
	// Accessors
	HasMeasurement() []QuantitativeValue            // A product measurement, for example the inseam of pants, the wheel size of a bicycle, or the gauge of a screw. Usually an exact measurement, but can also be a range of measurements for adjustable products, for example belts and ski bindings.
	SizeGroup() []SizeGroupEnumeration_Text_Union   // The size group (also known as "size type") for a product's size. Size groups are common in the fashion industry to define size segments and suggested audiences for wearable products. Multiple values can be combined, for example "men's big and tall", "petite maternity" or "regular"
	SizeSystem() []SizeSystemEnumeration_Text_Union // The size system used to identify a product's size. Typically either a standard (for example, "GS1" or "ISO-EN13402"), country code (for example "US" or "JP"), or a measuring system (for example "Metric" or "Imperial").
	SuggestedAge() []QuantitativeValue              // The age or age range for the intended audience or person, for example 3-12 months for infants, 1-5 years for toddlers.
	SuggestedGender() []GenderType_Text_Union       // The suggested gender of the intended person or audience, for example "male", "female", or "unisex".
	SuggestedMeasurement() []QuantitativeValue      // A suggested range of body measurements for the intended audience or person, for example inseam between 32 and 34 inches or height between 170 and 190 cm. Typically found on a size chart for wearable products.
}
type sizeSpecificationStruct struct {
	qualitativeValueStruct

	HasMeasurement_       QuantitativeValueSlice                `json:"hasMeasurement,omitempty"`
	SizeGroup_            SizeGroupEnumeration_Text_UnionSlice  `json:"sizeGroup,omitempty"`
	SizeSystem_           SizeSystemEnumeration_Text_UnionSlice `json:"sizeSystem,omitempty"`
	SuggestedAge_         QuantitativeValueSlice                `json:"suggestedAge,omitempty"`
	SuggestedGender_      GenderType_Text_UnionSlice            `json:"suggestedGender,omitempty"`
	SuggestedMeasurement_ QuantitativeValueSlice                `json:"suggestedMeasurement,omitempty"`
}

func (s *sizeSpecificationStruct) implementsDefinedTerm_QuantitativeValue_SizeSpecification_Text_Union() {
}

func (s *sizeSpecificationStruct) HasMeasurement() []QuantitativeValue {
	return s.HasMeasurement_
}
func (s *sizeSpecificationStruct) SizeGroup() []SizeGroupEnumeration_Text_Union {
	return s.SizeGroup_
}
func (s *sizeSpecificationStruct) SizeSystem() []SizeSystemEnumeration_Text_Union {
	return s.SizeSystem_
}
func (s *sizeSpecificationStruct) SuggestedAge() []QuantitativeValue {
	return s.SuggestedAge_
}
func (s *sizeSpecificationStruct) SuggestedGender() []GenderType_Text_Union {
	return s.SuggestedGender_
}
func (s *sizeSpecificationStruct) SuggestedMeasurement() []QuantitativeValue {
	return s.SuggestedMeasurement_
}

type SizeSpecificationSlice []SizeSpecification

func (s *SizeSpecificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SizeSpecificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SizeSpecification)
	}
	return nil
}

var _ SizeSpecification = &sizeSpecificationStruct{}

// Enumerates common size systems for different categories of products, for example "EN-13402" or "UK" for wearables or "Imperial" for screws.
type SizeSystemEnumeration interface {
	// Parents
	Enumeration
	// Unions
	SizeSystemEnumeration_Text_Union
}
type sizeSystemEnumerationStruct struct {
	enumerationStruct
}

func (s *sizeSystemEnumerationStruct) implementsSizeSystemEnumeration_Text_Union() {}

type SizeSystemEnumerationSlice []SizeSystemEnumeration

func (s *SizeSystemEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SizeSystemEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SizeSystemEnumeration)
	}
	return nil
}

var _ SizeSystemEnumeration = &sizeSystemEnumerationStruct{}

// A ski resort.
type SkiResort interface {
	// Parents
	Resort
	SportsActivityLocation
}
type skiResortStruct struct {
	resortStruct
	sportsActivityLocationStruct___
}

func (s *skiResortStruct) implementsAdministrativeArea_GeoShape_Place_Text_Union()    {} // re
func (s *skiResortStruct) implementsAdministrativeArea_GeoShape_Place_Union()         {} // re
func (s *skiResortStruct) implementsAudience_ContactPoint_Organization_Person_Union() {} // re
func (s *skiResortStruct) implementsAudience_Organization_Person_Union()              {} // re
func (s *skiResortStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}                                                                                                // re
func (s *skiResortStruct) implementsBrand_Organization_Union()                                   {} // re
func (s *skiResortStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *skiResortStruct) implementsCivicStructure_LocalBusiness_Union()                         {} // re
func (s *skiResortStruct) implementsContactPoint_Organization_Person_Union()                     {} // re
func (s *skiResortStruct) implementsContactPoint_Place_Union()                                   {} // re
func (s *skiResortStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *skiResortStruct) implementsEducationalOrganization_Organization_Union()                 {} // re
func (s *skiResortStruct) implementsFoodEstablishment_Place_Union()                              {} // re
func (s *skiResortStruct) implementsGeoShape_Place_Text_Union()                                  {} // re
func (s *skiResortStruct) implementsGeospatialGeometry_Place_Union()                             {} // re
func (s *skiResortStruct) implementsItemList_Place_Union()                                       {} // re
func (s *skiResortStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *skiResortStruct) implementsOrganization_Person_Union()                                  {} // re
func (s *skiResortStruct) implementsOrganization_ProgramMembership_Union()                       {} // re
func (s *skiResortStruct) implementsPlace_PostalAddress_Text_Union()                             {} // re
func (s *skiResortStruct) implementsPlace_PostalAddress_Text_VirtualLocation_Union()             {} // re
func (s *skiResortStruct) implementsPlace_PostalAddress_URL_Union()                              {} // re
func (s *skiResortStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *skiResortStruct) implementsText_Thing_Union()                                           {} // re
type SkiResortSlice []SkiResort

func (s *SkiResortSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SkiResortSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SkiResort)
	}
	return nil
}

var _ SkiResort = &skiResortStruct{}

// Event type: Social event.
type SocialEvent interface {
	// Parents
	Event
}
type socialEventStruct struct {
	eventStruct
}
type SocialEventSlice []SocialEvent

func (s *SocialEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SocialEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SocialEvent)
	}
	return nil
}

var _ SocialEvent = &socialEventStruct{}

// A post to a social media platform, including blog posts, tweets, Facebook posts, etc.
type SocialMediaPosting interface {
	// Parents
	Article
	// Accessors
	SharedContent() []CreativeWork // A CreativeWork such as an image, video, or audio clip shared as part of this posting.
}
type socialMediaPostingStruct struct {
	articleStruct

	SharedContent_ CreativeWorkSlice `json:"sharedContent,omitempty"`
}

func (s *socialMediaPostingStruct) SharedContent() []CreativeWork {
	return s.SharedContent_
}

type SocialMediaPostingSlice []SocialMediaPosting

func (s *SocialMediaPostingSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SocialMediaPostingSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SocialMediaPosting)
	}
	return nil
}

var _ SocialMediaPosting = &socialMediaPostingStruct{}

// A software application.
type SoftwareApplication interface {
	// Parents
	CreativeWork
	// Unions
	SoftwareApplication_WebSite_Union
	// Accessors
	ApplicationCategory() []Text_URL_Union    // Type of software application, e.g. 'Game, Multimedia'.
	ApplicationSubCategory() []Text_URL_Union // Subcategory of the application, e.g. 'Arcade Game'.
	ApplicationSuite() []Text                 // The name of the application suite to which the application belongs (e.g. Excel belongs to Office).
	AvailableOnDevice() []Text                // Device required to run the application. Used in cases where a specific make/model is required to run the application.
	CountriesNotSupported() []Text            // Countries for which the application is not supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
	CountriesSupported() []Text               // Countries for which the application is supported. You can also provide the two-letter ISO 3166-1 alpha-2 country code.
	Device() []Text                           // Device required to run the application. Used in cases where a specific make/model is required to run the application.
	DownloadUrl() []URL                       // If the file can be downloaded, URL to download the binary.
	FeatureList() []Text_URL_Union            // Features or modules provided by this application (and possibly required by other applications).
	FileSize() []Text                         // Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB will be assumed.
	InstallUrl() []URL                        // URL at which the app may be installed, if different from the URL of the item.
	MemoryRequirements() []Text_URL_Union     // Minimum memory requirements.
	OperatingSystem() []Text                  // Operating systems supported (Windows 7, OSX 10.6, Android 1.6).
	Permissions() []Text                      // Permission(s) required to run the app (for example, a mobile app may require full internet access or may run only on wifi).
	ProcessorRequirements() []Text            // Processor architecture required to run the application (e.g. IA64).
	ReleaseNotes() []Text_URL_Union           // Description of what changed in this version.
	Requirements() []Text_URL_Union           // Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
	Screenshot() []ImageObject_URL_Union      // A link to a screenshot image of the app.
	SoftwareAddOn() []SoftwareApplication     // Additional content for a software application.
	SoftwareHelp() []CreativeWork             // Software application help.
	SoftwareRequirements() []Text_URL_Union   // Component dependency requirements for application. This includes runtime environments and shared libraries that are not included in the application distribution package, but required to run the application (Examples: DirectX, Java or .NET runtime).
	SoftwareVersion() []Text                  // Version of the software instance.
	StorageRequirements() []Text_URL_Union    // Storage requirements (free space required).
	SupportingData() []DataFeed               // Supporting data for a SoftwareApplication.
}
type softwareApplicationStruct struct {
	creativeWorkStruct

	ApplicationCategory_    Text_URL_UnionSlice        `json:"applicationCategory,omitempty"`
	ApplicationSubCategory_ Text_URL_UnionSlice        `json:"applicationSubCategory,omitempty"`
	ApplicationSuite_       TextSlice                  `json:"applicationSuite,omitempty"`
	AvailableOnDevice_      TextSlice                  `json:"availableOnDevice,omitempty"`
	CountriesNotSupported_  TextSlice                  `json:"countriesNotSupported,omitempty"`
	CountriesSupported_     TextSlice                  `json:"countriesSupported,omitempty"`
	Device_                 TextSlice                  `json:"device,omitempty"`
	DownloadUrl_            URLSlice                   `json:"downloadUrl,omitempty"`
	FeatureList_            Text_URL_UnionSlice        `json:"featureList,omitempty"`
	FileSize_               TextSlice                  `json:"fileSize,omitempty"`
	InstallUrl_             URLSlice                   `json:"installUrl,omitempty"`
	MemoryRequirements_     Text_URL_UnionSlice        `json:"memoryRequirements,omitempty"`
	OperatingSystem_        TextSlice                  `json:"operatingSystem,omitempty"`
	Permissions_            TextSlice                  `json:"permissions,omitempty"`
	ProcessorRequirements_  TextSlice                  `json:"processorRequirements,omitempty"`
	ReleaseNotes_           Text_URL_UnionSlice        `json:"releaseNotes,omitempty"`
	Requirements_           Text_URL_UnionSlice        `json:"requirements,omitempty"`
	Screenshot_             ImageObject_URL_UnionSlice `json:"screenshot,omitempty"`
	SoftwareAddOn_          SoftwareApplicationSlice   `json:"softwareAddOn,omitempty"`
	SoftwareHelp_           CreativeWorkSlice          `json:"softwareHelp,omitempty"`
	SoftwareRequirements_   Text_URL_UnionSlice        `json:"softwareRequirements,omitempty"`
	SoftwareVersion_        TextSlice                  `json:"softwareVersion,omitempty"`
	StorageRequirements_    Text_URL_UnionSlice        `json:"storageRequirements,omitempty"`
	SupportingData_         DataFeedSlice              `json:"supportingData,omitempty"`
}
type softwareApplicationStruct_ struct {
	softwareApplicationStruct
}

func (s *softwareApplicationStruct) implementsSoftwareApplication_WebSite_Union() {}

func (s *softwareApplicationStruct) ApplicationCategory() []Text_URL_Union {
	return s.ApplicationCategory_
}
func (s *softwareApplicationStruct) ApplicationSubCategory() []Text_URL_Union {
	return s.ApplicationSubCategory_
}
func (s *softwareApplicationStruct) ApplicationSuite() []Text {
	return s.ApplicationSuite_
}
func (s *softwareApplicationStruct) AvailableOnDevice() []Text {
	return s.AvailableOnDevice_
}
func (s *softwareApplicationStruct) CountriesNotSupported() []Text {
	return s.CountriesNotSupported_
}
func (s *softwareApplicationStruct) CountriesSupported() []Text {
	return s.CountriesSupported_
}
func (s *softwareApplicationStruct) Device() []Text {
	return s.Device_
}
func (s *softwareApplicationStruct) DownloadUrl() []URL {
	return s.DownloadUrl_
}
func (s *softwareApplicationStruct) FeatureList() []Text_URL_Union {
	return s.FeatureList_
}
func (s *softwareApplicationStruct) FileSize() []Text {
	return s.FileSize_
}
func (s *softwareApplicationStruct) InstallUrl() []URL {
	return s.InstallUrl_
}
func (s *softwareApplicationStruct) MemoryRequirements() []Text_URL_Union {
	return s.MemoryRequirements_
}
func (s *softwareApplicationStruct) OperatingSystem() []Text {
	return s.OperatingSystem_
}
func (s *softwareApplicationStruct) Permissions() []Text {
	return s.Permissions_
}
func (s *softwareApplicationStruct) ProcessorRequirements() []Text {
	return s.ProcessorRequirements_
}
func (s *softwareApplicationStruct) ReleaseNotes() []Text_URL_Union {
	return s.ReleaseNotes_
}
func (s *softwareApplicationStruct) Requirements() []Text_URL_Union {
	return s.Requirements_
}
func (s *softwareApplicationStruct) Screenshot() []ImageObject_URL_Union {
	return s.Screenshot_
}
func (s *softwareApplicationStruct) SoftwareAddOn() []SoftwareApplication {
	return s.SoftwareAddOn_
}
func (s *softwareApplicationStruct) SoftwareHelp() []CreativeWork {
	return s.SoftwareHelp_
}
func (s *softwareApplicationStruct) SoftwareRequirements() []Text_URL_Union {
	return s.SoftwareRequirements_
}
func (s *softwareApplicationStruct) SoftwareVersion() []Text {
	return s.SoftwareVersion_
}
func (s *softwareApplicationStruct) StorageRequirements() []Text_URL_Union {
	return s.StorageRequirements_
}
func (s *softwareApplicationStruct) SupportingData() []DataFeed {
	return s.SupportingData_
}

type SoftwareApplicationSlice []SoftwareApplication

func (s *SoftwareApplicationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SoftwareApplicationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SoftwareApplication)
	}
	return nil
}

var _ SoftwareApplication = &softwareApplicationStruct{}

// Computer programming source code. Example: Full (compile ready) solutions, code snippet samples, scripts, templates.
type SoftwareSourceCode interface {
	// Parents
	CreativeWork
	// Accessors
	CodeRepository() []URL                              // Link to the repository where the un-compiled, human readable code and related code is located (SVN, github, CodePlex).
	CodeSampleType() []Text                             // What type of code sample: full (compile ready) solution, code snippet, inline code, scripts, template.
	ProgrammingLanguage() []ComputerLanguage_Text_Union // The computer programming language.
	Runtime() []Text                                    // Runtime platform or script interpreter dependencies (Example - Java v1, Python2.3, .Net Framework 3.0).
	RuntimePlatform() []Text                            // Runtime platform or script interpreter dependencies (Example - Java v1, Python2.3, .Net Framework 3.0).
	SampleType() []Text                                 // What type of code sample: full (compile ready) solution, code snippet, inline code, scripts, template.
	TargetProduct() []SoftwareApplication               // Target Operating System / Product to which the code applies.  If applies to several versions, just the product name can be used.
}
type softwareSourceCodeStruct struct {
	creativeWorkStruct

	CodeRepository_      URLSlice                         `json:"codeRepository,omitempty"`
	CodeSampleType_      TextSlice                        `json:"codeSampleType,omitempty"`
	ProgrammingLanguage_ ComputerLanguage_Text_UnionSlice `json:"programmingLanguage,omitempty"`
	Runtime_             TextSlice                        `json:"runtime,omitempty"`
	RuntimePlatform_     TextSlice                        `json:"runtimePlatform,omitempty"`
	SampleType_          TextSlice                        `json:"sampleType,omitempty"`
	TargetProduct_       SoftwareApplicationSlice         `json:"targetProduct,omitempty"`
}

func (s *softwareSourceCodeStruct) CodeRepository() []URL {
	return s.CodeRepository_
}
func (s *softwareSourceCodeStruct) CodeSampleType() []Text {
	return s.CodeSampleType_
}
func (s *softwareSourceCodeStruct) ProgrammingLanguage() []ComputerLanguage_Text_Union {
	return s.ProgrammingLanguage_
}
func (s *softwareSourceCodeStruct) Runtime() []Text {
	return s.Runtime_
}
func (s *softwareSourceCodeStruct) RuntimePlatform() []Text {
	return s.RuntimePlatform_
}
func (s *softwareSourceCodeStruct) SampleType() []Text {
	return s.SampleType_
}
func (s *softwareSourceCodeStruct) TargetProduct() []SoftwareApplication {
	return s.TargetProduct_
}

type SoftwareSourceCodeSlice []SoftwareSourceCode

func (s *SoftwareSourceCodeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SoftwareSourceCodeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SoftwareSourceCode)
	}
	return nil
}

var _ SoftwareSourceCode = &softwareSourceCodeStruct{}

// The action that takes in a math expression and directs users to a page potentially capable of solving/simplifying that expression.
type SolveMathAction interface {
	// Parents
	Action
	// Unions
	SolveMathAction_Text_Union
	// Accessors
	EduQuestionType() []Text // For questions that are part of learning resources (e.g. Quiz), eduQuestionType indicates the format of question being given. Example: "Multiple choice", "Open ended", "Flashcard".
}
type solveMathActionStruct struct {
	actionStruct

	EduQuestionType_ TextSlice `json:"eduQuestionType,omitempty"`
}

func (s *solveMathActionStruct) implementsSolveMathAction_Text_Union() {}

func (s *solveMathActionStruct) EduQuestionType() []Text {
	return s.EduQuestionType_
}

type SolveMathActionSlice []SolveMathAction

func (s *SolveMathActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SolveMathActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SolveMathAction)
	}
	return nil
}

var _ SolveMathAction = &solveMathActionStruct{}

// A placeholder for multiple similar products of the same kind.
type SomeProducts interface {
	// Parents
	Product
	// Accessors
	InventoryLevel() []QuantitativeValue // The current approximate inventory level for the item or items.
}
type someProductsStruct struct {
	productStruct

	InventoryLevel_ QuantitativeValueSlice `json:"inventoryLevel,omitempty"`
}

func (s *someProductsStruct) InventoryLevel() []QuantitativeValue {
	return s.InventoryLevel_
}

type SomeProductsSlice []SomeProducts

func (s *SomeProductsSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SomeProductsSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SomeProducts)
	}
	return nil
}

var _ SomeProducts = &someProductsStruct{}

// A SpeakableSpecification indicates (typically via [[xpath]] or [[cssSelector]]) sections of a document that are highlighted as particularly [[speakable]]. Instances of this type are expected to be used primarily as values of the [[speakable]] property.
type SpeakableSpecification interface {
	// Parents
	Intangible
	// Unions
	SpeakableSpecification_URL_Union
	// Accessors
	CssSelector() []CssSelectorType // A CSS selector, e.g. of a [[SpeakableSpecification]] or [[WebPageElement]]. In the latter case, multiple matches within a page can constitute a single conceptual "Web page element".
	Xpath() []XPathType             // An XPath, e.g. of a [[SpeakableSpecification]] or [[WebPageElement]]. In the latter case, multiple matches within a page can constitute a single conceptual "Web page element".
}
type speakableSpecificationStruct struct {
	intangibleStruct

	CssSelector_ CssSelectorTypeSlice `json:"cssSelector,omitempty"`
	Xpath_       XPathTypeSlice       `json:"xpath,omitempty"`
}

func (s *speakableSpecificationStruct) implementsSpeakableSpecification_URL_Union() {}

func (s *speakableSpecificationStruct) CssSelector() []CssSelectorType {
	return s.CssSelector_
}
func (s *speakableSpecificationStruct) Xpath() []XPathType {
	return s.Xpath_
}

type SpeakableSpecificationSlice []SpeakableSpecification

func (s *SpeakableSpecificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SpeakableSpecificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SpeakableSpecification)
	}
	return nil
}

var _ SpeakableSpecification = &speakableSpecificationStruct{}

/*
A SpecialAnnouncement combines a simple date-stamped textual information update
      with contextualized Web links and other structured data.  It represents an information update made by a
      locally-oriented organization, for example schools, pharmacies, healthcare providers,  community groups, police,
      local government.

For work in progress guidelines on Coronavirus-related markup see [this doc](https://docs.google.com/document/d/14ikaGCKxo50rRM7nvKSlbUpjyIk2WMQd3IkB1lItlrM/edit#).

The motivating scenario for SpecialAnnouncement is the [Coronavirus pandemic](https://en.wikipedia.org/wiki/2019%E2%80%9320_coronavirus_pandemic), and the initial vocabulary is oriented to this urgent situation. Schema.org
expect to improve the markup iteratively as it is deployed and as feedback emerges from use. In addition to our
usual [Github entry](https://github.com/schemaorg/schemaorg/issues/2490), feedback comments can also be provided in [this document](https://docs.google.com/document/d/1fpdFFxk8s87CWwACs53SGkYv3aafSxz_DTtOQxMrBJQ/edit#).


While this schema is designed to communicate urgent crisis-related information, it is not the same as an emergency warning technology like [CAP](https://en.wikipedia.org/wiki/Common_Alerting_Protocol), although there may be overlaps. The intent is to cover
the kinds of everyday practical information being posted to existing websites during an emergency situation.

Several kinds of information can be provided:

We encourage the provision of "name", "text", "datePosted", "expires" (if appropriate), "category" and
"url" as a simple baseline. It is important to provide a value for "category" where possible, most ideally as a well known
URL from Wikipedia or Wikidata. In the case of the 2019-2020 Coronavirus pandemic, this should be "https://en.wikipedia.org/w/index.php?title=2019-20\_coronavirus\_pandemic" or "https://www.wikidata.org/wiki/Q81068910".

For many of the possible properties, values can either be simple links or an inline description, depending on whether a summary is available. For a link, provide just the URL of the appropriate page as the property's value. For an inline description, use a [[WebContent]] type, and provide the url as a property of that, alongside at least a simple "[[text]]" summary of the page. It is
unlikely that a single SpecialAnnouncement will need all of the possible properties simultaneously.

We expect that in many cases the page referenced might contain more specialized structured data, e.g. contact info, [[openingHours]], [[Event]], [[FAQPage]] etc. By linking to those pages from a [[SpecialAnnouncement]] you can help make it clearer that the events are related to the situation (e.g. Coronavirus) indicated by the [[category]] property of the [[SpecialAnnouncement]].

Many [[SpecialAnnouncement]]s will relate to particular regions and to identifiable local organizations. Use [[spatialCoverage]] for the region, and [[announcementLocation]] to indicate specific [[LocalBusiness]]es and [[CivicStructure]]s. If the announcement affects both a particular region and a specific location (for example, a library closure that serves an entire region), use both [[spatialCoverage]] and [[announcementLocation]].

The [[about]] property can be used to indicate entities that are the focus of the announcement. We now recommend using [[about]] only
for representing non-location entities (e.g. a [[Course]] or a [[RadioStation]]). For places, use [[announcementLocation]] and [[spatialCoverage]]. Consumers of this markup should be aware that the initial design encouraged the use of /about for locations too.

The basic content of [[SpecialAnnouncement]] is similar to that of an [RSS](https://en.wikipedia.org/wiki/RSS) or [Atom](https://en.wikipedia.org/wiki/Atom_(Web_standard)) feed. For publishers without such feeds, basic feed-like information can be shared by posting
[[SpecialAnnouncement]] updates in a page, e.g. using JSON-LD. For sites with Atom/RSS functionality, you can point to a feed
with the [[webFeed]] property. This can be a simple URL, or an inline [[DataFeed]] object, with [[encodingFormat]] providing
media type information e.g. "application/rss+xml" or "application/atom+xml".
*/
type SpecialAnnouncement interface {
	// Parents
	CreativeWork
	// Accessors
	AnnouncementLocation() []CivicStructure_LocalBusiness_Union             // Indicates a specific [[CivicStructure]] or [[LocalBusiness]] associated with the SpecialAnnouncement. For example, a specific testing facility or business with special opening hours. For a larger geographic region like a quarantine of an entire region, use [[spatialCoverage]].
	Category() []CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union // A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
	DatePosted() []Date_DateTime_Union                                      // Publication date of an online listing.
	DiseasePreventionInfo() []URL_WebContent_Union                          // Information about disease prevention.
	DiseaseSpreadStatistics() []Dataset_Observation_URL_WebContent_Union    /*
	Statistical information about the spread of a disease, either as [[WebContent]], or
	  described directly as a [[Dataset]], or the specific [[Observation]]s in the dataset. When a [[WebContent]] URL is
	  provided, the page indicated might also contain more such markup.
	*/
	GettingTestedInfo() []URL_WebContent_Union           // Information about getting tested (for a [[MedicalCondition]]), e.g. in the context of a pandemic.
	GovernmentBenefitsInfo() []GovernmentService         // governmentBenefitsInfo provides information about government benefits associated with a SpecialAnnouncement.
	NewsUpdatesAndGuidelines() []URL_WebContent_Union    // Indicates a page with news updates and guidelines. This could often be (but is not required to be) the main page containing [[SpecialAnnouncement]] markup on a site.
	PublicTransportClosuresInfo() []URL_WebContent_Union // Information about public transport closures.
	QuarantineGuidelines() []URL_WebContent_Union        // Guidelines about quarantine rules, e.g. in the context of a pandemic.
	SchoolClosuresInfo() []URL_WebContent_Union          // Information about school closures.
	TravelBans() []URL_WebContent_Union                  // Information about travel bans, e.g. in the context of a pandemic.
	WebFeed() []DataFeed_URL_Union                       // The URL for a feed, e.g. associated with a podcast series, blog, or series of date-stamped updates. This is usually RSS or Atom.
}
type specialAnnouncementStruct struct {
	creativeWorkStruct

	AnnouncementLocation_        CivicStructure_LocalBusiness_UnionSlice                         `json:"announcementLocation,omitempty"`
	Category_                    CategoryCode_PhysicalActivityCategory_Text_Thing_URL_UnionSlice `json:"category,omitempty"`
	DatePosted_                  Date_DateTime_UnionSlice                                        `json:"datePosted,omitempty"`
	DiseasePreventionInfo_       URL_WebContent_UnionSlice                                       `json:"diseasePreventionInfo,omitempty"`
	DiseaseSpreadStatistics_     Dataset_Observation_URL_WebContent_UnionSlice                   `json:"diseaseSpreadStatistics,omitempty"`
	GettingTestedInfo_           URL_WebContent_UnionSlice                                       `json:"gettingTestedInfo,omitempty"`
	GovernmentBenefitsInfo_      GovernmentServiceSlice                                          `json:"governmentBenefitsInfo,omitempty"`
	NewsUpdatesAndGuidelines_    URL_WebContent_UnionSlice                                       `json:"newsUpdatesAndGuidelines,omitempty"`
	PublicTransportClosuresInfo_ URL_WebContent_UnionSlice                                       `json:"publicTransportClosuresInfo,omitempty"`
	QuarantineGuidelines_        URL_WebContent_UnionSlice                                       `json:"quarantineGuidelines,omitempty"`
	SchoolClosuresInfo_          URL_WebContent_UnionSlice                                       `json:"schoolClosuresInfo,omitempty"`
	TravelBans_                  URL_WebContent_UnionSlice                                       `json:"travelBans,omitempty"`
	WebFeed_                     DataFeed_URL_UnionSlice                                         `json:"webFeed,omitempty"`
}

func (s *specialAnnouncementStruct) AnnouncementLocation() []CivicStructure_LocalBusiness_Union {
	return s.AnnouncementLocation_
}
func (s *specialAnnouncementStruct) Category() []CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union {
	return s.Category_
}
func (s *specialAnnouncementStruct) DatePosted() []Date_DateTime_Union {
	return s.DatePosted_
}
func (s *specialAnnouncementStruct) DiseasePreventionInfo() []URL_WebContent_Union {
	return s.DiseasePreventionInfo_
}
func (s *specialAnnouncementStruct) DiseaseSpreadStatistics() []Dataset_Observation_URL_WebContent_Union {
	return s.DiseaseSpreadStatistics_
}
func (s *specialAnnouncementStruct) GettingTestedInfo() []URL_WebContent_Union {
	return s.GettingTestedInfo_
}
func (s *specialAnnouncementStruct) GovernmentBenefitsInfo() []GovernmentService {
	return s.GovernmentBenefitsInfo_
}
func (s *specialAnnouncementStruct) NewsUpdatesAndGuidelines() []URL_WebContent_Union {
	return s.NewsUpdatesAndGuidelines_
}
func (s *specialAnnouncementStruct) PublicTransportClosuresInfo() []URL_WebContent_Union {
	return s.PublicTransportClosuresInfo_
}
func (s *specialAnnouncementStruct) QuarantineGuidelines() []URL_WebContent_Union {
	return s.QuarantineGuidelines_
}
func (s *specialAnnouncementStruct) SchoolClosuresInfo() []URL_WebContent_Union {
	return s.SchoolClosuresInfo_
}
func (s *specialAnnouncementStruct) TravelBans() []URL_WebContent_Union {
	return s.TravelBans_
}
func (s *specialAnnouncementStruct) WebFeed() []DataFeed_URL_Union {
	return s.WebFeed_
}

type SpecialAnnouncementSlice []SpecialAnnouncement

func (s *SpecialAnnouncementSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SpecialAnnouncementSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SpecialAnnouncement)
	}
	return nil
}

var _ SpecialAnnouncement = &specialAnnouncementStruct{}

// Any branch of a field in which people typically develop specific expertise, usually after significant study, time, and effort.
type Specialty interface {
	// Parents
	Enumeration
}
type specialtyStruct struct {
	enumerationStruct
}
type specialtyStruct_ struct {
	specialtyStruct
}
type SpecialtySlice []Specialty

func (s *SpecialtySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SpecialtySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Specialty)
	}
	return nil
}

var _ Specialty = &specialtyStruct{}

// A sporting goods store.
type SportingGoodsStore interface {
	// Parents
	Store
}
type sportingGoodsStoreStruct struct {
	storeStruct
}
type SportingGoodsStoreSlice []SportingGoodsStore

func (s *SportingGoodsStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SportingGoodsStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SportingGoodsStore)
	}
	return nil
}

var _ SportingGoodsStore = &sportingGoodsStoreStruct{}

// A sports location, such as a playing field.
type SportsActivityLocation interface {
	// Parents
	LocalBusiness
}
type sportsActivityLocationStruct struct {
	localBusinessStruct
}
type sportsActivityLocationStruct_ struct {
	sportsActivityLocationStruct
}
type sportsActivityLocationStruct__ struct {
	sportsActivityLocationStruct_
}
type sportsActivityLocationStruct___ struct {
	sportsActivityLocationStruct__
}
type SportsActivityLocationSlice []SportsActivityLocation

func (s *SportsActivityLocationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SportsActivityLocationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SportsActivityLocation)
	}
	return nil
}

var _ SportsActivityLocation = &sportsActivityLocationStruct{}

// A sports club.
type SportsClub interface {
	// Parents
	SportsActivityLocation
}
type sportsClubStruct struct {
	sportsActivityLocationStruct
}
type SportsClubSlice []SportsClub

func (s *SportsClubSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SportsClubSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SportsClub)
	}
	return nil
}

var _ SportsClub = &sportsClubStruct{}

// Event type: Sports event.
type SportsEvent interface {
	// Parents
	Event
	// Accessors
	AwayTeam() []Person_SportsTeam_Union   // The away team in a sports event.
	Competitor() []Person_SportsTeam_Union // A competitor in a sports event.
	HomeTeam() []Person_SportsTeam_Union   // The home team in a sports event.
	Sport() []Text_URL_Union               // A type of sport (e.g. Baseball).
}
type sportsEventStruct struct {
	eventStruct

	AwayTeam_   Person_SportsTeam_UnionSlice `json:"awayTeam,omitempty"`
	Competitor_ Person_SportsTeam_UnionSlice `json:"competitor,omitempty"`
	HomeTeam_   Person_SportsTeam_UnionSlice `json:"homeTeam,omitempty"`
	Sport_      Text_URL_UnionSlice          `json:"sport,omitempty"`
}

func (s *sportsEventStruct) AwayTeam() []Person_SportsTeam_Union {
	return s.AwayTeam_
}
func (s *sportsEventStruct) Competitor() []Person_SportsTeam_Union {
	return s.Competitor_
}
func (s *sportsEventStruct) HomeTeam() []Person_SportsTeam_Union {
	return s.HomeTeam_
}
func (s *sportsEventStruct) Sport() []Text_URL_Union {
	return s.Sport_
}

type SportsEventSlice []SportsEvent

func (s *SportsEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SportsEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SportsEvent)
	}
	return nil
}

var _ SportsEvent = &sportsEventStruct{}

// Represents the collection of all sports organizations, including sports teams, governing bodies, and sports associations.
type SportsOrganization interface {
	// Parents
	Organization
	// Accessors
	Sport() []Text_URL_Union // A type of sport (e.g. Baseball).
}
type sportsOrganizationStruct struct {
	organizationStruct

	Sport_ Text_URL_UnionSlice `json:"sport,omitempty"`
}

func (s *sportsOrganizationStruct) Sport() []Text_URL_Union {
	return s.Sport_
}

type SportsOrganizationSlice []SportsOrganization

func (s *SportsOrganizationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SportsOrganizationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SportsOrganization)
	}
	return nil
}

var _ SportsOrganization = &sportsOrganizationStruct{}

// Organization: Sports team.
type SportsTeam interface {
	// Parents
	SportsOrganization
	// Unions
	Person_SportsTeam_Union
	// Accessors
	Athlete() []Person               // A person that acts as performing member of a sports team; a player as opposed to a coach.
	Coach() []Person                 // A person that acts in a coaching role for a sports team.
	Gender() []GenderType_Text_Union // Gender of something, typically a [[Person]], but possibly also fictional characters, animals, etc. While https://schema.org/Male and https://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender. The [[gender]] property can also be used in an extended sense to cover e.g. the gender of sports teams. As with the gender of individuals, we do not try to enumerate all possibilities. A mixed-gender [[SportsTeam]] can be indicated with a text value of "Mixed".
}
type sportsTeamStruct struct {
	sportsOrganizationStruct

	Athlete_ PersonSlice                `json:"athlete,omitempty"`
	Coach_   PersonSlice                `json:"coach,omitempty"`
	Gender_  GenderType_Text_UnionSlice `json:"gender,omitempty"`
}

func (s *sportsTeamStruct) implementsPerson_SportsTeam_Union() {}

func (s *sportsTeamStruct) Athlete() []Person {
	return s.Athlete_
}
func (s *sportsTeamStruct) Coach() []Person {
	return s.Coach_
}
func (s *sportsTeamStruct) Gender() []GenderType_Text_Union {
	return s.Gender_
}

type SportsTeamSlice []SportsTeam

func (s *SportsTeamSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SportsTeamSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SportsTeam)
	}
	return nil
}

var _ SportsTeam = &sportsTeamStruct{}

// A spreadsheet file.
type SpreadsheetDigitalDocument interface {
	// Parents
	DigitalDocument
}
type spreadsheetDigitalDocumentStruct struct {
	digitalDocumentStruct
}
type SpreadsheetDigitalDocumentSlice []SpreadsheetDigitalDocument

func (s *SpreadsheetDigitalDocumentSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SpreadsheetDigitalDocumentSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SpreadsheetDigitalDocument)
	}
	return nil
}

var _ SpreadsheetDigitalDocument = &spreadsheetDigitalDocumentStruct{}

// A stadium.
type StadiumOrArena interface {
	// Parents
	CivicStructure
	SportsActivityLocation
}
type stadiumOrArenaStruct struct {
	civicStructureStruct
	sportsActivityLocationStruct
}

func (s *stadiumOrArenaStruct) implementsAdministrativeArea_GeoShape_Place_Text_Union() {} // re
func (s *stadiumOrArenaStruct) implementsAdministrativeArea_GeoShape_Place_Union()      {} // re
func (s *stadiumOrArenaStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {
}                                                                                         // re
func (s *stadiumOrArenaStruct) implementsCivicStructure_LocalBusiness_Union()             {} // re
func (s *stadiumOrArenaStruct) implementsContactPoint_Place_Union()                       {} // re
func (s *stadiumOrArenaStruct) implementsDataFeedItem_Text_Thing_Union()                  {} // re
func (s *stadiumOrArenaStruct) implementsFoodEstablishment_Place_Union()                  {} // re
func (s *stadiumOrArenaStruct) implementsGeoShape_Place_Text_Union()                      {} // re
func (s *stadiumOrArenaStruct) implementsGeospatialGeometry_Place_Union()                 {} // re
func (s *stadiumOrArenaStruct) implementsItemList_Place_Union()                           {} // re
func (s *stadiumOrArenaStruct) implementsListItem_Text_Thing_Union()                      {} // re
func (s *stadiumOrArenaStruct) implementsPlace_PostalAddress_Text_Union()                 {} // re
func (s *stadiumOrArenaStruct) implementsPlace_PostalAddress_Text_VirtualLocation_Union() {} // re
func (s *stadiumOrArenaStruct) implementsPlace_PostalAddress_URL_Union()                  {} // re
func (s *stadiumOrArenaStruct) implementsText_Thing_URL_Union()                           {} // re
func (s *stadiumOrArenaStruct) implementsText_Thing_Union()                               {} // re
type StadiumOrArenaSlice []StadiumOrArena

func (s *StadiumOrArenaSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(StadiumOrArenaSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(StadiumOrArena)
	}
	return nil
}

var _ StadiumOrArena = &stadiumOrArenaStruct{}

// A state or province of a country.
type State interface {
	// Parents
	AdministrativeArea
}
type stateStruct struct {
	administrativeAreaStruct
}
type StateSlice []State

func (s *StateSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(StateSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(State)
	}
	return nil
}

var _ State = &stateStruct{}

// A statement about something, for example a fun or interesting fact. If known, the main entity this statement is about, can be indicated using mainEntity. For more formal claims (e.g. in Fact Checking), consider using [[Claim]] instead. Use the [[text]] property to capture the text of the statement.
type Statement interface {
	// Parents
	CreativeWork
}
type statementStruct struct {
	creativeWorkStruct
}
type StatementSlice []Statement

func (s *StatementSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(StatementSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Statement)
	}
	return nil
}

var _ Statement = &statementStruct{}

/*
A StatisticalPopulation is a set of instances of a certain given type that satisfy some set of constraints. The property [[populationType]] is used to specify the type. Any property that can be used on instances of that type can appear on the statistical population. For example, a [[StatisticalPopulation]] representing all [[Person]]s with a [[homeLocation]] of East Podunk California, would be described by applying the appropriate [[homeLocation]] and [[populationType]] properties to a [[StatisticalPopulation]] item that stands for that set of people.
The properties [[numConstraints]] and [[constrainingProperty]] are used to specify which of the populations properties are used to specify the population. Note that the sense of "population" used here is the general sense of a statistical
population, and does not imply that the population consists of people. For example, a [[populationType]] of [[Event]] or [[NewsArticle]] could be used. See also [[Observation]], and the [data and datasets](/docs/data-and-datasets.html) overview for more details.

*/
type StatisticalPopulation interface {
	// Parents
	Intangible
	// Accessors
	ConstrainingProperty() []Integer /*
	Indicates a property used as a constraint to define a [[StatisticalPopulation]] with respect to the set of entities
	  corresponding to an indicated type (via [[populationType]]).
	*/
	NumConstraints() []Integer // Indicates the number of constraints (not counting [[populationType]]) defined for a particular [[StatisticalPopulation]]. This helps applications understand if they have access to a sufficiently complete description of a [[StatisticalPopulation]].
	PopulationType() []Class   // Indicates the populationType common to all members of a [[StatisticalPopulation]].
}
type statisticalPopulationStruct struct {
	intangibleStruct

	ConstrainingProperty_ IntegerSlice `json:"constrainingProperty,omitempty"`
	NumConstraints_       IntegerSlice `json:"numConstraints,omitempty"`
	PopulationType_       ClassSlice   `json:"populationType,omitempty"`
}

func (s *statisticalPopulationStruct) ConstrainingProperty() []Integer {
	return s.ConstrainingProperty_
}
func (s *statisticalPopulationStruct) NumConstraints() []Integer {
	return s.NumConstraints_
}
func (s *statisticalPopulationStruct) PopulationType() []Class {
	return s.PopulationType_
}

type StatisticalPopulationSlice []StatisticalPopulation

func (s *StatisticalPopulationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(StatisticalPopulationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(StatisticalPopulation)
	}
	return nil
}

var _ StatisticalPopulation = &statisticalPopulationStruct{}

// Lists or enumerations dealing with status types.
type StatusEnumeration interface {
	// Parents
	Enumeration
}
type statusEnumerationStruct struct {
	enumerationStruct
}
type StatusEnumerationSlice []StatusEnumeration

func (s *StatusEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(StatusEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(StatusEnumeration)
	}
	return nil
}

var _ StatusEnumeration = &statusEnumerationStruct{}

// A value indicating a steering position.
type SteeringPositionValue interface {
	// Parents
	QualitativeValue
}
type steeringPositionValueStruct struct {
	qualitativeValueStruct
}
type SteeringPositionValueSlice []SteeringPositionValue

func (s *SteeringPositionValueSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SteeringPositionValueSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SteeringPositionValue)
	}
	return nil
}

var _ SteeringPositionValue = &steeringPositionValueStruct{}

// A retail good store.
type Store interface {
	// Parents
	LocalBusiness
}
type storeStruct struct {
	localBusinessStruct
}
type storeStruct_ struct {
	storeStruct
}
type storeStruct__ struct {
	storeStruct_
}
type StoreSlice []Store

func (s *StoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(StoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Store)
	}
	return nil
}

var _ Store = &storeStruct{}

// Structured values are used when the value of a property has a more complex structure than simply being a textual value or a reference to another thing.
type StructuredValue interface {
	// Parents
	Intangible
	// Unions
	Boolean_Number_StructuredValue_Text_Union
	DefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union
	Integer_StructuredValue_Union
}
type structuredValueStruct struct {
	intangibleStruct
}

func (s *structuredValueStruct) implementsBoolean_Number_StructuredValue_Text_Union() {}
func (s *structuredValueStruct) implementsDefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union() {
}
func (s *structuredValueStruct) implementsInteger_StructuredValue_Union() {}

type StructuredValueSlice []StructuredValue

func (s *StructuredValueSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(StructuredValueSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(StructuredValue)
	}
	return nil
}

var _ StructuredValue = &structuredValueStruct{}

// The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically to get updates pushed to.\n\nRelated actions:\n\n* [[FollowAction]]: Unlike FollowAction, SubscribeAction implies that the subscriber acts as a passive agent being constantly/actively pushed for updates.\n* [[RegisterAction]]: Unlike RegisterAction, SubscribeAction implies that the agent is interested in continuing receiving updates from the object.\n* [[JoinAction]]: Unlike JoinAction, SubscribeAction implies that the agent is interested in continuing receiving updates from the object.
type SubscribeAction interface {
	// Parents
	InteractAction
}
type subscribeActionStruct struct {
	interactActionStruct
}
type SubscribeActionSlice []SubscribeAction

func (s *SubscribeActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SubscribeActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SubscribeAction)
	}
	return nil
}

var _ SubscribeAction = &subscribeActionStruct{}

// Any matter of defined composition that has discrete existence, whose origin may be biological, mineral or chemical.
type Substance interface {
	// Parents
	MedicalEntity
	// Accessors
	ActiveIngredient() []Text             // An active ingredient, typically chemical compounds and/or biologic substances.
	MaximumIntake() []MaximumDoseSchedule // Recommended intake of this supplement for a given population as defined by a specific recommending authority.
}
type substanceStruct struct {
	medicalEntityStruct

	ActiveIngredient_ TextSlice                `json:"activeIngredient,omitempty"`
	MaximumIntake_    MaximumDoseScheduleSlice `json:"maximumIntake,omitempty"`
}

func (s *substanceStruct) ActiveIngredient() []Text {
	return s.ActiveIngredient_
}
func (s *substanceStruct) MaximumIntake() []MaximumDoseSchedule {
	return s.MaximumIntake_
}

type SubstanceSlice []Substance

func (s *SubstanceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SubstanceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Substance)
	}
	return nil
}

var _ Substance = &substanceStruct{}

// A subway station.
type SubwayStation interface {
	// Parents
	CivicStructure
}
type subwayStationStruct struct {
	civicStructureStruct
}
type SubwayStationSlice []SubwayStation

func (s *SubwayStationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SubwayStationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SubwayStation)
	}
	return nil
}

var _ SubwayStation = &subwayStationStruct{}

/*
A suite in a hotel or other public accommodation, denotes a class of luxury accommodations, the key feature of which is multiple rooms (Source: Wikipedia, the free encyclopedia, see <a href="http://en.wikipedia.org/wiki/Suite_(hotel)">http://en.wikipedia.org/wiki/Suite_(hotel)</a>).
<br /><br />
See also the <a href="/docs/hotels.html">dedicated document on the use of schema.org for marking up hotels and other forms of accommodations</a>.
*/
type Suite interface {
	// Parents
	Accommodation
	// Accessors
	Bed() []BedDetails_BedType_Text_Union /*
	The type of bed or beds included in the accommodation. For the single case of just one bed of a certain type, you use bed directly with a text.
	      If you want to indicate the quantity of a certain kind of bed, use an instance of BedDetails. For more detailed information, use the amenityFeature property.
	*/
	NumberOfRooms() []Number_QuantitativeValue_Union /*
	The number of rooms (excluding bathrooms and closets) of the accommodation or lodging business.
	Typical unit code(s): ROM for room or C62 for no unit. The type of room can be put in the unitText property of the QuantitativeValue.
	*/
	Occupancy() []QuantitativeValue /*
	The allowed total occupancy for the accommodation in persons (including infants etc). For individual accommodations, this is not necessarily the legal maximum but defines the permitted usage as per the contractual agreement (e.g. a double room used by a single person).
	Typical unit code(s): C62 for person
	*/
}
type suiteStruct struct {
	accommodationStruct

	Bed_           BedDetails_BedType_Text_UnionSlice  `json:"bed,omitempty"`
	NumberOfRooms_ Number_QuantitativeValue_UnionSlice `json:"numberOfRooms,omitempty"`
	Occupancy_     QuantitativeValueSlice              `json:"occupancy,omitempty"`
}

func (s *suiteStruct) Bed() []BedDetails_BedType_Text_Union {
	return s.Bed_
}
func (s *suiteStruct) NumberOfRooms() []Number_QuantitativeValue_Union {
	return s.NumberOfRooms_
}
func (s *suiteStruct) Occupancy() []QuantitativeValue {
	return s.Occupancy_
}

type SuiteSlice []Suite

func (s *SuiteSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SuiteSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Suite)
	}
	return nil
}

var _ Suite = &suiteStruct{}

// Anatomical features that can be observed by sight (without dissection), including the form and proportions of the human body as well as surface landmarks that correspond to deeper subcutaneous structures. Superficial anatomy plays an important role in sports medicine, phlebotomy, and other medical specialties as underlying anatomical structures can be identified through surface palpation. For example, during back surgery, superficial anatomy can be used to palpate and count vertebrae to find the site of incision. Or in phlebotomy, superficial anatomy can be used to locate an underlying vein; for example, the median cubital vein can be located by palpating the borders of the cubital fossa (such as the epicondyles of the humerus) and then looking for the superficial signs of the vein, such as size, prominence, ability to refill after depression, and feel of surrounding tissue support. As another example, in a subluxation (dislocation) of the glenohumeral joint, the bony structure becomes pronounced with the deltoid muscle failing to cover the glenohumeral joint allowing the edges of the scapula to be superficially visible. Here, the superficial anatomy is the visible edges of the scapula, implying the underlying dislocation of the joint (the related anatomical structure).
type SuperficialAnatomy interface {
	// Parents
	MedicalEntity
	// Unions
	AnatomicalStructure_AnatomicalSystem_SuperficialAnatomy_Union
	AnatomicalStructure_SuperficialAnatomy_Union
	// Accessors
	AssociatedPathophysiology() []Text                            // If applicable, a description of the pathophysiology associated with the anatomical system, including potential abnormal changes in the mechanical, physical, and biochemical functions of the system.
	RelatedAnatomy() []AnatomicalStructure_AnatomicalSystem_Union // Anatomical systems or structures that relate to the superficial anatomy.
	RelatedCondition() []MedicalCondition                         // A medical condition associated with this anatomy.
	RelatedTherapy() []MedicalTherapy                             // A medical therapy related to this anatomy.
	Significance() []Text                                         // The significance associated with the superficial anatomy; as an example, how characteristics of the superficial anatomy can suggest underlying medical conditions or courses of treatment.
}
type superficialAnatomyStruct struct {
	medicalEntityStruct

	AssociatedPathophysiology_ TextSlice                                       `json:"associatedPathophysiology,omitempty"`
	RelatedAnatomy_            AnatomicalStructure_AnatomicalSystem_UnionSlice `json:"relatedAnatomy,omitempty"`
	RelatedCondition_          MedicalConditionSlice                           `json:"relatedCondition,omitempty"`
	RelatedTherapy_            MedicalTherapySlice                             `json:"relatedTherapy,omitempty"`
	Significance_              TextSlice                                       `json:"significance,omitempty"`
}

func (s *superficialAnatomyStruct) implementsAnatomicalStructure_AnatomicalSystem_SuperficialAnatomy_Union() {
}
func (s *superficialAnatomyStruct) implementsAnatomicalStructure_SuperficialAnatomy_Union() {}

func (s *superficialAnatomyStruct) AssociatedPathophysiology() []Text {
	return s.AssociatedPathophysiology_
}
func (s *superficialAnatomyStruct) RelatedAnatomy() []AnatomicalStructure_AnatomicalSystem_Union {
	return s.RelatedAnatomy_
}
func (s *superficialAnatomyStruct) RelatedCondition() []MedicalCondition {
	return s.RelatedCondition_
}
func (s *superficialAnatomyStruct) RelatedTherapy() []MedicalTherapy {
	return s.RelatedTherapy_
}
func (s *superficialAnatomyStruct) Significance() []Text {
	return s.Significance_
}

type SuperficialAnatomySlice []SuperficialAnatomy

func (s *SuperficialAnatomySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SuperficialAnatomySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SuperficialAnatomy)
	}
	return nil
}

var _ SuperficialAnatomy = &superficialAnatomyStruct{}

// A medical procedure involving an incision with instruments; performed for diagnose, or therapeutic purposes.
type SurgicalProcedure interface {
	// Parents
	MedicalProcedure
}
type surgicalProcedureStruct struct {
	medicalProcedureStruct
}
type SurgicalProcedureSlice []SurgicalProcedure

func (s *SurgicalProcedureSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SurgicalProcedureSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SurgicalProcedure)
	}
	return nil
}

var _ SurgicalProcedure = &surgicalProcedureStruct{}

// The act of momentarily pausing a device or application (e.g. pause music playback or pause a timer).
type SuspendAction interface {
	// Parents
	ControlAction
}
type suspendActionStruct struct {
	controlActionStruct
}
type SuspendActionSlice []SuspendAction

func (s *SuspendActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SuspendActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(SuspendAction)
	}
	return nil
}

var _ SuspendAction = &suspendActionStruct{}

// A synagogue.
type Synagogue interface {
	// Parents
	PlaceOfWorship
}
type synagogueStruct struct {
	placeOfWorshipStruct
}
type SynagogueSlice []Synagogue

func (s *SynagogueSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(SynagogueSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Synagogue)
	}
	return nil
}

var _ Synagogue = &synagogueStruct{}

// A short TV program or a segment/part of a TV program.
type TVClip interface {
	// Parents
	Clip
	// Accessors
	PartOfTVSeries() []TVSeries // The TV series to which this episode or season belongs.
}
type tVClipStruct struct {
	clipStruct

	PartOfTVSeries_ TVSeriesSlice `json:"partOfTVSeries,omitempty"`
}

func (s *tVClipStruct) PartOfTVSeries() []TVSeries {
	return s.PartOfTVSeries_
}

type TVClipSlice []TVClip

func (s *TVClipSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TVClipSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TVClip)
	}
	return nil
}

var _ TVClip = &tVClipStruct{}

// A TV episode which can be part of a series or season.
type TVEpisode interface {
	// Parents
	Episode
	// Accessors
	CountryOfOrigin() []Country /*
	The country of origin of something, including products as well as creative  works such as movie and TV content.

	In the case of TV and movie, this would be the country of the principle offices of the production company or individual responsible for the movie. For other kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties such as [[contentLocation]] and [[locationCreated]] may be more applicable.

	In the case of products, the country of origin of the product. The exact interpretation of this may vary by context and product type, and cannot be fully enumerated here.
	*/
	PartOfTVSeries() []TVSeries              // The TV series to which this episode or season belongs.
	SubtitleLanguage() []Language_Text_Union // Languages in which subtitles/captions are available, in [IETF BCP 47 standard format](http://tools.ietf.org/html/bcp47).
	TitleEIDR() []Text_URL_Union             /*
	An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]] representing at the most general/abstract level, a work of film or television.

	For example, the motion picture known as "Ghostbusters" has a titleEIDR of  "10.5240/7EC7-228A-510A-053E-CBB8-J". This title (or work) may have several variants, which EIDR calls "edits". See [[editEIDR]].

	Since schema.org types like [[Movie]] and [[TVEpisode]] can be used for both works and their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general description), or alongside [[editEIDR]] for a more edit-specific description.
	*/
}
type tVEpisodeStruct struct {
	episodeStruct

	CountryOfOrigin_  CountrySlice             `json:"countryOfOrigin,omitempty"`
	PartOfTVSeries_   TVSeriesSlice            `json:"partOfTVSeries,omitempty"`
	SubtitleLanguage_ Language_Text_UnionSlice `json:"subtitleLanguage,omitempty"`
	TitleEIDR_        Text_URL_UnionSlice      `json:"titleEIDR,omitempty"`
}

func (s *tVEpisodeStruct) CountryOfOrigin() []Country {
	return s.CountryOfOrigin_
}
func (s *tVEpisodeStruct) PartOfTVSeries() []TVSeries {
	return s.PartOfTVSeries_
}
func (s *tVEpisodeStruct) SubtitleLanguage() []Language_Text_Union {
	return s.SubtitleLanguage_
}
func (s *tVEpisodeStruct) TitleEIDR() []Text_URL_Union {
	return s.TitleEIDR_
}

type TVEpisodeSlice []TVEpisode

func (s *TVEpisodeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TVEpisodeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TVEpisode)
	}
	return nil
}

var _ TVEpisode = &tVEpisodeStruct{}

// Season dedicated to TV broadcast and associated online delivery.
type TVSeason interface {
	// Parents
	CreativeWork
	CreativeWorkSeason
	// Accessors
	CountryOfOrigin() []Country /*
	The country of origin of something, including products as well as creative  works such as movie and TV content.

	In the case of TV and movie, this would be the country of the principle offices of the production company or individual responsible for the movie. For other kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties such as [[contentLocation]] and [[locationCreated]] may be more applicable.

	In the case of products, the country of origin of the product. The exact interpretation of this may vary by context and product type, and cannot be fully enumerated here.
	*/
	PartOfTVSeries() []TVSeries // The TV series to which this episode or season belongs.
}
type tVSeasonStruct struct {
	creativeWorkStruct
	creativeWorkSeasonStruct

	CountryOfOrigin_ CountrySlice  `json:"countryOfOrigin,omitempty"`
	PartOfTVSeries_  TVSeriesSlice `json:"partOfTVSeries,omitempty"`
}

func (s *tVSeasonStruct) implementsAboutPage_CreativeWork_Text_URL_Union() {} // re
func (s *tVSeasonStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
} // re
func (s *tVSeasonStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}                                                                                               // re
func (s *tVSeasonStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *tVSeasonStruct) implementsCreativeWork_Event_Union()                                   {} // re
func (s *tVSeasonStruct) implementsCreativeWork_HowToSection_HowToStep_Text_Union()             {} // re
func (s *tVSeasonStruct) implementsCreativeWork_ItemList_Text_Union()                           {} // re
func (s *tVSeasonStruct) implementsCreativeWork_Product_URL_Union()                             {} // re
func (s *tVSeasonStruct) implementsCreativeWork_Text_Union()                                    {} // re
func (s *tVSeasonStruct) implementsCreativeWork_URL_Union()                                     {} // re
func (s *tVSeasonStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *tVSeasonStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *tVSeasonStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *tVSeasonStruct) implementsText_Thing_Union()                                           {} // re
func (s *tVSeasonStruct) CountryOfOrigin() []Country {
	return s.CountryOfOrigin_
}
func (s *tVSeasonStruct) PartOfTVSeries() []TVSeries {
	return s.PartOfTVSeries_
}

type TVSeasonSlice []TVSeason

func (s *TVSeasonSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TVSeasonSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TVSeason)
	}
	return nil
}

var _ TVSeason = &tVSeasonStruct{}

// CreativeWorkSeries dedicated to TV broadcast and associated online delivery.
type TVSeries interface {
	// Parents
	CreativeWork
	CreativeWorkSeries
	// Accessors
	Actor() []Person                      // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Actors() []Person                     // An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
	ContainsSeason() []CreativeWorkSeason // A season that is part of the media series.
	CountryOfOrigin() []Country           /*
	The country of origin of something, including products as well as creative  works such as movie and TV content.

	In the case of TV and movie, this would be the country of the principle offices of the production company or individual responsible for the movie. For other kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties such as [[contentLocation]] and [[locationCreated]] may be more applicable.

	In the case of products, the country of origin of the product. The exact interpretation of this may vary by context and product type, and cannot be fully enumerated here.
	*/
	Director() []Person                     // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	Directors() []Person                    // A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
	Episode() []Episode                     // An episode of a tv, radio or game media within a series or season.
	Episodes() []Episode                    // An episode of a TV/radio series or season.
	MusicBy() []MusicGroup_Person_Union     // The composer of the soundtrack.
	NumberOfEpisodes() []Integer            // The number of episodes in this season or series.
	NumberOfSeasons() []Integer             // The number of seasons in this series.
	ProductionCompany() []Organization      // The production company or studio responsible for the item e.g. series, video game, episode etc.
	Season() []CreativeWorkSeason_URL_Union // A season in a media series.
	Seasons() []CreativeWorkSeason          // A season in a media series.
	Trailer() []VideoObject                 // The trailer of a movie or tv/radio series, season, episode, etc.
}
type tVSeriesStruct struct {
	creativeWorkStruct
	creativeWorkSeriesStruct

	Actor_             PersonSlice                       `json:"actor,omitempty"`
	Actors_            PersonSlice                       `json:"actors,omitempty"`
	ContainsSeason_    CreativeWorkSeasonSlice           `json:"containsSeason,omitempty"`
	CountryOfOrigin_   CountrySlice                      `json:"countryOfOrigin,omitempty"`
	Director_          PersonSlice                       `json:"director,omitempty"`
	Directors_         PersonSlice                       `json:"directors,omitempty"`
	Episode_           EpisodeSlice                      `json:"episode,omitempty"`
	Episodes_          EpisodeSlice                      `json:"episodes,omitempty"`
	MusicBy_           MusicGroup_Person_UnionSlice      `json:"musicBy,omitempty"`
	NumberOfEpisodes_  IntegerSlice                      `json:"numberOfEpisodes,omitempty"`
	NumberOfSeasons_   IntegerSlice                      `json:"numberOfSeasons,omitempty"`
	ProductionCompany_ OrganizationSlice                 `json:"productionCompany,omitempty"`
	Season_            CreativeWorkSeason_URL_UnionSlice `json:"season,omitempty"`
	Seasons_           CreativeWorkSeasonSlice           `json:"seasons,omitempty"`
	Trailer_           VideoObjectSlice                  `json:"trailer,omitempty"`
}

func (s *tVSeriesStruct) implementsAboutPage_CreativeWork_Text_URL_Union() {} // re
func (s *tVSeriesStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
} // re
func (s *tVSeriesStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}                                                                                               // re
func (s *tVSeriesStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *tVSeriesStruct) implementsCreativeWork_Event_Union()                                   {} // re
func (s *tVSeriesStruct) implementsCreativeWork_HowToSection_HowToStep_Text_Union()             {} // re
func (s *tVSeriesStruct) implementsCreativeWork_ItemList_Text_Union()                           {} // re
func (s *tVSeriesStruct) implementsCreativeWork_Product_URL_Union()                             {} // re
func (s *tVSeriesStruct) implementsCreativeWork_Text_Union()                                    {} // re
func (s *tVSeriesStruct) implementsCreativeWork_URL_Union()                                     {} // re
func (s *tVSeriesStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *tVSeriesStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *tVSeriesStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *tVSeriesStruct) implementsText_Thing_Union()                                           {} // re
func (s *tVSeriesStruct) Actor() []Person {
	return s.Actor_
}
func (s *tVSeriesStruct) Actors() []Person {
	return s.Actors_
}
func (s *tVSeriesStruct) ContainsSeason() []CreativeWorkSeason {
	return s.ContainsSeason_
}
func (s *tVSeriesStruct) CountryOfOrigin() []Country {
	return s.CountryOfOrigin_
}
func (s *tVSeriesStruct) Director() []Person {
	return s.Director_
}
func (s *tVSeriesStruct) Directors() []Person {
	return s.Directors_
}
func (s *tVSeriesStruct) Episode() []Episode {
	return s.Episode_
}
func (s *tVSeriesStruct) Episodes() []Episode {
	return s.Episodes_
}
func (s *tVSeriesStruct) MusicBy() []MusicGroup_Person_Union {
	return s.MusicBy_
}
func (s *tVSeriesStruct) NumberOfEpisodes() []Integer {
	return s.NumberOfEpisodes_
}
func (s *tVSeriesStruct) NumberOfSeasons() []Integer {
	return s.NumberOfSeasons_
}
func (s *tVSeriesStruct) ProductionCompany() []Organization {
	return s.ProductionCompany_
}
func (s *tVSeriesStruct) Season() []CreativeWorkSeason_URL_Union {
	return s.Season_
}
func (s *tVSeriesStruct) Seasons() []CreativeWorkSeason {
	return s.Seasons_
}
func (s *tVSeriesStruct) Trailer() []VideoObject {
	return s.Trailer_
}

type TVSeriesSlice []TVSeries

func (s *TVSeriesSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TVSeriesSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TVSeries)
	}
	return nil
}

var _ TVSeries = &tVSeriesStruct{}

// A table on a Web page.
type Table interface {
	// Parents
	WebPageElement
}
type tableStruct struct {
	webPageElementStruct
}
type TableSlice []Table

func (s *TableSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TableSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Table)
	}
	return nil
}

var _ Table = &tableStruct{}

// The act of gaining ownership of an object from an origin. Reciprocal of GiveAction.\n\nRelated actions:\n\n* [[GiveAction]]: The reciprocal of TakeAction.\n* [[ReceiveAction]]: Unlike ReceiveAction, TakeAction implies that ownership has been transfered.
type TakeAction interface {
	// Parents
	TransferAction
}
type takeActionStruct struct {
	transferActionStruct
}
type TakeActionSlice []TakeAction

func (s *TakeActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TakeActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TakeAction)
	}
	return nil
}

var _ TakeAction = &takeActionStruct{}

// A tattoo parlor.
type TattooParlor interface {
	// Parents
	HealthAndBeautyBusiness
}
type tattooParlorStruct struct {
	healthAndBeautyBusinessStruct
}
type TattooParlorSlice []TattooParlor

func (s *TattooParlorSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TattooParlorSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TattooParlor)
	}
	return nil
}

var _ TattooParlor = &tattooParlorStruct{}

// A taxi.
type Taxi interface {
	// Parents
	Service
}
type taxiStruct struct {
	serviceStruct
}
type TaxiSlice []Taxi

func (s *TaxiSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TaxiSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Taxi)
	}
	return nil
}

var _ Taxi = &taxiStruct{}

// A reservation for a taxi.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
type TaxiReservation interface {
	// Parents
	Reservation
	// Accessors
	PartySize() []Integer_QuantitativeValue_Union // Number of people the reservation should accommodate.
	PickupLocation() []Place                      // Where a taxi will pick up a passenger or a rental car can be picked up.
	PickupTime() []DateTime                       // When a taxi will pickup a passenger or a rental car can be picked up.
}
type taxiReservationStruct struct {
	reservationStruct

	PartySize_      Integer_QuantitativeValue_UnionSlice `json:"partySize,omitempty"`
	PickupLocation_ PlaceSlice                           `json:"pickupLocation,omitempty"`
	PickupTime_     DateTimeSlice                        `json:"pickupTime,omitempty"`
}

func (s *taxiReservationStruct) PartySize() []Integer_QuantitativeValue_Union {
	return s.PartySize_
}
func (s *taxiReservationStruct) PickupLocation() []Place {
	return s.PickupLocation_
}
func (s *taxiReservationStruct) PickupTime() []DateTime {
	return s.PickupTime_
}

type TaxiReservationSlice []TaxiReservation

func (s *TaxiReservationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TaxiReservationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TaxiReservation)
	}
	return nil
}

var _ TaxiReservation = &taxiReservationStruct{}

// A service for a vehicle for hire with a driver for local travel. Fares are usually calculated based on distance traveled.
type TaxiService interface {
	// Parents
	Service
}
type taxiServiceStruct struct {
	serviceStruct
}
type TaxiServiceSlice []TaxiService

func (s *TaxiServiceSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TaxiServiceSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TaxiService)
	}
	return nil
}

var _ TaxiService = &taxiServiceStruct{}

// A taxi stand.
type TaxiStand interface {
	// Parents
	CivicStructure
}
type taxiStandStruct struct {
	civicStructureStruct
}
type TaxiStandSlice []TaxiStand

func (s *TaxiStandSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TaxiStandSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TaxiStand)
	}
	return nil
}

var _ TaxiStand = &taxiStandStruct{}

// A set of organisms asserted to represent a natural cohesive biological unit.
type Taxon interface {
	// Parents
	Thing
	// Unions
	DefinedTerm_Taxon_Text_URL_Union
	Taxon_Text_URL_Union
	// Accessors
	ChildTaxon() []Taxon_Text_URL_Union        // Closest child taxa of the taxon in question.
	HasDefinedTerm() []DefinedTerm             // A Defined Term contained in this term set.
	ParentTaxon() []Taxon_Text_URL_Union       // Closest parent taxon of the taxon in question.
	TaxonRank() []PropertyValue_Text_URL_Union // The taxonomic rank of this taxon given preferably as a URI from a controlled vocabulary – (typically the ranks from TDWG TaxonRank ontology or equivalent Wikidata URIs).
}
type taxonStruct struct {
	thingStruct

	ChildTaxon_     Taxon_Text_URL_UnionSlice         `json:"childTaxon,omitempty"`
	HasDefinedTerm_ DefinedTermSlice                  `json:"hasDefinedTerm,omitempty"`
	ParentTaxon_    Taxon_Text_URL_UnionSlice         `json:"parentTaxon,omitempty"`
	TaxonRank_      PropertyValue_Text_URL_UnionSlice `json:"taxonRank,omitempty"`
}

func (s *taxonStruct) implementsDefinedTerm_Taxon_Text_URL_Union() {}
func (s *taxonStruct) implementsTaxon_Text_URL_Union()             {}

func (s *taxonStruct) ChildTaxon() []Taxon_Text_URL_Union {
	return s.ChildTaxon_
}
func (s *taxonStruct) HasDefinedTerm() []DefinedTerm {
	return s.HasDefinedTerm_
}
func (s *taxonStruct) ParentTaxon() []Taxon_Text_URL_Union {
	return s.ParentTaxon_
}
func (s *taxonStruct) TaxonRank() []PropertyValue_Text_URL_Union {
	return s.TaxonRank_
}

type TaxonSlice []Taxon

func (s *TaxonSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TaxonSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Taxon)
	}
	return nil
}

var _ Taxon = &taxonStruct{}

// A technical article - Example: How-to (task) topics, step-by-step, procedural troubleshooting, specifications, etc.
type TechArticle interface {
	// Parents
	Article
	// Accessors
	Dependencies() []Text     // Prerequisites needed to fulfill steps in article.
	ProficiencyLevel() []Text // Proficiency needed for this content; expected values: 'Beginner', 'Expert'.
}
type techArticleStruct struct {
	articleStruct

	Dependencies_     TextSlice `json:"dependencies,omitempty"`
	ProficiencyLevel_ TextSlice `json:"proficiencyLevel,omitempty"`
}

func (s *techArticleStruct) Dependencies() []Text {
	return s.Dependencies_
}
func (s *techArticleStruct) ProficiencyLevel() []Text {
	return s.ProficiencyLevel_
}

type TechArticleSlice []TechArticle

func (s *TechArticleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TechArticleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TechArticle)
	}
	return nil
}

var _ TechArticle = &techArticleStruct{}

// A unique instance of a television BroadcastService on a CableOrSatelliteService lineup.
type TelevisionChannel interface {
	// Parents
	BroadcastChannel
}
type televisionChannelStruct struct {
	broadcastChannelStruct
}
type TelevisionChannelSlice []TelevisionChannel

func (s *TelevisionChannelSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TelevisionChannelSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TelevisionChannel)
	}
	return nil
}

var _ TelevisionChannel = &televisionChannelStruct{}

// A television station.
type TelevisionStation interface {
	// Parents
	LocalBusiness
}
type televisionStationStruct struct {
	localBusinessStruct
}
type TelevisionStationSlice []TelevisionStation

func (s *TelevisionStationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TelevisionStationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TelevisionStation)
	}
	return nil
}

var _ TelevisionStation = &televisionStationStruct{}

// A tennis complex.
type TennisComplex interface {
	// Parents
	SportsActivityLocation
}
type tennisComplexStruct struct {
	sportsActivityLocationStruct
}
type TennisComplexSlice []TennisComplex

func (s *TennisComplexSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TennisComplexSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TennisComplex)
	}
	return nil
}

var _ TennisComplex = &tennisComplexStruct{}

// Data type: Text.
type Text interface {
	Value() string
	// Unions
	AboutPage_CreativeWork_Text_URL_Union
	AdministrativeArea_GeoShape_Place_Text_Union
	AdministrativeArea_Text_Union
	AlignmentObject_Course_EducationalOccupationalCredential_Text_Union
	AlignmentObject_Course_Text_Union
	Audience_Text_Union
	BankOrCreditUnion_Text_Union
	BedDetails_BedType_Text_Union
	BedType_Text_Union
	Boolean_Number_StructuredValue_Text_Union
	Boolean_Text_URL_Union
	Boolean_Text_Union
	BreadcrumbList_Text_Union
	BroadcastFrequencySpecification_Text_Union
	CarUsageType_Text_Union
	CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union
	CategoryCode_Text_Union
	ComputerLanguage_Text_Union
	CorrectionComment_Text_URL_Union
	Country_Text_Union
	CreativeWork_HowToSection_HowToStep_Text_Union
	CreativeWork_ItemList_Text_Union
	CreativeWork_Text_Union
	DataFeedItem_Text_Thing_Union
	DateTime_Text_URL_Union
	DateTime_Text_Union
	Date_Text_Union
	DayOfWeek_Text_Union
	DefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union
	DefinedTerm_QuantitativeValue_SizeSpecification_Text_Union
	DefinedTerm_Taxon_Text_URL_Union
	DefinedTerm_Text_URL_Union
	DefinedTerm_Text_Union
	DigitalPlatformEnumeration_Text_URL_Union
	Distance_Number_Text_Union
	Distance_Text_Union
	DriveWheelConfigurationValue_Text_Union
	DrugLegalStatus_MedicalEnumeration_Text_Union
	DrugPrescriptionStatus_Text_Union
	Duration_Text_Union
	EducationalOccupationalCredential_Text_URL_Union
	EducationalOccupationalCredential_Text_Union
	EventStatusType_MedicalStudyStatus_Text_Union
	GameAvailabilityEnumeration_Text_Union
	GenderType_Text_Union
	GeoShape_Place_Text_Union
	GovernmentBenefitsType_Text_Union
	HowToSupply_Text_Union
	HowToTool_Text_Union
	Integer_Text_Union
	ItemListOrderType_Text_Union
	ItemList_ListItem_Text_WebContent_Union
	Language_Text_Union
	ListItem_Text_Thing_Union
	MediaObject_Text_Union
	MedicalContraindication_Text_Union
	MedicalEntity_Text_Union
	MedicalEnumeration_Text_Union
	Menu_Text_URL_Union
	MonetaryAmount_Text_Union
	Number_PriceSpecification_Text_Union
	Number_QualitativeValue_Text_Union
	Number_QuantitativeValue_Text_Union
	Number_Text_Union
	OccupationalExperienceRequirements_Text_Union
	PaymentStatusType_Text_Union
	Place_PostalAddress_Text_Union
	Place_PostalAddress_Text_VirtualLocation_Union
	PostalAddress_Text_Union
	PriceTypeEnumeration_Text_Union
	ProductModel_Text_Union
	Product_Text_URL_Union
	Product_Text_Union
	PropertyValue_Text_URL_Union
	PropertyValue_Text_Union
	QualitativeValue_Text_URL_Union
	QualitativeValue_Text_Union
	QuantitativeValue_Text_Union
	Rating_Text_Union
	SizeGroupEnumeration_Text_Union
	SizeSystemEnumeration_Text_Union
	SolveMathAction_Text_Union
	Taxon_Text_URL_Union
	Text_Thing_URL_Union
	Text_Thing_Union
	Text_URL_Union
	Text_Vehicle_Union
}
type textStruct struct {
	value string
}

func (s *textStruct) implementsAboutPage_CreativeWork_Text_URL_Union()        {}
func (s *textStruct) implementsAdministrativeArea_GeoShape_Place_Text_Union() {}
func (s *textStruct) implementsAdministrativeArea_Text_Union()                {}
func (s *textStruct) implementsAlignmentObject_Course_EducationalOccupationalCredential_Text_Union() {
}
func (s *textStruct) implementsAlignmentObject_Course_Text_Union()                          {}
func (s *textStruct) implementsAudience_Text_Union()                                        {}
func (s *textStruct) implementsBankOrCreditUnion_Text_Union()                               {}
func (s *textStruct) implementsBedDetails_BedType_Text_Union()                              {}
func (s *textStruct) implementsBedType_Text_Union()                                         {}
func (s *textStruct) implementsBoolean_Number_StructuredValue_Text_Union()                  {}
func (s *textStruct) implementsBoolean_Text_URL_Union()                                     {}
func (s *textStruct) implementsBoolean_Text_Union()                                         {}
func (s *textStruct) implementsBreadcrumbList_Text_Union()                                  {}
func (s *textStruct) implementsBroadcastFrequencySpecification_Text_Union()                 {}
func (s *textStruct) implementsCarUsageType_Text_Union()                                    {}
func (s *textStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {}
func (s *textStruct) implementsCategoryCode_Text_Union()                                    {}
func (s *textStruct) implementsComputerLanguage_Text_Union()                                {}
func (s *textStruct) implementsCorrectionComment_Text_URL_Union()                           {}
func (s *textStruct) implementsCountry_Text_Union()                                         {}
func (s *textStruct) implementsCreativeWork_HowToSection_HowToStep_Text_Union()             {}
func (s *textStruct) implementsCreativeWork_ItemList_Text_Union()                           {}
func (s *textStruct) implementsCreativeWork_Text_Union()                                    {}
func (s *textStruct) implementsDataFeedItem_Text_Thing_Union()                              {}
func (s *textStruct) implementsDateTime_Text_URL_Union()                                    {}
func (s *textStruct) implementsDateTime_Text_Union()                                        {}
func (s *textStruct) implementsDate_Text_Union()                                            {}
func (s *textStruct) implementsDayOfWeek_Text_Union()                                       {}
func (s *textStruct) implementsDefinedTerm_Enumeration_MeasurementTypeEnumeration_PropertyValue_QualitativeValue_QuantitativeValue_StructuredValue_Text_Union() {
}
func (s *textStruct) implementsDefinedTerm_QuantitativeValue_SizeSpecification_Text_Union() {}
func (s *textStruct) implementsDefinedTerm_Taxon_Text_URL_Union()                           {}
func (s *textStruct) implementsDefinedTerm_Text_URL_Union()                                 {}
func (s *textStruct) implementsDefinedTerm_Text_Union()                                     {}
func (s *textStruct) implementsDigitalPlatformEnumeration_Text_URL_Union()                  {}
func (s *textStruct) implementsDistance_Number_Text_Union()                                 {}
func (s *textStruct) implementsDistance_Text_Union()                                        {}
func (s *textStruct) implementsDriveWheelConfigurationValue_Text_Union()                    {}
func (s *textStruct) implementsDrugLegalStatus_MedicalEnumeration_Text_Union()              {}
func (s *textStruct) implementsDrugPrescriptionStatus_Text_Union()                          {}
func (s *textStruct) implementsDuration_Text_Union()                                        {}
func (s *textStruct) implementsEducationalOccupationalCredential_Text_URL_Union()           {}
func (s *textStruct) implementsEducationalOccupationalCredential_Text_Union()               {}
func (s *textStruct) implementsEventStatusType_MedicalStudyStatus_Text_Union()              {}
func (s *textStruct) implementsGameAvailabilityEnumeration_Text_Union()                     {}
func (s *textStruct) implementsGenderType_Text_Union()                                      {}
func (s *textStruct) implementsGeoShape_Place_Text_Union()                                  {}
func (s *textStruct) implementsGovernmentBenefitsType_Text_Union()                          {}
func (s *textStruct) implementsHowToSupply_Text_Union()                                     {}
func (s *textStruct) implementsHowToTool_Text_Union()                                       {}
func (s *textStruct) implementsInteger_Text_Union()                                         {}
func (s *textStruct) implementsItemListOrderType_Text_Union()                               {}
func (s *textStruct) implementsItemList_ListItem_Text_WebContent_Union()                    {}
func (s *textStruct) implementsLanguage_Text_Union()                                        {}
func (s *textStruct) implementsListItem_Text_Thing_Union()                                  {}
func (s *textStruct) implementsMediaObject_Text_Union()                                     {}
func (s *textStruct) implementsMedicalContraindication_Text_Union()                         {}
func (s *textStruct) implementsMedicalEntity_Text_Union()                                   {}
func (s *textStruct) implementsMedicalEnumeration_Text_Union()                              {}
func (s *textStruct) implementsMenu_Text_URL_Union()                                        {}
func (s *textStruct) implementsMonetaryAmount_Text_Union()                                  {}
func (s *textStruct) implementsNumber_PriceSpecification_Text_Union()                       {}
func (s *textStruct) implementsNumber_QualitativeValue_Text_Union()                         {}
func (s *textStruct) implementsNumber_QuantitativeValue_Text_Union()                        {}
func (s *textStruct) implementsNumber_Text_Union()                                          {}
func (s *textStruct) implementsOccupationalExperienceRequirements_Text_Union()              {}
func (s *textStruct) implementsPaymentStatusType_Text_Union()                               {}
func (s *textStruct) implementsPlace_PostalAddress_Text_Union()                             {}
func (s *textStruct) implementsPlace_PostalAddress_Text_VirtualLocation_Union()             {}
func (s *textStruct) implementsPostalAddress_Text_Union()                                   {}
func (s *textStruct) implementsPriceTypeEnumeration_Text_Union()                            {}
func (s *textStruct) implementsProductModel_Text_Union()                                    {}
func (s *textStruct) implementsProduct_Text_URL_Union()                                     {}
func (s *textStruct) implementsProduct_Text_Union()                                         {}
func (s *textStruct) implementsPropertyValue_Text_URL_Union()                               {}
func (s *textStruct) implementsPropertyValue_Text_Union()                                   {}
func (s *textStruct) implementsQualitativeValue_Text_URL_Union()                            {}
func (s *textStruct) implementsQualitativeValue_Text_Union()                                {}
func (s *textStruct) implementsQuantitativeValue_Text_Union()                               {}
func (s *textStruct) implementsRating_Text_Union()                                          {}
func (s *textStruct) implementsSizeGroupEnumeration_Text_Union()                            {}
func (s *textStruct) implementsSizeSystemEnumeration_Text_Union()                           {}
func (s *textStruct) implementsSolveMathAction_Text_Union()                                 {}
func (s *textStruct) implementsTaxon_Text_URL_Union()                                       {}
func (s *textStruct) implementsText_Thing_URL_Union()                                       {}
func (s *textStruct) implementsText_Thing_Union()                                           {}
func (s *textStruct) implementsText_URL_Union()                                             {}
func (s *textStruct) implementsText_Vehicle_Union()                                         {}

func (s *textStruct) Value() string {
	return s.value
}
func (s *textStruct) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &s.value)
}
func (s *textStruct) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.value)
}

type TextSlice []Text

func (s *TextSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{ExpectText: true})
	if err != nil {
		return err
	}
	*s = make(TextSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Text)
	}
	return nil
}

var _ Text = &textStruct{}

// A file composed primarily of text.
type TextDigitalDocument interface {
	// Parents
	DigitalDocument
}
type textDigitalDocumentStruct struct {
	digitalDocumentStruct
}
type TextDigitalDocumentSlice []TextDigitalDocument

func (s *TextDigitalDocumentSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TextDigitalDocumentSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TextDigitalDocument)
	}
	return nil
}

var _ TextDigitalDocument = &textDigitalDocumentStruct{}

// Event type: Theater performance.
type TheaterEvent interface {
	// Parents
	Event
}
type theaterEventStruct struct {
	eventStruct
}
type TheaterEventSlice []TheaterEvent

func (s *TheaterEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TheaterEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TheaterEvent)
	}
	return nil
}

var _ TheaterEvent = &theaterEventStruct{}

// A theater group or company, for example, the Royal Shakespeare Company or Druid Theatre.
type TheaterGroup interface {
	// Parents
	PerformingGroup
}
type theaterGroupStruct struct {
	performingGroupStruct
}
type TheaterGroupSlice []TheaterGroup

func (s *TheaterGroupSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TheaterGroupSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TheaterGroup)
	}
	return nil
}

var _ TheaterGroup = &theaterGroupStruct{}

// A medical procedure intended primarily for therapeutic purposes, aimed at improving a health condition.
type TherapeuticProcedure interface {
	// Parents
	MedicalProcedure
	// Accessors
	AdverseOutcome() []MedicalEntity // A possible complication and/or side effect of this therapy. If it is known that an adverse outcome is serious (resulting in death, disability, or permanent damage; requiring hospitalization; or is otherwise life-threatening or requires immediate medical attention), tag it as a seriouseAdverseOutcome instead.
	DoseSchedule() []DoseSchedule    // A dosing schedule for the drug for a given population, either observed, recommended, or maximum dose based on the type used.
	Drug() []Drug                    // Specifying a drug or medicine used in a medication procedure.
}
type therapeuticProcedureStruct struct {
	medicalProcedureStruct

	AdverseOutcome_ MedicalEntitySlice `json:"adverseOutcome,omitempty"`
	DoseSchedule_   DoseScheduleSlice  `json:"doseSchedule,omitempty"`
	Drug_           DrugSlice          `json:"drug,omitempty"`
}

func (s *therapeuticProcedureStruct) AdverseOutcome() []MedicalEntity {
	return s.AdverseOutcome_
}
func (s *therapeuticProcedureStruct) DoseSchedule() []DoseSchedule {
	return s.DoseSchedule_
}
func (s *therapeuticProcedureStruct) Drug() []Drug {
	return s.Drug_
}

type TherapeuticProcedureSlice []TherapeuticProcedure

func (s *TherapeuticProcedureSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TherapeuticProcedureSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TherapeuticProcedure)
	}
	return nil
}

var _ TherapeuticProcedure = &therapeuticProcedureStruct{}

// A thesis or dissertation document submitted in support of candidature for an academic degree or professional qualification.
type Thesis interface {
	// Parents
	CreativeWork
	// Accessors
	InSupportOf() []Text // Qualification, candidature, degree, application that Thesis supports.
}
type thesisStruct struct {
	creativeWorkStruct

	InSupportOf_ TextSlice `json:"inSupportOf,omitempty"`
}

func (s *thesisStruct) InSupportOf() []Text {
	return s.InSupportOf_
}

type ThesisSlice []Thesis

func (s *ThesisSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ThesisSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Thesis)
	}
	return nil
}

var _ Thesis = &thesisStruct{}

// The most generic type of item.
type Thing interface {
	// Unions
	CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union
	DataFeedItem_Text_Thing_Union
	ListItem_Text_Thing_Union
	Text_Thing_URL_Union
	Text_Thing_Union
	// Accessors
	AdditionalType() []URL                      // An additional type for the item, typically used for adding more specific types from external vocabularies in microdata syntax. This is a relationship between something and a class that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof' attribute - for multiple types. Schema.org tools may have only weaker understanding of extra types, in particular those defined externally.
	AlternateName() []Text                      // An alias for the item.
	Description() []Text                        // A description of the item.
	DisambiguatingDescription() []Text          // A sub property of description. A short description of the item used to disambiguate from other, similar items. Information from other properties (in particular, name) may be necessary for the description to be useful for disambiguation.
	Identifier() []PropertyValue_Text_URL_Union /*
	The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.

	*/
	Image() []ImageObject_URL_Union             // An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
	MainEntityOfPage() []CreativeWork_URL_Union // Indicates a page (or other CreativeWork) for which this thing is the main entity being described. See [background notes](/docs/datamodel.html#mainEntityBackground) for details.
	Name() []Text                               // The name of the item.
	PotentialAction() []Action                  // Indicates a potential Action, which describes an idealized action in which this thing would play an 'object' role.
	SameAs() []URL                              // URL of a reference Web page that unambiguously indicates the item's identity. E.g. the URL of the item's Wikipedia page, Wikidata entry, or official website.
	SubjectOf() []CreativeWork_Event_Union      // A CreativeWork or Event about this Thing.
	Url() []URL                                 // URL of the item.
}
type thingStruct struct {
	AdditionalType_            URLSlice                          `json:"additionalType,omitempty"`
	AlternateName_             TextSlice                         `json:"alternateName,omitempty"`
	Description_               TextSlice                         `json:"description,omitempty"`
	DisambiguatingDescription_ TextSlice                         `json:"disambiguatingDescription,omitempty"`
	Identifier_                PropertyValue_Text_URL_UnionSlice `json:"identifier,omitempty"`
	Image_                     ImageObject_URL_UnionSlice        `json:"image,omitempty"`
	MainEntityOfPage_          CreativeWork_URL_UnionSlice       `json:"mainEntityOfPage,omitempty"`
	Name_                      TextSlice                         `json:"name,omitempty"`
	PotentialAction_           ActionSlice                       `json:"potentialAction,omitempty"`
	SameAs_                    URLSlice                          `json:"sameAs,omitempty"`
	SubjectOf_                 CreativeWork_Event_UnionSlice     `json:"subjectOf,omitempty"`
	Url_                       URLSlice                          `json:"url,omitempty"`
}

func (s *thingStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {}
func (s *thingStruct) implementsDataFeedItem_Text_Thing_Union()                              {}
func (s *thingStruct) implementsListItem_Text_Thing_Union()                                  {}
func (s *thingStruct) implementsText_Thing_URL_Union()                                       {}
func (s *thingStruct) implementsText_Thing_Union()                                           {}

func (s *thingStruct) AdditionalType() []URL {
	return s.AdditionalType_
}
func (s *thingStruct) AlternateName() []Text {
	return s.AlternateName_
}
func (s *thingStruct) Description() []Text {
	return s.Description_
}
func (s *thingStruct) DisambiguatingDescription() []Text {
	return s.DisambiguatingDescription_
}
func (s *thingStruct) Identifier() []PropertyValue_Text_URL_Union {
	return s.Identifier_
}
func (s *thingStruct) Image() []ImageObject_URL_Union {
	return s.Image_
}
func (s *thingStruct) MainEntityOfPage() []CreativeWork_URL_Union {
	return s.MainEntityOfPage_
}
func (s *thingStruct) Name() []Text {
	return s.Name_
}
func (s *thingStruct) PotentialAction() []Action {
	return s.PotentialAction_
}
func (s *thingStruct) SameAs() []URL {
	return s.SameAs_
}
func (s *thingStruct) SubjectOf() []CreativeWork_Event_Union {
	return s.SubjectOf_
}
func (s *thingStruct) Url() []URL {
	return s.Url_
}

type ThingSlice []Thing

func (s *ThingSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ThingSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Thing)
	}
	return nil
}

var _ Thing = &thingStruct{}

// Used to describe a ticket to an event, a flight, a bus ride, etc.
type Ticket interface {
	// Parents
	Intangible
	// Accessors
	DateIssued() []Date_DateTime_Union                  // The date the ticket was issued.
	IssuedBy() []Organization                           // The organization issuing the ticket or permit.
	PriceCurrency() []Text                              // The currency of the price, or a price component when attached to [[PriceSpecification]] and its subtypes.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	TicketNumber() []Text                               // The unique identifier for the ticket.
	TicketToken() []Text_URL_Union                      // Reference to an asset (e.g., Barcode, QR code image or PDF) usable for entrance.
	TicketedSeat() []Seat                               // The seat associated with the ticket.
	TotalPrice() []Number_PriceSpecification_Text_Union // The total price for the reservation or ticket, including applicable taxes, shipping, etc.\n\nUsage guidelines:\n\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.
	UnderName() []Organization_Person_Union             // The person or organization the reservation or ticket is for.
}
type ticketStruct struct {
	intangibleStruct

	DateIssued_    Date_DateTime_UnionSlice                  `json:"dateIssued,omitempty"`
	IssuedBy_      OrganizationSlice                         `json:"issuedBy,omitempty"`
	PriceCurrency_ TextSlice                                 `json:"priceCurrency,omitempty"`
	TicketNumber_  TextSlice                                 `json:"ticketNumber,omitempty"`
	TicketToken_   Text_URL_UnionSlice                       `json:"ticketToken,omitempty"`
	TicketedSeat_  SeatSlice                                 `json:"ticketedSeat,omitempty"`
	TotalPrice_    Number_PriceSpecification_Text_UnionSlice `json:"totalPrice,omitempty"`
	UnderName_     Organization_Person_UnionSlice            `json:"underName,omitempty"`
}

func (s *ticketStruct) DateIssued() []Date_DateTime_Union {
	return s.DateIssued_
}
func (s *ticketStruct) IssuedBy() []Organization {
	return s.IssuedBy_
}
func (s *ticketStruct) PriceCurrency() []Text {
	return s.PriceCurrency_
}
func (s *ticketStruct) TicketNumber() []Text {
	return s.TicketNumber_
}
func (s *ticketStruct) TicketToken() []Text_URL_Union {
	return s.TicketToken_
}
func (s *ticketStruct) TicketedSeat() []Seat {
	return s.TicketedSeat_
}
func (s *ticketStruct) TotalPrice() []Number_PriceSpecification_Text_Union {
	return s.TotalPrice_
}
func (s *ticketStruct) UnderName() []Organization_Person_Union {
	return s.UnderName_
}

type TicketSlice []Ticket

func (s *TicketSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TicketSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Ticket)
	}
	return nil
}

var _ Ticket = &ticketStruct{}

// The act of reaching a draw in a competitive activity.
type TieAction interface {
	// Parents
	AchieveAction
}
type tieActionStruct struct {
	achieveActionStruct
}
type TieActionSlice []TieAction

func (s *TieActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TieActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TieAction)
	}
	return nil
}

var _ TieAction = &tieActionStruct{}

// A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML schema for details](http://www.w3.org/TR/xmlschema-2/#time)).
type Time interface {
	Value() string
	// Unions
	DateTime_Time_Union
	Date_DateTime_Time_Union
}
type timeStruct struct {
	value string
}

func (s *timeStruct) implementsDateTime_Time_Union()      {}
func (s *timeStruct) implementsDate_DateTime_Time_Union() {}

func (s *timeStruct) Value() string {
	return s.value
}
func (s *timeStruct) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &s.value)
}
func (s *timeStruct) MarshalJSON() ([]byte, error) {
	return json.Marshal(s.value)
}

type TimeSlice []Time

func (s *TimeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{ExpectTime: true})
	if err != nil {
		return err
	}
	*s = make(TimeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Time)
	}
	return nil
}

var _ Time = &timeStruct{}

// The act of giving money voluntarily to a beneficiary in recognition of services rendered.
type TipAction interface {
	// Parents
	TradeAction
	// Accessors
	Recipient() []Audience_ContactPoint_Organization_Person_Union // A sub property of participant. The participant who is at the receiving end of the action.
}
type tipActionStruct struct {
	tradeActionStruct

	Recipient_ Audience_ContactPoint_Organization_Person_UnionSlice `json:"recipient,omitempty"`
}

func (s *tipActionStruct) Recipient() []Audience_ContactPoint_Organization_Person_Union {
	return s.Recipient_
}

type TipActionSlice []TipAction

func (s *TipActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TipActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TipAction)
	}
	return nil
}

var _ TipAction = &tipActionStruct{}

// A tire shop.
type TireShop interface {
	// Parents
	Store
}
type tireShopStruct struct {
	storeStruct
}
type TireShopSlice []TireShop

func (s *TireShopSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TireShopSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TireShop)
	}
	return nil
}

var _ TireShop = &tireShopStruct{}

// A tourist attraction.  In principle any Thing can be a [[TouristAttraction]], from a [[Mountain]] and [[LandmarksOrHistoricalBuildings]] to a [[LocalBusiness]].  This Type can be used on its own to describe a general [[TouristAttraction]], or be used as an [[additionalType]] to add tourist attraction properties to any other type.  (See examples below)
type TouristAttraction interface {
	// Parents
	Place
	// Accessors
	AvailableLanguage() []Language_Text_Union // A language someone may use with or at the item, service or place. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[inLanguage]]
	TouristType() []Audience_Text_Union       // Attraction suitable for type(s) of tourist. eg. Children, visitors from a particular country, etc.
}
type touristAttractionStruct struct {
	placeStruct

	AvailableLanguage_ Language_Text_UnionSlice `json:"availableLanguage,omitempty"`
	TouristType_       Audience_Text_UnionSlice `json:"touristType,omitempty"`
}

func (s *touristAttractionStruct) AvailableLanguage() []Language_Text_Union {
	return s.AvailableLanguage_
}
func (s *touristAttractionStruct) TouristType() []Audience_Text_Union {
	return s.TouristType_
}

type TouristAttractionSlice []TouristAttraction

func (s *TouristAttractionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TouristAttractionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TouristAttraction)
	}
	return nil
}

var _ TouristAttraction = &touristAttractionStruct{}

/*
A tourist destination. In principle any [[Place]] can be a [[TouristDestination]] from a [[City]], Region or [[Country]] to an [[AmusementPark]] or [[Hotel]]. This Type can be used on its own to describe a general [[TouristDestination]], or be used as an [[additionalType]] to add tourist relevant properties to any other [[Place]].  A [[TouristDestination]] is defined as a [[Place]] that contains, or is colocated with, one or more [[TouristAttraction]]s, often linked by a similar theme or interest to a particular [[touristType]]. The [UNWTO](http://www2.unwto.org/) defines Destination (main destination of a tourism trip) as the place visited that is central to the decision to take the trip.
  (See examples below).
*/
type TouristDestination interface {
	// Parents
	Place
	// Accessors
	IncludesAttraction() []TouristAttraction // Attraction located at destination.
	TouristType() []Audience_Text_Union      // Attraction suitable for type(s) of tourist. eg. Children, visitors from a particular country, etc.
}
type touristDestinationStruct struct {
	placeStruct

	IncludesAttraction_ TouristAttractionSlice   `json:"includesAttraction,omitempty"`
	TouristType_        Audience_Text_UnionSlice `json:"touristType,omitempty"`
}

func (s *touristDestinationStruct) IncludesAttraction() []TouristAttraction {
	return s.IncludesAttraction_
}
func (s *touristDestinationStruct) TouristType() []Audience_Text_Union {
	return s.TouristType_
}

type TouristDestinationSlice []TouristDestination

func (s *TouristDestinationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TouristDestinationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TouristDestination)
	}
	return nil
}

var _ TouristDestination = &touristDestinationStruct{}

// A tourist information center.
type TouristInformationCenter interface {
	// Parents
	LocalBusiness
}
type touristInformationCenterStruct struct {
	localBusinessStruct
}
type TouristInformationCenterSlice []TouristInformationCenter

func (s *TouristInformationCenterSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TouristInformationCenterSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TouristInformationCenter)
	}
	return nil
}

var _ TouristInformationCenter = &touristInformationCenterStruct{}

/*
A tourist trip. A created itinerary of visits to one or more places of interest ([[TouristAttraction]]/[[TouristDestination]]) often linked by a similar theme, geographic area, or interest to a particular [[touristType]]. The [UNWTO](http://www2.unwto.org/) defines tourism trip as the Trip taken by visitors.
  (See examples below).
*/
type TouristTrip interface {
	// Parents
	Trip
	// Accessors
	TouristType() []Audience_Text_Union // Attraction suitable for type(s) of tourist. eg. Children, visitors from a particular country, etc.
}
type touristTripStruct struct {
	tripStruct

	TouristType_ Audience_Text_UnionSlice `json:"touristType,omitempty"`
}

func (s *touristTripStruct) TouristType() []Audience_Text_Union {
	return s.TouristType_
}

type TouristTripSlice []TouristTrip

func (s *TouristTripSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TouristTripSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TouristTrip)
	}
	return nil
}

var _ TouristTrip = &touristTripStruct{}

// A toy store.
type ToyStore interface {
	// Parents
	Store
}
type toyStoreStruct struct {
	storeStruct
}
type ToyStoreSlice []ToyStore

func (s *ToyStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ToyStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ToyStore)
	}
	return nil
}

var _ ToyStore = &toyStoreStruct{}

// An agent tracks an object for updates.\n\nRelated actions:\n\n* [[FollowAction]]: Unlike FollowAction, TrackAction refers to the interest on the location of innanimates objects.\n* [[SubscribeAction]]: Unlike SubscribeAction, TrackAction refers to  the interest on the location of innanimate objects.
type TrackAction interface {
	// Parents
	FindAction
	// Accessors
	DeliveryMethod() []DeliveryMethod // A sub property of instrument. The method of delivery.
}
type trackActionStruct struct {
	findActionStruct

	DeliveryMethod_ DeliveryMethodSlice `json:"deliveryMethod,omitempty"`
}

func (s *trackActionStruct) DeliveryMethod() []DeliveryMethod {
	return s.DeliveryMethod_
}

type TrackActionSlice []TrackAction

func (s *TrackActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TrackActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TrackAction)
	}
	return nil
}

var _ TrackAction = &trackActionStruct{}

// The act of participating in an exchange of goods and services for monetary compensation. An agent trades an object, product or service with a participant in exchange for a one time or periodic payment.
type TradeAction interface {
	// Parents
	Action
	// Accessors
	Price() []Number_Text_Union /*
	The offer price of a product, or of a price component when attached to PriceSpecification and its subtypes.\n\nUsage guidelines:\n\n* Use the [[priceCurrency]] property (with standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR") instead of including [ambiguous symbols](http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign) such as '$' in the value.\n* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid using these symbols as a readability separator.\n* Note that both [RDFa](http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute) and Microdata syntax allow the use of a "content=" attribute for publishing simple machine-readable values alongside more human-friendly formatting.\n* Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similiar Unicode symbols.

	*/
	PriceCurrency() []Text                    // The currency of the price, or a price component when attached to [[PriceSpecification]] and its subtypes.\n\nUse standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217) e.g. "USD"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies e.g. "BTC"; well known names for [Local Exchange Tradings Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system) (LETS) and other currency types e.g. "Ithaca HOUR".
	PriceSpecification() []PriceSpecification // One or more detailed price specifications, indicating the unit price and delivery or payment charges.
}
type tradeActionStruct struct {
	actionStruct

	Price_              Number_Text_UnionSlice  `json:"price,omitempty"`
	PriceCurrency_      TextSlice               `json:"priceCurrency,omitempty"`
	PriceSpecification_ PriceSpecificationSlice `json:"priceSpecification,omitempty"`
}

func (s *tradeActionStruct) Price() []Number_Text_Union {
	return s.Price_
}
func (s *tradeActionStruct) PriceCurrency() []Text {
	return s.PriceCurrency_
}
func (s *tradeActionStruct) PriceSpecification() []PriceSpecification {
	return s.PriceSpecification_
}

type TradeActionSlice []TradeAction

func (s *TradeActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TradeActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TradeAction)
	}
	return nil
}

var _ TradeAction = &tradeActionStruct{}

// A reservation for train travel.\n\nNote: This type is for information about actual reservations, e.g. in confirmation emails or HTML pages with individual confirmations of reservations. For offers of tickets, use [[Offer]].
type TrainReservation interface {
	// Parents
	Reservation
}
type trainReservationStruct struct {
	reservationStruct
}
type TrainReservationSlice []TrainReservation

func (s *TrainReservationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TrainReservationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TrainReservation)
	}
	return nil
}

var _ TrainReservation = &trainReservationStruct{}

// A train station.
type TrainStation interface {
	// Parents
	CivicStructure
}
type trainStationStruct struct {
	civicStructureStruct
}
type TrainStationSlice []TrainStation

func (s *TrainStationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TrainStationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TrainStation)
	}
	return nil
}

var _ TrainStation = &trainStationStruct{}

// A trip on a commercial train line.
type TrainTrip interface {
	// Parents
	Trip
	// Accessors
	ArrivalPlatform() []Text          // The platform where the train arrives.
	ArrivalStation() []TrainStation   // The station where the train trip ends.
	DeparturePlatform() []Text        // The platform from which the train departs.
	DepartureStation() []TrainStation // The station from which the train departs.
	TrainName() []Text                // The name of the train (e.g. The Orient Express).
	TrainNumber() []Text              // The unique identifier for the train.
}
type trainTripStruct struct {
	tripStruct

	ArrivalPlatform_   TextSlice         `json:"arrivalPlatform,omitempty"`
	ArrivalStation_    TrainStationSlice `json:"arrivalStation,omitempty"`
	DeparturePlatform_ TextSlice         `json:"departurePlatform,omitempty"`
	DepartureStation_  TrainStationSlice `json:"departureStation,omitempty"`
	TrainName_         TextSlice         `json:"trainName,omitempty"`
	TrainNumber_       TextSlice         `json:"trainNumber,omitempty"`
}

func (s *trainTripStruct) ArrivalPlatform() []Text {
	return s.ArrivalPlatform_
}
func (s *trainTripStruct) ArrivalStation() []TrainStation {
	return s.ArrivalStation_
}
func (s *trainTripStruct) DeparturePlatform() []Text {
	return s.DeparturePlatform_
}
func (s *trainTripStruct) DepartureStation() []TrainStation {
	return s.DepartureStation_
}
func (s *trainTripStruct) TrainName() []Text {
	return s.TrainName_
}
func (s *trainTripStruct) TrainNumber() []Text {
	return s.TrainNumber_
}

type TrainTripSlice []TrainTrip

func (s *TrainTripSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TrainTripSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TrainTrip)
	}
	return nil
}

var _ TrainTrip = &trainTripStruct{}

// The act of transferring/moving (abstract or concrete) animate or inanimate objects from one place to another.
type TransferAction interface {
	// Parents
	Action
	// Accessors
	FromLocation() []Place // A sub property of location. The original location of the object or the agent before the action.
	ToLocation() []Place   // A sub property of location. The final location of the object or the agent after the action.
}
type transferActionStruct struct {
	actionStruct

	FromLocation_ PlaceSlice `json:"fromLocation,omitempty"`
	ToLocation_   PlaceSlice `json:"toLocation,omitempty"`
}

func (s *transferActionStruct) FromLocation() []Place {
	return s.FromLocation_
}
func (s *transferActionStruct) ToLocation() []Place {
	return s.ToLocation_
}

type TransferActionSlice []TransferAction

func (s *TransferActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TransferActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TransferAction)
	}
	return nil
}

var _ TransferAction = &transferActionStruct{}

// The act of traveling from an fromLocation to a destination by a specified mode of transport, optionally with participants.
type TravelAction interface {
	// Parents
	MoveAction
	// Accessors
	Distance() []Distance // The distance travelled, e.g. exercising or travelling.
}
type travelActionStruct struct {
	moveActionStruct

	Distance_ DistanceSlice `json:"distance,omitempty"`
}

func (s *travelActionStruct) Distance() []Distance {
	return s.Distance_
}

type TravelActionSlice []TravelAction

func (s *TravelActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TravelActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TravelAction)
	}
	return nil
}

var _ TravelAction = &travelActionStruct{}

// A travel agency.
type TravelAgency interface {
	// Parents
	LocalBusiness
}
type travelAgencyStruct struct {
	localBusinessStruct
}
type TravelAgencySlice []TravelAgency

func (s *TravelAgencySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TravelAgencySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TravelAgency)
	}
	return nil
}

var _ TravelAgency = &travelAgencyStruct{}

// An indication for treating an underlying condition, symptom, etc.
type TreatmentIndication interface {
	// Parents
	MedicalIndication
}
type treatmentIndicationStruct struct {
	medicalIndicationStruct
}
type TreatmentIndicationSlice []TreatmentIndication

func (s *TreatmentIndicationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TreatmentIndicationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TreatmentIndication)
	}
	return nil
}

var _ TreatmentIndication = &treatmentIndicationStruct{}

// A trip or journey. An itinerary of visits to one or more places.
type Trip interface {
	// Parents
	Intangible
	// Unions
	AggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union
	// Accessors
	ArrivalTime() []DateTime_Time_Union   // The expected arrival time.
	DepartureTime() []DateTime_Time_Union // The expected departure time.
	Itinerary() []ItemList_Place_Union    // Destination(s) ( [[Place]] ) that make up a trip. For a trip where destination order is important use [[ItemList]] to specify that order (see examples).
	Offers() []Demand_Offer_Union         /*
	An offer to provide this item&#x2014;for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a [[Demand]]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.

	*/
	PartOfTrip() []Trip                    // Identifies that this [[Trip]] is a subTrip of another Trip.  For example Day 1, Day 2, etc. of a multi-day trip.
	Provider() []Organization_Person_Union // The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
	SubTrip() []Trip                       // Identifies a [[Trip]] that is a subTrip of this Trip.  For example Day 1, Day 2, etc. of a multi-day trip.
}
type tripStruct struct {
	intangibleStruct

	ArrivalTime_   DateTime_Time_UnionSlice       `json:"arrivalTime,omitempty"`
	DepartureTime_ DateTime_Time_UnionSlice       `json:"departureTime,omitempty"`
	Itinerary_     ItemList_Place_UnionSlice      `json:"itinerary,omitempty"`
	Offers_        Demand_Offer_UnionSlice        `json:"offers,omitempty"`
	PartOfTrip_    TripSlice                      `json:"partOfTrip,omitempty"`
	Provider_      Organization_Person_UnionSlice `json:"provider,omitempty"`
	SubTrip_       TripSlice                      `json:"subTrip,omitempty"`
}

func (s *tripStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
}

func (s *tripStruct) ArrivalTime() []DateTime_Time_Union {
	return s.ArrivalTime_
}
func (s *tripStruct) DepartureTime() []DateTime_Time_Union {
	return s.DepartureTime_
}
func (s *tripStruct) Itinerary() []ItemList_Place_Union {
	return s.Itinerary_
}
func (s *tripStruct) Offers() []Demand_Offer_Union {
	return s.Offers_
}
func (s *tripStruct) PartOfTrip() []Trip {
	return s.PartOfTrip_
}
func (s *tripStruct) Provider() []Organization_Person_Union {
	return s.Provider_
}
func (s *tripStruct) SubTrip() []Trip {
	return s.SubTrip_
}

type TripSlice []Trip

func (s *TripSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TripSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Trip)
	}
	return nil
}

var _ Trip = &tripStruct{}

// A structured value indicating the quantity, unit of measurement, and business function of goods included in a bundle offer.
type TypeAndQuantityNode interface {
	// Parents
	StructuredValue
	// Accessors
	AmountOfThisGood() []Number           // The quantity of the goods included in the offer.
	BusinessFunction() []BusinessFunction // The business function (e.g. sell, lease, repair, dispose) of the offer or component of a bundle (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell.
	TypeOfGood() []Product_Service_Union  // The product that this structured value is referring to.
	UnitCode() []Text_URL_Union           // The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.
	UnitText() []Text                     /*
	A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for
	<a href='unitCode'>unitCode</a>.
	*/
}
type typeAndQuantityNodeStruct struct {
	structuredValueStruct

	AmountOfThisGood_ NumberSlice                `json:"amountOfThisGood,omitempty"`
	BusinessFunction_ BusinessFunctionSlice      `json:"businessFunction,omitempty"`
	TypeOfGood_       Product_Service_UnionSlice `json:"typeOfGood,omitempty"`
	UnitCode_         Text_URL_UnionSlice        `json:"unitCode,omitempty"`
	UnitText_         TextSlice                  `json:"unitText,omitempty"`
}

func (s *typeAndQuantityNodeStruct) AmountOfThisGood() []Number {
	return s.AmountOfThisGood_
}
func (s *typeAndQuantityNodeStruct) BusinessFunction() []BusinessFunction {
	return s.BusinessFunction_
}
func (s *typeAndQuantityNodeStruct) TypeOfGood() []Product_Service_Union {
	return s.TypeOfGood_
}
func (s *typeAndQuantityNodeStruct) UnitCode() []Text_URL_Union {
	return s.UnitCode_
}
func (s *typeAndQuantityNodeStruct) UnitText() []Text {
	return s.UnitText_
}

type TypeAndQuantityNodeSlice []TypeAndQuantityNode

func (s *TypeAndQuantityNodeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(TypeAndQuantityNodeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(TypeAndQuantityNode)
	}
	return nil
}

var _ TypeAndQuantityNode = &typeAndQuantityNodeStruct{}

// UKNonprofitType: Non-profit organization type originating from the United Kingdom.
type UKNonprofitType interface {
	// Parents
	NonprofitType
}
type uKNonprofitTypeStruct struct {
	nonprofitTypeStruct
}
type UKNonprofitTypeSlice []UKNonprofitType

func (s *UKNonprofitTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(UKNonprofitTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(UKNonprofitType)
	}
	return nil
}

var _ UKNonprofitType = &uKNonprofitTypeStruct{}

// Data type: URL.
type URL interface {
	// Parents
	Text
	// Unions
	AboutPage_CreativeWork_Text_URL_Union
	Article_URL_Union
	Boolean_Text_URL_Union
	CategoryCodeSet_URL_Union
	CategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union
	CorrectionComment_Text_URL_Union
	CreativeWorkSeason_URL_Union
	CreativeWork_Product_URL_Union
	CreativeWork_URL_Union
	DataFeed_URL_Union
	Dataset_Observation_URL_WebContent_Union
	DateTime_Text_URL_Union
	DefinedTermSet_URL_Union
	DefinedTerm_PropertyValue_URL_Union
	DefinedTerm_Taxon_Text_URL_Union
	DefinedTerm_Text_URL_Union
	DigitalPlatformEnumeration_Text_URL_Union
	EducationalOccupationalCredential_Text_URL_Union
	ImageObject_URL_Union
	Map_URL_Union
	MediaObject_URL_Union
	MediaObject_URL_WebPage_Union
	MedicalCondition_PropertyValue_URL_Union
	Menu_Text_URL_Union
	Person_URL_Union
	Place_PostalAddress_URL_Union
	Product_Text_URL_Union
	PropertyValue_Text_URL_Union
	QualitativeValue_Text_URL_Union
	SpeakableSpecification_URL_Union
	Taxon_Text_URL_Union
	Text_Thing_URL_Union
	Text_URL_Union
	URL_WebContent_Union
	URL_WebPage_Union
}
type uRLStruct struct {
	textStruct
}

func (s *uRLStruct) implementsAboutPage_CreativeWork_Text_URL_Union()                      {}
func (s *uRLStruct) implementsArticle_URL_Union()                                          {}
func (s *uRLStruct) implementsBoolean_Text_URL_Union()                                     {}
func (s *uRLStruct) implementsCategoryCodeSet_URL_Union()                                  {}
func (s *uRLStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {}
func (s *uRLStruct) implementsCorrectionComment_Text_URL_Union()                           {}
func (s *uRLStruct) implementsCreativeWorkSeason_URL_Union()                               {}
func (s *uRLStruct) implementsCreativeWork_Product_URL_Union()                             {}
func (s *uRLStruct) implementsCreativeWork_URL_Union()                                     {}
func (s *uRLStruct) implementsDataFeed_URL_Union()                                         {}
func (s *uRLStruct) implementsDataset_Observation_URL_WebContent_Union()                   {}
func (s *uRLStruct) implementsDateTime_Text_URL_Union()                                    {}
func (s *uRLStruct) implementsDefinedTermSet_URL_Union()                                   {}
func (s *uRLStruct) implementsDefinedTerm_PropertyValue_URL_Union()                        {}
func (s *uRLStruct) implementsDefinedTerm_Taxon_Text_URL_Union()                           {}
func (s *uRLStruct) implementsDefinedTerm_Text_URL_Union()                                 {}
func (s *uRLStruct) implementsDigitalPlatformEnumeration_Text_URL_Union()                  {}
func (s *uRLStruct) implementsEducationalOccupationalCredential_Text_URL_Union()           {}
func (s *uRLStruct) implementsImageObject_URL_Union()                                      {}
func (s *uRLStruct) implementsMap_URL_Union()                                              {}
func (s *uRLStruct) implementsMediaObject_URL_Union()                                      {}
func (s *uRLStruct) implementsMediaObject_URL_WebPage_Union()                              {}
func (s *uRLStruct) implementsMedicalCondition_PropertyValue_URL_Union()                   {}
func (s *uRLStruct) implementsMenu_Text_URL_Union()                                        {}
func (s *uRLStruct) implementsPerson_URL_Union()                                           {}
func (s *uRLStruct) implementsPlace_PostalAddress_URL_Union()                              {}
func (s *uRLStruct) implementsProduct_Text_URL_Union()                                     {}
func (s *uRLStruct) implementsPropertyValue_Text_URL_Union()                               {}
func (s *uRLStruct) implementsQualitativeValue_Text_URL_Union()                            {}
func (s *uRLStruct) implementsSpeakableSpecification_URL_Union()                           {}
func (s *uRLStruct) implementsTaxon_Text_URL_Union()                                       {}
func (s *uRLStruct) implementsText_Thing_URL_Union()                                       {}
func (s *uRLStruct) implementsText_URL_Union()                                             {}
func (s *uRLStruct) implementsURL_WebContent_Union()                                       {}
func (s *uRLStruct) implementsURL_WebPage_Union()                                          {}

type URLSlice []URL

func (s *URLSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{ExpectURL: true})
	if err != nil {
		return err
	}
	*s = make(URLSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(URL)
	}
	return nil
}

var _ URL = &uRLStruct{}

// USNonprofitType: Non-profit organization type originating from the United States.
type USNonprofitType interface {
	// Parents
	NonprofitType
}
type uSNonprofitTypeStruct struct {
	nonprofitTypeStruct
}
type USNonprofitTypeSlice []USNonprofitType

func (s *USNonprofitTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(USNonprofitTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(USNonprofitType)
	}
	return nil
}

var _ USNonprofitType = &uSNonprofitTypeStruct{}

// The act of un-registering from a service.\n\nRelated actions:\n\n* [[RegisterAction]]: antonym of UnRegisterAction.\n* [[LeaveAction]]: Unlike LeaveAction, UnRegisterAction implies that you are unregistering from a service you werer previously registered, rather than leaving a team/group of people.
type UnRegisterAction interface {
	// Parents
	InteractAction
}
type unRegisterActionStruct struct {
	interactActionStruct
}
type UnRegisterActionSlice []UnRegisterAction

func (s *UnRegisterActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(UnRegisterActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(UnRegisterAction)
	}
	return nil
}

var _ UnRegisterAction = &unRegisterActionStruct{}

// The price asked for a given offer by the respective organization or person.
type UnitPriceSpecification interface {
	// Parents
	PriceSpecification
	// Accessors
	BillingDuration() []Duration_Number_QuantitativeValue_Union // Specifies for how long this price (or price component) will be billed. Can be used, for example, to model the contractual duration of a subscription or payment plan. Type can be either a Duration or a Number (in which case the unit of measurement, for example month, is specified by the unitCode property).
	BillingIncrement() []Number                                 // This property specifies the minimal quantity and rounding increment that will be the basis for the billing. The unit of measurement is specified by the unitCode property.
	BillingStart() []Number                                     // Specifies after how much time this price (or price component) becomes valid and billing starts. Can be used, for example, to model a price increase after the first year of a subscription. The unit of measurement is specified by the unitCode property.
	PriceComponentType() []PriceComponentTypeEnumeration        // Identifies a price component (for example, a line item on an invoice), part of the total price for an offer.
	PriceType() []PriceTypeEnumeration_Text_Union               // Defines the type of a price specified for an offered product, for example a list price, a (temporary) sale price or a manufacturer suggested retail price. If multiple prices are specified for an offer the [[priceType]] property can be used to identify the type of each such specified price. The value of priceType can be specified as a value from enumeration PriceTypeEnumeration or as a free form text string for price types that are not already predefined in PriceTypeEnumeration.
	ReferenceQuantity() []QuantitativeValue                     // The reference quantity for which a certain price applies, e.g. 1 EUR per 4 kWh of electricity. This property is a replacement for unitOfMeasurement for the advanced cases where the price does not relate to a standard unit.
	UnitCode() []Text_URL_Union                                 // The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL. Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.
	UnitText() []Text                                           /*
	A string or text indicating the unit of measurement. Useful if you cannot provide a standard unit code for
	<a href='unitCode'>unitCode</a>.
	*/
}
type unitPriceSpecificationStruct struct {
	priceSpecificationStruct

	BillingDuration_    Duration_Number_QuantitativeValue_UnionSlice `json:"billingDuration,omitempty"`
	BillingIncrement_   NumberSlice                                  `json:"billingIncrement,omitempty"`
	BillingStart_       NumberSlice                                  `json:"billingStart,omitempty"`
	PriceComponentType_ PriceComponentTypeEnumerationSlice           `json:"priceComponentType,omitempty"`
	PriceType_          PriceTypeEnumeration_Text_UnionSlice         `json:"priceType,omitempty"`
	ReferenceQuantity_  QuantitativeValueSlice                       `json:"referenceQuantity,omitempty"`
	UnitCode_           Text_URL_UnionSlice                          `json:"unitCode,omitempty"`
	UnitText_           TextSlice                                    `json:"unitText,omitempty"`
}

func (s *unitPriceSpecificationStruct) BillingDuration() []Duration_Number_QuantitativeValue_Union {
	return s.BillingDuration_
}
func (s *unitPriceSpecificationStruct) BillingIncrement() []Number {
	return s.BillingIncrement_
}
func (s *unitPriceSpecificationStruct) BillingStart() []Number {
	return s.BillingStart_
}
func (s *unitPriceSpecificationStruct) PriceComponentType() []PriceComponentTypeEnumeration {
	return s.PriceComponentType_
}
func (s *unitPriceSpecificationStruct) PriceType() []PriceTypeEnumeration_Text_Union {
	return s.PriceType_
}
func (s *unitPriceSpecificationStruct) ReferenceQuantity() []QuantitativeValue {
	return s.ReferenceQuantity_
}
func (s *unitPriceSpecificationStruct) UnitCode() []Text_URL_Union {
	return s.UnitCode_
}
func (s *unitPriceSpecificationStruct) UnitText() []Text {
	return s.UnitText_
}

type UnitPriceSpecificationSlice []UnitPriceSpecification

func (s *UnitPriceSpecificationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(UnitPriceSpecificationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(UnitPriceSpecification)
	}
	return nil
}

var _ UnitPriceSpecification = &unitPriceSpecificationStruct{}

// The act of managing by changing/editing the state of the object.
type UpdateAction interface {
	// Parents
	Action
	// Accessors
	Collection() []Thing       // A sub property of object. The collection target of the action.
	TargetCollection() []Thing // A sub property of object. The collection target of the action.
}
type updateActionStruct struct {
	actionStruct

	Collection_       ThingSlice `json:"collection,omitempty"`
	TargetCollection_ ThingSlice `json:"targetCollection,omitempty"`
}

func (s *updateActionStruct) Collection() []Thing {
	return s.Collection_
}
func (s *updateActionStruct) TargetCollection() []Thing {
	return s.TargetCollection_
}

type UpdateActionSlice []UpdateAction

func (s *UpdateActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(UpdateActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(UpdateAction)
	}
	return nil
}

var _ UpdateAction = &updateActionStruct{}

// The act of applying an object to its intended purpose.
type UseAction interface {
	// Parents
	ConsumeAction
}
type useActionStruct struct {
	consumeActionStruct
}
type UseActionSlice []UseAction

func (s *UseActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(UseActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(UseAction)
	}
	return nil
}

var _ UseAction = &useActionStruct{}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserBlocks interface {
	// Parents
	UserInteraction
}
type userBlocksStruct struct {
	userInteractionStruct
}
type UserBlocksSlice []UserBlocks

func (s *UserBlocksSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(UserBlocksSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(UserBlocks)
	}
	return nil
}

var _ UserBlocks = &userBlocksStruct{}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserCheckins interface {
	// Parents
	UserInteraction
}
type userCheckinsStruct struct {
	userInteractionStruct
}
type UserCheckinsSlice []UserCheckins

func (s *UserCheckinsSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(UserCheckinsSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(UserCheckins)
	}
	return nil
}

var _ UserCheckins = &userCheckinsStruct{}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserComments interface {
	// Parents
	UserInteraction
	// Accessors
	CommentText() []Text                  // The text of the UserComment.
	CommentTime() []Date_DateTime_Union   // The time at which the UserComment was made.
	Creator() []Organization_Person_Union // The creator/author of this CreativeWork. This is the same as the Author property for CreativeWork.
	Discusses() []CreativeWork            // Specifies the CreativeWork associated with the UserComment.
	ReplyToUrl() []URL                    // The URL at which a reply may be posted to the specified UserComment.
}
type userCommentsStruct struct {
	userInteractionStruct

	CommentText_ TextSlice                      `json:"commentText,omitempty"`
	CommentTime_ Date_DateTime_UnionSlice       `json:"commentTime,omitempty"`
	Creator_     Organization_Person_UnionSlice `json:"creator,omitempty"`
	Discusses_   CreativeWorkSlice              `json:"discusses,omitempty"`
	ReplyToUrl_  URLSlice                       `json:"replyToUrl,omitempty"`
}

func (s *userCommentsStruct) CommentText() []Text {
	return s.CommentText_
}
func (s *userCommentsStruct) CommentTime() []Date_DateTime_Union {
	return s.CommentTime_
}
func (s *userCommentsStruct) Creator() []Organization_Person_Union {
	return s.Creator_
}
func (s *userCommentsStruct) Discusses() []CreativeWork {
	return s.Discusses_
}
func (s *userCommentsStruct) ReplyToUrl() []URL {
	return s.ReplyToUrl_
}

type UserCommentsSlice []UserComments

func (s *UserCommentsSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(UserCommentsSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(UserComments)
	}
	return nil
}

var _ UserComments = &userCommentsStruct{}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserDownloads interface {
	// Parents
	UserInteraction
}
type userDownloadsStruct struct {
	userInteractionStruct
}
type UserDownloadsSlice []UserDownloads

func (s *UserDownloadsSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(UserDownloadsSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(UserDownloads)
	}
	return nil
}

var _ UserDownloads = &userDownloadsStruct{}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserInteraction interface {
	// Parents
	Event
}
type userInteractionStruct struct {
	eventStruct
}
type UserInteractionSlice []UserInteraction

func (s *UserInteractionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(UserInteractionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(UserInteraction)
	}
	return nil
}

var _ UserInteraction = &userInteractionStruct{}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserLikes interface {
	// Parents
	UserInteraction
}
type userLikesStruct struct {
	userInteractionStruct
}
type UserLikesSlice []UserLikes

func (s *UserLikesSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(UserLikesSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(UserLikes)
	}
	return nil
}

var _ UserLikes = &userLikesStruct{}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserPageVisits interface {
	// Parents
	UserInteraction
}
type userPageVisitsStruct struct {
	userInteractionStruct
}
type UserPageVisitsSlice []UserPageVisits

func (s *UserPageVisitsSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(UserPageVisitsSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(UserPageVisits)
	}
	return nil
}

var _ UserPageVisits = &userPageVisitsStruct{}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserPlays interface {
	// Parents
	UserInteraction
}
type userPlaysStruct struct {
	userInteractionStruct
}
type UserPlaysSlice []UserPlays

func (s *UserPlaysSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(UserPlaysSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(UserPlays)
	}
	return nil
}

var _ UserPlays = &userPlaysStruct{}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserPlusOnes interface {
	// Parents
	UserInteraction
}
type userPlusOnesStruct struct {
	userInteractionStruct
}
type UserPlusOnesSlice []UserPlusOnes

func (s *UserPlusOnesSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(UserPlusOnesSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(UserPlusOnes)
	}
	return nil
}

var _ UserPlusOnes = &userPlusOnesStruct{}

// A review created by an end-user (e.g. consumer, purchaser, attendee etc.), in contrast with [[CriticReview]].
type UserReview interface {
	// Parents
	Review
}
type userReviewStruct struct {
	reviewStruct
}
type UserReviewSlice []UserReview

func (s *UserReviewSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(UserReviewSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(UserReview)
	}
	return nil
}

var _ UserReview = &userReviewStruct{}

// UserInteraction and its subtypes is an old way of talking about users interacting with pages. It is generally better to use [[Action]]-based vocabulary, alongside types such as [[Comment]].
type UserTweets interface {
	// Parents
	UserInteraction
}
type userTweetsStruct struct {
	userInteractionStruct
}
type UserTweetsSlice []UserTweets

func (s *UserTweetsSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(UserTweetsSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(UserTweets)
	}
	return nil
}

var _ UserTweets = &userTweetsStruct{}

// A vehicle is a device that is designed or used to transport people or cargo over land, water, air, or through space.
type Vehicle interface {
	// Parents
	Product
	// Unions
	Text_Vehicle_Union
	// Accessors
	AccelerationTime() []QuantitativeValue                              // The time needed to accelerate the vehicle from a given start velocity to a given target velocity.\n\nTypical unit code(s): SEC for seconds\n\n* Note: There are unfortunately no standard unit codes for seconds/0..100 km/h or seconds/0..60 mph. Simply use "SEC" for seconds and indicate the velocities in the [[name]] of the [[QuantitativeValue]], or use [[valueReference]] with a [[QuantitativeValue]] of 0..60 mph or 0..100 km/h to specify the reference speeds.
	BodyType() []QualitativeValue_Text_URL_Union                        // Indicates the design and body style of the vehicle (e.g. station wagon, hatchback, etc.).
	CallSign() []Text                                                   // A [callsign](https://en.wikipedia.org/wiki/Call_sign), as used in broadcasting and radio communications to identify people, radio and TV stations, or vehicles.
	CargoVolume() []QuantitativeValue                                   // The available volume for cargo or luggage. For automobiles, this is usually the trunk volume.\n\nTypical unit code(s): LTR for liters, FTQ for cubic foot/feet\n\nNote: You can use [[minValue]] and [[maxValue]] to indicate ranges.
	DateVehicleFirstRegistered() []Date                                 // The date of the first registration of the vehicle with the respective public authorities.
	DriveWheelConfiguration() []DriveWheelConfigurationValue_Text_Union // The drive wheel configuration, i.e. which roadwheels will receive torque from the vehicle's engine via the drivetrain.
	EmissionsCO2() []Number                                             // The CO2 emissions in g/km. When used in combination with a QuantitativeValue, put "g/km" into the unitText property of that value, since there is no UN/CEFACT Common Code for "g/km".
	FuelCapacity() []QuantitativeValue                                  // The capacity of the fuel tank or in the case of electric cars, the battery. If there are multiple components for storage, this should indicate the total of all storage of the same type.\n\nTypical unit code(s): LTR for liters, GLL of US gallons, GLI for UK / imperial gallons, AMH for ampere-hours (for electrical vehicles).
	FuelConsumption() []QuantitativeValue                               // The amount of fuel consumed for traveling a particular distance or temporal duration with the given vehicle (e.g. liters per 100 km).\n\n* Note 1: There are unfortunately no standard unit codes for liters per 100 km.  Use [[unitText]] to indicate the unit of measurement, e.g. L/100 km.\n* Note 2: There are two ways of indicating the fuel consumption, [[fuelConsumption]] (e.g. 8 liters per 100 km) and [[fuelEfficiency]] (e.g. 30 miles per gallon). They are reciprocal.\n* Note 3: Often, the absolute value is useful only when related to driving speed ("at 80 km/h") or usage pattern ("city traffic"). You can use [[valueReference]] to link the value for the fuel consumption to another value.
	FuelEfficiency() []QuantitativeValue                                // The distance traveled per unit of fuel used; most commonly miles per gallon (mpg) or kilometers per liter (km/L).\n\n* Note 1: There are unfortunately no standard unit codes for miles per gallon or kilometers per liter. Use [[unitText]] to indicate the unit of measurement, e.g. mpg or km/L.\n* Note 2: There are two ways of indicating the fuel consumption, [[fuelConsumption]] (e.g. 8 liters per 100 km) and [[fuelEfficiency]] (e.g. 30 miles per gallon). They are reciprocal.\n* Note 3: Often, the absolute value is useful only when related to driving speed ("at 80 km/h") or usage pattern ("city traffic"). You can use [[valueReference]] to link the value for the fuel economy to another value.
	FuelType() []QualitativeValue_Text_URL_Union                        // The type of fuel suitable for the engine or engines of the vehicle. If the vehicle has only one engine, this property can be attached directly to the vehicle.
	KnownVehicleDamages() []Text                                        // A textual description of known damages, both repaired and unrepaired.
	MeetsEmissionStandard() []QualitativeValue_Text_URL_Union           // Indicates that the vehicle meets the respective emission standard.
	MileageFromOdometer() []QuantitativeValue                           // The total distance travelled by the particular vehicle since its initial production, as read from its odometer.\n\nTypical unit code(s): KMT for kilometers, SMI for statute miles
	ModelDate() []Date                                                  // The release date of a vehicle model (often used to differentiate versions of the same make and model).
	NumberOfAirbags() []Number_Text_Union                               // The number or type of airbags in the vehicle.
	NumberOfAxles() []Number_QuantitativeValue_Union                    // The number of axles.\n\nTypical unit code(s): C62
	NumberOfDoors() []Number_QuantitativeValue_Union                    // The number of doors.\n\nTypical unit code(s): C62
	NumberOfForwardGears() []Number_QuantitativeValue_Union             // The total number of forward gears available for the transmission system of the vehicle.\n\nTypical unit code(s): C62
	NumberOfPreviousOwners() []Number_QuantitativeValue_Union           // The number of owners of the vehicle, including the current one.\n\nTypical unit code(s): C62
	Payload() []QuantitativeValue                                       // The permitted weight of passengers and cargo, EXCLUDING the weight of the empty vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: Many databases specify the permitted TOTAL weight instead, which is the sum of [[weight]] and [[payload]]\n* Note 2: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 3: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]].\n* Note 4: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.
	ProductionDate() []Date                                             // The date of production of the item, e.g. vehicle.
	PurchaseDate() []Date                                               // The date the item e.g. vehicle was purchased by the current owner.
	SeatingCapacity() []Number_QuantitativeValue_Union                  // The number of persons that can be seated (e.g. in a vehicle), both in terms of the physical space available, and in terms of limitations set by law.\n\nTypical unit code(s): C62 for persons
	Speed() []QuantitativeValue                                         // The speed range of the vehicle. If the vehicle is powered by an engine, the upper limit of the speed range (indicated by [[maxValue]] should be the maximum speed achievable under regular conditions.\n\nTypical unit code(s): KMH for km/h, HM for mile per hour (0.447 04 m/s), KNT for knot\n\n*Note 1: Use [[minValue]] and [[maxValue]] to indicate the range. Typically, the minimal value is zero.\n* Note 2: There are many different ways of measuring the speed range. You can link to information about how the given value has been determined using the [[valueReference]] property.
	SteeringPosition() []SteeringPositionValue                          // The position of the steering wheel or similar device (mostly for cars).
	TongueWeight() []QuantitativeValue                                  // The permitted vertical load (TWR) of a trailer attached to the vehicle. Also referred to as Tongue Load Rating (TLR) or Vertical Load Rating (VLR)\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 2: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]].\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.
	TrailerWeight() []QuantitativeValue                                 // The permitted weight of a trailer attached to the vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 2: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]].\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.
	VehicleConfiguration() []Text                                       // A short text indicating the configuration of the vehicle, e.g. '5dr hatchback ST 2.5 MT 225 hp' or 'limited edition'.
	VehicleEngine() []EngineSpecification                               // Information about the engine or engines of the vehicle.
	VehicleIdentificationNumber() []Text                                // The Vehicle Identification Number (VIN) is a unique serial number used by the automotive industry to identify individual motor vehicles.
	VehicleInteriorColor() []Text                                       // The color or color combination of the interior of the vehicle.
	VehicleInteriorType() []Text                                        // The type or material of the interior of the vehicle (e.g. synthetic fabric, leather, wood, etc.). While most interior types are characterized by the material used, an interior type can also be based on vehicle usage or target audience.
	VehicleModelDate() []Date                                           // The release date of a vehicle model (often used to differentiate versions of the same make and model).
	VehicleSeatingCapacity() []Number_QuantitativeValue_Union           // The number of passengers that can be seated in the vehicle, both in terms of the physical space available, and in terms of limitations set by law.\n\nTypical unit code(s): C62 for persons.
	VehicleSpecialUsage() []CarUsageType_Text_Union                     // Indicates whether the vehicle has been used for special purposes, like commercial rental, driving school, or as a taxi. The legislation in many countries requires this information to be revealed when offering a car for sale.
	VehicleTransmission() []QualitativeValue_Text_URL_Union             // The type of component used for transmitting the power from a rotating power source to the wheels or other relevant component(s) ("gearbox" for cars).
	WeightTotal() []QuantitativeValue                                   // The permitted total weight of the loaded vehicle, including passengers and cargo and the weight of the empty vehicle.\n\nTypical unit code(s): KGM for kilogram, LBR for pound\n\n* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]] node.\n* Note 2: You may also link to a [[QualitativeValue]] node that provides additional information using [[valueReference]].\n* Note 3: Note that you can use [[minValue]] and [[maxValue]] to indicate ranges.
	Wheelbase() []QuantitativeValue                                     // The distance between the centers of the front and rear wheels.\n\nTypical unit code(s): CMT for centimeters, MTR for meters, INH for inches, FOT for foot/feet
}
type vehicleStruct struct {
	productStruct

	AccelerationTime_            QuantitativeValueSlice                       `json:"accelerationTime,omitempty"`
	BodyType_                    QualitativeValue_Text_URL_UnionSlice         `json:"bodyType,omitempty"`
	CallSign_                    TextSlice                                    `json:"callSign,omitempty"`
	CargoVolume_                 QuantitativeValueSlice                       `json:"cargoVolume,omitempty"`
	DateVehicleFirstRegistered_  DateSlice                                    `json:"dateVehicleFirstRegistered,omitempty"`
	DriveWheelConfiguration_     DriveWheelConfigurationValue_Text_UnionSlice `json:"driveWheelConfiguration,omitempty"`
	EmissionsCO2_                NumberSlice                                  `json:"emissionsCO2,omitempty"`
	FuelCapacity_                QuantitativeValueSlice                       `json:"fuelCapacity,omitempty"`
	FuelConsumption_             QuantitativeValueSlice                       `json:"fuelConsumption,omitempty"`
	FuelEfficiency_              QuantitativeValueSlice                       `json:"fuelEfficiency,omitempty"`
	FuelType_                    QualitativeValue_Text_URL_UnionSlice         `json:"fuelType,omitempty"`
	KnownVehicleDamages_         TextSlice                                    `json:"knownVehicleDamages,omitempty"`
	MeetsEmissionStandard_       QualitativeValue_Text_URL_UnionSlice         `json:"meetsEmissionStandard,omitempty"`
	MileageFromOdometer_         QuantitativeValueSlice                       `json:"mileageFromOdometer,omitempty"`
	ModelDate_                   DateSlice                                    `json:"modelDate,omitempty"`
	NumberOfAirbags_             Number_Text_UnionSlice                       `json:"numberOfAirbags,omitempty"`
	NumberOfAxles_               Number_QuantitativeValue_UnionSlice          `json:"numberOfAxles,omitempty"`
	NumberOfDoors_               Number_QuantitativeValue_UnionSlice          `json:"numberOfDoors,omitempty"`
	NumberOfForwardGears_        Number_QuantitativeValue_UnionSlice          `json:"numberOfForwardGears,omitempty"`
	NumberOfPreviousOwners_      Number_QuantitativeValue_UnionSlice          `json:"numberOfPreviousOwners,omitempty"`
	Payload_                     QuantitativeValueSlice                       `json:"payload,omitempty"`
	ProductionDate_              DateSlice                                    `json:"productionDate,omitempty"`
	PurchaseDate_                DateSlice                                    `json:"purchaseDate,omitempty"`
	SeatingCapacity_             Number_QuantitativeValue_UnionSlice          `json:"seatingCapacity,omitempty"`
	Speed_                       QuantitativeValueSlice                       `json:"speed,omitempty"`
	SteeringPosition_            SteeringPositionValueSlice                   `json:"steeringPosition,omitempty"`
	TongueWeight_                QuantitativeValueSlice                       `json:"tongueWeight,omitempty"`
	TrailerWeight_               QuantitativeValueSlice                       `json:"trailerWeight,omitempty"`
	VehicleConfiguration_        TextSlice                                    `json:"vehicleConfiguration,omitempty"`
	VehicleEngine_               EngineSpecificationSlice                     `json:"vehicleEngine,omitempty"`
	VehicleIdentificationNumber_ TextSlice                                    `json:"vehicleIdentificationNumber,omitempty"`
	VehicleInteriorColor_        TextSlice                                    `json:"vehicleInteriorColor,omitempty"`
	VehicleInteriorType_         TextSlice                                    `json:"vehicleInteriorType,omitempty"`
	VehicleModelDate_            DateSlice                                    `json:"vehicleModelDate,omitempty"`
	VehicleSeatingCapacity_      Number_QuantitativeValue_UnionSlice          `json:"vehicleSeatingCapacity,omitempty"`
	VehicleSpecialUsage_         CarUsageType_Text_UnionSlice                 `json:"vehicleSpecialUsage,omitempty"`
	VehicleTransmission_         QualitativeValue_Text_URL_UnionSlice         `json:"vehicleTransmission,omitempty"`
	WeightTotal_                 QuantitativeValueSlice                       `json:"weightTotal,omitempty"`
	Wheelbase_                   QuantitativeValueSlice                       `json:"wheelbase,omitempty"`
}

func (s *vehicleStruct) implementsText_Vehicle_Union() {}

func (s *vehicleStruct) AccelerationTime() []QuantitativeValue {
	return s.AccelerationTime_
}
func (s *vehicleStruct) BodyType() []QualitativeValue_Text_URL_Union {
	return s.BodyType_
}
func (s *vehicleStruct) CallSign() []Text {
	return s.CallSign_
}
func (s *vehicleStruct) CargoVolume() []QuantitativeValue {
	return s.CargoVolume_
}
func (s *vehicleStruct) DateVehicleFirstRegistered() []Date {
	return s.DateVehicleFirstRegistered_
}
func (s *vehicleStruct) DriveWheelConfiguration() []DriveWheelConfigurationValue_Text_Union {
	return s.DriveWheelConfiguration_
}
func (s *vehicleStruct) EmissionsCO2() []Number {
	return s.EmissionsCO2_
}
func (s *vehicleStruct) FuelCapacity() []QuantitativeValue {
	return s.FuelCapacity_
}
func (s *vehicleStruct) FuelConsumption() []QuantitativeValue {
	return s.FuelConsumption_
}
func (s *vehicleStruct) FuelEfficiency() []QuantitativeValue {
	return s.FuelEfficiency_
}
func (s *vehicleStruct) FuelType() []QualitativeValue_Text_URL_Union {
	return s.FuelType_
}
func (s *vehicleStruct) KnownVehicleDamages() []Text {
	return s.KnownVehicleDamages_
}
func (s *vehicleStruct) MeetsEmissionStandard() []QualitativeValue_Text_URL_Union {
	return s.MeetsEmissionStandard_
}
func (s *vehicleStruct) MileageFromOdometer() []QuantitativeValue {
	return s.MileageFromOdometer_
}
func (s *vehicleStruct) ModelDate() []Date {
	return s.ModelDate_
}
func (s *vehicleStruct) NumberOfAirbags() []Number_Text_Union {
	return s.NumberOfAirbags_
}
func (s *vehicleStruct) NumberOfAxles() []Number_QuantitativeValue_Union {
	return s.NumberOfAxles_
}
func (s *vehicleStruct) NumberOfDoors() []Number_QuantitativeValue_Union {
	return s.NumberOfDoors_
}
func (s *vehicleStruct) NumberOfForwardGears() []Number_QuantitativeValue_Union {
	return s.NumberOfForwardGears_
}
func (s *vehicleStruct) NumberOfPreviousOwners() []Number_QuantitativeValue_Union {
	return s.NumberOfPreviousOwners_
}
func (s *vehicleStruct) Payload() []QuantitativeValue {
	return s.Payload_
}
func (s *vehicleStruct) ProductionDate() []Date {
	return s.ProductionDate_
}
func (s *vehicleStruct) PurchaseDate() []Date {
	return s.PurchaseDate_
}
func (s *vehicleStruct) SeatingCapacity() []Number_QuantitativeValue_Union {
	return s.SeatingCapacity_
}
func (s *vehicleStruct) Speed() []QuantitativeValue {
	return s.Speed_
}
func (s *vehicleStruct) SteeringPosition() []SteeringPositionValue {
	return s.SteeringPosition_
}
func (s *vehicleStruct) TongueWeight() []QuantitativeValue {
	return s.TongueWeight_
}
func (s *vehicleStruct) TrailerWeight() []QuantitativeValue {
	return s.TrailerWeight_
}
func (s *vehicleStruct) VehicleConfiguration() []Text {
	return s.VehicleConfiguration_
}
func (s *vehicleStruct) VehicleEngine() []EngineSpecification {
	return s.VehicleEngine_
}
func (s *vehicleStruct) VehicleIdentificationNumber() []Text {
	return s.VehicleIdentificationNumber_
}
func (s *vehicleStruct) VehicleInteriorColor() []Text {
	return s.VehicleInteriorColor_
}
func (s *vehicleStruct) VehicleInteriorType() []Text {
	return s.VehicleInteriorType_
}
func (s *vehicleStruct) VehicleModelDate() []Date {
	return s.VehicleModelDate_
}
func (s *vehicleStruct) VehicleSeatingCapacity() []Number_QuantitativeValue_Union {
	return s.VehicleSeatingCapacity_
}
func (s *vehicleStruct) VehicleSpecialUsage() []CarUsageType_Text_Union {
	return s.VehicleSpecialUsage_
}
func (s *vehicleStruct) VehicleTransmission() []QualitativeValue_Text_URL_Union {
	return s.VehicleTransmission_
}
func (s *vehicleStruct) WeightTotal() []QuantitativeValue {
	return s.WeightTotal_
}
func (s *vehicleStruct) Wheelbase() []QuantitativeValue {
	return s.Wheelbase_
}

type VehicleSlice []Vehicle

func (s *VehicleSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(VehicleSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Vehicle)
	}
	return nil
}

var _ Vehicle = &vehicleStruct{}

// A type of blood vessel that specifically carries blood to the heart.
type Vein interface {
	// Parents
	Vessel
	// Accessors
	DrainsTo() []Vessel                                          // The vasculature that the vein drains into.
	RegionDrained() []AnatomicalStructure_AnatomicalSystem_Union // The anatomical or organ system drained by this vessel; generally refers to a specific part of an organ.
	Tributary() []AnatomicalStructure                            // The anatomical or organ system that the vein flows into; a larger structure that the vein connects to.
}
type veinStruct struct {
	vesselStruct

	DrainsTo_      VesselSlice                                     `json:"drainsTo,omitempty"`
	RegionDrained_ AnatomicalStructure_AnatomicalSystem_UnionSlice `json:"regionDrained,omitempty"`
	Tributary_     AnatomicalStructureSlice                        `json:"tributary,omitempty"`
}

func (s *veinStruct) DrainsTo() []Vessel {
	return s.DrainsTo_
}
func (s *veinStruct) RegionDrained() []AnatomicalStructure_AnatomicalSystem_Union {
	return s.RegionDrained_
}
func (s *veinStruct) Tributary() []AnatomicalStructure {
	return s.Tributary_
}

type VeinSlice []Vein

func (s *VeinSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(VeinSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Vein)
	}
	return nil
}

var _ Vein = &veinStruct{}

// A component of the human body circulatory system comprised of an intricate network of hollow tubes that transport blood throughout the entire body.
type Vessel interface {
	// Parents
	AnatomicalStructure
}
type vesselStruct struct {
	anatomicalStructureStruct
}
type VesselSlice []Vessel

func (s *VesselSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(VesselSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Vessel)
	}
	return nil
}

var _ Vessel = &vesselStruct{}

// A vet's office.
type VeterinaryCare interface {
	// Parents
	MedicalOrganization
}
type veterinaryCareStruct struct {
	medicalOrganizationStruct
}
type VeterinaryCareSlice []VeterinaryCare

func (s *VeterinaryCareSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(VeterinaryCareSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(VeterinaryCare)
	}
	return nil
}

var _ VeterinaryCare = &veterinaryCareStruct{}

// Web page type: Video gallery page.
type VideoGallery interface {
	// Parents
	MediaGallery
}
type videoGalleryStruct struct {
	mediaGalleryStruct
}
type VideoGallerySlice []VideoGallery

func (s *VideoGallerySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(VideoGallerySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(VideoGallery)
	}
	return nil
}

var _ VideoGallery = &videoGalleryStruct{}

// A video game is an electronic game that involves human interaction with a user interface to generate visual feedback on a video device.
type VideoGame interface {
	// Parents
	Game
	SoftwareApplication
	// Accessors
	Actor() []Person                      // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Actors() []Person                     // An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
	CheatCode() []CreativeWork            // Cheat codes to the game.
	Director() []Person                   // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	Directors() []Person                  // A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
	GameEdition() []Text                  // The edition of a video game.
	GamePlatform() []Text_Thing_URL_Union // The electronic systems used to play <a href="http://en.wikipedia.org/wiki/Category:Video_game_platforms">video games</a>.
	GameServer() []GameServer             // The server on which  it is possible to play the game.
	GameTip() []CreativeWork              // Links to tips, tactics, etc.
	MusicBy() []MusicGroup_Person_Union   // The composer of the soundtrack.
	PlayMode() []GamePlayMode             // Indicates whether this game is multi-player, co-op or single-player.  The game can be marked as multi-player, co-op and single-player at the same time.
	Trailer() []VideoObject               // The trailer of a movie or tv/radio series, season, episode, etc.
}
type videoGameStruct struct {
	gameStruct
	softwareApplicationStruct_

	Actor_        PersonSlice                  `json:"actor,omitempty"`
	Actors_       PersonSlice                  `json:"actors,omitempty"`
	CheatCode_    CreativeWorkSlice            `json:"cheatCode,omitempty"`
	Director_     PersonSlice                  `json:"director,omitempty"`
	Directors_    PersonSlice                  `json:"directors,omitempty"`
	GameEdition_  TextSlice                    `json:"gameEdition,omitempty"`
	GamePlatform_ Text_Thing_URL_UnionSlice    `json:"gamePlatform,omitempty"`
	GameServer_   GameServerSlice              `json:"gameServer,omitempty"`
	GameTip_      CreativeWorkSlice            `json:"gameTip,omitempty"`
	MusicBy_      MusicGroup_Person_UnionSlice `json:"musicBy,omitempty"`
	PlayMode_     GamePlayModeSlice            `json:"playMode,omitempty"`
	Trailer_      VideoObjectSlice             `json:"trailer,omitempty"`
}

func (s *videoGameStruct) implementsAboutPage_CreativeWork_Text_URL_Union() {} // re
func (s *videoGameStruct) implementsAggregateOffer_CreativeWork_Event_MenuItem_Product_Service_Trip_Union() {
} // re
func (s *videoGameStruct) implementsBioChemEntity_CreativeWork_Event_MedicalEntity_Organization_Person_Product_Union() {
}                                                                                                // re
func (s *videoGameStruct) implementsCategoryCode_PhysicalActivityCategory_Text_Thing_URL_Union() {} // re
func (s *videoGameStruct) implementsCreativeWork_Event_Union()                                   {} // re
func (s *videoGameStruct) implementsCreativeWork_HowToSection_HowToStep_Text_Union()             {} // re
func (s *videoGameStruct) implementsCreativeWork_ItemList_Text_Union()                           {} // re
func (s *videoGameStruct) implementsCreativeWork_Product_URL_Union()                             {} // re
func (s *videoGameStruct) implementsCreativeWork_Text_Union()                                    {} // re
func (s *videoGameStruct) implementsCreativeWork_URL_Union()                                     {} // re
func (s *videoGameStruct) implementsDataFeedItem_Text_Thing_Union()                              {} // re
func (s *videoGameStruct) implementsListItem_Text_Thing_Union()                                  {} // re
func (s *videoGameStruct) implementsText_Thing_URL_Union()                                       {} // re
func (s *videoGameStruct) implementsText_Thing_Union()                                           {} // re
func (s *videoGameStruct) Actor() []Person {
	return s.Actor_
}
func (s *videoGameStruct) Actors() []Person {
	return s.Actors_
}
func (s *videoGameStruct) CheatCode() []CreativeWork {
	return s.CheatCode_
}
func (s *videoGameStruct) Director() []Person {
	return s.Director_
}
func (s *videoGameStruct) Directors() []Person {
	return s.Directors_
}
func (s *videoGameStruct) GameEdition() []Text {
	return s.GameEdition_
}
func (s *videoGameStruct) GamePlatform() []Text_Thing_URL_Union {
	return s.GamePlatform_
}
func (s *videoGameStruct) GameServer() []GameServer {
	return s.GameServer_
}
func (s *videoGameStruct) GameTip() []CreativeWork {
	return s.GameTip_
}
func (s *videoGameStruct) MusicBy() []MusicGroup_Person_Union {
	return s.MusicBy_
}
func (s *videoGameStruct) PlayMode() []GamePlayMode {
	return s.PlayMode_
}
func (s *videoGameStruct) Trailer() []VideoObject {
	return s.Trailer_
}

type VideoGameSlice []VideoGame

func (s *VideoGameSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(VideoGameSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(VideoGame)
	}
	return nil
}

var _ VideoGame = &videoGameStruct{}

// A short segment/part of a video game.
type VideoGameClip interface {
	// Parents
	Clip
}
type videoGameClipStruct struct {
	clipStruct
}
type VideoGameClipSlice []VideoGameClip

func (s *VideoGameClipSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(VideoGameClipSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(VideoGameClip)
	}
	return nil
}

var _ VideoGameClip = &videoGameClipStruct{}

// A video game series.
type VideoGameSeries interface {
	// Parents
	CreativeWorkSeries
	// Accessors
	Actor() []Person                               // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Actors() []Person                              // An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
	CharacterAttribute() []Thing                   // A piece of data that represents a particular aspect of a fictional character (skill, power, character points, advantage, disadvantage).
	CheatCode() []CreativeWork                     // Cheat codes to the game.
	ContainsSeason() []CreativeWorkSeason          // A season that is part of the media series.
	Director() []Person                            // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	Directors() []Person                           // A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
	Episode() []Episode                            // An episode of a tv, radio or game media within a series or season.
	Episodes() []Episode                           // An episode of a TV/radio series or season.
	GameItem() []Thing                             // An item is an object within the game world that can be collected by a player or, occasionally, a non-player character.
	GameLocation() []Place_PostalAddress_URL_Union // Real or fictional location of the game (or part of game).
	GamePlatform() []Text_Thing_URL_Union          // The electronic systems used to play <a href="http://en.wikipedia.org/wiki/Category:Video_game_platforms">video games</a>.
	MusicBy() []MusicGroup_Person_Union            // The composer of the soundtrack.
	NumberOfEpisodes() []Integer                   // The number of episodes in this season or series.
	NumberOfPlayers() []QuantitativeValue          // Indicate how many people can play this game (minimum, maximum, or range).
	NumberOfSeasons() []Integer                    // The number of seasons in this series.
	PlayMode() []GamePlayMode                      // Indicates whether this game is multi-player, co-op or single-player.  The game can be marked as multi-player, co-op and single-player at the same time.
	ProductionCompany() []Organization             // The production company or studio responsible for the item e.g. series, video game, episode etc.
	Quest() []Thing                                // The task that a player-controlled character, or group of characters may complete in order to gain a reward.
	Season() []CreativeWorkSeason_URL_Union        // A season in a media series.
	Seasons() []CreativeWorkSeason                 // A season in a media series.
	Trailer() []VideoObject                        // The trailer of a movie or tv/radio series, season, episode, etc.
}
type videoGameSeriesStruct struct {
	creativeWorkSeriesStruct

	Actor_              PersonSlice                        `json:"actor,omitempty"`
	Actors_             PersonSlice                        `json:"actors,omitempty"`
	CharacterAttribute_ ThingSlice                         `json:"characterAttribute,omitempty"`
	CheatCode_          CreativeWorkSlice                  `json:"cheatCode,omitempty"`
	ContainsSeason_     CreativeWorkSeasonSlice            `json:"containsSeason,omitempty"`
	Director_           PersonSlice                        `json:"director,omitempty"`
	Directors_          PersonSlice                        `json:"directors,omitempty"`
	Episode_            EpisodeSlice                       `json:"episode,omitempty"`
	Episodes_           EpisodeSlice                       `json:"episodes,omitempty"`
	GameItem_           ThingSlice                         `json:"gameItem,omitempty"`
	GameLocation_       Place_PostalAddress_URL_UnionSlice `json:"gameLocation,omitempty"`
	GamePlatform_       Text_Thing_URL_UnionSlice          `json:"gamePlatform,omitempty"`
	MusicBy_            MusicGroup_Person_UnionSlice       `json:"musicBy,omitempty"`
	NumberOfEpisodes_   IntegerSlice                       `json:"numberOfEpisodes,omitempty"`
	NumberOfPlayers_    QuantitativeValueSlice             `json:"numberOfPlayers,omitempty"`
	NumberOfSeasons_    IntegerSlice                       `json:"numberOfSeasons,omitempty"`
	PlayMode_           GamePlayModeSlice                  `json:"playMode,omitempty"`
	ProductionCompany_  OrganizationSlice                  `json:"productionCompany,omitempty"`
	Quest_              ThingSlice                         `json:"quest,omitempty"`
	Season_             CreativeWorkSeason_URL_UnionSlice  `json:"season,omitempty"`
	Seasons_            CreativeWorkSeasonSlice            `json:"seasons,omitempty"`
	Trailer_            VideoObjectSlice                   `json:"trailer,omitempty"`
}

func (s *videoGameSeriesStruct) Actor() []Person {
	return s.Actor_
}
func (s *videoGameSeriesStruct) Actors() []Person {
	return s.Actors_
}
func (s *videoGameSeriesStruct) CharacterAttribute() []Thing {
	return s.CharacterAttribute_
}
func (s *videoGameSeriesStruct) CheatCode() []CreativeWork {
	return s.CheatCode_
}
func (s *videoGameSeriesStruct) ContainsSeason() []CreativeWorkSeason {
	return s.ContainsSeason_
}
func (s *videoGameSeriesStruct) Director() []Person {
	return s.Director_
}
func (s *videoGameSeriesStruct) Directors() []Person {
	return s.Directors_
}
func (s *videoGameSeriesStruct) Episode() []Episode {
	return s.Episode_
}
func (s *videoGameSeriesStruct) Episodes() []Episode {
	return s.Episodes_
}
func (s *videoGameSeriesStruct) GameItem() []Thing {
	return s.GameItem_
}
func (s *videoGameSeriesStruct) GameLocation() []Place_PostalAddress_URL_Union {
	return s.GameLocation_
}
func (s *videoGameSeriesStruct) GamePlatform() []Text_Thing_URL_Union {
	return s.GamePlatform_
}
func (s *videoGameSeriesStruct) MusicBy() []MusicGroup_Person_Union {
	return s.MusicBy_
}
func (s *videoGameSeriesStruct) NumberOfEpisodes() []Integer {
	return s.NumberOfEpisodes_
}
func (s *videoGameSeriesStruct) NumberOfPlayers() []QuantitativeValue {
	return s.NumberOfPlayers_
}
func (s *videoGameSeriesStruct) NumberOfSeasons() []Integer {
	return s.NumberOfSeasons_
}
func (s *videoGameSeriesStruct) PlayMode() []GamePlayMode {
	return s.PlayMode_
}
func (s *videoGameSeriesStruct) ProductionCompany() []Organization {
	return s.ProductionCompany_
}
func (s *videoGameSeriesStruct) Quest() []Thing {
	return s.Quest_
}
func (s *videoGameSeriesStruct) Season() []CreativeWorkSeason_URL_Union {
	return s.Season_
}
func (s *videoGameSeriesStruct) Seasons() []CreativeWorkSeason {
	return s.Seasons_
}
func (s *videoGameSeriesStruct) Trailer() []VideoObject {
	return s.Trailer_
}

type VideoGameSeriesSlice []VideoGameSeries

func (s *VideoGameSeriesSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(VideoGameSeriesSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(VideoGameSeries)
	}
	return nil
}

var _ VideoGameSeries = &videoGameSeriesStruct{}

// A video file.
type VideoObject interface {
	// Parents
	MediaObject
	// Unions
	Clip_VideoObject_Union
	// Accessors
	Actor() []Person                    // An actor, e.g. in tv, radio, movie, video games etc., or in an event. Actors can be associated with individual items or with a series, episode, clip.
	Actors() []Person                   // An actor, e.g. in tv, radio, movie, video games etc. Actors can be associated with individual items or with a series, episode, clip.
	Caption() []MediaObject_Text_Union  // The caption for this object. For downloadable machine formats (closed caption, subtitles etc.) use MediaObject and indicate the [[encodingFormat]].
	Director() []Person                 // A director of e.g. tv, radio, movie, video gaming etc. content, or of an event. Directors can be associated with individual items or with a series, episode, clip.
	Directors() []Person                // A director of e.g. tv, radio, movie, video games etc. content. Directors can be associated with individual items or with a series, episode, clip.
	EmbeddedTextCaption() []Text        // Represents textual captioning from a [[MediaObject]], e.g. text of a 'meme'.
	MusicBy() []MusicGroup_Person_Union // The composer of the soundtrack.
	Thumbnail() []ImageObject           // Thumbnail image for an image or video.
	Transcript() []Text                 // If this MediaObject is an AudioObject or VideoObject, the transcript of that object.
	VideoFrameSize() []Text             // The frame size of the video.
	VideoQuality() []Text               // The quality of the video.
}
type videoObjectStruct struct {
	mediaObjectStruct

	Actor_               PersonSlice                  `json:"actor,omitempty"`
	Actors_              PersonSlice                  `json:"actors,omitempty"`
	Caption_             MediaObject_Text_UnionSlice  `json:"caption,omitempty"`
	Director_            PersonSlice                  `json:"director,omitempty"`
	Directors_           PersonSlice                  `json:"directors,omitempty"`
	EmbeddedTextCaption_ TextSlice                    `json:"embeddedTextCaption,omitempty"`
	MusicBy_             MusicGroup_Person_UnionSlice `json:"musicBy,omitempty"`
	Thumbnail_           ImageObjectSlice             `json:"thumbnail,omitempty"`
	Transcript_          TextSlice                    `json:"transcript,omitempty"`
	VideoFrameSize_      TextSlice                    `json:"videoFrameSize,omitempty"`
	VideoQuality_        TextSlice                    `json:"videoQuality,omitempty"`
}

func (s *videoObjectStruct) implementsClip_VideoObject_Union() {}

func (s *videoObjectStruct) Actor() []Person {
	return s.Actor_
}
func (s *videoObjectStruct) Actors() []Person {
	return s.Actors_
}
func (s *videoObjectStruct) Caption() []MediaObject_Text_Union {
	return s.Caption_
}
func (s *videoObjectStruct) Director() []Person {
	return s.Director_
}
func (s *videoObjectStruct) Directors() []Person {
	return s.Directors_
}
func (s *videoObjectStruct) EmbeddedTextCaption() []Text {
	return s.EmbeddedTextCaption_
}
func (s *videoObjectStruct) MusicBy() []MusicGroup_Person_Union {
	return s.MusicBy_
}
func (s *videoObjectStruct) Thumbnail() []ImageObject {
	return s.Thumbnail_
}
func (s *videoObjectStruct) Transcript() []Text {
	return s.Transcript_
}
func (s *videoObjectStruct) VideoFrameSize() []Text {
	return s.VideoFrameSize_
}
func (s *videoObjectStruct) VideoQuality() []Text {
	return s.VideoQuality_
}

type VideoObjectSlice []VideoObject

func (s *VideoObjectSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(VideoObjectSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(VideoObject)
	}
	return nil
}

var _ VideoObject = &videoObjectStruct{}

// A specific and exact (byte-for-byte) version of a [[VideoObject]]. Two byte-for-byte identical files, for the purposes of this type, considered identical. If they have different embedded metadata the files will differ. Different external facts about the files, e.g. creator or dateCreated that aren't represented in their actual content, do not affect this notion of identity.
type VideoObjectSnapshot interface {
	// Parents
	VideoObject
}
type videoObjectSnapshotStruct struct {
	videoObjectStruct
}
type VideoObjectSnapshotSlice []VideoObjectSnapshot

func (s *VideoObjectSnapshotSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(VideoObjectSnapshotSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(VideoObjectSnapshot)
	}
	return nil
}

var _ VideoObjectSnapshot = &videoObjectSnapshotStruct{}

// The act of consuming static visual content.
type ViewAction interface {
	// Parents
	ConsumeAction
}
type viewActionStruct struct {
	consumeActionStruct
}
type ViewActionSlice []ViewAction

func (s *ViewActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ViewActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(ViewAction)
	}
	return nil
}

var _ ViewAction = &viewActionStruct{}

// An online or virtual location for attending events. For example, one may attend an online seminar or educational event. While a virtual location may be used as the location of an event, virtual locations should not be confused with physical locations in the real world.
type VirtualLocation interface {
	// Parents
	Intangible
	// Unions
	Place_PostalAddress_Text_VirtualLocation_Union
}
type virtualLocationStruct struct {
	intangibleStruct
}

func (s *virtualLocationStruct) implementsPlace_PostalAddress_Text_VirtualLocation_Union() {}

type VirtualLocationSlice []VirtualLocation

func (s *VirtualLocationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(VirtualLocationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(VirtualLocation)
	}
	return nil
}

var _ VirtualLocation = &virtualLocationStruct{}

// Event type: Visual arts event.
type VisualArtsEvent interface {
	// Parents
	Event
}
type visualArtsEventStruct struct {
	eventStruct
}
type VisualArtsEventSlice []VisualArtsEvent

func (s *VisualArtsEventSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(VisualArtsEventSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(VisualArtsEvent)
	}
	return nil
}

var _ VisualArtsEvent = &visualArtsEventStruct{}

// A work of art that is primarily visual in character.
type VisualArtwork interface {
	// Parents
	CreativeWork
	// Accessors
	ArtEdition() []Integer_Text_Union // The number of copies when multiple copies of a piece of artwork are produced - e.g. for a limited edition of 20 prints, 'artEdition' refers to the total number of copies (in this example "20").
	ArtMedium() []Text_URL_Union      // The material used. (e.g. Oil, Watercolour, Acrylic, Linoprint, Marble, Cyanotype, Digital, Lithograph, DryPoint, Intaglio, Pastel, Woodcut, Pencil, Mixed Media, etc.)
	Artform() []Text_URL_Union        // e.g. Painting, Drawing, Sculpture, Print, Photograph, Assemblage, Collage, etc.
	Artist() []Person                 /*
	The primary artist for a work
	    	in a medium other than pencils or digital line art--for example, if the
	    	primary artwork is done in watercolors or digital paints.
	*/
	ArtworkSurface() []Text_URL_Union           // The supporting materials for the artwork, e.g. Canvas, Paper, Wood, Board, etc.
	Colorist() []Person                         // The individual who adds color to inked drawings.
	Depth() []Distance_QuantitativeValue_Union  // The depth of the item.
	Height() []Distance_QuantitativeValue_Union // The height of the item.
	Inker() []Person                            // The individual who traces over the pencil drawings in ink after pencils are complete.
	Letterer() []Person                         // The individual who adds lettering, including speech balloons and sound effects, to artwork.
	Penciler() []Person                         // The individual who draws the primary narrative artwork.
	Surface() []Text_URL_Union                  // A material used as a surface in some artwork, e.g. Canvas, Paper, Wood, Board, etc.
	Width() []Distance_QuantitativeValue_Union  // The width of the item.
}
type visualArtworkStruct struct {
	creativeWorkStruct

	ArtEdition_     Integer_Text_UnionSlice               `json:"artEdition,omitempty"`
	ArtMedium_      Text_URL_UnionSlice                   `json:"artMedium,omitempty"`
	Artform_        Text_URL_UnionSlice                   `json:"artform,omitempty"`
	Artist_         PersonSlice                           `json:"artist,omitempty"`
	ArtworkSurface_ Text_URL_UnionSlice                   `json:"artworkSurface,omitempty"`
	Colorist_       PersonSlice                           `json:"colorist,omitempty"`
	Depth_          Distance_QuantitativeValue_UnionSlice `json:"depth,omitempty"`
	Height_         Distance_QuantitativeValue_UnionSlice `json:"height,omitempty"`
	Inker_          PersonSlice                           `json:"inker,omitempty"`
	Letterer_       PersonSlice                           `json:"letterer,omitempty"`
	Penciler_       PersonSlice                           `json:"penciler,omitempty"`
	Surface_        Text_URL_UnionSlice                   `json:"surface,omitempty"`
	Width_          Distance_QuantitativeValue_UnionSlice `json:"width,omitempty"`
}

func (s *visualArtworkStruct) ArtEdition() []Integer_Text_Union {
	return s.ArtEdition_
}
func (s *visualArtworkStruct) ArtMedium() []Text_URL_Union {
	return s.ArtMedium_
}
func (s *visualArtworkStruct) Artform() []Text_URL_Union {
	return s.Artform_
}
func (s *visualArtworkStruct) Artist() []Person {
	return s.Artist_
}
func (s *visualArtworkStruct) ArtworkSurface() []Text_URL_Union {
	return s.ArtworkSurface_
}
func (s *visualArtworkStruct) Colorist() []Person {
	return s.Colorist_
}
func (s *visualArtworkStruct) Depth() []Distance_QuantitativeValue_Union {
	return s.Depth_
}
func (s *visualArtworkStruct) Height() []Distance_QuantitativeValue_Union {
	return s.Height_
}
func (s *visualArtworkStruct) Inker() []Person {
	return s.Inker_
}
func (s *visualArtworkStruct) Letterer() []Person {
	return s.Letterer_
}
func (s *visualArtworkStruct) Penciler() []Person {
	return s.Penciler_
}
func (s *visualArtworkStruct) Surface() []Text_URL_Union {
	return s.Surface_
}
func (s *visualArtworkStruct) Width() []Distance_QuantitativeValue_Union {
	return s.Width_
}

type VisualArtworkSlice []VisualArtwork

func (s *VisualArtworkSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(VisualArtworkSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(VisualArtwork)
	}
	return nil
}

var _ VisualArtwork = &visualArtworkStruct{}

// Vital signs are measures of various physiological functions in order to assess the most basic body functions.
type VitalSign interface {
	// Parents
	MedicalSign
}
type vitalSignStruct struct {
	medicalSignStruct
}
type VitalSignSlice []VitalSign

func (s *VitalSignSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(VitalSignSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(VitalSign)
	}
	return nil
}

var _ VitalSign = &vitalSignStruct{}

// A volcano, like Fuji san.
type Volcano interface {
	// Parents
	Landform
}
type volcanoStruct struct {
	landformStruct
}
type VolcanoSlice []Volcano

func (s *VolcanoSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(VolcanoSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Volcano)
	}
	return nil
}

var _ Volcano = &volcanoStruct{}

// The act of expressing a preference from a fixed/finite/structured set of choices/options.
type VoteAction interface {
	// Parents
	ChooseAction
	// Accessors
	Candidate() []Person // A sub property of object. The candidate subject of this action.
}
type voteActionStruct struct {
	chooseActionStruct

	Candidate_ PersonSlice `json:"candidate,omitempty"`
}

func (s *voteActionStruct) Candidate() []Person {
	return s.Candidate_
}

type VoteActionSlice []VoteAction

func (s *VoteActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(VoteActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(VoteAction)
	}
	return nil
}

var _ VoteAction = &voteActionStruct{}

// An advertising section of the page.
type WPAdBlock interface {
	// Parents
	WebPageElement
}
type wPAdBlockStruct struct {
	webPageElementStruct
}
type WPAdBlockSlice []WPAdBlock

func (s *WPAdBlockSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WPAdBlockSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WPAdBlock)
	}
	return nil
}

var _ WPAdBlock = &wPAdBlockStruct{}

// The footer section of the page.
type WPFooter interface {
	// Parents
	WebPageElement
}
type wPFooterStruct struct {
	webPageElementStruct
}
type WPFooterSlice []WPFooter

func (s *WPFooterSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WPFooterSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WPFooter)
	}
	return nil
}

var _ WPFooter = &wPFooterStruct{}

// The header section of the page.
type WPHeader interface {
	// Parents
	WebPageElement
}
type wPHeaderStruct struct {
	webPageElementStruct
}
type WPHeaderSlice []WPHeader

func (s *WPHeaderSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WPHeaderSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WPHeader)
	}
	return nil
}

var _ WPHeader = &wPHeaderStruct{}

// A sidebar section of the page.
type WPSideBar interface {
	// Parents
	WebPageElement
}
type wPSideBarStruct struct {
	webPageElementStruct
}
type WPSideBarSlice []WPSideBar

func (s *WPSideBarSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WPSideBarSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WPSideBar)
	}
	return nil
}

var _ WPSideBar = &wPSideBarStruct{}

// The act of expressing a desire about the object. An agent wants an object.
type WantAction interface {
	// Parents
	ReactAction
}
type wantActionStruct struct {
	reactActionStruct
}
type WantActionSlice []WantAction

func (s *WantActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WantActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WantAction)
	}
	return nil
}

var _ WantAction = &wantActionStruct{}

// A structured value representing the duration and scope of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.
type WarrantyPromise interface {
	// Parents
	StructuredValue
	// Accessors
	DurationOfWarranty() []QuantitativeValue // The duration of the warranty promise. Common unitCode values are ANN for year, MON for months, or DAY for days.
	WarrantyScope() []WarrantyScope          // The scope of the warranty promise.
}
type warrantyPromiseStruct struct {
	structuredValueStruct

	DurationOfWarranty_ QuantitativeValueSlice `json:"durationOfWarranty,omitempty"`
	WarrantyScope_      WarrantyScopeSlice     `json:"warrantyScope,omitempty"`
}

func (s *warrantyPromiseStruct) DurationOfWarranty() []QuantitativeValue {
	return s.DurationOfWarranty_
}
func (s *warrantyPromiseStruct) WarrantyScope() []WarrantyScope {
	return s.WarrantyScope_
}

type WarrantyPromiseSlice []WarrantyPromise

func (s *WarrantyPromiseSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WarrantyPromiseSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WarrantyPromise)
	}
	return nil
}

var _ WarrantyPromise = &warrantyPromiseStruct{}

/*
A range of of services that will be provided to a customer free of charge in case of a defect or malfunction of a product.\n\nCommonly used values:\n\n* http://purl.org/goodrelations/v1#Labor-BringIn\n* http://purl.org/goodrelations/v1#PartsAndLabor-BringIn\n* http://purl.org/goodrelations/v1#PartsAndLabor-PickUp

*/
type WarrantyScope interface {
	// Parents
	Enumeration
}
type warrantyScopeStruct struct {
	enumerationStruct
}
type WarrantyScopeSlice []WarrantyScope

func (s *WarrantyScopeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WarrantyScopeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WarrantyScope)
	}
	return nil
}

var _ WarrantyScope = &warrantyScopeStruct{}

// The act of consuming dynamic/moving visual content.
type WatchAction interface {
	// Parents
	ConsumeAction
}
type watchActionStruct struct {
	consumeActionStruct
}
type WatchActionSlice []WatchAction

func (s *WatchActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WatchActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WatchAction)
	}
	return nil
}

var _ WatchAction = &watchActionStruct{}

// A waterfall, like Niagara.
type Waterfall interface {
	// Parents
	BodyOfWater
}
type waterfallStruct struct {
	bodyOfWaterStruct
}
type WaterfallSlice []Waterfall

func (s *WaterfallSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WaterfallSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Waterfall)
	}
	return nil
}

var _ Waterfall = &waterfallStruct{}

// The act of dressing oneself in clothing.
type WearAction interface {
	// Parents
	UseAction
}
type wearActionStruct struct {
	useActionStruct
}
type WearActionSlice []WearAction

func (s *WearActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WearActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WearAction)
	}
	return nil
}

var _ WearAction = &wearActionStruct{}

// Enumerates common types of measurement for wearables products.
type WearableMeasurementTypeEnumeration interface {
	// Parents
	MeasurementTypeEnumeration
}
type wearableMeasurementTypeEnumerationStruct struct {
	measurementTypeEnumerationStruct
}
type WearableMeasurementTypeEnumerationSlice []WearableMeasurementTypeEnumeration

func (s *WearableMeasurementTypeEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WearableMeasurementTypeEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WearableMeasurementTypeEnumeration)
	}
	return nil
}

var _ WearableMeasurementTypeEnumeration = &wearableMeasurementTypeEnumerationStruct{}

// Enumerates common size groups (also known as "size types") for wearable products.
type WearableSizeGroupEnumeration interface {
	// Parents
	SizeGroupEnumeration
}
type wearableSizeGroupEnumerationStruct struct {
	sizeGroupEnumerationStruct
}
type WearableSizeGroupEnumerationSlice []WearableSizeGroupEnumeration

func (s *WearableSizeGroupEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WearableSizeGroupEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WearableSizeGroupEnumeration)
	}
	return nil
}

var _ WearableSizeGroupEnumeration = &wearableSizeGroupEnumerationStruct{}

// Enumerates common size systems specific for wearable products
type WearableSizeSystemEnumeration interface {
	// Parents
	SizeSystemEnumeration
}
type wearableSizeSystemEnumerationStruct struct {
	sizeSystemEnumerationStruct
}
type WearableSizeSystemEnumerationSlice []WearableSizeSystemEnumeration

func (s *WearableSizeSystemEnumerationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WearableSizeSystemEnumerationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WearableSizeSystemEnumeration)
	}
	return nil
}

var _ WearableSizeSystemEnumeration = &wearableSizeSystemEnumerationStruct{}

// An application programming interface accessible over Web/Internet technologies.
type WebAPI interface {
	// Parents
	Service
	// Accessors
	Documentation() []CreativeWork_URL_Union // Further documentation describing the Web API in more detail.
}
type webAPIStruct struct {
	serviceStruct

	Documentation_ CreativeWork_URL_UnionSlice `json:"documentation,omitempty"`
}

func (s *webAPIStruct) Documentation() []CreativeWork_URL_Union {
	return s.Documentation_
}

type WebAPISlice []WebAPI

func (s *WebAPISlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WebAPISlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WebAPI)
	}
	return nil
}

var _ WebAPI = &webAPIStruct{}

// Web applications.
type WebApplication interface {
	// Parents
	SoftwareApplication
	// Accessors
	BrowserRequirements() []Text // Specifies browser requirements in human-readable text. For example, 'requires HTML5 support'.
}
type webApplicationStruct struct {
	softwareApplicationStruct

	BrowserRequirements_ TextSlice `json:"browserRequirements,omitempty"`
}

func (s *webApplicationStruct) BrowserRequirements() []Text {
	return s.BrowserRequirements_
}

type WebApplicationSlice []WebApplication

func (s *WebApplicationSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WebApplicationSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WebApplication)
	}
	return nil
}

var _ WebApplication = &webApplicationStruct{}

// WebContent is a type representing all [[WebPage]], [[WebSite]] and [[WebPageElement]] content. It is sometimes the case that detailed distinctions between Web pages, sites and their parts is not always important or obvious. The  [[WebContent]] type makes it easier to describe Web-addressable content without requiring such distinctions to always be stated. (The intent is that the existing types [[WebPage]], [[WebSite]] and [[WebPageElement]] will eventually be declared as subtypes of [[WebContent]]).
type WebContent interface {
	// Parents
	CreativeWork
	// Unions
	Comment_WebContent_Union
	Dataset_Observation_URL_WebContent_Union
	ItemList_ListItem_Text_WebContent_Union
	URL_WebContent_Union
}
type webContentStruct struct {
	creativeWorkStruct
}

func (s *webContentStruct) implementsComment_WebContent_Union()                 {}
func (s *webContentStruct) implementsDataset_Observation_URL_WebContent_Union() {}
func (s *webContentStruct) implementsItemList_ListItem_Text_WebContent_Union()  {}
func (s *webContentStruct) implementsURL_WebContent_Union()                     {}

type WebContentSlice []WebContent

func (s *WebContentSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WebContentSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WebContent)
	}
	return nil
}

var _ WebContent = &webContentStruct{}

// A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so the various properties about that webpage, such as <code>breadcrumb</code> may be used. We recommend explicit declaration if these properties are specified, but if they are found outside of an itemscope, they will be assumed to be about the page.
type WebPage interface {
	// Parents
	CreativeWork
	// Unions
	MediaObject_URL_WebPage_Union
	URL_WebPage_Union
	// Accessors
	Breadcrumb() []BreadcrumbList_Text_Union       // A set of links that can help a user understand and navigate a website hierarchy.
	LastReviewed() []Date                          // Date on which the content on this web page was last reviewed for accuracy and/or completeness.
	MainContentOfPage() []WebPageElement           // Indicates if this web page element is the main subject of the page.
	PrimaryImageOfPage() []ImageObject             // Indicates the main image on the page.
	RelatedLink() []URL                            // A link related to this web page, for example to other related web pages.
	ReviewedBy() []Organization_Person_Union       // People or organizations that have reviewed the content on this web page for accuracy and/or completeness.
	SignificantLink() []URL                        // One of the more significant URLs on the page. Typically, these are the non-navigation links that are clicked on the most.
	SignificantLinks() []URL                       // The most significant URLs on the page. Typically, these are the non-navigation links that are clicked on the most.
	Speakable() []SpeakableSpecification_URL_Union /*
	Indicates sections of a Web page that are particularly 'speakable' in the sense of being highlighted as being especially appropriate for text-to-speech conversion. Other sections of a page may also be usefully spoken in particular circumstances; the 'speakable' property serves to indicate the parts most likely to be generally useful for speech.

	The *speakable* property can be repeated an arbitrary number of times, with three kinds of possible 'content-locator' values:

	1.) *id-value* URL references - uses *id-value* of an element in the page being annotated. The simplest use of *speakable* has (potentially relative) URL values, referencing identified sections of the document concerned.

	2.) CSS Selectors - addresses content in the annotated page, eg. via class attribute. Use the [[cssSelector]] property.

	3.)  XPaths - addresses content via XPaths (assuming an XML view of the content). Use the [[xpath]] property.


	For more sophisticated markup of speakable sections beyond simple ID references, either CSS selectors or XPath expressions to pick out document section(s) as speakable. For this
	we define a supporting type, [[SpeakableSpecification]]  which is defined to be a possible value of the *speakable* property.

	*/
	Specialty() []Specialty // One of the domain specialities to which this web page's content applies.
}
type webPageStruct struct {
	creativeWorkStruct

	Breadcrumb_         BreadcrumbList_Text_UnionSlice        `json:"breadcrumb,omitempty"`
	LastReviewed_       DateSlice                             `json:"lastReviewed,omitempty"`
	MainContentOfPage_  WebPageElementSlice                   `json:"mainContentOfPage,omitempty"`
	PrimaryImageOfPage_ ImageObjectSlice                      `json:"primaryImageOfPage,omitempty"`
	RelatedLink_        URLSlice                              `json:"relatedLink,omitempty"`
	ReviewedBy_         Organization_Person_UnionSlice        `json:"reviewedBy,omitempty"`
	SignificantLink_    URLSlice                              `json:"significantLink,omitempty"`
	SignificantLinks_   URLSlice                              `json:"significantLinks,omitempty"`
	Speakable_          SpeakableSpecification_URL_UnionSlice `json:"speakable,omitempty"`
	Specialty_          SpecialtySlice                        `json:"specialty,omitempty"`
}

func (s *webPageStruct) implementsMediaObject_URL_WebPage_Union() {}
func (s *webPageStruct) implementsURL_WebPage_Union()             {}

func (s *webPageStruct) Breadcrumb() []BreadcrumbList_Text_Union {
	return s.Breadcrumb_
}
func (s *webPageStruct) LastReviewed() []Date {
	return s.LastReviewed_
}
func (s *webPageStruct) MainContentOfPage() []WebPageElement {
	return s.MainContentOfPage_
}
func (s *webPageStruct) PrimaryImageOfPage() []ImageObject {
	return s.PrimaryImageOfPage_
}
func (s *webPageStruct) RelatedLink() []URL {
	return s.RelatedLink_
}
func (s *webPageStruct) ReviewedBy() []Organization_Person_Union {
	return s.ReviewedBy_
}
func (s *webPageStruct) SignificantLink() []URL {
	return s.SignificantLink_
}
func (s *webPageStruct) SignificantLinks() []URL {
	return s.SignificantLinks_
}
func (s *webPageStruct) Speakable() []SpeakableSpecification_URL_Union {
	return s.Speakable_
}
func (s *webPageStruct) Specialty() []Specialty {
	return s.Specialty_
}

type WebPageSlice []WebPage

func (s *WebPageSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WebPageSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WebPage)
	}
	return nil
}

var _ WebPage = &webPageStruct{}

// A web page element, like a table or an image.
type WebPageElement interface {
	// Parents
	CreativeWork
	// Accessors
	CssSelector() []CssSelectorType // A CSS selector, e.g. of a [[SpeakableSpecification]] or [[WebPageElement]]. In the latter case, multiple matches within a page can constitute a single conceptual "Web page element".
	Xpath() []XPathType             // An XPath, e.g. of a [[SpeakableSpecification]] or [[WebPageElement]]. In the latter case, multiple matches within a page can constitute a single conceptual "Web page element".
}
type webPageElementStruct struct {
	creativeWorkStruct

	CssSelector_ CssSelectorTypeSlice `json:"cssSelector,omitempty"`
	Xpath_       XPathTypeSlice       `json:"xpath,omitempty"`
}

func (s *webPageElementStruct) CssSelector() []CssSelectorType {
	return s.CssSelector_
}
func (s *webPageElementStruct) Xpath() []XPathType {
	return s.Xpath_
}

type WebPageElementSlice []WebPageElement

func (s *WebPageElementSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WebPageElementSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WebPageElement)
	}
	return nil
}

var _ WebPageElement = &webPageElementStruct{}

// A WebSite is a set of related web pages and other items typically served from a single web domain and accessible via URLs.
type WebSite interface {
	// Parents
	CreativeWork
	// Unions
	SoftwareApplication_WebSite_Union
	// Accessors
	Issn() []Text // The International Standard Serial Number (ISSN) that identifies this serial publication. You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L) for, this serial publication.
}
type webSiteStruct struct {
	creativeWorkStruct

	Issn_ TextSlice `json:"issn,omitempty"`
}

func (s *webSiteStruct) implementsSoftwareApplication_WebSite_Union() {}

func (s *webSiteStruct) Issn() []Text {
	return s.Issn_
}

type WebSiteSlice []WebSite

func (s *WebSiteSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WebSiteSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WebSite)
	}
	return nil
}

var _ WebSite = &webSiteStruct{}

// A wholesale store.
type WholesaleStore interface {
	// Parents
	Store
}
type wholesaleStoreStruct struct {
	storeStruct
}
type WholesaleStoreSlice []WholesaleStore

func (s *WholesaleStoreSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WholesaleStoreSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WholesaleStore)
	}
	return nil
}

var _ WholesaleStore = &wholesaleStoreStruct{}

// The act of achieving victory in a competitive activity.
type WinAction interface {
	// Parents
	AchieveAction
	// Accessors
	Loser() []Person // A sub property of participant. The loser of the action.
}
type winActionStruct struct {
	achieveActionStruct

	Loser_ PersonSlice `json:"loser,omitempty"`
}

func (s *winActionStruct) Loser() []Person {
	return s.Loser_
}

type WinActionSlice []WinAction

func (s *WinActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WinActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WinAction)
	}
	return nil
}

var _ WinAction = &winActionStruct{}

// A winery.
type Winery interface {
	// Parents
	FoodEstablishment
}
type wineryStruct struct {
	foodEstablishmentStruct
}
type WinerySlice []Winery

func (s *WinerySlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WinerySlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Winery)
	}
	return nil
}

var _ Winery = &wineryStruct{}

// A program with both an educational and employment component. Typically based at a workplace and structured around work-based learning, with the aim of instilling competencies related to an occupation. WorkBasedProgram is used to distinguish programs such as apprenticeships from school, college or other classroom based educational programs.
type WorkBasedProgram interface {
	// Parents
	EducationalOccupationalProgram
	// Accessors
	OccupationalCategory() []CategoryCode_Text_Union /*
	A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html), [ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or similar, with the property repeated for each applicable value. Ideally the taxonomy should be identified, and both the textual label and formal code for the category should be provided.\n
	Note: for historical reasons, any textual label and formal code provided as a literal may be assumed to be from O*NET-SOC.
	*/
	TrainingSalary() []MonetaryAmountDistribution // The estimated salary earned while in the program.
}
type workBasedProgramStruct struct {
	educationalOccupationalProgramStruct

	OccupationalCategory_ CategoryCode_Text_UnionSlice    `json:"occupationalCategory,omitempty"`
	TrainingSalary_       MonetaryAmountDistributionSlice `json:"trainingSalary,omitempty"`
}

func (s *workBasedProgramStruct) OccupationalCategory() []CategoryCode_Text_Union {
	return s.OccupationalCategory_
}
func (s *workBasedProgramStruct) TrainingSalary() []MonetaryAmountDistribution {
	return s.TrainingSalary_
}

type WorkBasedProgramSlice []WorkBasedProgram

func (s *WorkBasedProgramSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WorkBasedProgramSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WorkBasedProgram)
	}
	return nil
}

var _ WorkBasedProgram = &workBasedProgramStruct{}

// A Workers Union (also known as a Labor Union, Labour Union, or Trade Union) is an organization that promotes the interests of its worker members by collectively bargaining with management, organizing, and political lobbying.
type WorkersUnion interface {
	// Parents
	Organization
}
type workersUnionStruct struct {
	organizationStruct
}
type WorkersUnionSlice []WorkersUnion

func (s *WorkersUnionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WorkersUnionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WorkersUnion)
	}
	return nil
}

var _ WorkersUnion = &workersUnionStruct{}

// The act of authoring written creative content.
type WriteAction interface {
	// Parents
	CreateAction
	// Accessors
	InLanguage() []Language_Text_Union // The language of the content or performance or used in an action. Please use one of the language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also [[availableLanguage]].
	Language() []Language              // A sub property of instrument. The language used on this action.
}
type writeActionStruct struct {
	createActionStruct

	InLanguage_ Language_Text_UnionSlice `json:"inLanguage,omitempty"`
	Language_   LanguageSlice            `json:"language,omitempty"`
}

func (s *writeActionStruct) InLanguage() []Language_Text_Union {
	return s.InLanguage_
}
func (s *writeActionStruct) Language() []Language {
	return s.Language_
}

type WriteActionSlice []WriteAction

func (s *WriteActionSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(WriteActionSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(WriteAction)
	}
	return nil
}

var _ WriteAction = &writeActionStruct{}

// Text representing an XPath (typically but not necessarily version 1.0).
type XPathType interface {
	// Parents
	Text
}
type xPathTypeStruct struct {
	textStruct
}
type XPathTypeSlice []XPathType

func (s *XPathTypeSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{ExpectXPathType: true})
	if err != nil {
		return err
	}
	*s = make(XPathTypeSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(XPathType)
	}
	return nil
}

var _ XPathType = &xPathTypeStruct{}

// A zoo.
type Zoo interface {
	// Parents
	CivicStructure
}
type zooStruct struct {
	civicStructureStruct
}
type ZooSlice []Zoo

func (s *ZooSlice) UnmarshalJSON(data []byte) error {
	things, err := DecodeObjects(data, DecodeOptions{})
	if err != nil {
		return err
	}
	*s = make(ZooSlice, len(things))
	for i, t := range things {
		(*s)[i] = t.(Zoo)
	}
	return nil
}

var _ Zoo = &zooStruct{}
